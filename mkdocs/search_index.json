{
    "docs": [
        {
            "location": "/",
            "text": "Internet Of Things (IoT) v\u1edbi ESP8266\n#\n\n\nWebsitte \u0111\u01b0\u1ee3c cung c\u1ea5p d\u01b0\u1edbi d\u1ea1ng t\u00e0i li\u1ec7u \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c, h\u1ed7 tr\u1ee3 nh\u1eefng ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ph\u1ea7n c\u1ee9ng Internet Of Things s\u1eed d\u1ee5ng ESP8266. Kh\u00f4ng ch\u1ec9 l\u00e0 nh\u1eefng ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ph\u1ea7n c\u1ee9ng, ESP8266 m\u00e0 c\u00f2n h\u1ed7 tr\u1ee3 nh\u1eefng ki\u1ebfn th\u1ee9c n\u1ec1n t\u1ea3ng, hi\u1ec3u bi\u1ebft v\u1ec1 network, connectivity \u0111\u1ec3 c\u00f3 th\u1ec3 ph\u00e1t tri\u1ec3n c\u00e1c \u1ee9ng d\u1ee5ng IoT t\u1eeb prototype t\u1edbi production.\n\n\nN\u1ed9i dung cung c\u1ea5p\n#\n\n\n\n\n\n\n\n\nN\u1ed9i dung\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKi\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ESP8266 d\u00f9ng NONOS-SDK\n\n\n\n\n\n\n\n\nKi\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh FreeRTOS v\u1edbi ESP8266 v\u00e0 RTOS-SDK\n\n\n\n\n\n\n\n\nKi\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ESP8266 v\u1edbi Arduino\n\n\n\n\n\n\n\n\nKi\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ESP8266 v\u1edbi Micropython\n\n\n\n\n\n\n-\n\n\nC\u00e1c d\u1ef1 \u00e1n \u1ee9ng d\u1ee5ng th\u1ef1c ti\u1ec5n\n\n\n\n\n\n\n\n\nB\u1ea3n quy\u1ec1n\n#\n\n\nTo\u00e0n b\u1ed9 t\u00e0i li\u1ec7u \u0111\u01b0\u1ee3c ph\u00e2n ph\u1ed1i theo gi\u1ea5y ph\u00e9p CC BY-SA-NC\n\n\nGhi nh\u00e2\u0323n \u0111o\u0301ng go\u0301p Phi Th\u01b0\u01a1ng ma\u0323i Chia se\u0309 v\u01a1\u0301i \u0110i\u00ea\u0300u ki\u00ea\u0323n Nh\u01b0 nhau (cc by-nc-sa):\nGi\u00e2\u0301y phe\u0301p na\u0300y cho phe\u0301p ng\u01b0\u01a1\u0300i kha\u0301c ph\u00f4\u0301i la\u0323i, tu\u0300y chi\u0309nh, va\u0300 x\u00e2y d\u01b0\u0323ng d\u01b0\u0323a tr\u00ean ta\u0301c ph\u00e2\u0309m cu\u0309a Ba\u0323n v\u01a1\u0301i mu\u0323c \u0111i\u0301ch Phi Th\u01b0\u01a1ng ma\u0323i, v\u01a1\u0301i \u0111i\u00ea\u0300u ki\u00ea\u0323n chu\u0301ng n\u00e2ng cao uy ti\u0301n cu\u0309a Ba\u0323n v\u00e0 cho phe\u0301p c\u00e2\u0301p phe\u0301p \u0111\u00f4\u0301i v\u01a1\u0301i ca\u0301c ta\u0301c ph\u00e2\u0309m sa\u0301ng ta\u0323o m\u01a1\u0301i cu\u0309a ho\u0323 theo ca\u0301c \u0111i\u00ea\u0300u khoa\u0309n gi\u00f4\u0301ng h\u00ea\u0323t.\n\n\n\n\n(H\u00ecnh \u1ea3nh s\u1eed d\u1ee5ng \nlink\n)",
            "title": "Trang ch\u1ee7"
        },
        {
            "location": "/#internet-of-things-iot-voi-esp8266",
            "text": "Websitte \u0111\u01b0\u1ee3c cung c\u1ea5p d\u01b0\u1edbi d\u1ea1ng t\u00e0i li\u1ec7u \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c, h\u1ed7 tr\u1ee3 nh\u1eefng ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ph\u1ea7n c\u1ee9ng Internet Of Things s\u1eed d\u1ee5ng ESP8266. Kh\u00f4ng ch\u1ec9 l\u00e0 nh\u1eefng ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ph\u1ea7n c\u1ee9ng, ESP8266 m\u00e0 c\u00f2n h\u1ed7 tr\u1ee3 nh\u1eefng ki\u1ebfn th\u1ee9c n\u1ec1n t\u1ea3ng, hi\u1ec3u bi\u1ebft v\u1ec1 network, connectivity \u0111\u1ec3 c\u00f3 th\u1ec3 ph\u00e1t tri\u1ec3n c\u00e1c \u1ee9ng d\u1ee5ng IoT t\u1eeb prototype t\u1edbi production.",
            "title": "Internet Of Things (IoT) v\u1edbi ESP8266"
        },
        {
            "location": "/#noi-dung-cung-cap",
            "text": "N\u1ed9i dung        Ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ESP8266 d\u00f9ng NONOS-SDK     Ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh FreeRTOS v\u1edbi ESP8266 v\u00e0 RTOS-SDK     Ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ESP8266 v\u1edbi Arduino     Ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ESP8266 v\u1edbi Micropython    -  C\u00e1c d\u1ef1 \u00e1n \u1ee9ng d\u1ee5ng th\u1ef1c ti\u1ec5n",
            "title": "N\u1ed9i dung cung c\u1ea5p"
        },
        {
            "location": "/#ban-quyen",
            "text": "To\u00e0n b\u1ed9 t\u00e0i li\u1ec7u \u0111\u01b0\u1ee3c ph\u00e2n ph\u1ed1i theo gi\u1ea5y ph\u00e9p CC BY-SA-NC  Ghi nh\u00e2\u0323n \u0111o\u0301ng go\u0301p Phi Th\u01b0\u01a1ng ma\u0323i Chia se\u0309 v\u01a1\u0301i \u0110i\u00ea\u0300u ki\u00ea\u0323n Nh\u01b0 nhau (cc by-nc-sa):\nGi\u00e2\u0301y phe\u0301p na\u0300y cho phe\u0301p ng\u01b0\u01a1\u0300i kha\u0301c ph\u00f4\u0301i la\u0323i, tu\u0300y chi\u0309nh, va\u0300 x\u00e2y d\u01b0\u0323ng d\u01b0\u0323a tr\u00ean ta\u0301c ph\u00e2\u0309m cu\u0309a Ba\u0323n v\u01a1\u0301i mu\u0323c \u0111i\u0301ch Phi Th\u01b0\u01a1ng ma\u0323i, v\u01a1\u0301i \u0111i\u00ea\u0300u ki\u00ea\u0323n chu\u0301ng n\u00e2ng cao uy ti\u0301n cu\u0309a Ba\u0323n v\u00e0 cho phe\u0301p c\u00e2\u0301p phe\u0301p \u0111\u00f4\u0301i v\u01a1\u0301i ca\u0301c ta\u0301c ph\u00e2\u0309m sa\u0301ng ta\u0323o m\u01a1\u0301i cu\u0309a ho\u0323 theo ca\u0301c \u0111i\u00ea\u0300u khoa\u0309n gi\u00f4\u0301ng h\u00ea\u0323t.   (H\u00ecnh \u1ea3nh s\u1eed d\u1ee5ng  link )",
            "title": "B\u1ea3n quy\u1ec1n"
        },
        {
            "location": "/introduction/introduction/",
            "text": "Ki\u1ebfn th\u1ee9c c\u01a1 b\u1ea3n\n#\n\n\nPh\u1ea7n n\u00e0y s\u1ebd t\u00ecm hi\u1ec3u v\u00e8 c\u00e1c kh\u00e1i ni\u1ec7m li\u00ean quan \u0111\u1ebfn \nIoT\n, l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 b\u1eaft \u0111\u1ea7u l\u1eadp tr\u00ecnh \u1ee9ng d\u1ee5ng \nIoT\n v\u1edbi \nESP8266\n.\n\n\nCh\u00fang ta s\u1ebd b\u1eaft \u0111\u1ea7u b\u1eb1ng vi\u1ec7c t\u00ecm hi\u1ec3u t\u1ed5ng quan v\u1ec1 h\u1ec7 th\u1ed1ng \nIoT\n, t\u1ed5ng quan v\u1ec1 d\u00f2ng chip ESP8266, r\u1ed3i \u0111\u1ebfn vi\u1ec7c c\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 ph\u00e1t tri\u1ec3n tr\u00ean m\u00e1y t\u00ednh c\u1ee7a b\u1ea1n. Ti\u1ebfp \u0111\u1ebfn l\u00e0 vi\u1ec7c bi\u00ean d\u1ecbch c\u00e1c d\u1ef1 \u00e1n m\u1eabu, l\u1ef1a ch\u1ecdn tr\u00ecnh th\u01b0 vi\u1ec7n, tr\u00ecnh so\u1ea1n th\u1ea3o s\u1ebd l\u00e0m vi\u1ec7c. K\u1ebft th\u00fac ch\u01b0\u01a1ng n\u00e0y ch\u00fang ta n\u00ean c\u00f3 \u0111\u01b0\u1ee3c c\u00e1i nh\u00ecn t\u1ed5ng qu\u00e1t v\u1ec1 h\u1ec7 th\u1ed1ng IoT, l\u00e0m th\u1ebf n\u00e0o v\u00e0 s\u1eed d\u1ee5ng c\u00f4ng c\u1ee5 g\u00ec \u0111\u1ec3 l\u1eadp tr\u00ecnh \u1ee9ng d\u1ee5ng v\u1edbi ESP8266. Ngo\u00e0i ra  c\u00f2n b\u1ed5 sung m\u1ed9t s\u1ed1 ki\u1ebfn th\u1ee9c c\u1ef1c k\u1ef3 c\u01a1 b\u1ea3n v\u1ec1 l\u1eadp tr\u00ecnh \nC\n.\n\n\nV\u1edbi nh\u1eefng ai \u0111\u00e3 t\u1eebng hi\u1ec3u r\u00f5 ESP8266, \u0111\u00e3n t\u1eebng l\u00e0m v\u1ec1 h\u1ec7 th\u1ed1ng IoT, \u0111\u00e3 chuy\u00ean nghi\u1ec7p trong l\u1eadp tr\u00ecnh \nC\n ho\u00e0n to\u00e0n c\u00f3 th\u1ec3 b\u1ecf qua.",
            "title": "T\u1ed5ng quan"
        },
        {
            "location": "/introduction/introduction/#kien-thuc-co-ban",
            "text": "Ph\u1ea7n n\u00e0y s\u1ebd t\u00ecm hi\u1ec3u v\u00e8 c\u00e1c kh\u00e1i ni\u1ec7m li\u00ean quan \u0111\u1ebfn  IoT , l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 b\u1eaft \u0111\u1ea7u l\u1eadp tr\u00ecnh \u1ee9ng d\u1ee5ng  IoT  v\u1edbi  ESP8266 .  Ch\u00fang ta s\u1ebd b\u1eaft \u0111\u1ea7u b\u1eb1ng vi\u1ec7c t\u00ecm hi\u1ec3u t\u1ed5ng quan v\u1ec1 h\u1ec7 th\u1ed1ng  IoT , t\u1ed5ng quan v\u1ec1 d\u00f2ng chip ESP8266, r\u1ed3i \u0111\u1ebfn vi\u1ec7c c\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 ph\u00e1t tri\u1ec3n tr\u00ean m\u00e1y t\u00ednh c\u1ee7a b\u1ea1n. Ti\u1ebfp \u0111\u1ebfn l\u00e0 vi\u1ec7c bi\u00ean d\u1ecbch c\u00e1c d\u1ef1 \u00e1n m\u1eabu, l\u1ef1a ch\u1ecdn tr\u00ecnh th\u01b0 vi\u1ec7n, tr\u00ecnh so\u1ea1n th\u1ea3o s\u1ebd l\u00e0m vi\u1ec7c. K\u1ebft th\u00fac ch\u01b0\u01a1ng n\u00e0y ch\u00fang ta n\u00ean c\u00f3 \u0111\u01b0\u1ee3c c\u00e1i nh\u00ecn t\u1ed5ng qu\u00e1t v\u1ec1 h\u1ec7 th\u1ed1ng IoT, l\u00e0m th\u1ebf n\u00e0o v\u00e0 s\u1eed d\u1ee5ng c\u00f4ng c\u1ee5 g\u00ec \u0111\u1ec3 l\u1eadp tr\u00ecnh \u1ee9ng d\u1ee5ng v\u1edbi ESP8266. Ngo\u00e0i ra  c\u00f2n b\u1ed5 sung m\u1ed9t s\u1ed1 ki\u1ebfn th\u1ee9c c\u1ef1c k\u1ef3 c\u01a1 b\u1ea3n v\u1ec1 l\u1eadp tr\u00ecnh  C .  V\u1edbi nh\u1eefng ai \u0111\u00e3 t\u1eebng hi\u1ec3u r\u00f5 ESP8266, \u0111\u00e3n t\u1eebng l\u00e0m v\u1ec1 h\u1ec7 th\u1ed1ng IoT, \u0111\u00e3 chuy\u00ean nghi\u1ec7p trong l\u1eadp tr\u00ecnh  C  ho\u00e0n to\u00e0n c\u00f3 th\u1ec3 b\u1ecf qua.",
            "title": "Ki\u1ebfn th\u1ee9c c\u01a1 b\u1ea3n"
        },
        {
            "location": "/introduction/about-iot/",
            "text": "Internet Of Things (IoT)\n#\n\n\nInternet of Things (IoT) hay M\u1ea1ng l\u01b0\u1edbi v\u1ea1n v\u1eadt k\u1ebft n\u1ed1i Internet\n#\n\n\nL\u00e0 m\u1ed9t k\u1ecbch b\u1ea3n c\u1ee7a th\u1ebf gi\u1edbi, khi m\u00e0 m\u1ed7i \u0111\u1ed3 v\u1eadt, con ng\u01b0\u1eddi \u0111\u01b0\u1ee3c cung c\u1ea5p m\u1ed9t \u0111\u1ecbnh danh c\u1ee7a ri\u00eang m\u00ecnh, v\u00e0 t\u1ea5t c\u1ea3 c\u00f3 kh\u1ea3 n\u0103ng truy\u1ec1n t\u1ea3i, trao \u0111\u1ed5i th\u00f4ng tin, d\u1eef li\u1ec7u qua m\u1ed9t m\u1ea1ng duy nh\u1ea5t m\u00e0 kh\u00f4ng c\u1ea7n \u0111\u1ebfn s\u1ef1 t\u01b0\u01a1ng t\u00e1c tr\u1ef1c ti\u1ebfp gi\u1eefa ng\u01b0\u1eddi v\u1edbi ng\u01b0\u1eddi, hay ng\u01b0\u1eddi v\u1edbi m\u00e1y t\u00ednh. IoT \u0111\u00e3 ph\u00e1t tri\u1ec3n t\u1eeb s\u1ef1 h\u1ed9i t\u1ee5 c\u1ee7a c\u00f4ng ngh\u1ec7 kh\u00f4ng d\u00e2y, c\u00f4ng ngh\u1ec7 vi c\u01a1 \u0111i\u1ec7n t\u1eed v\u00e0 Internet[1]. N\u00f3i \u0111\u01a1n gi\u1ea3n l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c thi\u1ebft b\u1ecb c\u00f3 kh\u1ea3 n\u0103ng k\u1ebft n\u1ed1i v\u1edbi nhau, v\u1edbi Internet v\u00e0 v\u1edbi th\u1ebf gi\u1edbi b\u00ean ngo\u00e0i \u0111\u1ec3 th\u1ef1c hi\u1ec7n m\u1ed9t c\u00f4ng vi\u1ec7c n\u00e0o \u0111\u00f3.\n\n\nhttp://vi.wikipedia.org/wiki/M\u1ea1ng_l\u01b0\u1edbi_v\u1ea1n_v\u1eadt_k\u1ebft_n\u1ed1i_Internet",
            "title": "Internet Of Things (IoT)"
        },
        {
            "location": "/introduction/about-iot/#internet-of-things-iot",
            "text": "",
            "title": "Internet Of Things (IoT)"
        },
        {
            "location": "/introduction/about-iot/#internet-of-things-iot-hay-mang-luoi-van-vat-ket-noi-internet",
            "text": "L\u00e0 m\u1ed9t k\u1ecbch b\u1ea3n c\u1ee7a th\u1ebf gi\u1edbi, khi m\u00e0 m\u1ed7i \u0111\u1ed3 v\u1eadt, con ng\u01b0\u1eddi \u0111\u01b0\u1ee3c cung c\u1ea5p m\u1ed9t \u0111\u1ecbnh danh c\u1ee7a ri\u00eang m\u00ecnh, v\u00e0 t\u1ea5t c\u1ea3 c\u00f3 kh\u1ea3 n\u0103ng truy\u1ec1n t\u1ea3i, trao \u0111\u1ed5i th\u00f4ng tin, d\u1eef li\u1ec7u qua m\u1ed9t m\u1ea1ng duy nh\u1ea5t m\u00e0 kh\u00f4ng c\u1ea7n \u0111\u1ebfn s\u1ef1 t\u01b0\u01a1ng t\u00e1c tr\u1ef1c ti\u1ebfp gi\u1eefa ng\u01b0\u1eddi v\u1edbi ng\u01b0\u1eddi, hay ng\u01b0\u1eddi v\u1edbi m\u00e1y t\u00ednh. IoT \u0111\u00e3 ph\u00e1t tri\u1ec3n t\u1eeb s\u1ef1 h\u1ed9i t\u1ee5 c\u1ee7a c\u00f4ng ngh\u1ec7 kh\u00f4ng d\u00e2y, c\u00f4ng ngh\u1ec7 vi c\u01a1 \u0111i\u1ec7n t\u1eed v\u00e0 Internet[1]. N\u00f3i \u0111\u01a1n gi\u1ea3n l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c thi\u1ebft b\u1ecb c\u00f3 kh\u1ea3 n\u0103ng k\u1ebft n\u1ed1i v\u1edbi nhau, v\u1edbi Internet v\u00e0 v\u1edbi th\u1ebf gi\u1edbi b\u00ean ngo\u00e0i \u0111\u1ec3 th\u1ef1c hi\u1ec7n m\u1ed9t c\u00f4ng vi\u1ec7c n\u00e0o \u0111\u00f3.  http://vi.wikipedia.org/wiki/M\u1ea1ng_l\u01b0\u1edbi_v\u1ea1n_v\u1eadt_k\u1ebft_n\u1ed1i_Internet",
            "title": "Internet of Things (IoT) hay M\u1ea1ng l\u01b0\u1edbi v\u1ea1n v\u1eadt k\u1ebft n\u1ed1i Internet"
        },
        {
            "location": "/introduction/about-esp8266/",
            "text": "ESP8266\n#\n\n\nESP8266 l\u00e0 d\u00f2ng chip t\u00edch h\u1ee3p Wi-Fi 2.4Ghz c\u00f3 th\u1ec3 l\u1eadp tr\u00ecnh \u0111\u01b0\u1ee3c, r\u1ebb ti\u1ec1n \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t b\u1edfi m\u1ed9t c\u00f4ng ty b\u00e1n d\u1eabn Trung Qu\u1ed1c: Espressif Systems.\n\n\n\u0110\u01b0\u1ee3c ph\u00e1t h\u00e0nh \u0111\u1ea7u ti\u00ean v\u00e0o th\u00e1ng 8 n\u0103m 2014, \u0111\u00f3ng g\u00f3i \u0111\u01b0a ra th\u1ecb tr\u01b0\u1eddng d\u1ea1ng M\u00f4 dun ESP-01, \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t b\u1edfi b\u00ean th\u1ee9 3: AI-Thinker. C\u00f3 kh\u1ea3 n\u0103ng k\u1ebft n\u1ed1i Internet qua m\u1ea1ng Wi-Fi m\u1ed9t c\u00e1ch nhanh ch\u00f3ng v\u00e0 s\u1eed d\u1ee5ng r\u1ea5t \u00edt linh ki\u1ec7n \u0111i k\u00e8m. V\u1edbi gi\u00e1 c\u1ea3 c\u00f3 th\u1ec3 n\u00f3i l\u00e0 r\u1ea5t r\u1ebb so v\u1edbi t\u00ednh n\u0103ng v\u00e0 kh\u1ea3 n\u0103ng ESP8266 c\u00f3 th\u1ec3 l\u00e0m \u0111\u01b0\u1ee3c.\n\n\nESP8266 c\u00f3 m\u1ed9t c\u1ed9ng \u0111\u1ed3ng c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n tr\u00ean th\u1ebf gi\u1edbi r\u1ea5t l\u1edbn, cung c\u1ea5p nhi\u1ec1u Module l\u1eadp tr\u00ecnh m\u00e3 m\u1edf gi\u00fap nhi\u1ec1u ng\u01b0\u1eddi c\u00f3 th\u1ec3 ti\u1ebfp c\u1eadn v\u00e0 x\u00e2y d\u1ef1ng \u1ee9ng d\u1ee5ng r\u1ea5t nhanh.\n\n\nHi\u1ec7n nay t\u1ea5t c\u1ea3 c\u00e1c d\u00f2ng chip ESP8266 tr\u00ean th\u1ecb tr\u01b0\u1eddng \u0111\u1ec1u mang nh\u00e3n ESP8266EX, l\u00e0 phi\u00ean b\u1ea3n n\u00e2ng c\u1ea5p c\u1ee7a ESP8266\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n & S\u01a1 \u0111\u1ed3 kh\u1ed1i\n#\n\n\n.S\u01a1 \u0111\u1ed3 ch\u00e2n & s\u01a1 \u0111\u1ed3 kh\u1ed1i ESP8266EX\n\n\n\nTh\u00f4ng s\u1ed1 ph\u1ea7n c\u1ee9ng\n#\n\n\n\n\n32-bit RISC CPU : Tensilica Xtensa LX106 running at 80 MHz\n\n\nH\u1ed5 tr\u1ee3 Flash ngo\u00e0i t\u1eeb 512KiB \u0111\u1ebfn 4MiB\n\n\n64KBytes RAM th\u1ef1c thi l\u1ec7nh\n\n\n96KBytes RAM d\u1eef li\u1ec7u\n\n\n64KBytes boot ROM\n\n\nChu\u1ea9n wifi EEE 802.11 b/g/n, Wi-Fi 2.4 GHz\n\n T\u00edch h\u1ee3p TR switch, balun, LNA, khu\u1ebfch \u0111\u1ea1i c\u00f4ng su\u1ea5t v\u00e0 matching network\n\n H\u1ed5 tr\u1ee3 WEP, WPA/WPA2, Open network\n\n\nT\u00edch h\u1ee3p giao th\u1ee9c TCP/IP\n\n\nH\u1ed5 tr\u1ee3 nhi\u1ec1u lo\u1ea1i anten\n\n\n16 ch\u00e2n GPIO\n\n\nH\u1ed5 tr\u1ee3 SDIO 2.0, UART, SPI, I\u00b2C, PWM,I\u00b2S v\u1edbi DMA\n\n\n1 ADC 10-bit\n\n\nD\u1ea3i nhi\u1ec7t \u0111\u1ed9 ho\u1ea1t \u0111\u1ed9ng r\u1ed9ng : -40C ~ 125C\n\n\n\n\nSDK h\u1ed7 tr\u1ee3 ch\u00ednh th\u1ee9c t\u1eeb h\u00e3ng\n#\n\n\nT\u1ea1i th\u1eddi \u0111i\u1ec3m xu\u1ea5t b\u1ea3n s\u00e1ch n\u00e0y, Espressif \u0111\u00e3 h\u1ed7 tr\u1ee3 2 n\u1ec1n t\u1ea3ng SDK (Software Development Kit - G\u00f3i ph\u00e1t tri\u1ec3n ph\u1ea7n m\u1ec1m) \u0111\u1ed9c l\u1eadp, l\u00e0: \nNONOS SDK\n v\u00e0 \nRTOS SDK\n. C\u1ea3 2 \u0111\u1ec1u c\u00f3 nh\u1eefng \u01b0u \u0111i\u1ec3m ri\u00eang ph\u00f9 h\u1ee3p v\u1edbi t\u1eebng \u1ee9ng d\u1ee5ng nh\u1ea5t \u0111\u1ecbnh, v\u00e0 s\u1eed d\u1ee5ng chung nhi\u1ec1u c\u00e1c h\u00e0m \u0111i\u1ec1u khi\u1ec3n ph\u1ea7n c\u1ee9ng. Tuy nhi\u00ean \nNONOS SDK\n \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 c\u1eadp nh\u1eadt s\u1edbm nh\u1ea5t, nhi\u1ec1u t\u00ednh n\u0103ng nh\u1ea5t v\u00e0 \u0111\u01a1n gi\u1ea3n, d\u1ec5 s\u1eed d\u1ee5ng h\u01a1n. Ch\u00ednh v\u00ec v\u1eady \nNONOS SDK\n s\u1ebd l\u00e0 SDK \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ch\u00ednh th\u1ee9c \u1edf t\u1ea5t c\u1ea3 c\u00e1c h\u01b0\u1edbng d\u1eabn c\u1ee7a cu\u1ed1n s\u00e1ch n\u00e0y.\n\n\nESP8266 NONOS SDK\n#\n\n\nHi\u1ec7n nay, \nNONOS SDK\n phi\u00ean b\u1ea3n t\u1eeb \n2.0.0\n tr\u1edf l\u00ean \u0111\u00e3 \u1ed5n \u0111\u1ecbnh v\u00e0 cung c\u1ea5p g\u1ea7n nh\u01b0 l\u00e0 \u0111\u1ea7y \u0111\u1ee7 t\u1ea5t c\u1ea3 c\u00e1c t\u00ednh n\u0103ng m\u00e0 ESP8266 c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n:\n\n\n\n\nC\u00e1c API cho Timer, System, Wifi, \u0111\u1ecdc ghi SPI Flash, Sleep v\u00e0 c\u00e1c Module ph\u1ea7n c\u1ee9ng: GPIO, SPI, I\u00b2C, PWM, I\u00b2S v\u1edbi DMA.\n\n\nSmartconfig\n: H\u1ed7 tr\u1ee3 c\u1ea5u h\u00ecnh th\u00f4ng s\u1ed1 Wi-Fi cho ESP8266 nhanh ch\u00f3ng.\n\n\nSniffer\n API: B\u1eaft c\u00e1c g\u00f3i tin trong m\u1ea1ng kh\u00f4ng d\u00e2y 2.4Ghz.\n\n\nSNTP\n API: \u0110\u1ed3ng b\u1ed9 th\u1eddi gian v\u1edbi M\u00e1y ch\u1ee7 th\u1eddi gian.\n\n\nWPA2 Enterprise\n API: Cung c\u1ea5p vi\u1ec7c qu\u1ea3n l\u00fd k\u1ebft n\u1ed1i Wi-Fi b\u1eb1ng t\u00e0i kho\u1ea3n s\u1eed d\u1ee5ng c\u00e1c m\u00e1y ch\u1ee7 RADIUS.\n\n\nTCP/UDP\n API: Cho k\u1ebft n\u1ed1i internet, v\u00e0 h\u1ed7 tr\u1ee3 c\u00e1c Module d\u1ef1a tr\u00ean, nh\u01b0: HTTP, MQTT, CoAP.\n\n\nmDNS\n API: Gi\u00fap t\u00ecm ra \nIP\n c\u1ee7a thi\u1ebft b\u1ecb trong m\u1ea1ng n\u1ed9i b\u1ed9 b\u1eb1ng t\u00ean (hostname).\n\n\nMESH\n API: Li\u00ean k\u1ebft c\u00e1c module ESP8266 v\u1edbi c\u1ea5u tr\u00fac m\u1ea1ng MESH\n\n\nFOTA\n API: Firmware Over The Air - c\u1eadp nh\u1eadt firmware t\u1eeb xa cho thi\u1ebft b\u1ecb .\n\n\nESP-Now\n API: S\u1eed d\u1ee5ng c\u00e1c g\u00f3i tin Wireless 2.4GHz trao \u0111\u1ed5i tr\u1ef1c ti\u1ebfp v\u1edbi ESP8266 kh\u00e1c m\u00e0 kh\u00f4ng c\u1ea7n k\u1ebft n\u1ed1i t\u1edbi Access Point.\n\n\nSimple Pair\n API: Thi\u1ebft l\u1eadp k\u1ebft n\u1ed1i b\u1ea3o m\u1eadt gi\u1eefa 2 thi\u1ebft b\u1ecb t\u1ef1 \u0111\u1ed9ng.\n\n\n\n\nESP8266 RTOS SDK\n#\n\n\nRTOS SDK\n s\u1eed d\u1ee5ng \nFreeRTOS\n l\u00e0m n\u1ec1n t\u1ea3ng, \u0111\u1ed3ng th\u1eddi h\u1ea7u h\u1ebft c\u00e1c API c\u1ee7a \nNON OS\n SDK \u0111\u1ec1u c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi \nRTOS SDK\n.\n\n\nESP8285\n#\n\n\nESP8285 l\u00e0 m\u1ed9t phi\u00ean b\u1ea3n kh\u00e1c sau n\u00e0y c\u1ee7a ESP8266EX, gi\u1ed1ng ho\u00e0n to\u00e0n ESP8266EX ngo\u1ea1i tr\u1eeb vi\u1ec7c thay v\u00ec d\u00f9ng SPI FLASH b\u00ean ngo\u00e0i th\u00ec ESP8285 t\u00edch h\u1ee3p 1MiB Flash b\u00ean trong gi\u00fap gi\u1ea3m di\u1ec7n t\u00edch ph\u1ea7n c\u1ee9ng v\u00e0 \u0111\u01a1n gi\u1ea3n h\u00f3a qu\u00e1 tr\u00ecnh s\u1ea3n xu\u1ea5t.\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\nTh\u00f4ng s\u1ed1 ph\u1ea7n c\u1ee9ng\n#",
            "title": "ESP8266 & ESP8285"
        },
        {
            "location": "/introduction/about-esp8266/#esp8266",
            "text": "ESP8266 l\u00e0 d\u00f2ng chip t\u00edch h\u1ee3p Wi-Fi 2.4Ghz c\u00f3 th\u1ec3 l\u1eadp tr\u00ecnh \u0111\u01b0\u1ee3c, r\u1ebb ti\u1ec1n \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t b\u1edfi m\u1ed9t c\u00f4ng ty b\u00e1n d\u1eabn Trung Qu\u1ed1c: Espressif Systems.  \u0110\u01b0\u1ee3c ph\u00e1t h\u00e0nh \u0111\u1ea7u ti\u00ean v\u00e0o th\u00e1ng 8 n\u0103m 2014, \u0111\u00f3ng g\u00f3i \u0111\u01b0a ra th\u1ecb tr\u01b0\u1eddng d\u1ea1ng M\u00f4 dun ESP-01, \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t b\u1edfi b\u00ean th\u1ee9 3: AI-Thinker. C\u00f3 kh\u1ea3 n\u0103ng k\u1ebft n\u1ed1i Internet qua m\u1ea1ng Wi-Fi m\u1ed9t c\u00e1ch nhanh ch\u00f3ng v\u00e0 s\u1eed d\u1ee5ng r\u1ea5t \u00edt linh ki\u1ec7n \u0111i k\u00e8m. V\u1edbi gi\u00e1 c\u1ea3 c\u00f3 th\u1ec3 n\u00f3i l\u00e0 r\u1ea5t r\u1ebb so v\u1edbi t\u00ednh n\u0103ng v\u00e0 kh\u1ea3 n\u0103ng ESP8266 c\u00f3 th\u1ec3 l\u00e0m \u0111\u01b0\u1ee3c.  ESP8266 c\u00f3 m\u1ed9t c\u1ed9ng \u0111\u1ed3ng c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n tr\u00ean th\u1ebf gi\u1edbi r\u1ea5t l\u1edbn, cung c\u1ea5p nhi\u1ec1u Module l\u1eadp tr\u00ecnh m\u00e3 m\u1edf gi\u00fap nhi\u1ec1u ng\u01b0\u1eddi c\u00f3 th\u1ec3 ti\u1ebfp c\u1eadn v\u00e0 x\u00e2y d\u1ef1ng \u1ee9ng d\u1ee5ng r\u1ea5t nhanh.  Hi\u1ec7n nay t\u1ea5t c\u1ea3 c\u00e1c d\u00f2ng chip ESP8266 tr\u00ean th\u1ecb tr\u01b0\u1eddng \u0111\u1ec1u mang nh\u00e3n ESP8266EX, l\u00e0 phi\u00ean b\u1ea3n n\u00e2ng c\u1ea5p c\u1ee7a ESP8266",
            "title": "ESP8266"
        },
        {
            "location": "/introduction/about-esp8266/#so-o-chan-so-o-khoi",
            "text": ".S\u01a1 \u0111\u1ed3 ch\u00e2n & s\u01a1 \u0111\u1ed3 kh\u1ed1i ESP8266EX",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n &amp; S\u01a1 \u0111\u1ed3 kh\u1ed1i"
        },
        {
            "location": "/introduction/about-esp8266/#thong-so-phan-cung",
            "text": "32-bit RISC CPU : Tensilica Xtensa LX106 running at 80 MHz  H\u1ed5 tr\u1ee3 Flash ngo\u00e0i t\u1eeb 512KiB \u0111\u1ebfn 4MiB  64KBytes RAM th\u1ef1c thi l\u1ec7nh  96KBytes RAM d\u1eef li\u1ec7u  64KBytes boot ROM  Chu\u1ea9n wifi EEE 802.11 b/g/n, Wi-Fi 2.4 GHz  T\u00edch h\u1ee3p TR switch, balun, LNA, khu\u1ebfch \u0111\u1ea1i c\u00f4ng su\u1ea5t v\u00e0 matching network  H\u1ed5 tr\u1ee3 WEP, WPA/WPA2, Open network  T\u00edch h\u1ee3p giao th\u1ee9c TCP/IP  H\u1ed5 tr\u1ee3 nhi\u1ec1u lo\u1ea1i anten  16 ch\u00e2n GPIO  H\u1ed5 tr\u1ee3 SDIO 2.0, UART, SPI, I\u00b2C, PWM,I\u00b2S v\u1edbi DMA  1 ADC 10-bit  D\u1ea3i nhi\u1ec7t \u0111\u1ed9 ho\u1ea1t \u0111\u1ed9ng r\u1ed9ng : -40C ~ 125C",
            "title": "Th\u00f4ng s\u1ed1 ph\u1ea7n c\u1ee9ng"
        },
        {
            "location": "/introduction/about-esp8266/#sdk-ho-tro-chinh-thuc-tu-hang",
            "text": "T\u1ea1i th\u1eddi \u0111i\u1ec3m xu\u1ea5t b\u1ea3n s\u00e1ch n\u00e0y, Espressif \u0111\u00e3 h\u1ed7 tr\u1ee3 2 n\u1ec1n t\u1ea3ng SDK (Software Development Kit - G\u00f3i ph\u00e1t tri\u1ec3n ph\u1ea7n m\u1ec1m) \u0111\u1ed9c l\u1eadp, l\u00e0:  NONOS SDK  v\u00e0  RTOS SDK . C\u1ea3 2 \u0111\u1ec1u c\u00f3 nh\u1eefng \u01b0u \u0111i\u1ec3m ri\u00eang ph\u00f9 h\u1ee3p v\u1edbi t\u1eebng \u1ee9ng d\u1ee5ng nh\u1ea5t \u0111\u1ecbnh, v\u00e0 s\u1eed d\u1ee5ng chung nhi\u1ec1u c\u00e1c h\u00e0m \u0111i\u1ec1u khi\u1ec3n ph\u1ea7n c\u1ee9ng. Tuy nhi\u00ean  NONOS SDK  \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 c\u1eadp nh\u1eadt s\u1edbm nh\u1ea5t, nhi\u1ec1u t\u00ednh n\u0103ng nh\u1ea5t v\u00e0 \u0111\u01a1n gi\u1ea3n, d\u1ec5 s\u1eed d\u1ee5ng h\u01a1n. Ch\u00ednh v\u00ec v\u1eady  NONOS SDK  s\u1ebd l\u00e0 SDK \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ch\u00ednh th\u1ee9c \u1edf t\u1ea5t c\u1ea3 c\u00e1c h\u01b0\u1edbng d\u1eabn c\u1ee7a cu\u1ed1n s\u00e1ch n\u00e0y.",
            "title": "SDK h\u1ed7 tr\u1ee3 ch\u00ednh th\u1ee9c t\u1eeb h\u00e3ng"
        },
        {
            "location": "/introduction/about-esp8266/#esp8266-nonos-sdk",
            "text": "Hi\u1ec7n nay,  NONOS SDK  phi\u00ean b\u1ea3n t\u1eeb  2.0.0  tr\u1edf l\u00ean \u0111\u00e3 \u1ed5n \u0111\u1ecbnh v\u00e0 cung c\u1ea5p g\u1ea7n nh\u01b0 l\u00e0 \u0111\u1ea7y \u0111\u1ee7 t\u1ea5t c\u1ea3 c\u00e1c t\u00ednh n\u0103ng m\u00e0 ESP8266 c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n:   C\u00e1c API cho Timer, System, Wifi, \u0111\u1ecdc ghi SPI Flash, Sleep v\u00e0 c\u00e1c Module ph\u1ea7n c\u1ee9ng: GPIO, SPI, I\u00b2C, PWM, I\u00b2S v\u1edbi DMA.  Smartconfig : H\u1ed7 tr\u1ee3 c\u1ea5u h\u00ecnh th\u00f4ng s\u1ed1 Wi-Fi cho ESP8266 nhanh ch\u00f3ng.  Sniffer  API: B\u1eaft c\u00e1c g\u00f3i tin trong m\u1ea1ng kh\u00f4ng d\u00e2y 2.4Ghz.  SNTP  API: \u0110\u1ed3ng b\u1ed9 th\u1eddi gian v\u1edbi M\u00e1y ch\u1ee7 th\u1eddi gian.  WPA2 Enterprise  API: Cung c\u1ea5p vi\u1ec7c qu\u1ea3n l\u00fd k\u1ebft n\u1ed1i Wi-Fi b\u1eb1ng t\u00e0i kho\u1ea3n s\u1eed d\u1ee5ng c\u00e1c m\u00e1y ch\u1ee7 RADIUS.  TCP/UDP  API: Cho k\u1ebft n\u1ed1i internet, v\u00e0 h\u1ed7 tr\u1ee3 c\u00e1c Module d\u1ef1a tr\u00ean, nh\u01b0: HTTP, MQTT, CoAP.  mDNS  API: Gi\u00fap t\u00ecm ra  IP  c\u1ee7a thi\u1ebft b\u1ecb trong m\u1ea1ng n\u1ed9i b\u1ed9 b\u1eb1ng t\u00ean (hostname).  MESH  API: Li\u00ean k\u1ebft c\u00e1c module ESP8266 v\u1edbi c\u1ea5u tr\u00fac m\u1ea1ng MESH  FOTA  API: Firmware Over The Air - c\u1eadp nh\u1eadt firmware t\u1eeb xa cho thi\u1ebft b\u1ecb .  ESP-Now  API: S\u1eed d\u1ee5ng c\u00e1c g\u00f3i tin Wireless 2.4GHz trao \u0111\u1ed5i tr\u1ef1c ti\u1ebfp v\u1edbi ESP8266 kh\u00e1c m\u00e0 kh\u00f4ng c\u1ea7n k\u1ebft n\u1ed1i t\u1edbi Access Point.  Simple Pair  API: Thi\u1ebft l\u1eadp k\u1ebft n\u1ed1i b\u1ea3o m\u1eadt gi\u1eefa 2 thi\u1ebft b\u1ecb t\u1ef1 \u0111\u1ed9ng.",
            "title": "ESP8266 NONOS SDK"
        },
        {
            "location": "/introduction/about-esp8266/#esp8266-rtos-sdk",
            "text": "RTOS SDK  s\u1eed d\u1ee5ng  FreeRTOS  l\u00e0m n\u1ec1n t\u1ea3ng, \u0111\u1ed3ng th\u1eddi h\u1ea7u h\u1ebft c\u00e1c API c\u1ee7a  NON OS  SDK \u0111\u1ec1u c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi  RTOS SDK .",
            "title": "ESP8266 RTOS SDK"
        },
        {
            "location": "/introduction/about-esp8266/#esp8285",
            "text": "ESP8285 l\u00e0 m\u1ed9t phi\u00ean b\u1ea3n kh\u00e1c sau n\u00e0y c\u1ee7a ESP8266EX, gi\u1ed1ng ho\u00e0n to\u00e0n ESP8266EX ngo\u1ea1i tr\u1eeb vi\u1ec7c thay v\u00ec d\u00f9ng SPI FLASH b\u00ean ngo\u00e0i th\u00ec ESP8285 t\u00edch h\u1ee3p 1MiB Flash b\u00ean trong gi\u00fap gi\u1ea3m di\u1ec7n t\u00edch ph\u1ea7n c\u1ee9ng v\u00e0 \u0111\u01a1n gi\u1ea3n h\u00f3a qu\u00e1 tr\u00ecnh s\u1ea3n xu\u1ea5t.",
            "title": "ESP8285"
        },
        {
            "location": "/introduction/about-esp8266/#so-o-chan",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/about-esp8266/#thong-so-phan-cung_1",
            "text": "",
            "title": "Th\u00f4ng s\u1ed1 ph\u1ea7n c\u1ee9ng"
        },
        {
            "location": "/introduction/esp-module/",
            "text": "C\u00e1c lo\u1ea1i Module ESP8266\n#\n\n\nESP8266 c\u1ea7n \u00edt nh\u1ea5t th\u00eam 7 linh ki\u1ec7n n\u1eefa m\u1edbi c\u00f3 th\u1ec3 ho\u1ea1t \u0111\u1ed9ng, trong \u0111\u00f3 ph\u1ea7n kh\u00f3 nh\u1ea5t l\u00e0 Antena. \u0110\u00f2i h\u1ecfi ph\u1ea3i \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t, ki\u1ec3m tra v\u1edbi c\u00e1c thi\u1ebft b\u1ecb hi\u1ec7n \u0111\u1ea1i. Do \u0111\u00f3, tr\u00ean th\u1ecb tr\u01b0\u1eddng xu\u1ea5t hi\u1ec7n nhi\u1ec1u Module v\u00e0 Board m\u1ea1ch ph\u00e1t tri\u1ec3n \u0111\u1ea3m \u0111\u01b0\u01a1ng h\u1ebft \u0111\u1ec3 ng\u01b0\u1eddi d\u00f9ng \u0111\u01a1n gi\u1ea3n nh\u1ea5t trong vi\u1ec7c ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng. M\u1ed9t s\u1ed1 Module v\u00e0 Board ph\u00e1t tri\u1ec3n ph\u1ed5 bi\u1ebfn:\n\n\nB\u1ea3ng so s\u00e1nh c\u00e1c th\u00f4ng s\u1ed1\n#\n\n\n\n\n\n\n\n\nPhi\u00ean b\u1ea3n\n\n\nS\u1ed1 ch\u00e2n\n\n\npitch\n\n\nform factor\n\n\nLEDs\n\n\nAntenna\n\n\nAnt.Socket\n\n\nShielded\n\n\nd\u00e0i mm\n\n\n\n\n\n\n\n\n\n\nESP-01\n\n\n8\n\n\n.1\u201c\n\n\n2\u00d74 DIL\n\n\nYes\n\n\nEtched-on PCB\n\n\nNo\n\n\nNo\n\n\n14.3 x 24.8\n\n\n\n\n\n\nESP-02\n\n\n8\n\n\n.1\u201d\n\n\n2\u00d74 notch\n\n\nNo?\n\n\nNone\n\n\nYes\n\n\nNo\n\n\n14.2 x 14.2\n\n\n\n\n\n\nESP-03\n\n\n14\n\n\n2mm\n\n\n2\u00d77 notch\n\n\nNo\n\n\nCeramic\n\n\nNo\n\n\nNo\n\n\n17.3 x 12.1\n\n\n\n\n\n\nESP-04\n\n\n14\n\n\n2mm\n\n\n2\u00d74 notch\n\n\nNo?\n\n\nNone\n\n\nNo\n\n\nNo\n\n\n14.7 x 12.1\n\n\n\n\n\n\nESP-05\n\n\n5\n\n\n.1\u201c\n\n\n1\u00d75 SIL\n\n\nNo\n\n\nNone\n\n\nYes\n\n\nNo\n\n\n14.2 x 14.2\n\n\n\n\n\n\nESP-06\n\n\n12+GND\n\n\nmisc\n\n\n4\u00d73 dice\n\n\nNo\n\n\nNone\n\n\nNo\n\n\nYes\n\n\n16.3 x 13.1\n\n\n\n\n\n\nESP-07\n\n\n16\n\n\n2mm\n\n\n2\u00d78 pinhole\n\n\nYes\n\n\nCeramic\n\n\nYes\n\n\nYes\n\n\n20.0 x 16.0\n\n\n\n\n\n\nESP-08\n\n\n14\n\n\n2mm\n\n\n2\u00d77 notch\n\n\nNo\n\n\nNone\n\n\nNo\n\n\nYes\n\n\n17.0 x 16.0\n\n\n\n\n\n\nESP-08 New\n\n\n16\n\n\n2mm\n\n\n2\u00d78 notch\n\n\nNo\n\n\nNone\n\n\nNo\n\n\nYes\n\n\n18.0 x 16.0\n\n\n\n\n\n\nESP-09\n\n\n12+GND\n\n\nmisc\n\n\n4\u00d73 dice\n\n\nNo\n\n\nNone\n\n\nNo\n\n\nNo\n\n\n10.0 x 10.0\n\n\n\n\n\n\nESP-10\n\n\n5\n\n\n2mmm?\n\n\n1\u00d75 notch\n\n\nNo\n\n\nNone\n\n\nNo\n\n\nNo\n\n\n14.2 x 10.0\n\n\n\n\n\n\nESP-11\n\n\n8\n\n\n1.27mm\n\n\n1\u00d78 pinhole\n\n\nNo?\n\n\nCeramic\n\n\nNo\n\n\nNo\n\n\n17.3 x 12.1\n\n\n\n\n\n\nESP-12\n\n\n16\n\n\n2mm\n\n\n2\u00d78 notch\n\n\nYes\n\n\nEtched-on PCB\n\n\nNo\n\n\nYes\n\n\n24.0 x 16.0\n\n\n\n\n\n\nESP-12-E\n\n\n22\n\n\n2mm\n\n\n2\u00d78 notch\n\n\nYes\n\n\nEtched-on PCB\n\n\nNo\n\n\nYes\n\n\n24.0 x 16.0\n\n\n\n\n\n\nESP-13\n\n\n18\n\n\n1.5mm\n\n\n2\u00d79\n\n\n?\n\n\nEtched-on PCB\n\n\nNo\n\n\nYes\n\n\n? x ?\n\n\n\n\n\n\nESP-14\n\n\n22\n\n\n2mm\n\n\n2\u00d78 + 6\n\n\n1\n\n\nEtched-on PCB\n\n\nNo\n\n\nYes\n\n\n24.3 x 16.2\n\n\n\n\n\n\nWROOM-02\n\n\n18\n\n\n1.5mm\n\n\n2\u00d79\n\n\nNo\n\n\nEtched on PCB\n\n\nNo\n\n\nYes\n\n\n20.0 x 18.0\n\n\n\n\n\n\nWT8266-S1\n\n\n18\n\n\n1.5mm\n\n\n3\u00d76\n\n\n1\n\n\nEtched on PCB\n\n\nNo\n\n\nYes\n\n\n15.0 x 18.6\n\n\n\n\n\n\n\n\nM\u1ed9t s\u1ed1 module ESP8266 tr\u00ean th\u1ecb tr\u01b0\u1eddng\n#\n\n\nESP-WROOM-02\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nESP-WROOM-02 l\u00e0 m\u1ed9t module MCU Wifi 32-bit ti\u1ebft ki\u1ec7m n\u0103ng l\u01b0\u1ee3ng d\u1ef1a tr\u00ean chip ESP8266.\n\n\nH\u1ed5 tr\u1ee3 c\u00e1c chu\u1ea9n m\u1ea1ng kh\u00f4ng d\u00e2y 802.11 b/g/n\n\n\nT\u00edch h\u1ee3p s\u1eb3n giao th\u1ee9c TCP/IP, 10-bit ADC, TR switch, balun, LNA, v\u00e0 c\u00e1c chu\u1ea9n giao ti\u1ebfp HSPI/UART/PWM/I2C/I2S.\n\n\nH\u1ed5 tr\u1ee3 Wi-Fi Alliance, SRRC, FCC, CE, TELEC, IC & KCC Certified, RoHS, Halogen Free, REACH & CFSI Compliant, HTOL, ESD-HM, MSL, \u03bcHAST, HTSL\n\n\nH\u1ed5 tr\u1ee3 Cloud Server Development\n\n\nCustom firmware development qua SDK\n\n\nC\u1ea5u h\u00ecnh ng\u01b0\u1eddi d\u00f9ng qua AT Instruction Set, Cloud Server v\u00e0 \u1ee9ng d\u1ee5ng Afdroid/iOS\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-01\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nM\u1ea1ch nh\u1ecf, g\u1ecdn (24.75mm x 14.5mm)\n\n\n\u0110i\u1ec7n \u00e1p l\u00e0m vi\u1ec7c 3.3v\n\n\nT\u00edch h\u1ee3p s\u1eb3n anten PCB trace tr\u00ean module \n\n\nC\u00f3 hai led b\u00e1o hi\u1ec7u : led ngu\u1ed3n, led TXD\n\n\nC\u00f3 c\u00e1c ch\u1ebf \u0111\u1ed9: AP, STA, AT + STA\n\n\nL\u1ec7nh AT r\u1ea5t \u0111\u01a1n gi\u1ea3n, d\u1ec5 d\u00e0ng s\u1eed d\u1ee5ng\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-02\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nS\u1eed d\u1ee5ng anten ngo\u00e0i - U.FL\n\n\nWireless network mode : station, softAP, softAP + station\n\n\nT\u1ea7n s\u1ed1 wifi ho\u1ea1t \u0111\u1ed9ng 2.4GHz, v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nD\u1ec5 d\u00e0ng ph\u00e1t tri\u1ec3n c\u00e1c d\u1ef1 \u00e1n v\u1edbi l\u1ec7nh AT\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-03\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nT\u00edch h\u1ee3p s\u1eb3n anten ceramic tr\u00ean module v\u00e0 1 pin\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, 2.4GHz\n\n\nWireless network mode : station, softAP, softAP + station\n\n\nH\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nD\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-04\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nWireless network mode : station, softAP, softAP + station\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz,v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nD\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-05\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nS\u1eed d\u1ee5ng anten ngo\u00e0i - U.FL\n\n\nWireless network mode : station, softAP, softAP + station\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nD\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-06\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nWireless network mode : station, softAP, softAP + station\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nH\u1ed5 tr\u1ee3 TCP/UDP\n\n\nD\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-07\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nT\u00edch h\u1ee3p s\u1eb3n anten ceramic v\u00e0 anten ngo\u00e0i U.FL\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nH\u1ed5 tr\u1ee3 TCP/UDP\n\n\nD\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-08\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nH\u1ed5 tr\u1ee3 TCP/UDP\n\n\nC\u00f3 c\u00e1c ch\u1ebf \u0111\u1ed9: AP, STA, AT + STA\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-09\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nK\u00edch th\u01b0\u1edbc m\u1ea1ch nh\u1ecf (10mmx10mm)\n\n\nH\u1ed5 tr\u1ee3 LWIP\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-10\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nH\u1ed5 tr\u1ee3 TCP/UDP\n\n\nC\u00f3 c\u00e1c ch\u1ebf \u0111\u1ed9: AP, STA, AT + STA\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-11\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nT\u00edch h\u1ee3p s\u1eb3n anten ceramic tr\u00ean module\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nD\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 1.27mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-12\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nT\u00edch h\u1ee3p anten PCB trace tr\u00ean module\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-12E\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nT\u00edch h\u1ee3p anten PCB trace tr\u00ean module\n\n\n4MB flash\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-13\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nT\u00edch h\u1ee3p anten PCB trace tr\u00ean module\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 1.5mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-14\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nT\u00edch h\u1ee3p anten PCB trace tr\u00ean module\n\n\nT\u00edch h\u1ee3p th\u00eam STM8S003F3P6, STM8S c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n ESP8266 b\u1eb1ng l\u1ec7nh AT\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nWT8266-S1\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nNhi\u1ec7t \u0111\u1ed9 ho\u1ea1t \u0111\u1ed9ng  : -20\u00b0C - 70\u00b0C\n\n\nChip Tensilica L106\n\n\nRAM 36KB\n\n\nFlash 16Mbit\n\n\n\n\n\n\nH\u1ec7 th\u1ed1ng \n\n\nH\u1ed5 tr\u1ee3 c\u00e1c chu\u1ea9n wifi 802.11 b/g/n \n\n\nT\u1ea7n s\u1ed1 ho\u1ea1t \u0111\u1ed9ng h\u1ed5 tr\u1ee3 t\u1eeb 80MHz \u0111\u1ebfn 160 MHz, h\u1ed5 tr\u1ee3 RTOS\n\n\nWIFI 2.4 GHz, h\u1ed5 tr\u1ee3 WPA/WPA2 \n\n\nT\u00edch h\u1ee3p 10-bit ADC \u0111\u1ed9 ch\u00ednh x\u00e1c cao\n\n\nH\u1ed5 tr\u1ee3 TCP/IP stack\n\n\nT\u00edch h\u1ee3p TR Switch/balun/LNA/b\u1ed9 khu\u1ebfch \u0111\u1ea1i c\u00f4ng su\u1ea5t v\u00e0 matching network\n\n\nT\u00edch h\u1ee3p anten PCB trace tr\u00ean module\n\n\nH\u1ed5 tr\u1ee3 n\u00e2ng c\u1ea5p AT t\u1eeb xa v\u00e0 cloud OTA\n\n\n\n\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#",
            "title": "C\u00e1c lo\u1ea1i Module"
        },
        {
            "location": "/introduction/esp-module/#cac-loai-module-esp8266",
            "text": "ESP8266 c\u1ea7n \u00edt nh\u1ea5t th\u00eam 7 linh ki\u1ec7n n\u1eefa m\u1edbi c\u00f3 th\u1ec3 ho\u1ea1t \u0111\u1ed9ng, trong \u0111\u00f3 ph\u1ea7n kh\u00f3 nh\u1ea5t l\u00e0 Antena. \u0110\u00f2i h\u1ecfi ph\u1ea3i \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t, ki\u1ec3m tra v\u1edbi c\u00e1c thi\u1ebft b\u1ecb hi\u1ec7n \u0111\u1ea1i. Do \u0111\u00f3, tr\u00ean th\u1ecb tr\u01b0\u1eddng xu\u1ea5t hi\u1ec7n nhi\u1ec1u Module v\u00e0 Board m\u1ea1ch ph\u00e1t tri\u1ec3n \u0111\u1ea3m \u0111\u01b0\u01a1ng h\u1ebft \u0111\u1ec3 ng\u01b0\u1eddi d\u00f9ng \u0111\u01a1n gi\u1ea3n nh\u1ea5t trong vi\u1ec7c ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng. M\u1ed9t s\u1ed1 Module v\u00e0 Board ph\u00e1t tri\u1ec3n ph\u1ed5 bi\u1ebfn:",
            "title": "C\u00e1c lo\u1ea1i Module ESP8266"
        },
        {
            "location": "/introduction/esp-module/#bang-so-sanh-cac-thong-so",
            "text": "Phi\u00ean b\u1ea3n  S\u1ed1 ch\u00e2n  pitch  form factor  LEDs  Antenna  Ant.Socket  Shielded  d\u00e0i mm      ESP-01  8  .1\u201c  2\u00d74 DIL  Yes  Etched-on PCB  No  No  14.3 x 24.8    ESP-02  8  .1\u201d  2\u00d74 notch  No?  None  Yes  No  14.2 x 14.2    ESP-03  14  2mm  2\u00d77 notch  No  Ceramic  No  No  17.3 x 12.1    ESP-04  14  2mm  2\u00d74 notch  No?  None  No  No  14.7 x 12.1    ESP-05  5  .1\u201c  1\u00d75 SIL  No  None  Yes  No  14.2 x 14.2    ESP-06  12+GND  misc  4\u00d73 dice  No  None  No  Yes  16.3 x 13.1    ESP-07  16  2mm  2\u00d78 pinhole  Yes  Ceramic  Yes  Yes  20.0 x 16.0    ESP-08  14  2mm  2\u00d77 notch  No  None  No  Yes  17.0 x 16.0    ESP-08 New  16  2mm  2\u00d78 notch  No  None  No  Yes  18.0 x 16.0    ESP-09  12+GND  misc  4\u00d73 dice  No  None  No  No  10.0 x 10.0    ESP-10  5  2mmm?  1\u00d75 notch  No  None  No  No  14.2 x 10.0    ESP-11  8  1.27mm  1\u00d78 pinhole  No?  Ceramic  No  No  17.3 x 12.1    ESP-12  16  2mm  2\u00d78 notch  Yes  Etched-on PCB  No  Yes  24.0 x 16.0    ESP-12-E  22  2mm  2\u00d78 notch  Yes  Etched-on PCB  No  Yes  24.0 x 16.0    ESP-13  18  1.5mm  2\u00d79  ?  Etched-on PCB  No  Yes  ? x ?    ESP-14  22  2mm  2\u00d78 + 6  1  Etched-on PCB  No  Yes  24.3 x 16.2    WROOM-02  18  1.5mm  2\u00d79  No  Etched on PCB  No  Yes  20.0 x 18.0    WT8266-S1  18  1.5mm  3\u00d76  1  Etched on PCB  No  Yes  15.0 x 18.6",
            "title": "B\u1ea3ng so s\u00e1nh c\u00e1c th\u00f4ng s\u1ed1"
        },
        {
            "location": "/introduction/esp-module/#mot-so-module-esp8266-tren-thi-truong",
            "text": "",
            "title": "M\u1ed9t s\u1ed1 module ESP8266 tr\u00ean th\u1ecb tr\u01b0\u1eddng"
        },
        {
            "location": "/introduction/esp-module/#esp-wroom-02",
            "text": "",
            "title": "ESP-WROOM-02"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang",
            "text": "ESP-WROOM-02 l\u00e0 m\u1ed9t module MCU Wifi 32-bit ti\u1ebft ki\u1ec7m n\u0103ng l\u01b0\u1ee3ng d\u1ef1a tr\u00ean chip ESP8266.  H\u1ed5 tr\u1ee3 c\u00e1c chu\u1ea9n m\u1ea1ng kh\u00f4ng d\u00e2y 802.11 b/g/n  T\u00edch h\u1ee3p s\u1eb3n giao th\u1ee9c TCP/IP, 10-bit ADC, TR switch, balun, LNA, v\u00e0 c\u00e1c chu\u1ea9n giao ti\u1ebfp HSPI/UART/PWM/I2C/I2S.  H\u1ed5 tr\u1ee3 Wi-Fi Alliance, SRRC, FCC, CE, TELEC, IC & KCC Certified, RoHS, Halogen Free, REACH & CFSI Compliant, HTOL, ESD-HM, MSL, \u03bcHAST, HTSL  H\u1ed5 tr\u1ee3 Cloud Server Development  Custom firmware development qua SDK  C\u1ea5u h\u00ecnh ng\u01b0\u1eddi d\u00f9ng qua AT Instruction Set, Cloud Server v\u00e0 \u1ee9ng d\u1ee5ng Afdroid/iOS  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-01",
            "text": "",
            "title": "ESP-01"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_1",
            "text": "M\u1ea1ch nh\u1ecf, g\u1ecdn (24.75mm x 14.5mm)  \u0110i\u1ec7n \u00e1p l\u00e0m vi\u1ec7c 3.3v  T\u00edch h\u1ee3p s\u1eb3n anten PCB trace tr\u00ean module   C\u00f3 hai led b\u00e1o hi\u1ec7u : led ngu\u1ed3n, led TXD  C\u00f3 c\u00e1c ch\u1ebf \u0111\u1ed9: AP, STA, AT + STA  L\u1ec7nh AT r\u1ea5t \u0111\u01a1n gi\u1ea3n, d\u1ec5 d\u00e0ng s\u1eed d\u1ee5ng  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_1",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-02",
            "text": "",
            "title": "ESP-02"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_2",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  S\u1eed d\u1ee5ng anten ngo\u00e0i - U.FL  Wireless network mode : station, softAP, softAP + station  T\u1ea7n s\u1ed1 wifi ho\u1ea1t \u0111\u1ed9ng 2.4GHz, v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  D\u1ec5 d\u00e0ng ph\u00e1t tri\u1ec3n c\u00e1c d\u1ef1 \u00e1n v\u1edbi l\u1ec7nh AT  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_2",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-03",
            "text": "",
            "title": "ESP-03"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_3",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  T\u00edch h\u1ee3p s\u1eb3n anten ceramic tr\u00ean module v\u00e0 1 pin  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, 2.4GHz  Wireless network mode : station, softAP, softAP + station  H\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  D\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_3",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-04",
            "text": "",
            "title": "ESP-04"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_4",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  Wireless network mode : station, softAP, softAP + station  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz,v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  D\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_4",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-05",
            "text": "",
            "title": "ESP-05"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_5",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  S\u1eed d\u1ee5ng anten ngo\u00e0i - U.FL  Wireless network mode : station, softAP, softAP + station  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  D\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_5",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-06",
            "text": "",
            "title": "ESP-06"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_6",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  Wireless network mode : station, softAP, softAP + station  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  H\u1ed5 tr\u1ee3 TCP/UDP  D\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_6",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-07",
            "text": "",
            "title": "ESP-07"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_7",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  T\u00edch h\u1ee3p s\u1eb3n anten ceramic v\u00e0 anten ngo\u00e0i U.FL  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  H\u1ed5 tr\u1ee3 TCP/UDP  D\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_7",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-08",
            "text": "",
            "title": "ESP-08"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_8",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  H\u1ed5 tr\u1ee3 TCP/UDP  C\u00f3 c\u00e1c ch\u1ebf \u0111\u1ed9: AP, STA, AT + STA  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_8",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-09",
            "text": "",
            "title": "ESP-09"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_9",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  K\u00edch th\u01b0\u1edbc m\u1ea1ch nh\u1ecf (10mmx10mm)  H\u1ed5 tr\u1ee3 LWIP  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_9",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-10",
            "text": "",
            "title": "ESP-10"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_10",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  H\u1ed5 tr\u1ee3 TCP/UDP  C\u00f3 c\u00e1c ch\u1ebf \u0111\u1ed9: AP, STA, AT + STA  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_10",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-11",
            "text": "",
            "title": "ESP-11"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_11",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  T\u00edch h\u1ee3p s\u1eb3n anten ceramic tr\u00ean module  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  D\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 1.27mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_11",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-12",
            "text": "",
            "title": "ESP-12"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_12",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  T\u00edch h\u1ee3p anten PCB trace tr\u00ean module  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_12",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-12e",
            "text": "",
            "title": "ESP-12E"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_13",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  T\u00edch h\u1ee3p anten PCB trace tr\u00ean module  4MB flash  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_13",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-13",
            "text": "",
            "title": "ESP-13"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_14",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  T\u00edch h\u1ee3p anten PCB trace tr\u00ean module  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 1.5mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_14",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-14",
            "text": "",
            "title": "ESP-14"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_15",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  T\u00edch h\u1ee3p anten PCB trace tr\u00ean module  T\u00edch h\u1ee3p th\u00eam STM8S003F3P6, STM8S c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n ESP8266 b\u1eb1ng l\u1ec7nh AT  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_15",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#wt8266-s1",
            "text": "",
            "title": "WT8266-S1"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_16",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  Nhi\u1ec7t \u0111\u1ed9 ho\u1ea1t \u0111\u1ed9ng  : -20\u00b0C - 70\u00b0C  Chip Tensilica L106  RAM 36KB  Flash 16Mbit    H\u1ec7 th\u1ed1ng   H\u1ed5 tr\u1ee3 c\u00e1c chu\u1ea9n wifi 802.11 b/g/n   T\u1ea7n s\u1ed1 ho\u1ea1t \u0111\u1ed9ng h\u1ed5 tr\u1ee3 t\u1eeb 80MHz \u0111\u1ebfn 160 MHz, h\u1ed5 tr\u1ee3 RTOS  WIFI 2.4 GHz, h\u1ed5 tr\u1ee3 WPA/WPA2   T\u00edch h\u1ee3p 10-bit ADC \u0111\u1ed9 ch\u00ednh x\u00e1c cao  H\u1ed5 tr\u1ee3 TCP/IP stack  T\u00edch h\u1ee3p TR Switch/balun/LNA/b\u1ed9 khu\u1ebfch \u0111\u1ea1i c\u00f4ng su\u1ea5t v\u00e0 matching network  T\u00edch h\u1ee3p anten PCB trace tr\u00ean module  H\u1ed5 tr\u1ee3 n\u00e2ng c\u1ea5p AT t\u1eeb xa v\u00e0 cloud OTA",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_16",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/board/",
            "text": "Board m\u1ea1ch ph\u00e1t tri\u1ec3n\n#\n\n\nNodeMCU\n#\n\n\nWemos\n#\n\n\n\u2026",
            "title": "Board ph\u00e1t tri\u1ec3n"
        },
        {
            "location": "/introduction/board/#board-mach-phat-trien",
            "text": "",
            "title": "Board m\u1ea1ch ph\u00e1t tri\u1ec3n"
        },
        {
            "location": "/introduction/board/#nodemcu",
            "text": "",
            "title": "NodeMCU"
        },
        {
            "location": "/introduction/board/#wemos",
            "text": "\u2026",
            "title": "Wemos"
        },
        {
            "location": "/introduction/prepare/",
            "text": "Ph\u1ea7n c\u1ee9ng v\u00e0 ki\u1ebfn th\u1ee9c c\u1ea7n chu\u1ea9n b\u1ecb\n#\n\n\nGi\u1ed1ng nh\u01b0 t\u1ea5t c\u1ea3 c\u00e1c Vi \u0111i\u1ec1u khi\u1ec3n kh\u00e1c, vi\u1ec7c l\u1eadp tr\u00ecnh cho ESP8266 c\u1ea7n nh\u1eefng ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh \nC\n c\u0169ng nh\u01b0 ph\u1ea7n c\u1ee9ng \u0111\u1ec3 th\u1ef1c h\u00e0nh. Trong s\u00e1ch n\u00e0y ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng m\u1ea1ch ph\u00e1t tri\u1ec3n NodeMCU \u0111\u1ec3 th\u1eed nghi\u1ec7m t\u1ea5t c\u1ea3 c\u00e1c v\u00ed d\u1ee5 m\u1eabu.\n\n\nM\u1ea1ch ph\u00e1t tri\u1ec3n NodeMCU\n#\n\n\nM\u1ea1ch n\u00e0y c\u00f3 b\u00e1n r\u1ed9ng r\u00e3i tr\u00ean th\u1ecb tr\u01b0\u1eddng, ti\u1ec7n l\u1ee3i khi ph\u00e1t tri\u1ec3n, v\u00e0 \u0111\u01b0\u1ee3c cung c\u1ea5p \u0111\u1ea7y \u0111\u1ee7 m\u1ea1ch nguy\u00ean l\u00fd, m\u1edf v\u1ec1 ph\u1ea7n c\u1ee9ng. Chip USB-TTL h\u1ed7 tr\u1ee3 DTR v\u00e0 RTS cho ph\u00e9p ph\u1ea7n m\u1ec1m n\u1ea1p \nesptool.py\n c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n ESP8266 v\u00e0o ch\u1ebf \u0111\u1ed9 n\u1ea1p lu\u00f4n m\u00e0 kh\u00f4ng c\u1ea7n thao t\u00e1c ph\u1ea7n c\u1ee9ng n\u00e0o.\n\n\nCh\u00fa \u00fd\n#\n\n\nT\u1edbi th\u1eddi \u0111i\u1ec3m hi\u1ec7n nay, c\u00f4ng c\u1ee5 n\u1ea1p cho ESP8266 c\u00f3 th\u1ec3 \u0111\u1ea1t t\u1ed1c \u0111\u1ed9 921600 baud. Tuy nhi\u00ean, c\u00e1c m\u1ea1ch NodeMCU hi\u1ec7n tr\u00ean th\u1ecb tr\u01b0\u1eddng s\u1eed d\u1ee5ng nhi\u1ec1u lo\u1ea1i chip USB-TTL kh\u00e1c nhau, n\u00ean c\u1ea7n ki\u1ec3m tra t\u1ed1c \u0111\u1ed9 h\u1ed7 tr\u1ee3 tr\u01b0\u1edbc khi mua. N\u1ebfu t\u1ed1c \u0111\u1ed9 th\u1ea5p, th\u00ec vi\u1ec7c n\u1ea1p \u1ee9ng d\u1ee5ng cho ESP8266 kh\u00e1 l\u00e2u cho nh\u1eefng \u1ee9ng d\u1ee5ng l\u1edbn.\n\n\nhttps://github.com/nodemcu/nodemcu-devkit-v1.0\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n & s\u01a1 \u0111\u1ed3 kh\u1ed1i ESP8266EX\n\n\n\nM\u1ea1ch nguy\u00ean l\u00fd\n#\n\n\n// S\u01a1 \u0111\u1ed3 nguy\u00ean l\u00fd -> SVG\n//image::nodemcu_devkit_1.0.svg[NodeMCU schematic]\n\n\nNh\u1eefng l\u1ef1a ch\u1ecdn kh\u00e1c\n#\n\n\n\n\nWeMos\n\n\nAdafruit\n\n\n\n\nC\u00e0i \u0111\u1eb7t tr\u00ecnh so\u1ea1n th\u1ea3o & c\u00e0i \u0111\u1eb7t ban \u0111\u1ea7u\n#\n\n\nSublime Text 3\n#\n\n\n\n\nLink download: \nhttps://www.sublimetext.com/\n\n\nLearn shortcut: \nhttps://sublime-learning.herokuapp.com/\n\n\nShortcut : \n\n\nhttp://www.hongkiat.com/blog/sublime-text-tips/\n\n\nhttps://www.viget.com/articles/my-overused-sublime-text-keyboard-shortcuts\n\n\n\n\n\n\nGetting started: \nhttps://gist.github.com/anotheruiguy/11054534\n\n\nPlug-ins:\n\n\nhttp://emmet.io/\n\n\nMarkdown Editing\n\n\nSideBarEnhancements\n\n\nGithubEmoji\n\n\nSublimeAStyleFormatter\n - \nRecommend setting for C\n\n\n.editorconfig\n - \nRecommend config\n\n\nGitGutter\n\n\nsublime-text-git\n\n\nBabel\n\n\nhttps://github.com/feross/standard\n\n\nhttps://packagecontrol.io/packages/FileHeader\n\n\n\n\n\n\n\n\nEclipse\n#\n\n\nNotepad++\n#\n\n\nNg\u00f4n ng\u1eef l\u1eadp tr\u00ecnh C\n#\n\n\nT\u1ea5t nhi\u00ean vi\u1ec7c ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng cho nh\u1eefng Vi \u0111i\u1ec1u khi\u1ec3n \u00edt t\u00e0i nguy\u00ean, dung l\u01b0\u1ee3ng b\u1ed9 nh\u1edb c\u00f2n v\u00e0i ch\u1ee5c KiB th\u00ec hi\u1ebfm c\u00f3 s\u1ef1 l\u1ef1a ch\u1ecdn n\u00e0o kh\u00e1c ngo\u00e0i ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh \nC/C++\n. Nh\u1eefng ng\u00f4n ng\u1eef kh\u00e1c nh\u01b0: \nLua\n, \nPython\n c\u0169ng \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n cho ESP8266, nh\u01b0ng \u0111\u1ec3 ho\u00e0n th\u00e0nh c\u00f4ng vi\u1ec7c c\u00e0ng d\u1ec5 d\u00e0ng, th\u00ec \u0111\u00f2i h\u1ecfi t\u00e0i nguy\u00ean c\u00e0ng nhi\u1ec1u. V\u00e0 s\u1ef1 \u1ed5n \u0111\u1ecbnh c\u1ee7a \u1ee9ng d\u1ee5ng s\u1ebd ph\u1ee5 thu\u1ed9c r\u1ea5t nhi\u1ec1u v\u00e0o vi\u1ec7c d\u01b0 gi\u1ea3 t\u00e0i nguy\u00ean. Chip ESP8266 kh\u00f4ng \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 \u0111\u1ee7 t\u00e0i nguy\u00ean ch\u1ea1y \u1ed5n \u0111\u1ecbnh cho c\u00e1c tr\u00ecnh th\u00f4ng d\u1ecbch (Interpreter) n\u00e0y.\n\n\nMakefile\n#\n\n\n\u0110\u1ec3 bi\u00ean d\u1ecbch \u0111\u01b0\u1ee3c ch\u00fang ta c\u1ea7n ho\u00e0n th\u00e0nh vi\u1ec7c c\u00e0i \u0111\u1eb7t tr\u00ecnh bi\u00ean d\u1ecbch b\u00ean tr\u00ean, v\u00e0 t\u00ecm hi\u1ec3u m\u1ed9t ch\u00fat v\u1ec1 k\u1ecbch b\u1ea3n \nMakefile\n. C\u00e1c ki\u1ebfn th\u1ee9c n\u00e0y th\u00f4ng th\u01b0\u1eddng c\u00e1c b\u1ea1n \u0111\u1ec1u ph\u1ea3i bi\u1ebft khi h\u1ecdc v\u1ec1 ng\u00f4n ng\u1eef \nC\n. N\u1ed9i dung ph\u1ea7n n\u00e0y ch\u1ec9 n\u00f3i ng\u1eafn g\u1ecdn, x\u00fac t\u00edch nh\u1eefng g\u00ec c\u1ea7n thi\u1ebft nh\u1ea5t.\n\n\nMakefile\n l\u00e0 c\u00f4ng c\u1ee5 k\u1ecbch b\u1ea3n h\u00f3a qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong h\u1ec7 \u0111i\u1ec1u h\u00e0nh Unix, Linux, t\u1ea5t nhi\u00ean c\u00f3 c\u1ea3 tr\u00ean Windows nh\u01b0ng kh\u00f4ng ph\u1ed5 bi\u1ebfn. N\u00f3 \u0111\u01a1n gi\u1ea3n qu\u00e1 h\u00f3a tr\u00ecnh th\u1ef1c hi\u1ec7n bi\u00ean d\u1ecbch b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng c\u00e1c module c\u00f3 s\u1eb5n trong h\u1ec7 \u0111i\u1ec1u h\u00e0nh.\n\n\nVi\u1ec7c s\u1eed d\u1ee5ng Makefile trong c\u00e1c d\u1ef1 \u00e1n \nC\n \u00edt th\u01b0\u1eddng xuy\u00ean v\u00e0 th\u01b0\u1eddng \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf s\u1eb5n b\u1edfi ng\u01b0\u1eddi t\u1ea1o n\u00ean d\u1ef1 \u00e1n \u0111\u00f3. Do v\u1eady, b\u1ea1n ch\u1ec9 c\u1ea7n hi\u1ec3u s\u01a1 v\u1ec1 \nMakefile\n \u0111\u1ec3 c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng s\u1eeda ch\u1eefa theo \u00fd m\u00ecnh, n\u1ebfu kh\u00f4ng mu\u1ed1n chuy\u00ean s\u00e2u. M\u1ed9t s\u1ed1 t\u1eeb kh\u00f3a google \u0111\u1ec3 d\u1ec5 d\u00e0ng t\u00ecm hi\u1ec3u v\u1ec1 \nMakefile\n: \u201cMakefile basics\u201d, \u201cMakefile tutorial\u201d.\n\n\n\u0110\u1ec3 bi\u00ean d\u1ecbch, b\u1ea1n g\u00f5 \nmake\n t\u1eeb c\u1eeda s\u1ed5 terminal, ch\u01b0\u01a1ng tr\u00ecnh \nmake\n s\u1ebd t\u00ecm v\u00e0 \u0111\u1ecdc file m\u1eb7c \u0111\u1ecbnh c\u00f3 t\u00ean \nMakefile\n \u1edf th\u01b0 m\u1ee5c hi\u1ec7n h\u00e0nh v\u00e0 th\u1ef1c thi n\u00f3.",
            "title": "Ph\u1ea7n c\u1ee9ng & c\u00f4ng c\u1ee5"
        },
        {
            "location": "/introduction/prepare/#phan-cung-va-kien-thuc-can-chuan-bi",
            "text": "Gi\u1ed1ng nh\u01b0 t\u1ea5t c\u1ea3 c\u00e1c Vi \u0111i\u1ec1u khi\u1ec3n kh\u00e1c, vi\u1ec7c l\u1eadp tr\u00ecnh cho ESP8266 c\u1ea7n nh\u1eefng ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh  C  c\u0169ng nh\u01b0 ph\u1ea7n c\u1ee9ng \u0111\u1ec3 th\u1ef1c h\u00e0nh. Trong s\u00e1ch n\u00e0y ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng m\u1ea1ch ph\u00e1t tri\u1ec3n NodeMCU \u0111\u1ec3 th\u1eed nghi\u1ec7m t\u1ea5t c\u1ea3 c\u00e1c v\u00ed d\u1ee5 m\u1eabu.",
            "title": "Ph\u1ea7n c\u1ee9ng v\u00e0 ki\u1ebfn th\u1ee9c c\u1ea7n chu\u1ea9n b\u1ecb"
        },
        {
            "location": "/introduction/prepare/#mach-phat-trien-nodemcu",
            "text": "M\u1ea1ch n\u00e0y c\u00f3 b\u00e1n r\u1ed9ng r\u00e3i tr\u00ean th\u1ecb tr\u01b0\u1eddng, ti\u1ec7n l\u1ee3i khi ph\u00e1t tri\u1ec3n, v\u00e0 \u0111\u01b0\u1ee3c cung c\u1ea5p \u0111\u1ea7y \u0111\u1ee7 m\u1ea1ch nguy\u00ean l\u00fd, m\u1edf v\u1ec1 ph\u1ea7n c\u1ee9ng. Chip USB-TTL h\u1ed7 tr\u1ee3 DTR v\u00e0 RTS cho ph\u00e9p ph\u1ea7n m\u1ec1m n\u1ea1p  esptool.py  c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n ESP8266 v\u00e0o ch\u1ebf \u0111\u1ed9 n\u1ea1p lu\u00f4n m\u00e0 kh\u00f4ng c\u1ea7n thao t\u00e1c ph\u1ea7n c\u1ee9ng n\u00e0o.",
            "title": "M\u1ea1ch ph\u00e1t tri\u1ec3n NodeMCU"
        },
        {
            "location": "/introduction/prepare/#chu-y",
            "text": "T\u1edbi th\u1eddi \u0111i\u1ec3m hi\u1ec7n nay, c\u00f4ng c\u1ee5 n\u1ea1p cho ESP8266 c\u00f3 th\u1ec3 \u0111\u1ea1t t\u1ed1c \u0111\u1ed9 921600 baud. Tuy nhi\u00ean, c\u00e1c m\u1ea1ch NodeMCU hi\u1ec7n tr\u00ean th\u1ecb tr\u01b0\u1eddng s\u1eed d\u1ee5ng nhi\u1ec1u lo\u1ea1i chip USB-TTL kh\u00e1c nhau, n\u00ean c\u1ea7n ki\u1ec3m tra t\u1ed1c \u0111\u1ed9 h\u1ed7 tr\u1ee3 tr\u01b0\u1edbc khi mua. N\u1ebfu t\u1ed1c \u0111\u1ed9 th\u1ea5p, th\u00ec vi\u1ec7c n\u1ea1p \u1ee9ng d\u1ee5ng cho ESP8266 kh\u00e1 l\u00e2u cho nh\u1eefng \u1ee9ng d\u1ee5ng l\u1edbn.  https://github.com/nodemcu/nodemcu-devkit-v1.0  S\u01a1 \u0111\u1ed3 ch\u00e2n & s\u01a1 \u0111\u1ed3 kh\u1ed1i ESP8266EX",
            "title": "Ch\u00fa \u00fd"
        },
        {
            "location": "/introduction/prepare/#mach-nguyen-ly",
            "text": "// S\u01a1 \u0111\u1ed3 nguy\u00ean l\u00fd -> SVG\n//image::nodemcu_devkit_1.0.svg[NodeMCU schematic]",
            "title": "M\u1ea1ch nguy\u00ean l\u00fd"
        },
        {
            "location": "/introduction/prepare/#nhung-lua-chon-khac",
            "text": "WeMos  Adafruit",
            "title": "Nh\u1eefng l\u1ef1a ch\u1ecdn kh\u00e1c"
        },
        {
            "location": "/introduction/prepare/#cai-at-trinh-soan-thao-cai-at-ban-au",
            "text": "",
            "title": "C\u00e0i \u0111\u1eb7t tr\u00ecnh so\u1ea1n th\u1ea3o &amp; c\u00e0i \u0111\u1eb7t ban \u0111\u1ea7u"
        },
        {
            "location": "/introduction/prepare/#sublime-text-3",
            "text": "Link download:  https://www.sublimetext.com/  Learn shortcut:  https://sublime-learning.herokuapp.com/  Shortcut :   http://www.hongkiat.com/blog/sublime-text-tips/  https://www.viget.com/articles/my-overused-sublime-text-keyboard-shortcuts    Getting started:  https://gist.github.com/anotheruiguy/11054534  Plug-ins:  http://emmet.io/  Markdown Editing  SideBarEnhancements  GithubEmoji  SublimeAStyleFormatter  -  Recommend setting for C  .editorconfig  -  Recommend config  GitGutter  sublime-text-git  Babel  https://github.com/feross/standard  https://packagecontrol.io/packages/FileHeader",
            "title": "Sublime Text 3"
        },
        {
            "location": "/introduction/prepare/#eclipse",
            "text": "",
            "title": "Eclipse"
        },
        {
            "location": "/introduction/prepare/#notepad",
            "text": "",
            "title": "Notepad++"
        },
        {
            "location": "/introduction/prepare/#ngon-ngu-lap-trinh-c",
            "text": "T\u1ea5t nhi\u00ean vi\u1ec7c ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng cho nh\u1eefng Vi \u0111i\u1ec1u khi\u1ec3n \u00edt t\u00e0i nguy\u00ean, dung l\u01b0\u1ee3ng b\u1ed9 nh\u1edb c\u00f2n v\u00e0i ch\u1ee5c KiB th\u00ec hi\u1ebfm c\u00f3 s\u1ef1 l\u1ef1a ch\u1ecdn n\u00e0o kh\u00e1c ngo\u00e0i ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh  C/C++ . Nh\u1eefng ng\u00f4n ng\u1eef kh\u00e1c nh\u01b0:  Lua ,  Python  c\u0169ng \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n cho ESP8266, nh\u01b0ng \u0111\u1ec3 ho\u00e0n th\u00e0nh c\u00f4ng vi\u1ec7c c\u00e0ng d\u1ec5 d\u00e0ng, th\u00ec \u0111\u00f2i h\u1ecfi t\u00e0i nguy\u00ean c\u00e0ng nhi\u1ec1u. V\u00e0 s\u1ef1 \u1ed5n \u0111\u1ecbnh c\u1ee7a \u1ee9ng d\u1ee5ng s\u1ebd ph\u1ee5 thu\u1ed9c r\u1ea5t nhi\u1ec1u v\u00e0o vi\u1ec7c d\u01b0 gi\u1ea3 t\u00e0i nguy\u00ean. Chip ESP8266 kh\u00f4ng \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 \u0111\u1ee7 t\u00e0i nguy\u00ean ch\u1ea1y \u1ed5n \u0111\u1ecbnh cho c\u00e1c tr\u00ecnh th\u00f4ng d\u1ecbch (Interpreter) n\u00e0y.",
            "title": "Ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh C"
        },
        {
            "location": "/introduction/prepare/#makefile",
            "text": "\u0110\u1ec3 bi\u00ean d\u1ecbch \u0111\u01b0\u1ee3c ch\u00fang ta c\u1ea7n ho\u00e0n th\u00e0nh vi\u1ec7c c\u00e0i \u0111\u1eb7t tr\u00ecnh bi\u00ean d\u1ecbch b\u00ean tr\u00ean, v\u00e0 t\u00ecm hi\u1ec3u m\u1ed9t ch\u00fat v\u1ec1 k\u1ecbch b\u1ea3n  Makefile . C\u00e1c ki\u1ebfn th\u1ee9c n\u00e0y th\u00f4ng th\u01b0\u1eddng c\u00e1c b\u1ea1n \u0111\u1ec1u ph\u1ea3i bi\u1ebft khi h\u1ecdc v\u1ec1 ng\u00f4n ng\u1eef  C . N\u1ed9i dung ph\u1ea7n n\u00e0y ch\u1ec9 n\u00f3i ng\u1eafn g\u1ecdn, x\u00fac t\u00edch nh\u1eefng g\u00ec c\u1ea7n thi\u1ebft nh\u1ea5t.  Makefile  l\u00e0 c\u00f4ng c\u1ee5 k\u1ecbch b\u1ea3n h\u00f3a qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong h\u1ec7 \u0111i\u1ec1u h\u00e0nh Unix, Linux, t\u1ea5t nhi\u00ean c\u00f3 c\u1ea3 tr\u00ean Windows nh\u01b0ng kh\u00f4ng ph\u1ed5 bi\u1ebfn. N\u00f3 \u0111\u01a1n gi\u1ea3n qu\u00e1 h\u00f3a tr\u00ecnh th\u1ef1c hi\u1ec7n bi\u00ean d\u1ecbch b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng c\u00e1c module c\u00f3 s\u1eb5n trong h\u1ec7 \u0111i\u1ec1u h\u00e0nh.  Vi\u1ec7c s\u1eed d\u1ee5ng Makefile trong c\u00e1c d\u1ef1 \u00e1n  C  \u00edt th\u01b0\u1eddng xuy\u00ean v\u00e0 th\u01b0\u1eddng \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf s\u1eb5n b\u1edfi ng\u01b0\u1eddi t\u1ea1o n\u00ean d\u1ef1 \u00e1n \u0111\u00f3. Do v\u1eady, b\u1ea1n ch\u1ec9 c\u1ea7n hi\u1ec3u s\u01a1 v\u1ec1  Makefile  \u0111\u1ec3 c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng s\u1eeda ch\u1eefa theo \u00fd m\u00ecnh, n\u1ebfu kh\u00f4ng mu\u1ed1n chuy\u00ean s\u00e2u. M\u1ed9t s\u1ed1 t\u1eeb kh\u00f3a google \u0111\u1ec3 d\u1ec5 d\u00e0ng t\u00ecm hi\u1ec3u v\u1ec1  Makefile : \u201cMakefile basics\u201d, \u201cMakefile tutorial\u201d.  \u0110\u1ec3 bi\u00ean d\u1ecbch, b\u1ea1n g\u00f5  make  t\u1eeb c\u1eeda s\u1ed5 terminal, ch\u01b0\u01a1ng tr\u00ecnh  make  s\u1ebd t\u00ecm v\u00e0 \u0111\u1ecdc file m\u1eb7c \u0111\u1ecbnh c\u00f3 t\u00ean  Makefile  \u1edf th\u01b0 m\u1ee5c hi\u1ec7n h\u00e0nh v\u00e0 th\u1ef1c thi n\u00f3.",
            "title": "Makefile"
        },
        {
            "location": "/nonos-sdk/nonos-sdk/",
            "text": "Gi\u1edbi thi\u1ec7u NonOS - SDK\n#\n\n\n\u0110\u00e2y l\u00e0 g\u00f3i ph\u1ea7n m\u1ec1m h\u1ed7 tr\u1ee3 ch\u00ednh th\u1ee9c t\u1eeb Espressif Systems c\u00f3 nhi\u1ec1u t\u00ednh n\u0103ng v\u00e0 \u1ed5n \u0111\u1ecbnh nh\u1ea5t.",
            "title": "Gi\u1edbi thi\u1ec7u"
        },
        {
            "location": "/nonos-sdk/nonos-sdk/#gioi-thieu-nonos-sdk",
            "text": "\u0110\u00e2y l\u00e0 g\u00f3i ph\u1ea7n m\u1ec1m h\u1ed7 tr\u1ee3 ch\u00ednh th\u1ee9c t\u1eeb Espressif Systems c\u00f3 nhi\u1ec1u t\u00ednh n\u0103ng v\u00e0 \u1ed5n \u0111\u1ecbnh nh\u1ea5t.",
            "title": "Gi\u1edbi thi\u1ec7u NonOS - SDK"
        },
        {
            "location": "/nonos-sdk/basic/basic/",
            "text": "C\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 c\u1ea7n thi\u1ebft\n#\n\n\n\n\nTr\u00ecnh so\u1ea1n th\u1ea3o tr\u00ean m\u00e1y t\u00ednh, \u0111\u1ec3 vi\u1ebft m\u00e3 ngu\u1ed3n \nC\n\n\nTr\u00ecnh bi\u00ean d\u1ecbch, nh\u1eb1m m\u1ee5c \u0111\u1ecbch bi\u00ean d\u1ecbch m\u00e3 ngu\u1ed3n \nC\n sang m\u00e3 m\u00e1y\n\n\nTr\u00ecnh n\u1ea1p, n\u1ea1p m\u00e3 m\u00e1y \u0111\u00e3 bi\u00ean d\u1ecbch xu\u1ed1ng Flash c\u1ee7a ESP8266\n\n\nSDK\n\n\n\n\nC\u00e0i \u0111\u1eb7t tr\u00ecnh bi\u00ean d\u1ecbch & c\u00e1c th\u01b0 vi\u1ec7n c\u01a1 b\u1ea3n\n#\n\n\nMacOS/OSX\n#\n\n\nB\u1ea1n c\u00f3 \u00edt nh\u1ea5t 2 c\u00e1ch \u0111\u1ec3 c\u00f3 tr\u00ecnh bi\u00ean d\u1ecbch, \u0111\u01a1n gi\u1ea3n nh\u1ea5t l\u00e0 t\u1ea3i v\u1ec1 t\u1eeb 1 trong c\u00e1c link sau:\n\n\n\n\nxtensa-lx106-elf.zip\n\n\n\n\nv\u00e0 gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c: \n/tools/esp8266/compiler/\n\n\nC\u00e1ch 2\n ph\u1ee9c t\u1ea1p h\u01a1n, nh\u01b0ng s\u1ebd ph\u00f9 h\u1ee3p v\u1edbi t\u1ea5t c\u1ea3 phi\u00ean b\u1ea3n h\u1ec7 \u0111i\u1ec1u h\u00e0nh c\u1ee7a b\u1ea1n. Bi\u00ean d\u1ecbch Tr\u00ecnh bi\u00ean d\u1ecbch t\u1eeb m\u00e3 ngu\u1ed3n:\n\n\n\nsudo port install git gsed gawk binutils gperf grep gettext py-serial wget libtool autoconf automake \n\nhdiutil create -size 5g -fs \"Case-sensitive HFS+\" -volname ESPTools ESPTools.sparsebundle \nhdiutil attach ESPTools.sparsebundle <3>\nsudo ln -s /Volumes/ESPTools/ /tools <3>\nmkdir /tools/esp8266 <4>\nmkdir /tools/esp8266/sdk <4>\nmkdir /tools/esp8266/compiler <4>\ncd /tools/esp8266/compiler\n\ngit clone -b lx106 git://github.com/jcmvbkbc/crosstool-NG.git <5>\ncd crosstool-NG\nsed -i.bak '1s/^/gettext=\\'$'\\n/' crosstool-NG/kconfig/Makefile\n./bootstrap && ./configure --prefix=`pwd` && make && make install\n./ct-ng xtensa-lx106-elf\n./ct-ng build\n\n\n\n\n\n\nC\u00e1c th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft \u0111\u1ec3 bi\u00ean d\u1ecbch crosstool-NG, s\u1eed d\u1ee5ng MacPorts \u0111\u1ec3 c\u00e0i \u0111\u1eb7t. N\u1ebfu ch\u01b0a c\u00e0i \u0111\u1eb7t MacPorts c\u00f3 th\u1ebb t\u1ea3i t\u1ea1i \u0111\u00e2y: https://www.macports.org/\n\n\nBi\u00ean d\u1ecbch \ncrosstool-NG\n c\u1ea7n \u0111\u1ecbnh d\u1ea1ng \u1ed5 c\u1ee9ng h\u1ed7 tr\u1ee3 ph\u00e2n bi\u1ec7t \u0111\u01b0\u1eddng d\u1eabn ch\u1eef Hoa v\u00e0 ch\u1eef th\u01b0\u1eddng, n\u00ean c\u1ea7n t\u1ea1o m\u1ed9t \u1ed5 \u0111\u0129a \u1ea3o nh\u01b0 v\u1eady.\n\n\nMount \u1ed5 \u0111\u0129a \nESPTools ESPTools.sparsebundle\n t\u1edbi th\u01b0 m\u1ee5c \n/tools/\n\n\nT\u1ea1o c\u00e1c th\u01b0 m\u1ee5c cho \u0111\u1ec3 ch\u1ee9a SDK, tr\u00ecnh bi\u00ean d\u1ecbch v\u00e0 c\u00f4ng c\u1ee5 n\u1ea1p\n\n\nClone d\u1ef1 \u00e1n crosstool-NG, nh\u00e1nh \nlx106\n v\u1ec1, ti\u1ebfn h\u00e0nh c\u00e1c thao t\u00e1c bi\u00ean d\u1ecbch\n\n\n\n\nL\u01b0u \u00fd\n#\n\n\nL\u01b0u \u00fd r\u1eb1ng, qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch c\u1ea7n kho\u1ea3ng 1 gi\u1edd (t\u00f9y c\u1ea5u h\u00ecnh m\u00e1y) v\u00e0 1.5GiB dung l\u01b0\u1ee3ng \u1ed5 c\u1ee9ng tr\u1ed1ng\n\n\nTi\u1ebfp theo, c\u1ea7n ph\u1ea3i th\u00eam \u0111\u01b0\u1eddng d\u1eabn c\u1ee7a compiler v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng \nPATH\n c\u1ee7a h\u1ec7 \u0111i\u1ec1u h\u00e0nh\n\n\necho \"export PATH=$PATH:/tools/esp8266/compiler/crosstool-NG/builds/xtensa-lx106-elf/bin\" >>  ~/.bash_profile <1>\nsource ~/.bash_profile \n\n\n\n\n\n\nTh\u00eam d\u00f2ng \nexport\n v\u00e0o cu\u1ed1i file \n~/.bash_profile\n b\u1eb1ng \necho\n\n\nsource\n \u0111\u1ec3 t\u1ea3i l\u1ea1i bi\u1ebfn m\u00f4i tr\u01b0\u1eddng\n\n\n\n\nKi\u1ec3m tra vi\u1ec7c c\u00e0i \u0111\u1eb7t, C\u00f3 d\u00f2ng n\u00e0y hi\u1ec3n th\u1ecb \u1edf cu\u1ed1i c\u00f9ng th\u00ec vi\u1ec7c c\u00e0i \u0111\u1eb7t d\u00e3 th\u00e0nh c\u00f4ng\n\n\nxtensa-lx106-elf-gcc -v\ngcc version 4.8.2 (crosstool-NG 1.20.0) \n\n\n\n\nWindows\n#\n\n\nC\u00e0i \u0111\u1eb7t Git, Python\n#\n\n\n\n\nGit\n\n\nPython\n\n\nM\u1eb7c \u0111\u1ecbnh python \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t t\u1ea1i \nC:\\Python27\n, th\u00eam \u0111\u01b0\u1eddng d\u1eabn n\u00e0y v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng \nPATH\n (xem h\u01b0\u1edbng d\u1eabn c\u00e1c b\u01b0\u1edbc b\u00ean d\u01b0\u1edbi)\n\n\n\n\n\n\n\n\nC\u00e0i \u0111\u1eb7t MINGW make\n#\n\n\n\n\nT\u1ea3i v\u00e0 c\u00e0i \u0111\u1eb7t \nMingw setup\n \n\n\nT\u1ea3i v\u00e0 ch\u1ea1y t\u1eadp tin \ninstall-mingw-package.bat\n (Run as Administractor) t\u1eeb \nMinGW packages install script\n\n\n\n\nM\u1eb7c \u0111\u1ecbnh MINGW \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t t\u1ea1i \nC:\\MinGW\n, Th\u00eam \u0111\u01b0\u1eddng d\u1eabn \nC:\\MinGW\\msys\\1.0\\bin\\\n v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng \nPATH\n (xem h\u01b0\u1edbng d\u1eabn c\u00e1c b\u01b0\u1edbc b\u00ean d\u01b0\u1edbi). \n\n\nV\u00e0o 1 th\u01b0 m\u1ee5c tr\u1ed1ng b\u1ea5t k\u1ef3 (kh\u00f4ng c\u00f3 ch\u1ee9a \nMakefile\n), ch\u1ea1y \nmake\n m\u00e0 hi\u1ec7n d\u00f2ng n\u00e0y l\u00e0 c\u00e0i \u0111\u1eb7t th\u00e0nh c\u00f4ng:\n\n\ncd C:\\\nmake\nmake: *** No targets specified and no makefile found.  Stop.\n\n\n\n\nT\u1ea3i SDK v\u1ec1 t\u1ea1i m\u1ed9t trong c\u00e1c \u0111\u1ecba ch\u1ec9 sau & c\u00e0i \u0111\u1eb7t:\n#\n\n\n\n\nhttp://programs74.ru/udkew-en.html\n\n\nLink Dropbox\n\n\n\n\n\u0110\u00e2y l\u00e0 b\u1ed9 KIT \u0111\u00e3 bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c c\u00f4ng c\u1ee5, SDK v\u00e0 m\u00e3 ngu\u1ed3n ch\u01b0\u01a1ng tr\u00ecnh c\u1ea7n thi\u1ebft \u0111\u1ec3 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng ESP8266. Tuy kh\u00f4ng ph\u1ea3i l\u00e0 ch\u00ednh th\u1ee9c c\u1ee7a h\u00e3ng (unofficial) nh\u01b0ng thu\u1ed9c d\u1ea1ng t\u1ea5t-c\u1ea3-trong-m\u1ed9t, r\u1ea5t ti\u1ec7n l\u1ee3i & d\u1ec5 s\u1eed d\u1ee5ng.\nV\u1ecb tr\u00ed m\u1eb7c \u0111\u1ecbnh c\u1ee7a b\u1ed9 KIT sau khi c\u00e0i \u0111\u1eb7t l\u00e0 \nC:\\Espressif\n, bao g\u1ed3m:\n\n\n\n\nC:\\Espressif\\xtensa-lx106-elf\\bin\n: tr\u00ecnh bi\u00ean d\u1ecbch xtensa-lx106-elf\n\n\nC:\\Espressif\\utils\\ESP8266\n: c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh ti\u1ec7n \u00edch, v\u00ed d\u1ee5 \nesptool.exe\n \u0111\u1ec3 n\u1ea1p ESP8266\n\n\nC:\\Espressif\\docs\\ESP8266\n: t\u00e0i li\u1ec7u li\u00ean quan.\n\n\nC:\\Espressif\\ESP8266_SDK\n: t\u01b0\u01a1ng \u1ee9ng v\u1edbi b\u1ea3n \nESP8266_NONOS_SDK v2.0.0\n\n\nC:\\Espressif\\ESP8266_RTOS_SDK\n: t\u01b0\u01a1ng \u1ee9ng v\u1edbi b\u1ea3n \nESP8266 RTOS SDK v1.4.0\n\n\nC:\\Espressif\\examples\\ESP8266\n: m\u00e3 ngu\u1ed3n v\u00ed d\u1ee5 c\u00e1c d\u1ef1 \u00e1n.\n\n\n\n\nC\u00e0i \u0111\u1eb7t \u0111\u01b0\u1eddng d\u1eabn \nC:\\Espressif\\xtensa-lx106-elf\\bin\n v\u00e0 \nC:\\Espressif\\utils\\ESP8266\n v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng \nPATH\n c\u1ee7a windows, c\u00f3 2 c\u00e1ch:\n\n\n\n\nC\u00e0i \u0111\u1eb7t c\u1ee9ng trong \nMy Computer\n -> (Chu\u1ed9t ph\u1ea3i) -> \nProperties\n -> \nAdvanced system settings\n -> \nEnvironment Variables...\n -> \nSystem variables\n, ch\u1ecdn gi\u00e1 tr\u1ecb \nPATH\n -> ch\u1ecdn \nEdit...\n -> di chuy\u1ec3n \u0111\u1ebfn cu\u1ed1i chu\u1ed7i, th\u00eam \n;C:\\Espressif\\xtensa-lx106-elf\\bin;C:\\Espressif\\utils\\ESP8266;\n\n\nC\u00e0i \u0111\u1eb7t khi ch\u1ea1y: trong c\u1eeda s\u1ed5 console, nh\u1eadp \nset PATH=%PATH%;C:\\Espressif\\xtensa-lx106-elf\\bin;C:\\Espressif\\utils\\ESP8266;\n\n\n\n\nKi\u1ec3m tra vi\u1ec7c c\u00e0i \u0111\u1eb7t \nxtensa-lx106-elf\n v\u00e0 \nesptool\n, c\u00f3 d\u00f2ng n\u00e0y hi\u1ec3n th\u1ecb \u1edf cu\u1ed1i c\u00f9ng th\u00ec vi\u1ec7c c\u00e0i \u0111\u1eb7t \u0111\u00e3 th\u00e0nh c\u00f4ng:\n\n\nxtensa-lx106-elf-gcc --version\nxtensa-lx106-elf-gcc (GCC) 5.2.0\n\n\n\n\nesptool.py\nusage: esptool [-h] [--port PORT] [--baud BAUD]\n\n\n\n\nLinux\n#\n\n\nC\u00e0i \u0111\u1eb7t Git\n\n\nsudo apt-get update\nsudo apt-get install make unrar-free autoconf automake libtool gcc g++ gperf \\\n    flex bison texinfo gawk ncurses-dev libexpat-dev python-dev python python-serial \\\n    sed git unzip bash help2man wget bzip2\nsudo apt-get install libtool-bin\n\n\n\n\nC\u00e0i \u0111\u1eb7t complier\n\n\nmkdir /tools /tools/esp8266 /tools/esp8266/sdk /tools/esp8266/compiler\ncd /tools/esp8266/compiler\ngit clone -b lx106 git://github.com/jcmvbkbc/crosstool-NG.git \ncd crosstool-NG\n./bootstrap && ./configure --prefix=`pwd` && make && make install\n./ct-ng xtensa-lx106-elf\nunset LD_LIBRARY_PATH\n./ct-ng build\nPATH=$PWD/builds/xtensa-lx106-elf/bin:$PATH\n\n\n\n\nKi\u1ec3m tra vi\u1ec7c c\u00e0i \u0111\u1eb7t b\u1eb1ng l\u1ec7nh\n\n\nxtensa-lx106-elf-gcc -v\n\n\nC\u00f3 d\u00f2ng n\u00e0y hi\u1ec3n th\u1ecb \u1edf cu\u1ed1i c\u00f9ng th\u00ec vi\u1ec7c c\u00e0i \u0111\u1eb7t d\u00e3 th\u00e0nh c\u00f4ng\n\n\nThread model: single\ngcc version 4.8.5 (crosstool-NG crosstool-ng-1.22.0-55-gecfc19a) \n\n\n\n\nT\u1ea3i ESP8266_NONOS_SDK\n#\n\n\nT\u1ea3i ESP8266-NONOS-SDK 2.0 t\u1eeb m\u1ed9t trong c\u00e1c ngu\u1ed3n sau: \n\n\n\n\nhttp://bbs.espressif.com/viewtopic.php?f=46&t=2451\n\n\nDropbox ESP8266-NONOS-SDK\n\n\n\n\nGi\u1ea3i n\u00e9n ra (v\u00ed d\u1ee5 t\u1ea1i th\u01b0 m\u1ee5c: \n/tools/esp8266/sdk/ESP8266_NONOS_SDK\n)\n\n\nT\u1ea3i \nesptool.py\n#\n\n\ncd /tools/esp8266/\ngit clone https://github.com/themadinventor/esptool.git\n\n\n\n\n\nHo\u1eb7c Download t\u1eeb \nDropbox\n v\u00e0 gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c \n/tools/esp8266/\n\n\nT\u1ea3i libc,libhal, file include (v\u1edbi ubuntu th\u00eam l\u1ec7nh sudo tr\u01b0\u1edbc wget)\n#\n\n\ncd tools/esp8266/complier/crosstool-NG/builds/xtensa-lx106-elf/xtensa-lx106-elf/sysroot/usr\nwget -O lib/libc.a https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a\nwget -O lib/libhal.a https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a\nwget -O include.tgz https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz\ntar -xvzf include.tgz\n\n\n\n\nC\u00f4ng c\u1ee5 COM Terminal\n#\n\n\n\n\nMinicom\n\n\nCoolTerm\n (Window, MAC, kh\u00f4ng support Ubuntu)\n\n\nGtkterm\n\n\nC\u00e0i \u0111\u1eb7t\n\napt-get install gtkterm\n\n\nT\u00ecm ki\u1ebfm COM k\u1ebft n\u1ed1i d\u00f9ng l\u1ec7nh \nlsusb\n trong terminal\n\n\nCh\u1ea1y gtkterm\n\nsudo gtkterm\n\n\nC\u1ea5u h\u00ecnh Port v\u00e0 baud trong Configuration>Port\n\n\n\n\n\n\n\n\nT\u00e0i li\u1ec7u t\u1eeb Espressif\n#\n\n\nhttp://espressif.com",
            "title": "C\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 c\u1ea7n thi\u1ebft"
        },
        {
            "location": "/nonos-sdk/basic/basic/#cai-at-cong-cu-can-thiet",
            "text": "Tr\u00ecnh so\u1ea1n th\u1ea3o tr\u00ean m\u00e1y t\u00ednh, \u0111\u1ec3 vi\u1ebft m\u00e3 ngu\u1ed3n  C  Tr\u00ecnh bi\u00ean d\u1ecbch, nh\u1eb1m m\u1ee5c \u0111\u1ecbch bi\u00ean d\u1ecbch m\u00e3 ngu\u1ed3n  C  sang m\u00e3 m\u00e1y  Tr\u00ecnh n\u1ea1p, n\u1ea1p m\u00e3 m\u00e1y \u0111\u00e3 bi\u00ean d\u1ecbch xu\u1ed1ng Flash c\u1ee7a ESP8266  SDK",
            "title": "C\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 c\u1ea7n thi\u1ebft"
        },
        {
            "location": "/nonos-sdk/basic/basic/#cai-at-trinh-bien-dich-cac-thu-vien-co-ban",
            "text": "",
            "title": "C\u00e0i \u0111\u1eb7t tr\u00ecnh bi\u00ean d\u1ecbch &amp; c\u00e1c th\u01b0 vi\u1ec7n c\u01a1 b\u1ea3n"
        },
        {
            "location": "/nonos-sdk/basic/basic/#macososx",
            "text": "B\u1ea1n c\u00f3 \u00edt nh\u1ea5t 2 c\u00e1ch \u0111\u1ec3 c\u00f3 tr\u00ecnh bi\u00ean d\u1ecbch, \u0111\u01a1n gi\u1ea3n nh\u1ea5t l\u00e0 t\u1ea3i v\u1ec1 t\u1eeb 1 trong c\u00e1c link sau:   xtensa-lx106-elf.zip   v\u00e0 gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c:  /tools/esp8266/compiler/  C\u00e1ch 2  ph\u1ee9c t\u1ea1p h\u01a1n, nh\u01b0ng s\u1ebd ph\u00f9 h\u1ee3p v\u1edbi t\u1ea5t c\u1ea3 phi\u00ean b\u1ea3n h\u1ec7 \u0111i\u1ec1u h\u00e0nh c\u1ee7a b\u1ea1n. Bi\u00ean d\u1ecbch Tr\u00ecnh bi\u00ean d\u1ecbch t\u1eeb m\u00e3 ngu\u1ed3n:  \nsudo port install git gsed gawk binutils gperf grep gettext py-serial wget libtool autoconf automake \n\nhdiutil create -size 5g -fs \"Case-sensitive HFS+\" -volname ESPTools ESPTools.sparsebundle \nhdiutil attach ESPTools.sparsebundle <3>\nsudo ln -s /Volumes/ESPTools/ /tools <3>\nmkdir /tools/esp8266 <4>\nmkdir /tools/esp8266/sdk <4>\nmkdir /tools/esp8266/compiler <4>\ncd /tools/esp8266/compiler\n\ngit clone -b lx106 git://github.com/jcmvbkbc/crosstool-NG.git <5>\ncd crosstool-NG\nsed -i.bak '1s/^/gettext=\\'$'\\n/' crosstool-NG/kconfig/Makefile\n./bootstrap && ./configure --prefix=`pwd` && make && make install\n./ct-ng xtensa-lx106-elf\n./ct-ng build   C\u00e1c th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft \u0111\u1ec3 bi\u00ean d\u1ecbch crosstool-NG, s\u1eed d\u1ee5ng MacPorts \u0111\u1ec3 c\u00e0i \u0111\u1eb7t. N\u1ebfu ch\u01b0a c\u00e0i \u0111\u1eb7t MacPorts c\u00f3 th\u1ebb t\u1ea3i t\u1ea1i \u0111\u00e2y: https://www.macports.org/  Bi\u00ean d\u1ecbch  crosstool-NG  c\u1ea7n \u0111\u1ecbnh d\u1ea1ng \u1ed5 c\u1ee9ng h\u1ed7 tr\u1ee3 ph\u00e2n bi\u1ec7t \u0111\u01b0\u1eddng d\u1eabn ch\u1eef Hoa v\u00e0 ch\u1eef th\u01b0\u1eddng, n\u00ean c\u1ea7n t\u1ea1o m\u1ed9t \u1ed5 \u0111\u0129a \u1ea3o nh\u01b0 v\u1eady.  Mount \u1ed5 \u0111\u0129a  ESPTools ESPTools.sparsebundle  t\u1edbi th\u01b0 m\u1ee5c  /tools/  T\u1ea1o c\u00e1c th\u01b0 m\u1ee5c cho \u0111\u1ec3 ch\u1ee9a SDK, tr\u00ecnh bi\u00ean d\u1ecbch v\u00e0 c\u00f4ng c\u1ee5 n\u1ea1p  Clone d\u1ef1 \u00e1n crosstool-NG, nh\u00e1nh  lx106  v\u1ec1, ti\u1ebfn h\u00e0nh c\u00e1c thao t\u00e1c bi\u00ean d\u1ecbch",
            "title": "MacOS/OSX"
        },
        {
            "location": "/nonos-sdk/basic/basic/#luu-y",
            "text": "L\u01b0u \u00fd r\u1eb1ng, qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch c\u1ea7n kho\u1ea3ng 1 gi\u1edd (t\u00f9y c\u1ea5u h\u00ecnh m\u00e1y) v\u00e0 1.5GiB dung l\u01b0\u1ee3ng \u1ed5 c\u1ee9ng tr\u1ed1ng  Ti\u1ebfp theo, c\u1ea7n ph\u1ea3i th\u00eam \u0111\u01b0\u1eddng d\u1eabn c\u1ee7a compiler v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng  PATH  c\u1ee7a h\u1ec7 \u0111i\u1ec1u h\u00e0nh  echo \"export PATH=$PATH:/tools/esp8266/compiler/crosstool-NG/builds/xtensa-lx106-elf/bin\" >>  ~/.bash_profile <1>\nsource ~/.bash_profile    Th\u00eam d\u00f2ng  export  v\u00e0o cu\u1ed1i file  ~/.bash_profile  b\u1eb1ng  echo  source  \u0111\u1ec3 t\u1ea3i l\u1ea1i bi\u1ebfn m\u00f4i tr\u01b0\u1eddng   Ki\u1ec3m tra vi\u1ec7c c\u00e0i \u0111\u1eb7t, C\u00f3 d\u00f2ng n\u00e0y hi\u1ec3n th\u1ecb \u1edf cu\u1ed1i c\u00f9ng th\u00ec vi\u1ec7c c\u00e0i \u0111\u1eb7t d\u00e3 th\u00e0nh c\u00f4ng  xtensa-lx106-elf-gcc -v\ngcc version 4.8.2 (crosstool-NG 1.20.0)",
            "title": "L\u01b0u \u00fd"
        },
        {
            "location": "/nonos-sdk/basic/basic/#windows",
            "text": "",
            "title": "Windows"
        },
        {
            "location": "/nonos-sdk/basic/basic/#cai-at-git-python",
            "text": "Git  Python  M\u1eb7c \u0111\u1ecbnh python \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t t\u1ea1i  C:\\Python27 , th\u00eam \u0111\u01b0\u1eddng d\u1eabn n\u00e0y v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng  PATH  (xem h\u01b0\u1edbng d\u1eabn c\u00e1c b\u01b0\u1edbc b\u00ean d\u01b0\u1edbi)",
            "title": "C\u00e0i \u0111\u1eb7t Git, Python"
        },
        {
            "location": "/nonos-sdk/basic/basic/#cai-at-mingw-make",
            "text": "T\u1ea3i v\u00e0 c\u00e0i \u0111\u1eb7t  Mingw setup    T\u1ea3i v\u00e0 ch\u1ea1y t\u1eadp tin  install-mingw-package.bat  (Run as Administractor) t\u1eeb  MinGW packages install script   M\u1eb7c \u0111\u1ecbnh MINGW \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t t\u1ea1i  C:\\MinGW , Th\u00eam \u0111\u01b0\u1eddng d\u1eabn  C:\\MinGW\\msys\\1.0\\bin\\  v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng  PATH  (xem h\u01b0\u1edbng d\u1eabn c\u00e1c b\u01b0\u1edbc b\u00ean d\u01b0\u1edbi).   V\u00e0o 1 th\u01b0 m\u1ee5c tr\u1ed1ng b\u1ea5t k\u1ef3 (kh\u00f4ng c\u00f3 ch\u1ee9a  Makefile ), ch\u1ea1y  make  m\u00e0 hi\u1ec7n d\u00f2ng n\u00e0y l\u00e0 c\u00e0i \u0111\u1eb7t th\u00e0nh c\u00f4ng:  cd C:\\\nmake\nmake: *** No targets specified and no makefile found.  Stop.",
            "title": "C\u00e0i \u0111\u1eb7t MINGW make"
        },
        {
            "location": "/nonos-sdk/basic/basic/#tai-sdk-ve-tai-mot-trong-cac-ia-chi-sau-cai-at",
            "text": "http://programs74.ru/udkew-en.html  Link Dropbox   \u0110\u00e2y l\u00e0 b\u1ed9 KIT \u0111\u00e3 bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c c\u00f4ng c\u1ee5, SDK v\u00e0 m\u00e3 ngu\u1ed3n ch\u01b0\u01a1ng tr\u00ecnh c\u1ea7n thi\u1ebft \u0111\u1ec3 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng ESP8266. Tuy kh\u00f4ng ph\u1ea3i l\u00e0 ch\u00ednh th\u1ee9c c\u1ee7a h\u00e3ng (unofficial) nh\u01b0ng thu\u1ed9c d\u1ea1ng t\u1ea5t-c\u1ea3-trong-m\u1ed9t, r\u1ea5t ti\u1ec7n l\u1ee3i & d\u1ec5 s\u1eed d\u1ee5ng.\nV\u1ecb tr\u00ed m\u1eb7c \u0111\u1ecbnh c\u1ee7a b\u1ed9 KIT sau khi c\u00e0i \u0111\u1eb7t l\u00e0  C:\\Espressif , bao g\u1ed3m:   C:\\Espressif\\xtensa-lx106-elf\\bin : tr\u00ecnh bi\u00ean d\u1ecbch xtensa-lx106-elf  C:\\Espressif\\utils\\ESP8266 : c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh ti\u1ec7n \u00edch, v\u00ed d\u1ee5  esptool.exe  \u0111\u1ec3 n\u1ea1p ESP8266  C:\\Espressif\\docs\\ESP8266 : t\u00e0i li\u1ec7u li\u00ean quan.  C:\\Espressif\\ESP8266_SDK : t\u01b0\u01a1ng \u1ee9ng v\u1edbi b\u1ea3n  ESP8266_NONOS_SDK v2.0.0  C:\\Espressif\\ESP8266_RTOS_SDK : t\u01b0\u01a1ng \u1ee9ng v\u1edbi b\u1ea3n  ESP8266 RTOS SDK v1.4.0  C:\\Espressif\\examples\\ESP8266 : m\u00e3 ngu\u1ed3n v\u00ed d\u1ee5 c\u00e1c d\u1ef1 \u00e1n.   C\u00e0i \u0111\u1eb7t \u0111\u01b0\u1eddng d\u1eabn  C:\\Espressif\\xtensa-lx106-elf\\bin  v\u00e0  C:\\Espressif\\utils\\ESP8266  v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng  PATH  c\u1ee7a windows, c\u00f3 2 c\u00e1ch:   C\u00e0i \u0111\u1eb7t c\u1ee9ng trong  My Computer  -> (Chu\u1ed9t ph\u1ea3i) ->  Properties  ->  Advanced system settings  ->  Environment Variables...  ->  System variables , ch\u1ecdn gi\u00e1 tr\u1ecb  PATH  -> ch\u1ecdn  Edit...  -> di chuy\u1ec3n \u0111\u1ebfn cu\u1ed1i chu\u1ed7i, th\u00eam  ;C:\\Espressif\\xtensa-lx106-elf\\bin;C:\\Espressif\\utils\\ESP8266;  C\u00e0i \u0111\u1eb7t khi ch\u1ea1y: trong c\u1eeda s\u1ed5 console, nh\u1eadp  set PATH=%PATH%;C:\\Espressif\\xtensa-lx106-elf\\bin;C:\\Espressif\\utils\\ESP8266;   Ki\u1ec3m tra vi\u1ec7c c\u00e0i \u0111\u1eb7t  xtensa-lx106-elf  v\u00e0  esptool , c\u00f3 d\u00f2ng n\u00e0y hi\u1ec3n th\u1ecb \u1edf cu\u1ed1i c\u00f9ng th\u00ec vi\u1ec7c c\u00e0i \u0111\u1eb7t \u0111\u00e3 th\u00e0nh c\u00f4ng:  xtensa-lx106-elf-gcc --version\nxtensa-lx106-elf-gcc (GCC) 5.2.0  esptool.py\nusage: esptool [-h] [--port PORT] [--baud BAUD]",
            "title": "T\u1ea3i SDK v\u1ec1 t\u1ea1i m\u1ed9t trong c\u00e1c \u0111\u1ecba ch\u1ec9 sau &amp; c\u00e0i \u0111\u1eb7t:"
        },
        {
            "location": "/nonos-sdk/basic/basic/#linux",
            "text": "C\u00e0i \u0111\u1eb7t Git  sudo apt-get update\nsudo apt-get install make unrar-free autoconf automake libtool gcc g++ gperf \\\n    flex bison texinfo gawk ncurses-dev libexpat-dev python-dev python python-serial \\\n    sed git unzip bash help2man wget bzip2\nsudo apt-get install libtool-bin  C\u00e0i \u0111\u1eb7t complier  mkdir /tools /tools/esp8266 /tools/esp8266/sdk /tools/esp8266/compiler\ncd /tools/esp8266/compiler\ngit clone -b lx106 git://github.com/jcmvbkbc/crosstool-NG.git \ncd crosstool-NG\n./bootstrap && ./configure --prefix=`pwd` && make && make install\n./ct-ng xtensa-lx106-elf\nunset LD_LIBRARY_PATH\n./ct-ng build\nPATH=$PWD/builds/xtensa-lx106-elf/bin:$PATH  Ki\u1ec3m tra vi\u1ec7c c\u00e0i \u0111\u1eb7t b\u1eb1ng l\u1ec7nh  xtensa-lx106-elf-gcc -v  C\u00f3 d\u00f2ng n\u00e0y hi\u1ec3n th\u1ecb \u1edf cu\u1ed1i c\u00f9ng th\u00ec vi\u1ec7c c\u00e0i \u0111\u1eb7t d\u00e3 th\u00e0nh c\u00f4ng  Thread model: single\ngcc version 4.8.5 (crosstool-NG crosstool-ng-1.22.0-55-gecfc19a)",
            "title": "Linux"
        },
        {
            "location": "/nonos-sdk/basic/basic/#tai-esp8266_nonos_sdk",
            "text": "T\u1ea3i ESP8266-NONOS-SDK 2.0 t\u1eeb m\u1ed9t trong c\u00e1c ngu\u1ed3n sau:    http://bbs.espressif.com/viewtopic.php?f=46&t=2451  Dropbox ESP8266-NONOS-SDK   Gi\u1ea3i n\u00e9n ra (v\u00ed d\u1ee5 t\u1ea1i th\u01b0 m\u1ee5c:  /tools/esp8266/sdk/ESP8266_NONOS_SDK )",
            "title": "T\u1ea3i ESP8266_NONOS_SDK"
        },
        {
            "location": "/nonos-sdk/basic/basic/#tai-esptoolpy",
            "text": "cd /tools/esp8266/\ngit clone https://github.com/themadinventor/esptool.git  Ho\u1eb7c Download t\u1eeb  Dropbox  v\u00e0 gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c  /tools/esp8266/",
            "title": "T\u1ea3i esptool.py"
        },
        {
            "location": "/nonos-sdk/basic/basic/#tai-libclibhal-file-include-voi-ubuntu-them-lenh-sudo-truoc-wget",
            "text": "cd tools/esp8266/complier/crosstool-NG/builds/xtensa-lx106-elf/xtensa-lx106-elf/sysroot/usr\nwget -O lib/libc.a https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a\nwget -O lib/libhal.a https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a\nwget -O include.tgz https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz\ntar -xvzf include.tgz",
            "title": "T\u1ea3i libc,libhal, file include (v\u1edbi ubuntu th\u00eam l\u1ec7nh sudo tr\u01b0\u1edbc wget)"
        },
        {
            "location": "/nonos-sdk/basic/basic/#cong-cu-com-terminal",
            "text": "Minicom  CoolTerm  (Window, MAC, kh\u00f4ng support Ubuntu)  Gtkterm  C\u00e0i \u0111\u1eb7t apt-get install gtkterm  T\u00ecm ki\u1ebfm COM k\u1ebft n\u1ed1i d\u00f9ng l\u1ec7nh  lsusb  trong terminal  Ch\u1ea1y gtkterm sudo gtkterm  C\u1ea5u h\u00ecnh Port v\u00e0 baud trong Configuration>Port",
            "title": "C\u00f4ng c\u1ee5 COM Terminal"
        },
        {
            "location": "/nonos-sdk/basic/basic/#tai-lieu-tu-espressif",
            "text": "http://espressif.com",
            "title": "T\u00e0i li\u1ec7u t\u1eeb Espressif"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/",
            "text": "Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n\n\nL\u1ea5y d\u1ef1 \u00e1n m\u1eabu t\u1eeb Github:\n\n\nS\u01a1 \u0111\u1ed3 file\n\n\nMakefile\n\n\nrf_init.c\n\n\nmain.c\n\n\n\n\n\n\nBi\u00ean d\u1ecbch\n\n\nK\u1ebft qu\u1ea3\n\n\n\n\n\n\n\n\n\n\nBi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n#\n\n\nTr\u01b0\u1edbc khi bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1eabu, b\u1ea1n c\u1ea7n ph\u1ea3i c\u00e0i \u0111\u1eb7t \u0111\u1ea7y \u0111\u1ee7 \nTr\u00ecnh bi\u00ean d\u1ecbch\n, t\u1ea3i v\u1ec1 \nesptool.py\n v\u00e0 \nESP8266-NONOS-SDK\n nh\u01b0 h\u01b0\u1edbng d\u1eabn C\u00e0i \u0111\u1eb7t\n\n\nTrong ph\u1ea7n n\u00e0y s\u1ebd tr\u00ecnh b\u00e0y r\u1ea5t chi ti\u1ebft \u0111\u1ec3 bi\u00ean d\u1ecbch m\u1ed9t d\u1ef1 \u00e1n ho\u00e0n ch\u1ec9nh, bao g\u1ed3m m\u1ed9t s\u1ed1 ki\u1ebfn th\u1ee9c b\u1ed5 tr\u1ee3 li\u00ean quan t\u1edbi l\u1eadp tr\u00ecnh \nC\n v\u00e0 \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch r\u00f5 r\u00e0ng, c\u1ea9n th\u1eadn. B\u1ea1n c\u00f3 th\u1ec3 b\u1ecf qua ph\u1ea7n n\u00e0y n\u1ebfu \u0111\u00e3 hi\u1ec3u r\u00f5 v\u1ec1 \nl\u1eadp tr\u00ecnh C\n\n\n\n\nN\u1ed9i dung\n\n\nHi\u1ec3n th\u1ecb \nhelloworld\n tr\u00ean terminal\n\n\n\n\nL\u1ea5y d\u1ef1 \u00e1n m\u1eabu t\u1eeb Github:\n#\n\n\nB\u1ea1n c\u00f3 th\u1ec3 l\u1ea5y d\u1ef1 \u00e1n m\u1eabu t\u1eeb github v\u00e0 bi\u00ean d\u1ecbch ngay:\n\n\ngit clone https://github.com/esp8266vn/esp-iot-basic.git\ncd esp-iot-basic && make\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\nesp-iot-basic\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h\n\n\n\n\n\n\nMakefile\n Gi\u00fap cho c\u00f4ng c\u1ee5 \nmake\n th\u1ef1c hi\u1ec7n vi\u1ec7c bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1ed9t c\u00e1ch t\u1ef1 \u0111\u1ed9ng\n\n\nmain.c\n Ch\u1ee9a m\u00e3 ngu\u1ed3n th\u1ef1c thi ch\u00ednh c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh\n\n\nrf_init.c\n Khi kh\u1edfi \u0111\u1ed9ng, {esp} s\u1ebd th\u1ef1c hi\u1ec7n m\u1ed9t s\u1ed1 l\u1ec7nh c\u1ea5u h\u00ecnh RF (thu ph\u00e1t kh\u00f4ng d\u00e2y), SDK s\u1ebd g\u1ecdi c\u00e1c h\u00e0m n\u00e0y. B\u1ea1n b\u1eaft bu\u1ed9c ph\u1ea3i cung c\u1ea5p gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 cho n\u00f3.\n\n\nuser_config.h\n Khi bi\u00ean d\u1ecbch, SDK s\u1ebd \ninclude\n file n\u00e0y, b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ec3 file tr\u1ed1ng kh\u00f4ng n\u1ed9i dung.\n\n\n\n\nMakefile\n#\n\n\n#esp-iot-basic/Makefile\nXTENSA    ?= \nSDK_BASE  ?= /tools/esp8266/sdk/ESP8266_NONOS_SDK \nESPTOOL   ?= /tools/esp8266/esptool/esptool.py\nSDK_LIBS  := -lc -lgcc -lhal -lphy -lpp -lnet80211 -lwpa -lmain\\\n            -llwip -lcrypto -ljson \nCC        := $(XTENSA)xtensa-lx106-elf-gcc\nLD        := $(XTENSA)xtensa-lx106-elf-gcc\nAR        := $(XTENSA)xtensa-lx106-elf-ar\nLDFLAGS   = -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static\nCFLAGS    = -g -Wpointer-arith -Wundef -Wl,-EL -fno-inline-functions -nostdlib\\ \n        -mlongcalls -mtext-section-literals -ffunction-sections -fdata-sections\\\n        -fno-builtin-printf -DICACHE_FLASH\\\n        -I.\\\n        -I$(SDK_BASE)/include\nLD_SCRIPT = -T$(SDK_BASE)/ld/eagle.app.v6.ld \n\nall: main.bin\n\nmain.bin: main.out\n  $(ESPTOOL) elf2image $(ESPTOOL_FLASHDEF) main.out -o main\n\nmain.out: main.a\n  @echo \"LD main.out\"\n  $(LD) -L$(SDK_BASE)/lib $(LD_SCRIPT) $(LDFLAGS) -L$(SDK_BASE)/lib\\\n  -Wl,--start-group $(SDK_LIBS) main.a -Wl,--end-group -o main.out \n\nmain.a: main.o\n  @echo \"AR main.o\"\n  $(AR) cru main.a main.\n\nmain.o:\n  @echo \"CC main.c & rf_init.c\"\n  $(CC) $(CFLAGS) -c main.c -o main.o <14>\n  $(CC) $(CFLAGS) -c rf_init.c -o rf_init.o <14>\n\nclean:\n  rm -rf *.o *.bin *.a *.out \n\nflash:\n  $(ESPTOOL) --port /dev/tty.SLAB_USBtoUART \\\n                   --baud 480600 \\\n                   write_flash --flash_freq 40m --flash_mode dio --flash_size 32m \\\n                   0x00000 main0x00000.bin \\\n                   0x10000 main0x10000.bin \\\n                   0x3fc000 $(SDK_BASE)/bin/esp_init_data_default.bin\n.PHONY: all clean flash\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nN\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng v\u00ed d\u1ee5 n\u00e0y cho b\u1ea3n Unofficial Developement KIT tr\u00ean Windows, v\u1edbi \u0111\u01b0\u1eddng d\u1eabn c\u00e0i \u0111\u1eb7t m\u1eb7c \u0111\u1ecbnh l\u00e0 \nC:\\Espressif\n, Makefile c\u1ea7n thay \u0111\u1ed5i nh\u01b0 sau:\n\n\n\n\nXTENSA    ?=\nSDK_BASE  ?= C:/Espressif/ESP8266_SDK\nESPTOOL   ?= C:/Espressif/utils/ESP8266/esptool.py\n...\n# V\u00ed d\u1ee5 c\u1ed5ng serial d\u00f9ng \u0111\u1ec3 n\u1ea1p cho ESP8266 l\u00e0 COM3:\nflash:\n   $(ESPTOOL) --port COM3 \\\n          --baud 480600 \\\n          write_flash --flash_freq 40m --flash_mode dio --flash_size 32m \\\n          0x00000 main0x00000.bin \\\n          0x10000 main0x10000.bin \\\n          0x3fc000 $(SDK_BASE)/bin/esp_init_data_default.bin\n\n\n\n\nGi\u1ea3i th\u00edch Makefile nh\u01b0 sau:\n\n\n\n\nXTENSA\n \u0110\u01b0\u1eddng d\u1eabn t\u1edbi tr\u00ecnh bi\u00ean d\u1ecbch, \u0111\u1ec3 tr\u1ed1ng n\u1ebfu b\u1ea1n \u0111\u00e3 th\u00eam v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng \nPATH\n c\u1ee7a h\u1ec7 \u0111i\u1ec1u h\u00e0nh, ho\u1eb7c c\u00f3 d\u1ea1ng \n/tools/esp8266/compiler/xtensa-lx106-elf/bin/\n\n\nSDK_BASE\n \u0110\u01b0\u1eddng d\u1eabn t\u1edbi \nSDK\n, n\u1ebfu l\u00e0 Windows c\u00f3 d\u1ea1ng \nC:\\Espressif\\ESP8266_NONOS_SDK\n\n\nESPTOOL\n \u0110\u01b0\u1eddng d\u1eabn t\u1edbi \nesptool.py\n, nh\u1edb \u0111\u1ea3m b\u1ea3o quy\u1ec1n th\u1ef1c thi cho file n\u00e0y (th\u1ef1c hi\u1ec7n l\u1ec7nh \nchmod +x\n)\n\n\nSDK_LIBS\n C\u00e1c th\u01b0 vi\u1ec7n \u0111i k\u00e8m v\u1edbi \nSDK\n, v\u00ed d\u1ee5 n\u1ebfu b\u1ea1n d\u00f9ng \nsmartconfig\n th\u00ec th\u00eam v\u00e0o \n-lsmartconfig\n\n\nCC\n, \nAR\n, \nLD\n \u0110\u1ecbnh ngh\u0129a ng\u1eafn g\u1ecdn Compiler, Linker, Archiver\n\n\nLDFLAGS\n l\u00e0 c\u1edd d\u00e0nh cho Linker \n\n\nCFLAGS\n l\u00e0 c\u1edd d\u00e0nh cho Compiler\n\n\nC\u1edd \n-I.\n \u0111\u1ec3 b\u00e1o Compiler bi\u1ebft c\u00f3 th\u1ec3 t\u00ecm header file (t\u1eeb kh\u00f3a \n#include\n) trong th\u01b0 m\u1ee5c hi\u1ec7n t\u1ea1i v\u00e0 SDK include\n\n\nLD_SCRIPT\n Linker scirpt m\u1eb7c \u0111\u1ecbnh c\u1ee7a \nSDK\n cho chip ESP8266\n\n\n\n\nM\u1eb7c \u0111\u1ecbnh khi g\u1ecdi \nmake\n hay \nmake all\n s\u1ebd g\u1ecdi \nall\n, nh\u01b0ng tr\u01b0\u1edbc \u0111\u00f3 s\u1ebd c\u1ea7n g\u1ecdi \nmain.bin\n\n\n\n\n\n\nTh\u1ef1c hi\u1ec7n \nmake clean\n x\u00f3a h\u1ebft c\u00e1c file \u0111\u01b0\u1ee3c t\u1ea1o ra khi g\u1ecdi \nmake all\n\n\n\n\nTh\u1ef1c hi\u1ec7n \nmake flash\n \u0111\u1ec3 n\u1ea1p ESP8266, c\u1ea7n ch\u1eafc ch\u1eafc m\u1ea1ch n\u1ea1p \u0111\u00e3 \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i m\u00e1y t\u00ednh, v\u00e0 t\u00ean c\u1ed5ng \u0111\u01b0\u1ee3c thay th\u1ebf \u0111\u00fang cho \n/dev/tty.SLAB_USBtoUART\n (th\u01b0\u1eddng v\u1edbi linux s\u1ebd l\u00e0 /dev/ttyUSB0, MAC OS l\u00e0 SLAB_USBtoUART). Ngo\u00e0i ra t\u1ed1c \u0111\u1ed9 baud c\u1ea7n ph\u1ea3i thay th\u1ebf cho ph\u00f9 h\u1ee3p(m\u1eb7c \u0111\u1ecbnh ban \u0111\u1ea7u c\u00f3 th\u1ec3 l\u00e0 9600 ho\u1eb7c 115200 ho\u1eb7c 480600) .B\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u th\u00eam v\u1ec1 vi\u1ec7c \u0111\u1ecdc t\u00ean c\u00f4ng COM tr\u00ean m\u00e1y t\u00ednh t\u1ea1i (OSX, Windows, Linux)\n\n\n\n\n\n\nQuan tr\u1ecdng\n\n\n\n\nD\u1ea5u \n\\\n b\u00e1o ch\u01b0a k\u1ebft th\u00fac d\u00f2ng trong Makefile\n\n\nTrong \nMakefile\n, lu\u00f4n lu\u00f4n \u0111\u1eb7t ch\u1ebf \u0111\u1ed9 Indent l\u00e0 Tab, n\u1ebfu d\u00f9ng Space s\u1ebd b\u00e1o l\u1ed7i \nMakefile:35: *** missing separator.  Stop.\n\n\n\n\n\n\nC\u00e1c b\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u r\u00f5 h\u01a1n v\u1ec1 Makefile b\u1eb1ng google v\u1edbi t\u1eeb kh\u00f3a \nMakefile basic\n. Makefile n\u00e0y nh\u01b0 l\u00e0 1 k\u1ecbch b\u1ea3n \u0111\u01a1n gi\u1ea3n nh\u1ea5t \u0111\u1ec3 c\u00f4ng c\u1ee5 \nmake\n th\u1ef1c hi\u1ec7n vi\u1ec7c bi\u00ean d\u1ecbch m\u00e3 ngu\u1ed3n \nC\n sang m\u00e3 m\u00e1y \u0111\u1ec3 n\u1ea1p cho ESP8266. M\u1ee5c \u0111\u00edch \u0111\u1ec3 b\u1ea3n n\u1eafm r\u00f5 h\u01a1n v\u1ec1 c\u00e1ch th\u1ee9c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a SDK, tr\u00ecnh bi\u00ean d\u1ecbch. C\u00e1c v\u00ed d\u1ee5 sau n\u00e0y s\u1ebd d\u00f9ng Makefile ph\u1ee9c t\u1ea1p h\u01a1n, v\u00e0 \u0111\u01b0\u1ee3c cung c\u1ea5p k\u00e8m v\u1edbi c\u00e1c d\u1ef1 \u00e1n m\u1eabu t\u1ea1i https://github.com/esp8266vn\n\n\nrf_init.c\n#\n\n\n//esp-iot-basic/rf_init.c\n#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\n\nvoid __attribute__((weak)) user_rf_pre_init(void)\n{\n  system_phy_set_rfoption(1);\n  system_phy_set_max_tpw(82);\n}\n\nuint32_t __attribute__((weak)) user_rf_cal_sector_set(void)\n{\n    enum flash_size_map size_map = system_get_flash_size_map();\n    uint32 rf_cal_sec = 0;\n\n    switch (size_map) {\n        case FLASH_SIZE_4M_MAP_256_256:\n            rf_cal_sec = 128 - 5;\n            break;\n\n        case FLASH_SIZE_8M_MAP_512_512:\n            rf_cal_sec = 256 - 5;\n            break;\n\n        case FLASH_SIZE_16M_MAP_512_512:\n        case FLASH_SIZE_16M_MAP_1024_1024:\n            rf_cal_sec = 512 - 5;\n            break;\n\n        case FLASH_SIZE_32M_MAP_512_512:\n        case FLASH_SIZE_32M_MAP_1024_1024:\n            rf_cal_sec = 1024 - 5;\n            break;\n\n        default:\n            rf_cal_sec = 0;\n            break;\n    }\n    return rf_cal_sec;\n\n\n\n\nmain.c\n#\n\n\n#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\n\nvoid app_init()\n{\n    uart_div_modify(0, UART_CLK_FREQ / 115200);\n    os_delay_us(1000000);\n    os_printf(\"\\r\\nhello world\\r\\n\");\n}\n\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}\n\n\n\n\n\nBi\u00ean d\u1ecbch\n#\n\n\nTh\u1ef1c hi\u1ec7n bi\u00ean d\u1ecbch d\u1ef1 \u00e1n\n\n\ncd esp-iot-basic\nmake clean\nmake\nmake flash\n\n\n\n\nM\u00e0n h\u00ecnh Terminal k\u1ebft th\u00fac nh\u01b0 sau l\u00e0 \u0111\u00e3 ho\u00e0n th\u00e0nh vi\u1ec7c ghi v\u00e0o ESP8266:\n\n\nesptool.py v1.2-dev\nConnecting...\nRunning Cesanta flasher stub...\nFlash params set to 0x0240\nWriting 32768 @ 0x0... 32768 (100 %)\nWrote 32768 bytes at 0x0 in 0.8 seconds (334.0 kbit/s)...\nWriting 196608 @ 0x10000... 196608 (100 %)\nWrote 196608 bytes at 0x10000 in 4.7 seconds (334.5 kbit/s)...\nWriting 4096 @ 0x3fc000... 4096 (100 %)\nWrote 4096 bytes at 0x3fc000 in 0.1 seconds (320.4 kbit/s)...\nLeaving...\n\n\n\n\nK\u1ebft qu\u1ea3\n#\n\n\nM\u1edf c\u1ed5ng COM b\u1eb1ng b\u1ea5t k\u1ef3 ph\u1ea7n m\u1ec1m n\u00e0o h\u1ed7 tr\u1ee3. Windows c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng teraterm, putty; MacOS/OSX, Linux th\u00ec s\u1eed d\u1ee5ng screen, minicom. Sau khi k\u1ebft n\u1ed1i xong, b\u1ea5m n\u00fat RESET tr\u00ean board ph\u00e1t tri\u1ec3n, b\u1ea1n s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c 1 lo\u1ea1t c\u00e1c k\u00fd t\u1ef1 l\u1ea1 \u0111\u1ea7u ti\u00ean. \u0110\u00f3 l\u00e0 c\u00e1c k\u00fd t\u1ef1 do c\u00e1c module c\u1ee7a SDK sinh ra, nh\u01b0ng tr\u01b0\u1edbc khi \u1ee9ng d\u1ee5ng m\u1eabu c\u1ea5u h\u00ecnh \u0111\u00fang t\u1ed1c \u0111\u1ed9 Baud:\n\n\n...\nhello world\nscandone",
            "title": "Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1eabu"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#bien-dich-du-an-au-tien",
            "text": "Tr\u01b0\u1edbc khi bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1eabu, b\u1ea1n c\u1ea7n ph\u1ea3i c\u00e0i \u0111\u1eb7t \u0111\u1ea7y \u0111\u1ee7  Tr\u00ecnh bi\u00ean d\u1ecbch , t\u1ea3i v\u1ec1  esptool.py  v\u00e0  ESP8266-NONOS-SDK  nh\u01b0 h\u01b0\u1edbng d\u1eabn C\u00e0i \u0111\u1eb7t  Trong ph\u1ea7n n\u00e0y s\u1ebd tr\u00ecnh b\u00e0y r\u1ea5t chi ti\u1ebft \u0111\u1ec3 bi\u00ean d\u1ecbch m\u1ed9t d\u1ef1 \u00e1n ho\u00e0n ch\u1ec9nh, bao g\u1ed3m m\u1ed9t s\u1ed1 ki\u1ebfn th\u1ee9c b\u1ed5 tr\u1ee3 li\u00ean quan t\u1edbi l\u1eadp tr\u00ecnh  C  v\u00e0 \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch r\u00f5 r\u00e0ng, c\u1ea9n th\u1eadn. B\u1ea1n c\u00f3 th\u1ec3 b\u1ecf qua ph\u1ea7n n\u00e0y n\u1ebfu \u0111\u00e3 hi\u1ec3u r\u00f5 v\u1ec1  l\u1eadp tr\u00ecnh C   N\u1ed9i dung  Hi\u1ec3n th\u1ecb  helloworld  tr\u00ean terminal",
            "title": "Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#lay-du-an-mau-tu-github",
            "text": "B\u1ea1n c\u00f3 th\u1ec3 l\u1ea5y d\u1ef1 \u00e1n m\u1eabu t\u1eeb github v\u00e0 bi\u00ean d\u1ecbch ngay:  git clone https://github.com/esp8266vn/esp-iot-basic.git\ncd esp-iot-basic && make",
            "title": "L\u1ea5y d\u1ef1 \u00e1n m\u1eabu t\u1eeb Github:"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#so-o-file",
            "text": "esp-iot-basic\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h   Makefile  Gi\u00fap cho c\u00f4ng c\u1ee5  make  th\u1ef1c hi\u1ec7n vi\u1ec7c bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1ed9t c\u00e1ch t\u1ef1 \u0111\u1ed9ng  main.c  Ch\u1ee9a m\u00e3 ngu\u1ed3n th\u1ef1c thi ch\u00ednh c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh  rf_init.c  Khi kh\u1edfi \u0111\u1ed9ng, {esp} s\u1ebd th\u1ef1c hi\u1ec7n m\u1ed9t s\u1ed1 l\u1ec7nh c\u1ea5u h\u00ecnh RF (thu ph\u00e1t kh\u00f4ng d\u00e2y), SDK s\u1ebd g\u1ecdi c\u00e1c h\u00e0m n\u00e0y. B\u1ea1n b\u1eaft bu\u1ed9c ph\u1ea3i cung c\u1ea5p gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 cho n\u00f3.  user_config.h  Khi bi\u00ean d\u1ecbch, SDK s\u1ebd  include  file n\u00e0y, b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ec3 file tr\u1ed1ng kh\u00f4ng n\u1ed9i dung.",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#makefile",
            "text": "#esp-iot-basic/Makefile\nXTENSA    ?= \nSDK_BASE  ?= /tools/esp8266/sdk/ESP8266_NONOS_SDK \nESPTOOL   ?= /tools/esp8266/esptool/esptool.py\nSDK_LIBS  := -lc -lgcc -lhal -lphy -lpp -lnet80211 -lwpa -lmain\\\n            -llwip -lcrypto -ljson \nCC        := $(XTENSA)xtensa-lx106-elf-gcc\nLD        := $(XTENSA)xtensa-lx106-elf-gcc\nAR        := $(XTENSA)xtensa-lx106-elf-ar\nLDFLAGS   = -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static\nCFLAGS    = -g -Wpointer-arith -Wundef -Wl,-EL -fno-inline-functions -nostdlib\\ \n        -mlongcalls -mtext-section-literals -ffunction-sections -fdata-sections\\\n        -fno-builtin-printf -DICACHE_FLASH\\\n        -I.\\\n        -I$(SDK_BASE)/include\nLD_SCRIPT = -T$(SDK_BASE)/ld/eagle.app.v6.ld \n\nall: main.bin\n\nmain.bin: main.out\n  $(ESPTOOL) elf2image $(ESPTOOL_FLASHDEF) main.out -o main\n\nmain.out: main.a\n  @echo \"LD main.out\"\n  $(LD) -L$(SDK_BASE)/lib $(LD_SCRIPT) $(LDFLAGS) -L$(SDK_BASE)/lib\\\n  -Wl,--start-group $(SDK_LIBS) main.a -Wl,--end-group -o main.out \n\nmain.a: main.o\n  @echo \"AR main.o\"\n  $(AR) cru main.a main.\n\nmain.o:\n  @echo \"CC main.c & rf_init.c\"\n  $(CC) $(CFLAGS) -c main.c -o main.o <14>\n  $(CC) $(CFLAGS) -c rf_init.c -o rf_init.o <14>\n\nclean:\n  rm -rf *.o *.bin *.a *.out \n\nflash:\n  $(ESPTOOL) --port /dev/tty.SLAB_USBtoUART \\\n                   --baud 480600 \\\n                   write_flash --flash_freq 40m --flash_mode dio --flash_size 32m \\\n                   0x00000 main0x00000.bin \\\n                   0x10000 main0x10000.bin \\\n                   0x3fc000 $(SDK_BASE)/bin/esp_init_data_default.bin\n.PHONY: all clean flash   L\u01b0u \u00fd  N\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng v\u00ed d\u1ee5 n\u00e0y cho b\u1ea3n Unofficial Developement KIT tr\u00ean Windows, v\u1edbi \u0111\u01b0\u1eddng d\u1eabn c\u00e0i \u0111\u1eb7t m\u1eb7c \u0111\u1ecbnh l\u00e0  C:\\Espressif , Makefile c\u1ea7n thay \u0111\u1ed5i nh\u01b0 sau:   XTENSA    ?=\nSDK_BASE  ?= C:/Espressif/ESP8266_SDK\nESPTOOL   ?= C:/Espressif/utils/ESP8266/esptool.py\n...\n# V\u00ed d\u1ee5 c\u1ed5ng serial d\u00f9ng \u0111\u1ec3 n\u1ea1p cho ESP8266 l\u00e0 COM3:\nflash:\n   $(ESPTOOL) --port COM3 \\\n          --baud 480600 \\\n          write_flash --flash_freq 40m --flash_mode dio --flash_size 32m \\\n          0x00000 main0x00000.bin \\\n          0x10000 main0x10000.bin \\\n          0x3fc000 $(SDK_BASE)/bin/esp_init_data_default.bin  Gi\u1ea3i th\u00edch Makefile nh\u01b0 sau:   XTENSA  \u0110\u01b0\u1eddng d\u1eabn t\u1edbi tr\u00ecnh bi\u00ean d\u1ecbch, \u0111\u1ec3 tr\u1ed1ng n\u1ebfu b\u1ea1n \u0111\u00e3 th\u00eam v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng  PATH  c\u1ee7a h\u1ec7 \u0111i\u1ec1u h\u00e0nh, ho\u1eb7c c\u00f3 d\u1ea1ng  /tools/esp8266/compiler/xtensa-lx106-elf/bin/  SDK_BASE  \u0110\u01b0\u1eddng d\u1eabn t\u1edbi  SDK , n\u1ebfu l\u00e0 Windows c\u00f3 d\u1ea1ng  C:\\Espressif\\ESP8266_NONOS_SDK  ESPTOOL  \u0110\u01b0\u1eddng d\u1eabn t\u1edbi  esptool.py , nh\u1edb \u0111\u1ea3m b\u1ea3o quy\u1ec1n th\u1ef1c thi cho file n\u00e0y (th\u1ef1c hi\u1ec7n l\u1ec7nh  chmod +x )  SDK_LIBS  C\u00e1c th\u01b0 vi\u1ec7n \u0111i k\u00e8m v\u1edbi  SDK , v\u00ed d\u1ee5 n\u1ebfu b\u1ea1n d\u00f9ng  smartconfig  th\u00ec th\u00eam v\u00e0o  -lsmartconfig  CC ,  AR ,  LD  \u0110\u1ecbnh ngh\u0129a ng\u1eafn g\u1ecdn Compiler, Linker, Archiver  LDFLAGS  l\u00e0 c\u1edd d\u00e0nh cho Linker   CFLAGS  l\u00e0 c\u1edd d\u00e0nh cho Compiler  C\u1edd  -I.  \u0111\u1ec3 b\u00e1o Compiler bi\u1ebft c\u00f3 th\u1ec3 t\u00ecm header file (t\u1eeb kh\u00f3a  #include ) trong th\u01b0 m\u1ee5c hi\u1ec7n t\u1ea1i v\u00e0 SDK include  LD_SCRIPT  Linker scirpt m\u1eb7c \u0111\u1ecbnh c\u1ee7a  SDK  cho chip ESP8266   M\u1eb7c \u0111\u1ecbnh khi g\u1ecdi  make  hay  make all  s\u1ebd g\u1ecdi  all , nh\u01b0ng tr\u01b0\u1edbc \u0111\u00f3 s\u1ebd c\u1ea7n g\u1ecdi  main.bin    Th\u1ef1c hi\u1ec7n  make clean  x\u00f3a h\u1ebft c\u00e1c file \u0111\u01b0\u1ee3c t\u1ea1o ra khi g\u1ecdi  make all   Th\u1ef1c hi\u1ec7n  make flash  \u0111\u1ec3 n\u1ea1p ESP8266, c\u1ea7n ch\u1eafc ch\u1eafc m\u1ea1ch n\u1ea1p \u0111\u00e3 \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i m\u00e1y t\u00ednh, v\u00e0 t\u00ean c\u1ed5ng \u0111\u01b0\u1ee3c thay th\u1ebf \u0111\u00fang cho  /dev/tty.SLAB_USBtoUART  (th\u01b0\u1eddng v\u1edbi linux s\u1ebd l\u00e0 /dev/ttyUSB0, MAC OS l\u00e0 SLAB_USBtoUART). Ngo\u00e0i ra t\u1ed1c \u0111\u1ed9 baud c\u1ea7n ph\u1ea3i thay th\u1ebf cho ph\u00f9 h\u1ee3p(m\u1eb7c \u0111\u1ecbnh ban \u0111\u1ea7u c\u00f3 th\u1ec3 l\u00e0 9600 ho\u1eb7c 115200 ho\u1eb7c 480600) .B\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u th\u00eam v\u1ec1 vi\u1ec7c \u0111\u1ecdc t\u00ean c\u00f4ng COM tr\u00ean m\u00e1y t\u00ednh t\u1ea1i (OSX, Windows, Linux)    Quan tr\u1ecdng   D\u1ea5u  \\  b\u00e1o ch\u01b0a k\u1ebft th\u00fac d\u00f2ng trong Makefile  Trong  Makefile , lu\u00f4n lu\u00f4n \u0111\u1eb7t ch\u1ebf \u0111\u1ed9 Indent l\u00e0 Tab, n\u1ebfu d\u00f9ng Space s\u1ebd b\u00e1o l\u1ed7i  Makefile:35: *** missing separator.  Stop.    C\u00e1c b\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u r\u00f5 h\u01a1n v\u1ec1 Makefile b\u1eb1ng google v\u1edbi t\u1eeb kh\u00f3a  Makefile basic . Makefile n\u00e0y nh\u01b0 l\u00e0 1 k\u1ecbch b\u1ea3n \u0111\u01a1n gi\u1ea3n nh\u1ea5t \u0111\u1ec3 c\u00f4ng c\u1ee5  make  th\u1ef1c hi\u1ec7n vi\u1ec7c bi\u00ean d\u1ecbch m\u00e3 ngu\u1ed3n  C  sang m\u00e3 m\u00e1y \u0111\u1ec3 n\u1ea1p cho ESP8266. M\u1ee5c \u0111\u00edch \u0111\u1ec3 b\u1ea3n n\u1eafm r\u00f5 h\u01a1n v\u1ec1 c\u00e1ch th\u1ee9c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a SDK, tr\u00ecnh bi\u00ean d\u1ecbch. C\u00e1c v\u00ed d\u1ee5 sau n\u00e0y s\u1ebd d\u00f9ng Makefile ph\u1ee9c t\u1ea1p h\u01a1n, v\u00e0 \u0111\u01b0\u1ee3c cung c\u1ea5p k\u00e8m v\u1edbi c\u00e1c d\u1ef1 \u00e1n m\u1eabu t\u1ea1i https://github.com/esp8266vn",
            "title": "Makefile"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#rf_initc",
            "text": "//esp-iot-basic/rf_init.c\n#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\n\nvoid __attribute__((weak)) user_rf_pre_init(void)\n{\n  system_phy_set_rfoption(1);\n  system_phy_set_max_tpw(82);\n}\n\nuint32_t __attribute__((weak)) user_rf_cal_sector_set(void)\n{\n    enum flash_size_map size_map = system_get_flash_size_map();\n    uint32 rf_cal_sec = 0;\n\n    switch (size_map) {\n        case FLASH_SIZE_4M_MAP_256_256:\n            rf_cal_sec = 128 - 5;\n            break;\n\n        case FLASH_SIZE_8M_MAP_512_512:\n            rf_cal_sec = 256 - 5;\n            break;\n\n        case FLASH_SIZE_16M_MAP_512_512:\n        case FLASH_SIZE_16M_MAP_1024_1024:\n            rf_cal_sec = 512 - 5;\n            break;\n\n        case FLASH_SIZE_32M_MAP_512_512:\n        case FLASH_SIZE_32M_MAP_1024_1024:\n            rf_cal_sec = 1024 - 5;\n            break;\n\n        default:\n            rf_cal_sec = 0;\n            break;\n    }\n    return rf_cal_sec;",
            "title": "rf_init.c"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#mainc",
            "text": "#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\n\nvoid app_init()\n{\n    uart_div_modify(0, UART_CLK_FREQ / 115200);\n    os_delay_us(1000000);\n    os_printf(\"\\r\\nhello world\\r\\n\");\n}\n\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}",
            "title": "main.c"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#bien-dich",
            "text": "Th\u1ef1c hi\u1ec7n bi\u00ean d\u1ecbch d\u1ef1 \u00e1n  cd esp-iot-basic\nmake clean\nmake\nmake flash  M\u00e0n h\u00ecnh Terminal k\u1ebft th\u00fac nh\u01b0 sau l\u00e0 \u0111\u00e3 ho\u00e0n th\u00e0nh vi\u1ec7c ghi v\u00e0o ESP8266:  esptool.py v1.2-dev\nConnecting...\nRunning Cesanta flasher stub...\nFlash params set to 0x0240\nWriting 32768 @ 0x0... 32768 (100 %)\nWrote 32768 bytes at 0x0 in 0.8 seconds (334.0 kbit/s)...\nWriting 196608 @ 0x10000... 196608 (100 %)\nWrote 196608 bytes at 0x10000 in 4.7 seconds (334.5 kbit/s)...\nWriting 4096 @ 0x3fc000... 4096 (100 %)\nWrote 4096 bytes at 0x3fc000 in 0.1 seconds (320.4 kbit/s)...\nLeaving...",
            "title": "Bi\u00ean d\u1ecbch"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#ket-qua",
            "text": "M\u1edf c\u1ed5ng COM b\u1eb1ng b\u1ea5t k\u1ef3 ph\u1ea7n m\u1ec1m n\u00e0o h\u1ed7 tr\u1ee3. Windows c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng teraterm, putty; MacOS/OSX, Linux th\u00ec s\u1eed d\u1ee5ng screen, minicom. Sau khi k\u1ebft n\u1ed1i xong, b\u1ea5m n\u00fat RESET tr\u00ean board ph\u00e1t tri\u1ec3n, b\u1ea1n s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c 1 lo\u1ea1t c\u00e1c k\u00fd t\u1ef1 l\u1ea1 \u0111\u1ea7u ti\u00ean. \u0110\u00f3 l\u00e0 c\u00e1c k\u00fd t\u1ef1 do c\u00e1c module c\u1ee7a SDK sinh ra, nh\u01b0ng tr\u01b0\u1edbc khi \u1ee9ng d\u1ee5ng m\u1eabu c\u1ea5u h\u00ecnh \u0111\u00fang t\u1ed1c \u0111\u1ed9 Baud:  ...\nhello world\nscandone",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/basic/blink-led/",
            "text": "B\u1eadt t\u1eaft LED\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n\n\nS\u01a1 \u0111\u1ed3 file\n\n\nM\u00e3 ngu\u1ed3n\n\n\nK\u1ebft qu\u1ea3\n\n\nG\u1ee3i \u00fd\n\n\n\n\n\n\n\n\n\n\nB\u1eadt t\u1eaft LED\n#\n\n\nT\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i \nBi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n, to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file, \nMakefile, user_config.h, rf_init.c\n gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file \nmain.c\n. \n\n\n\n\nN\u1ed9i dung\n\n\nCh\u1edbp t\u1eaft \u0111\u00e8n LED tr\u00ean GPIO16 m\u1ed7i 1 gi\u00e2y\n\n\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n#\n\n\ngit clone https://github.com/esp8266vn/esp-iot-led-blink.git\ncd esp-iot-led-blink && make\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\nesp-iot-led-blink\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h\n\n\n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\n//esp-led/main.c\n#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\nstatic os_timer_t led_timer;\nstatic int led_value = 0;\nvoid led_service_cb(void *args) //H\u00e0m n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi khi soft timer `led_timer` ho\u00e0n th\u00e0nh vi\u1ec7c \u0111\u1ebfm \n{\n    led_value ^= 0x01;\n    //Ghi gi\u00e1 tr\u1ecb ra LED IO, `led_value` khi th\u1ef1c hi\u1ec7n **XOR** v\u1edbi 1 s\u1ebd \u0111\u1ea3o gi\u00e1 tr\u1ecb gi\u1eefa 1 v\u00e0 0\n    WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe)| (uint32_t)(led_value & 1)); \n    os_printf(\"Blink\\r\\n\");\n}\nvoid app_init()\n{\n    //C\u1ea5u h\u00ecnh ng\u00f5 ra UART 115200 baud\n    uart_div_modify(0, UART_CLK_FREQ / 115200); \n\n    //C\u1ea5u h\u00ecnh ch\u00e2n LED l\u00e0 ch\u1ee9c n\u0103ng ch\u00ednh GPIO, ng\u00f5 ra \n    WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc)| (uint32_t)0x1);  \n    WRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe)| (uint32_t)0x0); \n    WRITE_PERI_REG(RTC_GPIO_ENABLE, (READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe)| (uint32_t)0x1); \n\n    //C\u1ea5u h\u00ecnh \u0111\u1ecba ch\u1ec9 h\u00e0m g\u1ecdi khi timer `led_timer` \u0111\u1ebfm xong \n    os_timer_setfn(&led_timer, (os_timer_func_t *)led_service_cb, NULL); \n\n    //C\u1ea5u h\u00ecnh `led_timer` t\u1edbi h\u1ea1n trong 1000 mili gi\u00e2y v\u00e0 kh\u1edfi \u0111\u1ed9ng l\u1ea1i khi t\u1edbi h\u1ea1n\n    os_timer_arm(&led_timer, 1000, 1); \n}\n\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}\n\n\n\n\n\n\u1ede ph\u1ea7n n\u00e0y ch\u00fang ta s\u1ebd bi\u1ebft th\u00eam v\u1ec1 c\u00e1ch th\u1ee9c \u0111\u1ecdc/ghi thanh ghi c\u1ee7a ESP8266, \u0111\u1ed3ng th\u1eddi s\u1eed d\u1ee5ng Software Timer:\n\n\n\n\n\u0110\u1ec3 ghi v\u00e0o thanh ghi, ch\u00fang ta d\u00f9ng \u0111\u1ecbnh ngh\u0129a: \nWRITE_PERI_REG\n v\u1edbi tham s\u1ed1 \u0111\u1ea7u ti\u00ean l\u00e0 \u0111\u1ecba ch\u1ec9 thanh ghi, th\u00f4ng s\u1ed1 th\u1ee9 2 l\u00e0 gi\u00e1 tr\u1ecb. T\u01b0\u01a1ng t\u1ef1 v\u1edbi vi\u1ec7c \u0111\u1ecdc, \u0111\u1ecbnh ngh\u0129a \nREAD_PERI_REG\n ch\u1ec9 c\u1ea7n 1 tham s\u1ed1 l\u00e0 \u0111\u1ecba ch\u1ec9 thanh ghi, v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a thanh ghi.\n\n\nTr\u01b0\u1edbc khi s\u1eed d\u1ee5ng Software Timer, c\u1ea7n \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc bi\u1ebfn ch\u01b0a th\u00f4ng tin l\u00e0 \nos_timer_t led_timer\n, kh\u1edfi t\u1ea1o h\u00e0m s\u1ebd g\u1ecdi khi Timer \u0111\u1ebfn t\u1edbi h\u1ea1n v\u1edbi \nos_timer_setfn\n v\u00e0 \nos_timer_arm\n v\u1edbi tham s\u1ed1 th\u1ee9 3 = 1 \u0111\u1ea3m b\u1ea3o s\u1ebd l\u1eb7p l\u1ea1i vi\u1ec7c \u0111\u1ebfm li\u00ean t\u1ee5c.\n\n\n\n\nK\u1ebft qu\u1ea3\n#\n\n\nSau khi n\u1ea1p th\u00e0nh c\u00f4ng ch\u01b0\u01a1ng tr\u00ecnh v\u00e0 k\u1ebft n\u1ed1i LED v\u1edbi ch\u00e2n GPIO16 s\u1ebd th\u1ea5y ch\u1edbp LED m\u1ed7i 1 gi\u00e2y.\n\n\nS\u1eed d\u1ee5ng Terminal quan s\u00e1t s\u1ebd th\u1ea5y\n\n\nBlink\nBlink\nBlink\nBlink\nBlink\n\n\n\n\nG\u1ee3i \u00fd\n#\n\n\nC\u00f3 th\u1ec3 t\u00ecm th\u1ea5y \u0111\u1ecbnh ngh\u0129a c\u00e1c \u0111\u1ecba ch\u1ec9 thanh ghi t\u1ea1i th\u01b0 m\u1ee5c ch\u1ee9a SDK \n$SDK_BASE\\include\\eagle_soc.h\n. Ngo\u00e0i ra, b\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o vi\u1ec7c c\u1ea5u h\u00ecnh GPIO16 t\u1ea1i \n$SDK_BASE\\driver_lib\\driver\\gpio16.c\n \n\n\nTa c\u00f3 th\u1ec3 th\u1ea5y \n\n\nWRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe)| (uint32_t)(led_value & 1));\n\n\n\n\nt\u01b0\u01a1ng \u1ee9ng v\u1edbi l\u1ec7nh \ngpio16_output_set(led_value);\n \n\n\nv\u00e0 c\u00e1c l\u1ec7nh\n\n\nWRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc) | (uint32_t)0x1);  \nWRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe) | (uint32_t)0x0);\nWRITE_PERI_REG(RTC_GPIO_ENABLE, (READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe) | (uint32_t)0x1);\n\n\n\n\nt\u01b0\u01a1ng \u1ee9ng v\u1edbi\n\ngpio16_output_conf(void)\n trong gpio16.c\n\n\n\n\nC\u1ea3nh b\u00e1o\n\n\nCh\u00e2n \nGPIO16\n c\u1ee7a ESP8266 l\u00e0 ch\u00e2n kh\u00e1 \u0111\u1eb7c bi\u1ec7t, s\u1eed d\u1ee5ng chung v\u1edbi RTC OUTPUT, d\u00f9ng \u1edf ch\u1ebf \u0111\u1ed9 DEEPSLEEP, khi RTC t\u1edbi h\u1ea1n v\u00e0 kh\u1edfi \u0111\u1ed9ng Chip b\u1eb1ng c\u00e1ch h\u1ea1 m\u1ee9c th\u1ea5p ch\u00e2n n\u00e0y. N\u1ebfu b\u1ea1n thi\u1ebft k\u1ebf \u1ee9ng d\u1ee5ng c\u1ea7n s\u1eed d\u1ee5ng ch\u1ebf \u0111\u1ed9 ng\u1ee7 DEEPSLEEP th\u00ec \u0111\u1eebng s\u1eed d\u1ee5ng ch\u00e2n GPIO16 cho m\u1ee5c \u0111\u00edch kh\u00e1c, ngo\u1ea1i tr\u1eeb vi\u1ec7c n\u1ed1i th\u1eb3ng v\u00e0o ch\u00e2n nRST (ch\u00e2n \n32\n c\u1ee7a ESP8266)",
            "title": "B\u1eadt t\u1eaft LED"
        },
        {
            "location": "/nonos-sdk/basic/blink-led/#bat-tat-led",
            "text": "T\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i  Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean , to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file,  Makefile, user_config.h, rf_init.c  gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file  main.c .    N\u1ed9i dung  Ch\u1edbp t\u1eaft \u0111\u00e8n LED tr\u00ean GPIO16 m\u1ed7i 1 gi\u00e2y",
            "title": "B\u1eadt t\u1eaft LED"
        },
        {
            "location": "/nonos-sdk/basic/blink-led/#lay-du-an-ve-tu-github",
            "text": "git clone https://github.com/esp8266vn/esp-iot-led-blink.git\ncd esp-iot-led-blink && make",
            "title": "L\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github"
        },
        {
            "location": "/nonos-sdk/basic/blink-led/#so-o-file",
            "text": "esp-iot-led-blink\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/basic/blink-led/#ma-nguon",
            "text": "//esp-led/main.c\n#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\nstatic os_timer_t led_timer;\nstatic int led_value = 0;\nvoid led_service_cb(void *args) //H\u00e0m n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi khi soft timer `led_timer` ho\u00e0n th\u00e0nh vi\u1ec7c \u0111\u1ebfm \n{\n    led_value ^= 0x01;\n    //Ghi gi\u00e1 tr\u1ecb ra LED IO, `led_value` khi th\u1ef1c hi\u1ec7n **XOR** v\u1edbi 1 s\u1ebd \u0111\u1ea3o gi\u00e1 tr\u1ecb gi\u1eefa 1 v\u00e0 0\n    WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe)| (uint32_t)(led_value & 1)); \n    os_printf(\"Blink\\r\\n\");\n}\nvoid app_init()\n{\n    //C\u1ea5u h\u00ecnh ng\u00f5 ra UART 115200 baud\n    uart_div_modify(0, UART_CLK_FREQ / 115200); \n\n    //C\u1ea5u h\u00ecnh ch\u00e2n LED l\u00e0 ch\u1ee9c n\u0103ng ch\u00ednh GPIO, ng\u00f5 ra \n    WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc)| (uint32_t)0x1);  \n    WRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe)| (uint32_t)0x0); \n    WRITE_PERI_REG(RTC_GPIO_ENABLE, (READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe)| (uint32_t)0x1); \n\n    //C\u1ea5u h\u00ecnh \u0111\u1ecba ch\u1ec9 h\u00e0m g\u1ecdi khi timer `led_timer` \u0111\u1ebfm xong \n    os_timer_setfn(&led_timer, (os_timer_func_t *)led_service_cb, NULL); \n\n    //C\u1ea5u h\u00ecnh `led_timer` t\u1edbi h\u1ea1n trong 1000 mili gi\u00e2y v\u00e0 kh\u1edfi \u0111\u1ed9ng l\u1ea1i khi t\u1edbi h\u1ea1n\n    os_timer_arm(&led_timer, 1000, 1); \n}\n\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}  \u1ede ph\u1ea7n n\u00e0y ch\u00fang ta s\u1ebd bi\u1ebft th\u00eam v\u1ec1 c\u00e1ch th\u1ee9c \u0111\u1ecdc/ghi thanh ghi c\u1ee7a ESP8266, \u0111\u1ed3ng th\u1eddi s\u1eed d\u1ee5ng Software Timer:   \u0110\u1ec3 ghi v\u00e0o thanh ghi, ch\u00fang ta d\u00f9ng \u0111\u1ecbnh ngh\u0129a:  WRITE_PERI_REG  v\u1edbi tham s\u1ed1 \u0111\u1ea7u ti\u00ean l\u00e0 \u0111\u1ecba ch\u1ec9 thanh ghi, th\u00f4ng s\u1ed1 th\u1ee9 2 l\u00e0 gi\u00e1 tr\u1ecb. T\u01b0\u01a1ng t\u1ef1 v\u1edbi vi\u1ec7c \u0111\u1ecdc, \u0111\u1ecbnh ngh\u0129a  READ_PERI_REG  ch\u1ec9 c\u1ea7n 1 tham s\u1ed1 l\u00e0 \u0111\u1ecba ch\u1ec9 thanh ghi, v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a thanh ghi.  Tr\u01b0\u1edbc khi s\u1eed d\u1ee5ng Software Timer, c\u1ea7n \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc bi\u1ebfn ch\u01b0a th\u00f4ng tin l\u00e0  os_timer_t led_timer , kh\u1edfi t\u1ea1o h\u00e0m s\u1ebd g\u1ecdi khi Timer \u0111\u1ebfn t\u1edbi h\u1ea1n v\u1edbi  os_timer_setfn  v\u00e0  os_timer_arm  v\u1edbi tham s\u1ed1 th\u1ee9 3 = 1 \u0111\u1ea3m b\u1ea3o s\u1ebd l\u1eb7p l\u1ea1i vi\u1ec7c \u0111\u1ebfm li\u00ean t\u1ee5c.",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/basic/blink-led/#ket-qua",
            "text": "Sau khi n\u1ea1p th\u00e0nh c\u00f4ng ch\u01b0\u01a1ng tr\u00ecnh v\u00e0 k\u1ebft n\u1ed1i LED v\u1edbi ch\u00e2n GPIO16 s\u1ebd th\u1ea5y ch\u1edbp LED m\u1ed7i 1 gi\u00e2y.  S\u1eed d\u1ee5ng Terminal quan s\u00e1t s\u1ebd th\u1ea5y  Blink\nBlink\nBlink\nBlink\nBlink",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/basic/blink-led/#goi-y",
            "text": "C\u00f3 th\u1ec3 t\u00ecm th\u1ea5y \u0111\u1ecbnh ngh\u0129a c\u00e1c \u0111\u1ecba ch\u1ec9 thanh ghi t\u1ea1i th\u01b0 m\u1ee5c ch\u1ee9a SDK  $SDK_BASE\\include\\eagle_soc.h . Ngo\u00e0i ra, b\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o vi\u1ec7c c\u1ea5u h\u00ecnh GPIO16 t\u1ea1i  $SDK_BASE\\driver_lib\\driver\\gpio16.c    Ta c\u00f3 th\u1ec3 th\u1ea5y   WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe)| (uint32_t)(led_value & 1));  t\u01b0\u01a1ng \u1ee9ng v\u1edbi l\u1ec7nh  gpio16_output_set(led_value);    v\u00e0 c\u00e1c l\u1ec7nh  WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc) | (uint32_t)0x1);  \nWRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe) | (uint32_t)0x0);\nWRITE_PERI_REG(RTC_GPIO_ENABLE, (READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe) | (uint32_t)0x1);  t\u01b0\u01a1ng \u1ee9ng v\u1edbi gpio16_output_conf(void)  trong gpio16.c   C\u1ea3nh b\u00e1o  Ch\u00e2n  GPIO16  c\u1ee7a ESP8266 l\u00e0 ch\u00e2n kh\u00e1 \u0111\u1eb7c bi\u1ec7t, s\u1eed d\u1ee5ng chung v\u1edbi RTC OUTPUT, d\u00f9ng \u1edf ch\u1ebf \u0111\u1ed9 DEEPSLEEP, khi RTC t\u1edbi h\u1ea1n v\u00e0 kh\u1edfi \u0111\u1ed9ng Chip b\u1eb1ng c\u00e1ch h\u1ea1 m\u1ee9c th\u1ea5p ch\u00e2n n\u00e0y. N\u1ebfu b\u1ea1n thi\u1ebft k\u1ebf \u1ee9ng d\u1ee5ng c\u1ea7n s\u1eed d\u1ee5ng ch\u1ebf \u0111\u1ed9 ng\u1ee7 DEEPSLEEP th\u00ec \u0111\u1eebng s\u1eed d\u1ee5ng ch\u00e2n GPIO16 cho m\u1ee5c \u0111\u00edch kh\u00e1c, ngo\u1ea1i tr\u1eeb vi\u1ec7c n\u1ed1i th\u1eb3ng v\u00e0o ch\u00e2n nRST (ch\u00e2n  32  c\u1ee7a ESP8266)",
            "title": "G\u1ee3i \u00fd"
        },
        {
            "location": "/nonos-sdk/basic/button/",
            "text": "N\u00fat nh\u1ea5n\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github:\n\n\nS\u01a1 \u0111\u1ed3 file\n\n\nM\u00e3 ngu\u1ed3n\n\n\n\n\n\n\n\n\n\n\nN\u00fat nh\u1ea5n\n#\n\n\nT\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i \nBi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n, bao g\u1ed3m c\u00e1c file \nMakefile\n, \nmain.c\n, \nrf_init.c\n, \nuser_config.h\n. Tuy nhi\u00ean ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file \nmain.c\n\n\n\n\nN\u1ed9i dung\n\n\nNh\u1ea5n n\u00fat (GPIO0)th\u00ec ch\u1edbp t\u1eaft \u0111\u00e8n LED (GPIO6)\n\n\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github:\n#\n\n\ngit clone https://github.com/esp8266vn/esp-iot-button.git\ncd eps-iot-button\nmake\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\nesp-iot-button\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h\n\n\n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\n//esp-button/main.c\n#include \"osapi.h\"\n#include \"user_interface.h\"\n#include \"gpio.h\"\n#define BTN_PIN 0 //GPIO0 \nstatic int led_value = 0;\nvoid key_intr_handler(void *args); //Khai b\u00e1o `prototype` \nvoid app_init()\n{\n    //C\u1ea5u h\u00ecnh ch\u00e2n GPIO16 l\u00e0 ng\u00f5 ra, \u0111i\u1ec1u khi\u1ec3n \u0111\u00e8n LED\n  WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc) | (uint32_t)0x1);\n\n  //C\u1ea5u h\u00ecnh ch\u00e2n GPIO16 l\u00e0 ng\u00f5 ra, \u0111i\u1ec1u khi\u1ec3n \u0111\u00e8n LED\n  WRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe) | (uint32_t)0x0);\n  WRITE_PERI_REG(RTC_GPIO_ENABLE,(READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe) | (uint32_t)0x1);\n\n  //C\u1ea5u h\u00ecnh `key_intr_handler` l\u00e0 h\u00e0m x\u1eed l\u00fd ng\u1eaft GPIO\n  ETS_GPIO_INTR_ATTACH(key_intr_handler, NULL);\n\n  //V\u00f4 hi\u1ec7u h\u00f3a ng\u1eaft GPIO \u0111\u1ec3 vi\u1ec7c c\u1ea5u h\u00ecnh kh\u00f4ng \u1ea3nh h\u01b0\u1edfng\n  ETS_GPIO_INTR_DISABLE();\n\n  //L\u1ef1a ch\u1ecdn ch\u1ee9c n\u0103ng cho GPIO0 s\u1eed d\u1ee5ng In/Out Logic\n  PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO0_U, FUNC_GPIO0);\n\n  //C\u1ea5u h\u00ecnh GPIO0 ho\u1ea1t \u0111\u1ed9ng nh\u01b0 ng\u00f5 v\u00e0o (Input)\n  gpio_output_set(0, 0, 0, GPIO_ID_PIN(BTN_PIN));\n  gpio_register_set(GPIO_PIN_ADDR(BTN_PIN), GPIO_PIN_INT_TYPE_SET(GPIO_PIN_INTR_DISABLE)\n                      | GPIO_PIN_PAD_DRIVER_SET(GPIO_PAD_DRIVER_DISABLE)\n                      | GPIO_PIN_SOURCE_SET(GPIO_AS_PIN_SOURCE));\n\n  //X\u00f3a c\u1edd ng\u1eaft GPIO\n  GPIO_REG_WRITE(GPIO_STATUS_W1TC_ADDRESS, BIT(BTN_PIN));\n\n  //C\u1ea5u h\u00ecnh ng\u1eaft GPIO0 c\u1ea1nh xu\u1ed1ng\n  gpio_pin_intr_state_set(GPIO_ID_PIN(BTN_PIN), GPIO_PIN_INTR_NEGEDGE);\n\n  //Cho ph\u00e9p ng\u1eaft GPIO\n  ETS_GPIO_INTR_ENABLE();\n}\nvoid user_init(void)\n{\n  system_init_done_cb(app_init);\n}\nvoid key_intr_handler(void *args)\n{\n  //\u0110\u1ecdc tr\u1ea1ng th\u00e1i ng\u1eaft GPIO hi\u1ec7n t\u1ea1i\n  uint32 gpio_status = GPIO_REG_READ(GPIO_STATUS_ADDRESS);\n  if (gpio_status & BIT(BTN_PIN)) { //Ch\u1eafc ch\u1eafn r\u1eb1ng ng\u1eaft xu\u1ea5t ph\u00e1t t\u1eeb GPIO0\n    //Ghi gi\u00e1 tr\u1ecb \u0111\u1ea3o \u0111\u1ec3 hi\u1ec3n th\u1ecb LED\n    led_value ^= 0x01;\n    led_value ^= 0x01;\n    WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe) | (uint32_t)(led_value & 1));\n  }\n  GPIO_REG_WRITE(GPIO_STATUS_W1TC_ADDRESS, BIT(BTN_PIN));  //X\u00f3a ng\u1eaft GPIO\n}\n\n\n\n\nN\u00fat nh\u1ea5n s\u1ebd gi\u00fap vi\u1ec7c ESP8266 kh\u1edfi \u0111\u1ed9ng m\u1ed9t h\u00e0nh \u0111\u1ed9ng n\u00e0o \u0111\u00f3 khi c\u1ea7n thi\u1ebft. Trong nhi\u1ec1u \u1ee9ng d\u1ee5ng ch\u00fang ta h\u1ea7u nh\u01b0 \u0111\u1ec1u c\u1ea7n nh\u1eefng k\u00edch ho\u1ea1t t\u1eeb b\u00ean ngo\u00e0i. Xuy\u00ean su\u1ed1t cu\u1ed1n s\u00e1ch n\u00e0y, s\u1ebd d\u00f9ng n\u00fat nh\u1ea5n \u0111\u1ec3 k\u00edch ho\u1ea1t ch\u1ea1y c\u00e1c \u1ee9ng d\u1ee5ng m\u1eabu c\u0169ng nh\u01b0 \u0111\u00e8n LED \u0111\u1ec3 th\u00f4ng b\u00e1o c\u00e1c tr\u1ea1ng th\u00e1i. Trong ph\u1ea7n n\u00e0y, nh\u1ea5n n\u00fat \u0111\u00e8n LED s\u1ebd chuy\u1ec3n tr\u1ea1ng th\u00e1i (t\u1eeb s\u00e1ng -> t\u1eaft v\u00e0 ng\u01b0\u1ee3c l\u1ea1i). \n\n\n\u0110\u00e2y l\u00e0 v\u00ed d\u1ee5 \u0111\u01a1n gi\u1ea3n, trong th\u1ef1c t\u1ebf vi\u1ec7c x\u1eed l\u00fd n\u00fat nh\u1ea5n kh\u00e1 phi\u1ec1n ph\u1ee9c. B\u1edfi v\u00ec n\u00fat nh\u1ea5n v\u1eadt l\u00fd khi \u0111\u01b0\u1ee3c nh\u1ea5n s\u1ebd t\u1ea1o ra h\u00e0ng lo\u1ea1t c\u00e1c xung l\u00ean xu\u1ed1ng (nhi\u1ec5u, bouncing\u2026). Th\u01b0\u1eddng th\u00ec ch\u1ec9 c\u1ea7n \u0111\u1ea3m b\u1ea3o m\u1ee9c Logic c\u1ee7a ch\u00e2n \u0111o \u0111\u01b0\u1ee3c \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1eef \u1ed5n \u0111\u1ecbnh trong kho\u1ea3ng 100 mili gi\u00e2y l\u00e0 \u0111\u01b0\u1ee3c xem \u0111\u00e3 \u1ed5n \u0111\u1ecbnh. \n\n\nNgo\u00e0i c\u00e1ch d\u00f9ng ng\u1eaft \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh n\u00fat nh\u1ea5n c\u00f3 \u0111\u01b0\u1ee3c nh\u1ea5n hay kh\u00f4ng - c\u00e1ch n\u00e0y s\u1ebd ti\u1ebft ki\u1ec7m t\u00e0i nguy\u00ean t\u00ednh to\u00e1n c\u1ee7a CPU, n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c g\u1ecdi khi c\u00f3 s\u1ef1 ki\u1ec7n s\u1ea3y ra, th\u00ec c\u00f2n m\u1ed9t c\u00e1ch n\u1eefa l\u00e0 h\u1ecfi v\u00f2ng: C\u00e1ch n\u00e0y \u0111\u1ecfi h\u1ecfi CPU li\u00ean t\u1ee5c ki\u1ec3m tra xem m\u1ee9c Logic c\u1ee7a n\u00fat nh\u1ea5n. \u0110\u1ed3ng th\u1eddi vi\u1ec7c \u0111\u00e1p \u1ee9ng c\u0169ng kh\u00f4ng nhanh b\u1eb1ng s\u1eed d\u1ee5ng ng\u1eaft.",
            "title": "N\u00fat nh\u1ea5n"
        },
        {
            "location": "/nonos-sdk/basic/button/#nut-nhan",
            "text": "T\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i  Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean , bao g\u1ed3m c\u00e1c file  Makefile ,  main.c ,  rf_init.c ,  user_config.h . Tuy nhi\u00ean ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file  main.c   N\u1ed9i dung  Nh\u1ea5n n\u00fat (GPIO0)th\u00ec ch\u1edbp t\u1eaft \u0111\u00e8n LED (GPIO6)",
            "title": "N\u00fat nh\u1ea5n"
        },
        {
            "location": "/nonos-sdk/basic/button/#lay-du-an-ve-tu-github",
            "text": "git clone https://github.com/esp8266vn/esp-iot-button.git\ncd eps-iot-button\nmake",
            "title": "L\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github:"
        },
        {
            "location": "/nonos-sdk/basic/button/#so-o-file",
            "text": "esp-iot-button\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/basic/button/#ma-nguon",
            "text": "//esp-button/main.c\n#include \"osapi.h\"\n#include \"user_interface.h\"\n#include \"gpio.h\"\n#define BTN_PIN 0 //GPIO0 \nstatic int led_value = 0;\nvoid key_intr_handler(void *args); //Khai b\u00e1o `prototype` \nvoid app_init()\n{\n    //C\u1ea5u h\u00ecnh ch\u00e2n GPIO16 l\u00e0 ng\u00f5 ra, \u0111i\u1ec1u khi\u1ec3n \u0111\u00e8n LED\n  WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc) | (uint32_t)0x1);\n\n  //C\u1ea5u h\u00ecnh ch\u00e2n GPIO16 l\u00e0 ng\u00f5 ra, \u0111i\u1ec1u khi\u1ec3n \u0111\u00e8n LED\n  WRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe) | (uint32_t)0x0);\n  WRITE_PERI_REG(RTC_GPIO_ENABLE,(READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe) | (uint32_t)0x1);\n\n  //C\u1ea5u h\u00ecnh `key_intr_handler` l\u00e0 h\u00e0m x\u1eed l\u00fd ng\u1eaft GPIO\n  ETS_GPIO_INTR_ATTACH(key_intr_handler, NULL);\n\n  //V\u00f4 hi\u1ec7u h\u00f3a ng\u1eaft GPIO \u0111\u1ec3 vi\u1ec7c c\u1ea5u h\u00ecnh kh\u00f4ng \u1ea3nh h\u01b0\u1edfng\n  ETS_GPIO_INTR_DISABLE();\n\n  //L\u1ef1a ch\u1ecdn ch\u1ee9c n\u0103ng cho GPIO0 s\u1eed d\u1ee5ng In/Out Logic\n  PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO0_U, FUNC_GPIO0);\n\n  //C\u1ea5u h\u00ecnh GPIO0 ho\u1ea1t \u0111\u1ed9ng nh\u01b0 ng\u00f5 v\u00e0o (Input)\n  gpio_output_set(0, 0, 0, GPIO_ID_PIN(BTN_PIN));\n  gpio_register_set(GPIO_PIN_ADDR(BTN_PIN), GPIO_PIN_INT_TYPE_SET(GPIO_PIN_INTR_DISABLE)\n                      | GPIO_PIN_PAD_DRIVER_SET(GPIO_PAD_DRIVER_DISABLE)\n                      | GPIO_PIN_SOURCE_SET(GPIO_AS_PIN_SOURCE));\n\n  //X\u00f3a c\u1edd ng\u1eaft GPIO\n  GPIO_REG_WRITE(GPIO_STATUS_W1TC_ADDRESS, BIT(BTN_PIN));\n\n  //C\u1ea5u h\u00ecnh ng\u1eaft GPIO0 c\u1ea1nh xu\u1ed1ng\n  gpio_pin_intr_state_set(GPIO_ID_PIN(BTN_PIN), GPIO_PIN_INTR_NEGEDGE);\n\n  //Cho ph\u00e9p ng\u1eaft GPIO\n  ETS_GPIO_INTR_ENABLE();\n}\nvoid user_init(void)\n{\n  system_init_done_cb(app_init);\n}\nvoid key_intr_handler(void *args)\n{\n  //\u0110\u1ecdc tr\u1ea1ng th\u00e1i ng\u1eaft GPIO hi\u1ec7n t\u1ea1i\n  uint32 gpio_status = GPIO_REG_READ(GPIO_STATUS_ADDRESS);\n  if (gpio_status & BIT(BTN_PIN)) { //Ch\u1eafc ch\u1eafn r\u1eb1ng ng\u1eaft xu\u1ea5t ph\u00e1t t\u1eeb GPIO0\n    //Ghi gi\u00e1 tr\u1ecb \u0111\u1ea3o \u0111\u1ec3 hi\u1ec3n th\u1ecb LED\n    led_value ^= 0x01;\n    led_value ^= 0x01;\n    WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe) | (uint32_t)(led_value & 1));\n  }\n  GPIO_REG_WRITE(GPIO_STATUS_W1TC_ADDRESS, BIT(BTN_PIN));  //X\u00f3a ng\u1eaft GPIO\n}  N\u00fat nh\u1ea5n s\u1ebd gi\u00fap vi\u1ec7c ESP8266 kh\u1edfi \u0111\u1ed9ng m\u1ed9t h\u00e0nh \u0111\u1ed9ng n\u00e0o \u0111\u00f3 khi c\u1ea7n thi\u1ebft. Trong nhi\u1ec1u \u1ee9ng d\u1ee5ng ch\u00fang ta h\u1ea7u nh\u01b0 \u0111\u1ec1u c\u1ea7n nh\u1eefng k\u00edch ho\u1ea1t t\u1eeb b\u00ean ngo\u00e0i. Xuy\u00ean su\u1ed1t cu\u1ed1n s\u00e1ch n\u00e0y, s\u1ebd d\u00f9ng n\u00fat nh\u1ea5n \u0111\u1ec3 k\u00edch ho\u1ea1t ch\u1ea1y c\u00e1c \u1ee9ng d\u1ee5ng m\u1eabu c\u0169ng nh\u01b0 \u0111\u00e8n LED \u0111\u1ec3 th\u00f4ng b\u00e1o c\u00e1c tr\u1ea1ng th\u00e1i. Trong ph\u1ea7n n\u00e0y, nh\u1ea5n n\u00fat \u0111\u00e8n LED s\u1ebd chuy\u1ec3n tr\u1ea1ng th\u00e1i (t\u1eeb s\u00e1ng -> t\u1eaft v\u00e0 ng\u01b0\u1ee3c l\u1ea1i).   \u0110\u00e2y l\u00e0 v\u00ed d\u1ee5 \u0111\u01a1n gi\u1ea3n, trong th\u1ef1c t\u1ebf vi\u1ec7c x\u1eed l\u00fd n\u00fat nh\u1ea5n kh\u00e1 phi\u1ec1n ph\u1ee9c. B\u1edfi v\u00ec n\u00fat nh\u1ea5n v\u1eadt l\u00fd khi \u0111\u01b0\u1ee3c nh\u1ea5n s\u1ebd t\u1ea1o ra h\u00e0ng lo\u1ea1t c\u00e1c xung l\u00ean xu\u1ed1ng (nhi\u1ec5u, bouncing\u2026). Th\u01b0\u1eddng th\u00ec ch\u1ec9 c\u1ea7n \u0111\u1ea3m b\u1ea3o m\u1ee9c Logic c\u1ee7a ch\u00e2n \u0111o \u0111\u01b0\u1ee3c \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1eef \u1ed5n \u0111\u1ecbnh trong kho\u1ea3ng 100 mili gi\u00e2y l\u00e0 \u0111\u01b0\u1ee3c xem \u0111\u00e3 \u1ed5n \u0111\u1ecbnh.   Ngo\u00e0i c\u00e1ch d\u00f9ng ng\u1eaft \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh n\u00fat nh\u1ea5n c\u00f3 \u0111\u01b0\u1ee3c nh\u1ea5n hay kh\u00f4ng - c\u00e1ch n\u00e0y s\u1ebd ti\u1ebft ki\u1ec7m t\u00e0i nguy\u00ean t\u00ednh to\u00e1n c\u1ee7a CPU, n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c g\u1ecdi khi c\u00f3 s\u1ef1 ki\u1ec7n s\u1ea3y ra, th\u00ec c\u00f2n m\u1ed9t c\u00e1ch n\u1eefa l\u00e0 h\u1ecfi v\u00f2ng: C\u00e1ch n\u00e0y \u0111\u1ecfi h\u1ecfi CPU li\u00ean t\u1ee5c ki\u1ec3m tra xem m\u1ee9c Logic c\u1ee7a n\u00fat nh\u1ea5n. \u0110\u1ed3ng th\u1eddi vi\u1ec7c \u0111\u00e1p \u1ee9ng c\u0169ng kh\u00f4ng nhanh b\u1eb1ng s\u1eed d\u1ee5ng ng\u1eaft.",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/basic/uart/",
            "text": "Truy\u1ec1n nh\u1eadn UART\n#\n\n\nESP8266 c\u00f3 2 UART, trong \u0111\u00f3 UART0 c\u00f3 \u0111\u1ea7y \u0111\u1ee7 2 t\u00ednh n\u0103ng TX, RX, v\u00e0 d\u00f9ng l\u00e0m ng\u00f5 ra m\u1eb7c \u0111\u1ecbnh cho c\u00e1c th\u00f4ng tin debug cho SDK, c\u0169ng nh\u01b0 l\u00e0 c\u1ed5ng n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh.\n\n\nT\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i \nBi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n, b\u1ed5 sung th\u00eam file \nuart.c\n, \nuart.h\n \u0111\u1ec3 c\u1ea5u h\u00ecnh c\u1ed5ng UART0 cho vi\u1ec7c nh\u1eadn d\u1eef li\u1ec7u, t\u1ed1c \u0111\u1ed9 baud trong v\u00ed d\u1ee5 n\u00e0y l\u00e0 115200 theo h\u00e0m \nuart_div_modify(0, UART_CLK_FREQ / 115200);\n\n\n\n\nUART0 c\u1ee7a ESP8266 h\u1ed7 tr\u1ee3 128 Byte FIFO v\u00e0 t\u00ednh n\u0103ng Ng\u1eaft Timeout, ng\u1eaft khi \u0111\u1ea7y FIFO. C\u00f3 th\u1ec3 hi\u1ec3u n\u1ebfu b\u1ea1n c\u1ea5u h\u00ecnh ng\u1eaft 128 bytes FIFO, v\u00e0 ng\u1eaft Timeout, khi UART nh\u1eadn \u0111\u1ea7y FIFO s\u1ebd k\u00edch ho\u1ea1t ng\u1eaft \u0111\u1ea7y FIFO, ho\u1eb7c n\u1ebfu tr\u01b0\u1eddng h\u1ee3p ch\u01b0a \u0111\u1ea7y FIFO nh\u01b0ng qua 1 kho\u1ea3ng th\u1eddi gian (c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh \u0111\u01b0\u1ee3c) m\u00e0 kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u n\u1eefa th\u00ec c\u0169ng ph\u00e1t sinh ng\u1eaft TOUT \n\n\nB\u1ea1n c\u00f3 th\u1ec3 l\u1ea5y driver tr\u1ef1c ti\u1ebfp t\u1eeb b\u00e0i n\u00e0y ho\u1eb7c c\u00e1c v\u00ed d\u1ee5 t\u1eeb SDK m\u00e0 kh\u00f4ng ph\u1ea3i l\u00e0m g\u00ec n\u1eefa n\u1ebfu vi\u1ec7c truy\u1ec1n nh\u1eadn kh\u00f4ng qu\u00e1 ph\u1ee9c t\u1ea1p\n\n\n\n\n\n\nN\u1ed9i dung\n\n\nKhi nh\u1eadn \u0111\u01b0\u1ee3c k\u00fd t\u1ef1 \n1\n t\u1eeb Terminal, b\u1eadt \u0111\u00e8n LED, xu\u1ea5t n\u1ed9i dung \nLED On\n tr\u1edf l\u1ea1i, v\u00e0 \n0\n s\u1ebd t\u1eaft, xu\u1ea5t n\u1ed9i dung \nLED Off\n\n\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github:\n#\n\n\ngit clone https://github.com/esp8266vn/eps-iot-uart.git\ncd eps-iot-uart\nmake\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\nesp-iot-uart\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    |-- uart.c\n    |-- uart.h\n    |-- led_btn.c\n    |-- led_btn.h\n    `-- user_config.h\n\n\n\n\nPh\u1ea7n c\u1ea5u h\u00ecnh cho \nLED\n v\u00e0 \nN\u00fat nh\u1ea5n\n \u0111\u01b0\u1ee3c g\u1ed9p l\u1ea1i th\u00e0nh 1 v\u00e0 n\u1eb1m trong file \nled_btn.c\n v\u00e0 \nled_btn.h\n . \n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\n//main.c\n#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\n#include \"led_btn.h\"\n#include \"uart.h\"\n\nvoid btn_pressed()\n{\n    led_toggle();\n}\nvoid uart_received(char data)\n{\n  if(data == '0') {\n    led_off();\n    os_printf(\"LED off\\n\");\n  } else if(data == '1') {\n    led_on();\n    os_printf(\"LED on\\n\");\n  }\n}\nvoid app_init()\n{\n    led_init();\n    btn_init(btn_pressed);\n    uart_setup(uart_received);\n}\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}\n\n\n\n\nN\u1ed9i dung file \nuart.c\n kh\u00e1 d\u00e0i, c\u00f3 th\u1ec3 xem tr\u1ef1c ti\u1ebfp tr\u00ean github ho\u1eb7c trong th\u01b0 m\u1ee5c \nesp-iot-uart\n \u0111\u00e3 clone v\u1ec1 \n\n\nK\u1ebft qu\u1ea3\n#\n\n\nKhi th\u1ef1c hi\u1ec7n \u1ea5n s\u1ed1 0 v\u00e0 s\u1ed1 1 tr\u00ean terminal s\u1ebd in ra d\u00f2ng t\u01b0\u01a1ng \u1ee9ng\n\n\nLED on\nLED off\nLED on\nLED off",
            "title": "UART"
        },
        {
            "location": "/nonos-sdk/basic/uart/#truyen-nhan-uart",
            "text": "ESP8266 c\u00f3 2 UART, trong \u0111\u00f3 UART0 c\u00f3 \u0111\u1ea7y \u0111\u1ee7 2 t\u00ednh n\u0103ng TX, RX, v\u00e0 d\u00f9ng l\u00e0m ng\u00f5 ra m\u1eb7c \u0111\u1ecbnh cho c\u00e1c th\u00f4ng tin debug cho SDK, c\u0169ng nh\u01b0 l\u00e0 c\u1ed5ng n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh.  T\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i  Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean , b\u1ed5 sung th\u00eam file  uart.c ,  uart.h  \u0111\u1ec3 c\u1ea5u h\u00ecnh c\u1ed5ng UART0 cho vi\u1ec7c nh\u1eadn d\u1eef li\u1ec7u, t\u1ed1c \u0111\u1ed9 baud trong v\u00ed d\u1ee5 n\u00e0y l\u00e0 115200 theo h\u00e0m  uart_div_modify(0, UART_CLK_FREQ / 115200);   UART0 c\u1ee7a ESP8266 h\u1ed7 tr\u1ee3 128 Byte FIFO v\u00e0 t\u00ednh n\u0103ng Ng\u1eaft Timeout, ng\u1eaft khi \u0111\u1ea7y FIFO. C\u00f3 th\u1ec3 hi\u1ec3u n\u1ebfu b\u1ea1n c\u1ea5u h\u00ecnh ng\u1eaft 128 bytes FIFO, v\u00e0 ng\u1eaft Timeout, khi UART nh\u1eadn \u0111\u1ea7y FIFO s\u1ebd k\u00edch ho\u1ea1t ng\u1eaft \u0111\u1ea7y FIFO, ho\u1eb7c n\u1ebfu tr\u01b0\u1eddng h\u1ee3p ch\u01b0a \u0111\u1ea7y FIFO nh\u01b0ng qua 1 kho\u1ea3ng th\u1eddi gian (c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh \u0111\u01b0\u1ee3c) m\u00e0 kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u n\u1eefa th\u00ec c\u0169ng ph\u00e1t sinh ng\u1eaft TOUT   B\u1ea1n c\u00f3 th\u1ec3 l\u1ea5y driver tr\u1ef1c ti\u1ebfp t\u1eeb b\u00e0i n\u00e0y ho\u1eb7c c\u00e1c v\u00ed d\u1ee5 t\u1eeb SDK m\u00e0 kh\u00f4ng ph\u1ea3i l\u00e0m g\u00ec n\u1eefa n\u1ebfu vi\u1ec7c truy\u1ec1n nh\u1eadn kh\u00f4ng qu\u00e1 ph\u1ee9c t\u1ea1p    N\u1ed9i dung  Khi nh\u1eadn \u0111\u01b0\u1ee3c k\u00fd t\u1ef1  1  t\u1eeb Terminal, b\u1eadt \u0111\u00e8n LED, xu\u1ea5t n\u1ed9i dung  LED On  tr\u1edf l\u1ea1i, v\u00e0  0  s\u1ebd t\u1eaft, xu\u1ea5t n\u1ed9i dung  LED Off",
            "title": "Truy\u1ec1n nh\u1eadn UART"
        },
        {
            "location": "/nonos-sdk/basic/uart/#lay-du-an-ve-tu-github",
            "text": "git clone https://github.com/esp8266vn/eps-iot-uart.git\ncd eps-iot-uart\nmake",
            "title": "L\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github:"
        },
        {
            "location": "/nonos-sdk/basic/uart/#so-o-file",
            "text": "esp-iot-uart\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    |-- uart.c\n    |-- uart.h\n    |-- led_btn.c\n    |-- led_btn.h\n    `-- user_config.h  Ph\u1ea7n c\u1ea5u h\u00ecnh cho  LED  v\u00e0  N\u00fat nh\u1ea5n  \u0111\u01b0\u1ee3c g\u1ed9p l\u1ea1i th\u00e0nh 1 v\u00e0 n\u1eb1m trong file  led_btn.c  v\u00e0  led_btn.h  .",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/basic/uart/#ma-nguon",
            "text": "//main.c\n#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\n#include \"led_btn.h\"\n#include \"uart.h\"\n\nvoid btn_pressed()\n{\n    led_toggle();\n}\nvoid uart_received(char data)\n{\n  if(data == '0') {\n    led_off();\n    os_printf(\"LED off\\n\");\n  } else if(data == '1') {\n    led_on();\n    os_printf(\"LED on\\n\");\n  }\n}\nvoid app_init()\n{\n    led_init();\n    btn_init(btn_pressed);\n    uart_setup(uart_received);\n}\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}  N\u1ed9i dung file  uart.c  kh\u00e1 d\u00e0i, c\u00f3 th\u1ec3 xem tr\u1ef1c ti\u1ebfp tr\u00ean github ho\u1eb7c trong th\u01b0 m\u1ee5c  esp-iot-uart  \u0111\u00e3 clone v\u1ec1",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/basic/uart/#ket-qua",
            "text": "Khi th\u1ef1c hi\u1ec7n \u1ea5n s\u1ed1 0 v\u00e0 s\u1ed1 1 tr\u00ean terminal s\u1ebd in ra d\u00f2ng t\u01b0\u01a1ng \u1ee9ng  LED on\nLED off\nLED on\nLED off",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/",
            "text": "S\u1eed d\u1ee5ng s\u1ef1 \u00e1n c\u00f3 Makefile ph\u1ee9c t\u1ea1p\n\n\nD\u1ef1 \u00e1n m\u1eabu\n\n\nC\u1ea5u tr\u00fac d\u1ef1 \u00e1n\n\n\nL\u01b0u \u00fd\n\n\nC\u1ea5u tr\u00fac d\u1ef1 \u00e1n sau khi build th\u00e0nh c\u00f4ng\n\n\n\n\n\n\nM\u00e3 ngu\u1ed3n\n\n\nL\u01b0u \u00fd\n\n\n\n\n\n\nK\u1ebft qu\u1ea3\n\n\n\n\n\n\n\n\n\n\nS\u1eed d\u1ee5ng s\u1ef1 \u00e1n c\u00f3 Makefile ph\u1ee9c t\u1ea1p\n#\n\n\n\u0110\u1ec3 bi\u00ean d\u1ecbch s\u1ef1 \u00e1n c\u00f3 nhi\u1ec1u file h\u01a1n n\u1eefa th\u00ec vi\u1ec7c s\u1eed d\u1ee5ng Makefile nh\u01b0 c\u00e1c v\u00ed d\u1ee5 tr\u00ean kh\u00e1 phi\u1ec1n ph\u1ee9c, ph\u1ea3i thay \u0111\u1ed5i nhi\u1ec1u ch\u1ed7. M\u1ee5c \u0111\u00edch c\u1ee7a Makefile \u0111\u01a1n gi\u1ea3n l\u00e0 gi\u00fap ch\u00fang ta hi\u1ec3u \u0111\u01b0\u1ee3c nguy\u00ean l\u00fd ho\u1ea1t \u0111\u1ed9ng c\u1ee7a compiler v\u00e0 c\u00e1ch th\u1ee9c bi\u00ean d\u1ecbch \u1ee9ng d\u1ee5ng v\u1edbi Nonos-sdk. \n\u0110\u1ec3 ti\u1ec7n l\u1ee3i, k\u1ec3 t\u1eeb m\u1ee5c n\u00e0y tr\u1edf \u0111i, ch\u00fang ta s\u1eed d\u1ee5ng Makefile trong d\u1ef1 \u00e1n m\u1eabu v\u00e0 ph\u00e2n b\u1ed5 d\u1ef1 \u00e1n theo c\u1ea5u tr\u00fac nh\u01b0 b\u00ean d\u01b0\u1edbi. D\u1ef1 \u00e1n \u0111\u00e3 vi\u1ebft s\u1eb5n Makefile t\u1ef1 \u0111\u1ed9ng t\u00ecm v\u00e0 bi\u00ean d\u1ecbch c\u00e1c file \n.c\n \n\n\nD\u1ef1 \u00e1n m\u1eabu\n#\n\n\n\n\nhttps://github.com/esp8266vn/esp8266-nonos-sdk-boilerplate\n\n\nHo\u1eb7c l\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github: \n\n\n\n\ngit clone https://github.com/esp8266vn/esp8266-nonos-sdk-boilerplate.git\n\n\n\n\nC\u1ea5u tr\u00fac d\u1ef1 \u00e1n\n#\n\n\nesp8266-nonos-sdk-boilerplate\n    |--- Makefile\n    |--- modules\n    |   |--- moduleA\n    |   |   |-- Makefile\n    |   |   |-- include\n    |   |   |   `-- modulea.h \n    |   |   `-- modulea.c\n    |--- include\n    |   `-- user_config.h\n    |--- user\n        |-- Makefile\n        |-- user_main.c \n        `-- rfinit.c\n\n\n\n\n\nTrong \u0111\u00f3: \n\n\n\n\nTh\u01b0 m\u1ee5c \nmodules\n ch\u1ee9a c\u00e1c module li\u00ean quan, m\u1ed7i module c\u00f3 \u0111\u1ecbnh ngh\u0129a prototype \u0111\u1eb7t trong th\u01b0 m\u1ee5c \ninclude\n\n\n\n\nL\u01b0u \u00fd\n#\n\n\n\n\n\u0110\u01b0\u1eddng d\u1eabn m\u1eb7c \u0111\u1ecbnh c\u1ee7a project trong makefile\n\n\n\n\n# base directory of the ESP8266 SDK package, absolute\nSDK_BASE    ?= /tools/esp8266/sdk/ESP8266_NONOS_SDK\n\n#Esptool.py path and port\nESPTOOL     ?= /tools/esp8266/esptool/esptool.py\n\n\n\n\n\n\n\nThay \u0111\u1ed5i c\u1ed5ng COM\n\n\n\n\nESPPORT     ?= /dev/tty.SLAB_USBtoUART\n\n\n\n\nV\u1edbi ubuntu/linux s\u1ebd c\u00f3 d\u1ea1ng \nESPPORT        ?= /dev/ttyUSB0\n\n- T\u1ed1c \u0111\u1ed9 baud n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 460800\n\n\nESPBAUD     ?= 460800\n\n\n\n\n\n\nTh\u1ef1c hi\u1ec7n build th\u1eed project esp8266-nonos-sdk-boilerplate, n\u1ebfu th\u00e0nh c\u00f4ng s\u1ebd xu\u1ea5t hi\u1ec7n th\u01b0 m\u1ee5c firmware ch\u1ee9a firmware \u0111\u1ec3 n\u1ea1p xu\u1ed1ng.\n\n\n\n\nC\u1ea5u tr\u00fac d\u1ef1 \u00e1n sau khi build th\u00e0nh c\u00f4ng\n#\n\n\nesp8266-nonos-sdk-boilerplate\n.\n\u251c\u2500\u2500 build\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.a\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.out\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 rfinit.o\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 user_main.o\n\u251c\u2500\u2500 firmware\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app0x00000.bin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 esp8266-nonos-app0x10000.bin\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user_config.h\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 SublimeAStyleFormatter.sublime-settings\n\u2514\u2500\u2500 user\n    \u251c\u2500\u2500 Makefile\n    \u251c\u2500\u2500 rfinit.c\n    \u2514\u2500\u2500 user_main.c\n\n5 directories, 13 files\n\n\n\n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\nesp8266-nonos-sdk-boilerplate/user_main.c\n#include \"osapi.h\"\n#include \"user_interface.h\"\n\nvoid ICACHE_FLASH_ATTR print_info()\n{\n  uart_div_modify(0, UART_CLK_FREQ / 115200);\n  os_printf(\"\\r\\n\\r\\n[INFO] BOOTUP...\\r\\n\");\n  os_printf(\"[INFO] SDK: %s\\r\\n\", system_get_sdk_version());\n  os_printf(\"[INFO] Chip ID: %08X\\r\\n\", system_get_chip_id());\n  os_printf(\"[INFO] Memory info:\\r\\n\");\n  system_print_meminfo();\n\n  os_printf(\"[INFO] -------------------------------------------\\n\");\n  os_printf(\"[INFO] Build time: %s\\n\", BUID_TIME);\n  os_printf(\"[INFO] -------------------------------------------\\n\");\n\n}\n\n\nvoid ICACHE_FLASH_ATTR app_init()\n{\n\n\n  print_info();\n\n\n  wifi_set_opmode_current(STATION_MODE);\n\n}\n\nvoid ICACHE_FLASH_ATTR user_init(void)\n{\n  system_init_done_cb(app_init);\n\n}\n\n\n\n\n\nCh\u01b0\u01a1ng tr\u00ecnh s\u1ebd in ra m\u00e0n h\u00ecnh m\u1ed9t s\u1ed1 th\u00f4ng tin v\u1ec1 SDK, ID chip v\u00e0 th\u00f4ng tin v\u1ec1 Memory, th\u1eddi gian build,..\n\n\nL\u01b0u \u00fd\n#\n\n\n\n\nT\u1ed1c \u0111\u1ed9 baud hi\u1ec3n th\u1ecb th\u00f4ng tin ra terminal l\u00e0 115200\n\n\n\n\nK\u1ebft qu\u1ea3\n#\n\n\nSau khi build v\u00e0 n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh xu\u1ed1ng s\u1ebd hi\u1ec7n th\u00f4ng b\u00e1o nh\u01b0 sau\n\n\n[INFO] BOOTUP...\n[INFO] SDK: 2.0.0(656edbf)\n[INFO] Chip ID: 00135C7D\n[INFO] Memory info:\ndata  : 0x3ffe8000 ~ 0x3ffe836c, len: 876\nrodata: 0x3ffe8370 ~ 0x3ffe8574, len: 516\nbss   : 0x3ffe8578 ~ 0x3ffee808, len: 25232\nheap  : 0x3ffee808 ~ 0x3fffc000, len: 55288\n[INFO] -------------------------------------------\n[INFO] Build time: 2016-Th10-31_00:02:21_ICT\n[INFO] -------------------------------------------\nbcn 0\ndel if1\nusl\nmode : sta(5c:cf:7f:13:5c:7d)\nadd if0",
            "title": "Makefile cho d\u1ef1 \u00e1n ph\u1ee9c t\u1ea1p"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#su-dung-su-an-co-makefile-phuc-tap",
            "text": "\u0110\u1ec3 bi\u00ean d\u1ecbch s\u1ef1 \u00e1n c\u00f3 nhi\u1ec1u file h\u01a1n n\u1eefa th\u00ec vi\u1ec7c s\u1eed d\u1ee5ng Makefile nh\u01b0 c\u00e1c v\u00ed d\u1ee5 tr\u00ean kh\u00e1 phi\u1ec1n ph\u1ee9c, ph\u1ea3i thay \u0111\u1ed5i nhi\u1ec1u ch\u1ed7. M\u1ee5c \u0111\u00edch c\u1ee7a Makefile \u0111\u01a1n gi\u1ea3n l\u00e0 gi\u00fap ch\u00fang ta hi\u1ec3u \u0111\u01b0\u1ee3c nguy\u00ean l\u00fd ho\u1ea1t \u0111\u1ed9ng c\u1ee7a compiler v\u00e0 c\u00e1ch th\u1ee9c bi\u00ean d\u1ecbch \u1ee9ng d\u1ee5ng v\u1edbi Nonos-sdk. \n\u0110\u1ec3 ti\u1ec7n l\u1ee3i, k\u1ec3 t\u1eeb m\u1ee5c n\u00e0y tr\u1edf \u0111i, ch\u00fang ta s\u1eed d\u1ee5ng Makefile trong d\u1ef1 \u00e1n m\u1eabu v\u00e0 ph\u00e2n b\u1ed5 d\u1ef1 \u00e1n theo c\u1ea5u tr\u00fac nh\u01b0 b\u00ean d\u01b0\u1edbi. D\u1ef1 \u00e1n \u0111\u00e3 vi\u1ebft s\u1eb5n Makefile t\u1ef1 \u0111\u1ed9ng t\u00ecm v\u00e0 bi\u00ean d\u1ecbch c\u00e1c file  .c",
            "title": "S\u1eed d\u1ee5ng s\u1ef1 \u00e1n c\u00f3 Makefile ph\u1ee9c t\u1ea1p"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#du-an-mau",
            "text": "https://github.com/esp8266vn/esp8266-nonos-sdk-boilerplate  Ho\u1eb7c l\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github:    git clone https://github.com/esp8266vn/esp8266-nonos-sdk-boilerplate.git",
            "title": "D\u1ef1 \u00e1n m\u1eabu"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#cau-truc-du-an",
            "text": "esp8266-nonos-sdk-boilerplate\n    |--- Makefile\n    |--- modules\n    |   |--- moduleA\n    |   |   |-- Makefile\n    |   |   |-- include\n    |   |   |   `-- modulea.h \n    |   |   `-- modulea.c\n    |--- include\n    |   `-- user_config.h\n    |--- user\n        |-- Makefile\n        |-- user_main.c \n        `-- rfinit.c  Trong \u0111\u00f3:    Th\u01b0 m\u1ee5c  modules  ch\u1ee9a c\u00e1c module li\u00ean quan, m\u1ed7i module c\u00f3 \u0111\u1ecbnh ngh\u0129a prototype \u0111\u1eb7t trong th\u01b0 m\u1ee5c  include",
            "title": "C\u1ea5u tr\u00fac d\u1ef1 \u00e1n"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#luu-y",
            "text": "\u0110\u01b0\u1eddng d\u1eabn m\u1eb7c \u0111\u1ecbnh c\u1ee7a project trong makefile   # base directory of the ESP8266 SDK package, absolute\nSDK_BASE    ?= /tools/esp8266/sdk/ESP8266_NONOS_SDK\n\n#Esptool.py path and port\nESPTOOL     ?= /tools/esp8266/esptool/esptool.py   Thay \u0111\u1ed5i c\u1ed5ng COM   ESPPORT     ?= /dev/tty.SLAB_USBtoUART  V\u1edbi ubuntu/linux s\u1ebd c\u00f3 d\u1ea1ng  ESPPORT        ?= /dev/ttyUSB0 \n- T\u1ed1c \u0111\u1ed9 baud n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 460800  ESPBAUD     ?= 460800   Th\u1ef1c hi\u1ec7n build th\u1eed project esp8266-nonos-sdk-boilerplate, n\u1ebfu th\u00e0nh c\u00f4ng s\u1ebd xu\u1ea5t hi\u1ec7n th\u01b0 m\u1ee5c firmware ch\u1ee9a firmware \u0111\u1ec3 n\u1ea1p xu\u1ed1ng.",
            "title": "L\u01b0u \u00fd"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#cau-truc-du-an-sau-khi-build-thanh-cong",
            "text": "esp8266-nonos-sdk-boilerplate\n.\n\u251c\u2500\u2500 build\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.a\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.out\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 rfinit.o\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 user_main.o\n\u251c\u2500\u2500 firmware\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app0x00000.bin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 esp8266-nonos-app0x10000.bin\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user_config.h\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 SublimeAStyleFormatter.sublime-settings\n\u2514\u2500\u2500 user\n    \u251c\u2500\u2500 Makefile\n    \u251c\u2500\u2500 rfinit.c\n    \u2514\u2500\u2500 user_main.c\n\n5 directories, 13 files",
            "title": "C\u1ea5u tr\u00fac d\u1ef1 \u00e1n sau khi build th\u00e0nh c\u00f4ng"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#ma-nguon",
            "text": "esp8266-nonos-sdk-boilerplate/user_main.c\n#include \"osapi.h\"\n#include \"user_interface.h\"\n\nvoid ICACHE_FLASH_ATTR print_info()\n{\n  uart_div_modify(0, UART_CLK_FREQ / 115200);\n  os_printf(\"\\r\\n\\r\\n[INFO] BOOTUP...\\r\\n\");\n  os_printf(\"[INFO] SDK: %s\\r\\n\", system_get_sdk_version());\n  os_printf(\"[INFO] Chip ID: %08X\\r\\n\", system_get_chip_id());\n  os_printf(\"[INFO] Memory info:\\r\\n\");\n  system_print_meminfo();\n\n  os_printf(\"[INFO] -------------------------------------------\\n\");\n  os_printf(\"[INFO] Build time: %s\\n\", BUID_TIME);\n  os_printf(\"[INFO] -------------------------------------------\\n\");\n\n}\n\n\nvoid ICACHE_FLASH_ATTR app_init()\n{\n\n\n  print_info();\n\n\n  wifi_set_opmode_current(STATION_MODE);\n\n}\n\nvoid ICACHE_FLASH_ATTR user_init(void)\n{\n  system_init_done_cb(app_init);\n\n}  Ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd in ra m\u00e0n h\u00ecnh m\u1ed9t s\u1ed1 th\u00f4ng tin v\u1ec1 SDK, ID chip v\u00e0 th\u00f4ng tin v\u1ec1 Memory, th\u1eddi gian build,..",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#luu-y_1",
            "text": "T\u1ed1c \u0111\u1ed9 baud hi\u1ec3n th\u1ecb th\u00f4ng tin ra terminal l\u00e0 115200",
            "title": "L\u01b0u \u00fd"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#ket-qua",
            "text": "Sau khi build v\u00e0 n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh xu\u1ed1ng s\u1ebd hi\u1ec7n th\u00f4ng b\u00e1o nh\u01b0 sau  [INFO] BOOTUP...\n[INFO] SDK: 2.0.0(656edbf)\n[INFO] Chip ID: 00135C7D\n[INFO] Memory info:\ndata  : 0x3ffe8000 ~ 0x3ffe836c, len: 876\nrodata: 0x3ffe8370 ~ 0x3ffe8574, len: 516\nbss   : 0x3ffe8578 ~ 0x3ffee808, len: 25232\nheap  : 0x3ffee808 ~ 0x3fffc000, len: 55288\n[INFO] -------------------------------------------\n[INFO] Build time: 2016-Th10-31_00:02:21_ICT\n[INFO] -------------------------------------------\nbcn 0\ndel if1\nusl\nmode : sta(5c:cf:7f:13:5c:7d)\nadd if0",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/basic/task/",
            "text": "Task\n#",
            "title": "Task"
        },
        {
            "location": "/nonos-sdk/basic/task/#task",
            "text": "",
            "title": "Task"
        },
        {
            "location": "/nonos-sdk/basic/wifi/",
            "text": "K\u1ebft n\u1ed1i ESP8266 v\u1edbi router Wifi\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n\n\nS\u01a1 \u0111\u1ed3 file\n\n\nM\u00e3 ngu\u1ed3n\n\n\nK\u1ebft qu\u1ea3\n\n\nG\u1ee3i \u00fd\n\n\nReferences\n\n\n\n\n\n\n\n\n\n\nK\u1ebft n\u1ed1i ESP8266 v\u1edbi router Wifi\n#\n\n\nT\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i \nBi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n, to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file, \nMakefile, user_config.h, rf_init.c\n gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file \nmain.c\n.\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n#\n\n\ngit clone https://github.com/esp8266vn/eps-iot-wifi.git\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\nesp-iot-led-blink\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h\n\n\n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\n\n#include \"osapi.h\"\n#include \"user_interface.h\"\n#define PASSWORD    \"yourpassword\"\n#define SSID        \"yourssid\"\nLOCAL os_timer_t test_timer;\n\n/******************************************************************************\n    * FunctionName : user_esp_platform_check_ip\n    * Description    : check whether get ip addr or not\n    * Parameters         : none\n    * Returns        : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_esp_platform_check_ip(void)\n{\n    struct ip_info ipconfig;\n\n    //disarm timer first\n    os_timer_disarm(&test_timer);\n\n    //get ip info of ESP8266 station\n    wifi_get_ip_info(STATION_IF, &ipconfig);\n\n    if (wifi_station_get_connect_status() == STATION_GOT_IP && ipconfig.ip.addr != 0) {\n\n            os_printf(\"got ip !!! \\r\\n\");\n\n    } else {\n\n        if ((wifi_station_get_connect_status() == STATION_WRONG_PASSWORD ||\n                wifi_station_get_connect_status() == STATION_NO_AP_FOUND ||\n                wifi_station_get_connect_status() == STATION_CONNECT_FAIL)) {\n\n            os_printf(\"connect fail !!! \\r\\n\");\n\n        } else {\n\n            //re-arm timer to check ip\n            os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n            os_timer_arm(&test_timer, 100, 0);\n        }\n    }\n}\n\n\n/******************************************************************************\n    * FunctionName : user_set_station_config\n    * Description    : set the router info which ESP8266 station will connect to\n    * Parameters         : none\n    * Returns        : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_set_station_config(void)\n{\n    // Wifi configuration\n    char ssid[32] = SSID;\n    char password[64] = PASSWORD;\n    struct station_config stationConf;\n\n    os_memset(stationConf.ssid, 0, 32);\n    os_memset(stationConf.password, 0, 64);\n    //need not mac address\n    stationConf.bssid_set = 0;\n\n    //Set ap settings\n    os_memcpy(&stationConf.ssid, ssid, 32);\n    os_memcpy(&stationConf.password, password, 64);\n    wifi_station_set_config(&stationConf);\n\n    //set a timer to check whether got ip from router succeed or not.\n    os_timer_disarm(&test_timer);\n    os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n    os_timer_arm(&test_timer, 100, 0);\n}\n\n/******************************************************************************\n    * FunctionName : user_init\n    * Description    : entry of user application, init user function here\n    * Parameters         : none\n    * Returns        : none\n*******************************************************************************/\nvoid user_init(void)\n{\n    uart_div_modify(0, UART_CLK_FREQ / 115200);\n    os_printf(\"SDK version:%s\\n\", system_get_sdk_version());\n    //Set softAP + station mode\n    wifi_set_opmode(STATION_MODE);\n    // ESP8266 connect to router.\n    user_set_station_config();\n}\n\n\n\n\n\nK\u1ebft qu\u1ea3\n#\n\n\nSau khi n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh th\u00e0nh c\u00f4ng\n\n\nS\u1eed d\u1ee5ng Terminal quan s\u00e1t s\u1ebd th\u1ea5y\n\n\nconnected with yourssid, channel 1\ndhcp client start...\nip:192.168.1.46,mask:255.255.255.0,gw:192.168.1.1\ngot ip !!!\n\n\n\n\nG\u1ee3i \u00fd\n#\n\n\n\u0110\u1ec3 truy c\u1eadp \u0111\u01b0\u1ee3c v\u00e0o router b\u1ea1n c\u1ea7n ph\u1ea3i s\u1eeda c\u00e1c define PASSWORD v\u00e0 SSID cho \u0111\u00fang v\u1edbi router m\u00e0 b\u1ea1n mu\u1ed1n truy c\u1eadp\n\n\n#define PASSWORD    \"yourpassword\"\n#define SSID        \"yourssid\"\n\n\n\n\nSau khi k\u1ebft n\u1ed1i gi\u00e1 tr\u1ecb c\u1ee7a SSID v\u00e0 PASSWORD s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u v\u00e0o flash v\u00e0 \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 n\u1ebfu l\u1ea7n sau  b\u1ea1n kh\u00f4ng thay \u0111\u1ed5i gi\u00e1 tr\u1ecb th\u00ec nh\u1eefng gi\u00e1 tr\u1ecb trong flash s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 truy c\u1eadp v\u00e0o router. \u0110i\u1ec1u n\u00e0y \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1eb1ng \u0111o\u1ea1n code sau.\n\n\n    // Wifi configuration\n    char ssid[32] = SSID;\n    char password[64] = PASSWORD;\n    struct station_config stationConf;\n\n    os_memset(stationConf.ssid, 0, 32);\n    os_memset(stationConf.password, 0, 64);\n    //need not mac address\n    stationConf.bssid_set = 0;\n\n    //Set ap settings\n    os_memcpy(&stationConf.ssid, ssid, 32);\n    os_memcpy(&stationConf.password, password, 64);\n    wifi_station_set_config(&stationConf);\n\n\n\n\nN\u1ebfu \u0111\u1ec3 \u00fd th\u00ec c\u00f3 th\u1ec3 th\u1ea5y trong code c\u00f3 1 \u0111o\u1ea1n ki\u1ec3m tra xem module \u0111\u00e3 k\u1ebft n\u1ed1i v\u1edbi router th\u00e0nh c\u00f4ng hay ch\u01b0a\n\n\n    os_timer_disarm(&test_timer);\n    os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n    os_timer_arm(&test_timer, 100, 0);\n\n\n\n\n\u0110o\u1ea1n n\u00e0y c\u00f3 ngh\u0129a l\u00e0 set cho software timer \u0111\u1ee3i sau 100 ms th\u00ec s\u1ebd g\u1ecdi h\u00e0m call back user_esp_platform_check_ip\n\u0111\u1ec3 check xem esp8266 \u0111\u00e3 l\u1ea5y \u0111\u01b0\u1ee3c ip hay ch\u01b0a.\nCh\u00fa \u00fd l\u00e0 h\u00e0m\n\n\n    os_timer_arm(&test_timer, 100, 0);\n\n\n\n\nC\u00f3 tham s\u1ed1 th\u1ee9 3 l\u00e0 0 c\u00f3 ngh\u0129a l\u00e0 timer ch\u1ec9 th\u1ef1c hi\u1ec7n \u0111\u1ebfm 100 ms 1 l\u1ea7n n\u1ebfu tham s\u1ed1 n\u00e0y \u0111\u01b0\u1ee3c set th\u00e0nh 1 th\u00ec c\u1ee9 sau 100 ms h\u00e0m user_esp_platform_check_ip() s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n.\nB\u1ea1n c\u00f3 th\u1ec3 xem th\u00eam v\u1ec1 c\u00e1ch s\u1eed d\u1ee5ng timer trong t\u00e0i li\u1ec7u ESP8266 Non-OS SDK API Reference\n\n\n\n\nC\u1ea9n th\u1eadn\n\n\nNh\u1eefng h\u00e0m sau \u0111\u00e2y khi c\u1ea5u h\u00ecnh s\u1ebd ghi d\u1eef li\u1ec7u v\u00e0o v\u00f9ng nh\u1edb l\u01b0u tr\u1eef Flash, vi\u1ec7c ghi c\u1ea5u h\u00ecnh nh\u01b0 v\u1eady qu\u00e1 th\u01b0\u1eddng xuy\u00ean s\u1ebd g\u00e2y h\u1ecfng b\u1ed9 nh\u1edb: \n\n- \nwifi_set_opmode\n\n- \nwifi_station_set_config\n\n- \nwifi_station_set_auto_connect\n\nSDK cung c\u1ea5p cho ta c\u00e1c h\u00e0m t\u01b0\u01a1ng \u0111\u1ec3 ki\u1ec3m tra xem c\u1ea5u h\u00ecnh \u0111\u00f3 \u0111\u00e3 t\u1ed3n t\u1ea1i ch\u01b0a v\u00e0 th\u1ef1c thi vi\u1ec7c ghi n\u1ebfu ch\u01b0a:\n\n- \nwifi_get_opmode\n\n- \nwifi_station_get_config\n\n- \nwifi_station_get_auto_connect\n\nV\u00e0 c\u00e1c h\u00e0m ch\u1ec9 ghi d\u1eef li\u1ec7u l\u00ean RAM v\u00e0 th\u1ef1c thi \n- \nwifi_set_opmode_current\n\n- \nwifi_station_set_config_current\n\nC\u00f3 th\u1ec3 xem th\u00eam t\u1ea1i \n$SDK/include/user_interface.h\n\n\n\n\nReferences\n#\n\n\n\n\nhttps://espressif.com/sites/default/files/documentation/2c-esp8266_non_os_sdk_api_reference_en.pdf\n\n\nhttps://espressif.com/en/products/hardware/esp8266ex/resources",
            "title": "Wifi"
        },
        {
            "location": "/nonos-sdk/basic/wifi/#ket-noi-esp8266-voi-router-wifi",
            "text": "T\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i  Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean , to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file,  Makefile, user_config.h, rf_init.c  gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file  main.c .",
            "title": "K\u1ebft n\u1ed1i ESP8266 v\u1edbi router Wifi"
        },
        {
            "location": "/nonos-sdk/basic/wifi/#lay-du-an-ve-tu-github",
            "text": "git clone https://github.com/esp8266vn/eps-iot-wifi.git",
            "title": "L\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github"
        },
        {
            "location": "/nonos-sdk/basic/wifi/#so-o-file",
            "text": "esp-iot-led-blink\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/basic/wifi/#ma-nguon",
            "text": "#include \"osapi.h\"\n#include \"user_interface.h\"\n#define PASSWORD    \"yourpassword\"\n#define SSID        \"yourssid\"\nLOCAL os_timer_t test_timer;\n\n/******************************************************************************\n    * FunctionName : user_esp_platform_check_ip\n    * Description    : check whether get ip addr or not\n    * Parameters         : none\n    * Returns        : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_esp_platform_check_ip(void)\n{\n    struct ip_info ipconfig;\n\n    //disarm timer first\n    os_timer_disarm(&test_timer);\n\n    //get ip info of ESP8266 station\n    wifi_get_ip_info(STATION_IF, &ipconfig);\n\n    if (wifi_station_get_connect_status() == STATION_GOT_IP && ipconfig.ip.addr != 0) {\n\n            os_printf(\"got ip !!! \\r\\n\");\n\n    } else {\n\n        if ((wifi_station_get_connect_status() == STATION_WRONG_PASSWORD ||\n                wifi_station_get_connect_status() == STATION_NO_AP_FOUND ||\n                wifi_station_get_connect_status() == STATION_CONNECT_FAIL)) {\n\n            os_printf(\"connect fail !!! \\r\\n\");\n\n        } else {\n\n            //re-arm timer to check ip\n            os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n            os_timer_arm(&test_timer, 100, 0);\n        }\n    }\n}\n\n\n/******************************************************************************\n    * FunctionName : user_set_station_config\n    * Description    : set the router info which ESP8266 station will connect to\n    * Parameters         : none\n    * Returns        : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_set_station_config(void)\n{\n    // Wifi configuration\n    char ssid[32] = SSID;\n    char password[64] = PASSWORD;\n    struct station_config stationConf;\n\n    os_memset(stationConf.ssid, 0, 32);\n    os_memset(stationConf.password, 0, 64);\n    //need not mac address\n    stationConf.bssid_set = 0;\n\n    //Set ap settings\n    os_memcpy(&stationConf.ssid, ssid, 32);\n    os_memcpy(&stationConf.password, password, 64);\n    wifi_station_set_config(&stationConf);\n\n    //set a timer to check whether got ip from router succeed or not.\n    os_timer_disarm(&test_timer);\n    os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n    os_timer_arm(&test_timer, 100, 0);\n}\n\n/******************************************************************************\n    * FunctionName : user_init\n    * Description    : entry of user application, init user function here\n    * Parameters         : none\n    * Returns        : none\n*******************************************************************************/\nvoid user_init(void)\n{\n    uart_div_modify(0, UART_CLK_FREQ / 115200);\n    os_printf(\"SDK version:%s\\n\", system_get_sdk_version());\n    //Set softAP + station mode\n    wifi_set_opmode(STATION_MODE);\n    // ESP8266 connect to router.\n    user_set_station_config();\n}",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/basic/wifi/#ket-qua",
            "text": "Sau khi n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh th\u00e0nh c\u00f4ng  S\u1eed d\u1ee5ng Terminal quan s\u00e1t s\u1ebd th\u1ea5y  connected with yourssid, channel 1\ndhcp client start...\nip:192.168.1.46,mask:255.255.255.0,gw:192.168.1.1\ngot ip !!!",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/basic/wifi/#goi-y",
            "text": "\u0110\u1ec3 truy c\u1eadp \u0111\u01b0\u1ee3c v\u00e0o router b\u1ea1n c\u1ea7n ph\u1ea3i s\u1eeda c\u00e1c define PASSWORD v\u00e0 SSID cho \u0111\u00fang v\u1edbi router m\u00e0 b\u1ea1n mu\u1ed1n truy c\u1eadp  #define PASSWORD    \"yourpassword\"\n#define SSID        \"yourssid\"  Sau khi k\u1ebft n\u1ed1i gi\u00e1 tr\u1ecb c\u1ee7a SSID v\u00e0 PASSWORD s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u v\u00e0o flash v\u00e0 \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 n\u1ebfu l\u1ea7n sau  b\u1ea1n kh\u00f4ng thay \u0111\u1ed5i gi\u00e1 tr\u1ecb th\u00ec nh\u1eefng gi\u00e1 tr\u1ecb trong flash s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 truy c\u1eadp v\u00e0o router. \u0110i\u1ec1u n\u00e0y \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1eb1ng \u0111o\u1ea1n code sau.      // Wifi configuration\n    char ssid[32] = SSID;\n    char password[64] = PASSWORD;\n    struct station_config stationConf;\n\n    os_memset(stationConf.ssid, 0, 32);\n    os_memset(stationConf.password, 0, 64);\n    //need not mac address\n    stationConf.bssid_set = 0;\n\n    //Set ap settings\n    os_memcpy(&stationConf.ssid, ssid, 32);\n    os_memcpy(&stationConf.password, password, 64);\n    wifi_station_set_config(&stationConf);  N\u1ebfu \u0111\u1ec3 \u00fd th\u00ec c\u00f3 th\u1ec3 th\u1ea5y trong code c\u00f3 1 \u0111o\u1ea1n ki\u1ec3m tra xem module \u0111\u00e3 k\u1ebft n\u1ed1i v\u1edbi router th\u00e0nh c\u00f4ng hay ch\u01b0a      os_timer_disarm(&test_timer);\n    os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n    os_timer_arm(&test_timer, 100, 0);  \u0110o\u1ea1n n\u00e0y c\u00f3 ngh\u0129a l\u00e0 set cho software timer \u0111\u1ee3i sau 100 ms th\u00ec s\u1ebd g\u1ecdi h\u00e0m call back user_esp_platform_check_ip\n\u0111\u1ec3 check xem esp8266 \u0111\u00e3 l\u1ea5y \u0111\u01b0\u1ee3c ip hay ch\u01b0a.\nCh\u00fa \u00fd l\u00e0 h\u00e0m      os_timer_arm(&test_timer, 100, 0);  C\u00f3 tham s\u1ed1 th\u1ee9 3 l\u00e0 0 c\u00f3 ngh\u0129a l\u00e0 timer ch\u1ec9 th\u1ef1c hi\u1ec7n \u0111\u1ebfm 100 ms 1 l\u1ea7n n\u1ebfu tham s\u1ed1 n\u00e0y \u0111\u01b0\u1ee3c set th\u00e0nh 1 th\u00ec c\u1ee9 sau 100 ms h\u00e0m user_esp_platform_check_ip() s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n.\nB\u1ea1n c\u00f3 th\u1ec3 xem th\u00eam v\u1ec1 c\u00e1ch s\u1eed d\u1ee5ng timer trong t\u00e0i li\u1ec7u ESP8266 Non-OS SDK API Reference   C\u1ea9n th\u1eadn  Nh\u1eefng h\u00e0m sau \u0111\u00e2y khi c\u1ea5u h\u00ecnh s\u1ebd ghi d\u1eef li\u1ec7u v\u00e0o v\u00f9ng nh\u1edb l\u01b0u tr\u1eef Flash, vi\u1ec7c ghi c\u1ea5u h\u00ecnh nh\u01b0 v\u1eady qu\u00e1 th\u01b0\u1eddng xuy\u00ean s\u1ebd g\u00e2y h\u1ecfng b\u1ed9 nh\u1edb:  \n-  wifi_set_opmode \n-  wifi_station_set_config \n-  wifi_station_set_auto_connect \nSDK cung c\u1ea5p cho ta c\u00e1c h\u00e0m t\u01b0\u01a1ng \u0111\u1ec3 ki\u1ec3m tra xem c\u1ea5u h\u00ecnh \u0111\u00f3 \u0111\u00e3 t\u1ed3n t\u1ea1i ch\u01b0a v\u00e0 th\u1ef1c thi vi\u1ec7c ghi n\u1ebfu ch\u01b0a: \n-  wifi_get_opmode \n-  wifi_station_get_config \n-  wifi_station_get_auto_connect \nV\u00e0 c\u00e1c h\u00e0m ch\u1ec9 ghi d\u1eef li\u1ec7u l\u00ean RAM v\u00e0 th\u1ef1c thi \n-  wifi_set_opmode_current \n-  wifi_station_set_config_current \nC\u00f3 th\u1ec3 xem th\u00eam t\u1ea1i  $SDK/include/user_interface.h",
            "title": "G\u1ee3i \u00fd"
        },
        {
            "location": "/nonos-sdk/basic/wifi/#references",
            "text": "https://espressif.com/sites/default/files/documentation/2c-esp8266_non_os_sdk_api_reference_en.pdf  https://espressif.com/en/products/hardware/esp8266ex/resources",
            "title": "References"
        },
        {
            "location": "/nonos-sdk/basic/espconn/",
            "text": "",
            "title": "ESPCONN"
        },
        {
            "location": "/nonos-sdk/basic/mdns/",
            "text": "",
            "title": "MDNS"
        },
        {
            "location": "/nonos-sdk/basic/ntp/",
            "text": "",
            "title": "NTP"
        },
        {
            "location": "/nonos-sdk/basic/save-to-flash/",
            "text": "",
            "title": "L\u01b0u d\u1eef li\u1ec7u v\u00e0o Flash"
        },
        {
            "location": "/nonos-sdk/smartconfig/smartconfig/",
            "text": "ESP8266 Smart config\n#\n\n\nSmartconfig l\u00e0 m\u1ed9t kh\u00e1i ni\u1ec7m \u0111\u01b0\u1ee3c nh\u1eafc \u0111\u1ebfn khi khi mu\u1ed1n c\u1ea5u h\u00ecnh th\u00f4ng tin cho thi\u1ebft b\u1ecb WiFi k\u1ebft n\u1ed1i nhanh ch\u00f3ng \u0111\u1ebfn Internet nh\u1ea5t t\u1eeb ng\u01b0\u1eddi d\u00f9ng b\u1eb1ng ch\u00ednh thi\u1ebft b\u1ecb (\u0111i\u1ec7n tho\u1ea1i) c\u1ee7a h\u1ecd.\n\n\n\n\n\u0110\u1ec3 hi\u1ec3u m\u1ed9t c\u00e1ch \u0111\u01a1n gi\u1ea3n th\u00ec Smart config ngh\u0129a l\u00e0 ch\u00fang ta g\u1eedi th\u00f4ng tin m\u1ea1ng wifi (bao g\u1ed3m t\u00ean wifi v\u00e0 password wifi) cho ESP th\u00f4ng qua smartphone thay cho c\u00e1ch th\u00f4ng th\u01b0\u1eddng l\u00e0 ph\u1ea3i khai b\u00e1o th\u00f4ng tin n\u00e0y trong ch\u01b0\u01a1ng tr\u00ecnh v\u00e0 n\u1ea1p firmware xu\u1ed1ng.",
            "title": "ESP8266 Smartconfig"
        },
        {
            "location": "/nonos-sdk/smartconfig/smartconfig/#esp8266-smart-config",
            "text": "Smartconfig l\u00e0 m\u1ed9t kh\u00e1i ni\u1ec7m \u0111\u01b0\u1ee3c nh\u1eafc \u0111\u1ebfn khi khi mu\u1ed1n c\u1ea5u h\u00ecnh th\u00f4ng tin cho thi\u1ebft b\u1ecb WiFi k\u1ebft n\u1ed1i nhanh ch\u00f3ng \u0111\u1ebfn Internet nh\u1ea5t t\u1eeb ng\u01b0\u1eddi d\u00f9ng b\u1eb1ng ch\u00ednh thi\u1ebft b\u1ecb (\u0111i\u1ec7n tho\u1ea1i) c\u1ee7a h\u1ecd.   \u0110\u1ec3 hi\u1ec3u m\u1ed9t c\u00e1ch \u0111\u01a1n gi\u1ea3n th\u00ec Smart config ngh\u0129a l\u00e0 ch\u00fang ta g\u1eedi th\u00f4ng tin m\u1ea1ng wifi (bao g\u1ed3m t\u00ean wifi v\u00e0 password wifi) cho ESP th\u00f4ng qua smartphone thay cho c\u00e1ch th\u00f4ng th\u01b0\u1eddng l\u00e0 ph\u1ea3i khai b\u00e1o th\u00f4ng tin n\u00e0y trong ch\u01b0\u01a1ng tr\u00ecnh v\u00e0 n\u1ea1p firmware xu\u1ed1ng.",
            "title": "ESP8266 Smart config"
        },
        {
            "location": "/nonos-sdk/smartconfig/why-smartconfig/",
            "text": "T\u1ea1i sao c\u1ea7n Smartconfig\n#\n\n\n\n\nD\u1ec5 d\u00e0ng c\u1ea5u h\u00ecnh wifi cho ESP8266 th\u00f4ng qua smartphone.\n\n\nKh\u00f4ng c\u1ea7n ph\u1ea3i n\u1ea1p l\u1ea1i code \u0111\u1ec3 c\u1ea5u h\u00ecnh\n\n\nC\u00f3 th\u1ec3 d\u00f9ng Smartconfig \u0111\u1ec3 c\u1ea5u h\u00ecnh nhi\u1ec1u thi\u1ebft b\u1ecb m\u1ed9t l\u00fac",
            "title": "T\u1ea1i sao c\u1ea7n Smartconfig"
        },
        {
            "location": "/nonos-sdk/smartconfig/why-smartconfig/#tai-sao-can-smartconfig",
            "text": "D\u1ec5 d\u00e0ng c\u1ea5u h\u00ecnh wifi cho ESP8266 th\u00f4ng qua smartphone.  Kh\u00f4ng c\u1ea7n ph\u1ea3i n\u1ea1p l\u1ea1i code \u0111\u1ec3 c\u1ea5u h\u00ecnh  C\u00f3 th\u1ec3 d\u00f9ng Smartconfig \u0111\u1ec3 c\u1ea5u h\u00ecnh nhi\u1ec1u thi\u1ebft b\u1ecb m\u1ed9t l\u00fac",
            "title": "T\u1ea1i sao c\u1ea7n Smartconfig"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/",
            "text": "T\u1ed5ng quan\n#\n\n\nESP Touch l\u00e0 protocol \u0111\u01b0\u1ee3c d\u00f9ng trong Smart Config \u0111\u1ec3 ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i t\u1edbi c\u00e1c phi\u00ean b\u1ea3n modul ESP8266 th\u00f4ng qua c\u1ea5u h\u00ecnh \u0111\u01a1n gi\u1ea3n tr\u00ean Smartphone.\nBan \u0111\u1ea7u kh\u00f4ng th\u1ec3 k\u1ebft n\u1ed1i v\u1edbi ESP8266, nh\u01b0ng th\u00f4ng qua giao th\u1ee9c ESP-TOUCH th\u00ec Smartphone s\u1ebd g\u1eedi g\u00f3i UDP t\u1edbi Access Point(AP) \u1edf \u0111\u00e2y l\u00e0 ESP8266, m\u00e3 h\u00f3a SSID v\u00e0 m\u1eadt kh\u1ea9u th\u00e0nh tr\u01b0\u1eddng Length trong g\u00f3i UDP, \u0111\u1ec3 ESP8266 c\u00f3 th\u1ec3 hi\u1ec3u v\u00e0 gi\u1ea3i m\u00e3 \u0111\u01b0\u1ee3c th\u00f4ng tin.\n\n\nC\u1ea5u tr\u00fac g\u00f3i tin s\u1ebd c\u00f3 d\u1ea1ng\n\n\n\n\n\n\n\n\n6\n\n\n6\n\n\n2\n\n\n3\n\n\n5\n\n\nVariable\n\n\n4\n\n\n\n\n\n\n\n\n\n\nDA\n\n\nSA\n\n\nLength\n\n\nLLC\n\n\nSNAP\n\n\nDATA\n\n\nFCS\n\n\n\n\n\n\n\n\nLength bao g\u1ed3m SSID v\u00e0 th\u00f4ng tin key cho ESP8266\n\n\nCh\u01b0\u01a1ng tr\u00ecnh\n#\n\n\nT\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i \nMakefile cho c\u00e1c d\u1ef1 \u00e1n ph\u1ee9c t\u1ea1p\n, to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file, \nMakefile, user_config.h, rf_init.c\n gi\u1eef nguy\u00ean, thay \u0111\u1ed5i n\u1ed9i dung file \nmain.c\n v\u00e0 th\u00eam m\u1ed9t s\u1ed1 th\u01b0 m\u1ee5c c\u1ea7n thi\u1ebft. \n\n\n\n\nN\u1ed9i dung\n\n\nSmartconfig cho ESP8266 th\u00f4ng qua Smartphone\n\n\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n#\n\n\nhttps://github.com/esp8266vn/esp8266-nonos-smart-config.git\ncd sp8266-nonos-smart-config && make\nmake flash\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\n\u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 fota-flow.png\n\u251c\u2500\u2500 build\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 driver\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 key.o\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 led.o\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 uart.o\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.a\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.out\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 rfinit.o\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 sc.o\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 user_main.o\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 wps.o\n\u251c\u2500\u2500 driver\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 key.c\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 led.c\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Makefile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 uart.c\n\u251c\u2500\u2500 firmware\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app0x00000.bin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 esp8266-nonos-app0x10000.bin\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 driver\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 key.h\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 led.h\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 uart.h\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 uart_register.h\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user_config.h\n\u251c\u2500\u2500 ld\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 eagle.rom.addr.v6.ld\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 with-espboot-flash-at-0x2000-size-1M.ld\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 without-bootloader.ld\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 SublimeAStyleFormatter.sublime-settings\n\u2514\u2500\u2500 user\n    \u251c\u2500\u2500 Makefile\n    \u251c\u2500\u2500 rfinit.c\n    \u251c\u2500\u2500 sc.c\n    \u251c\u2500\u2500 sc.h\n    \u251c\u2500\u2500 user_main.c\n    \u251c\u2500\u2500 wps.c\n    \u2514\u2500\u2500 wps.h\n\n10 directories, 41 files\n\n\n\n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\nCh\u01b0\u01a1ng tr\u00ecnh ch\u00ednh s\u1ebd g\u1ecdi ph\u1ea7n c\u1ea5u h\u00ecnh cho Smartconfig sau khi n\u00fat nh\u1ea5n FLASH tr\u00ean NodeMCU \u0111\u01b0\u1ee3c nh\u1ea5n th\u00f4ng qua h\u00e0m \nsc_start\n (n\u1eb1m \u1edf 2 file l\u00e0 \nsc.c\n v\u00e0 \nsc.h\n)\n\n\n#include \"osapi.h\"\n#include \"user_interface.h\"\n\n#include \"driver/key.h\"\n#include \"driver/uart.h\"\n#include \"driver/led.h\"\n#include \"wps.h\"\n#include \"sc.h\"\n\n#define KEY_NUM        1\n\n#define KEY_IO_MUX     PERIPHS_IO_MUX_MTCK_U\n#define KEY_IO_NUM     0\n#define KEY_IO_FUNC    FUNC_GPIO0\n\n\nLOCAL struct keys_param keys;\nLOCAL struct single_key_param *single_key;\n\nLOCAL void ICACHE_FLASH_ATTR\nshort_press(void)\n{\n  INFO(\"[KEY] Short press, run smartconfig\\r\\n\");\n  led_blink(1, 1);\n  sc_start();\n}\n\nLOCAL void ICACHE_FLASH_ATTR\nlong_press(void)\n{\n  INFO(\"[KEY] Long press, run wps\\r\\n\");\n  led_blink(5, 5);\n}\n\n\nvoid ICACHE_FLASH_ATTR print_info()\n{\n  INFO(\"\\r\\n\\r\\n[INFO] BOOTUP...\\r\\n\");\n  INFO(\"[INFO] SDK: %s\\r\\n\", system_get_sdk_version());\n  INFO(\"[INFO] Chip ID: %08X\\r\\n\", system_get_chip_id());\n  INFO(\"[INFO] Memory info:\\r\\n\");\n  system_print_meminfo();\n\n  INFO(\"[INFO] -------------------------------------------\\n\");\n  INFO(\"[INFO] Build time: %s\\n\", BUID_TIME);\n  INFO(\"[INFO] -------------------------------------------\\n\");\n\n}\n\n\nvoid ICACHE_FLASH_ATTR app_init()\n{\n  // const fota_info fota_conenction = {\n  //   .host = \"test.vidieukhien.net\",\n  //   .port = \"80\",\n  //   .security = 0,\n  //   .device_id = \"device_id\",\n  //   .access_key = \"access_key\",\n  //   .version = \"version\",\n  //   .path = \"/fota.json?dev={device_id|%X}&token={access_key|%s}&version={version:%s}\"\n  // };\n\n  uart_init(BIT_RATE_115200, BIT_RATE_115200);\n\n  print_info();\n\n  single_key = key_init_single(KEY_IO_NUM, KEY_IO_MUX, KEY_IO_FUNC,\n                                        long_press, short_press);\n\n  keys.key_num = KEY_NUM;\n  keys.single_key = &single_key;\n\n  key_init(&keys);\n  led_init();\n  led_blink(10, 10); //1 second on, 1 second off\n\n  wifi_set_opmode_current(STATION_MODE);\n\n}\n\nvoid ICACHE_FLASH_ATTR user_init(void)\n{\n  system_init_done_cb(app_init);\n\n}\n\n\n\n\n\nC\u00e1c h\u00e0m/ c\u1ea5u tr\u00fac d\u00f9ng trong SmartConfig\n#\n\n\nH\u00e0m smartconfig_start\n#\n\n\nH\u00e0m d\u00f9ng \u0111\u1ec3 c\u1ea5u h\u00ecnh thi\u1ebft b\u1ecb v\u00e0 k\u1ebft n\u1ed1i n\u00f3 t\u1edbi AP\n\n\n\n\nL\u01b0u \u00fd\n\n\n\n\nH\u00e0m ch\u1ec9 \u0111\u01b0\u1ee3c g\u1ecdi trong mode Station\n\n\nG\u1ecdi h\u00e0m \nsmartconfig_stop\n \u0111\u1ec3 k\u1ebft th\u00fac qu\u00e1 tr\u00ecnh SmartConfig tr\u01b0\u1edbc khi g\u1ecdi c\u00e1c h\u00e0m kh\u00e1c\n\n\n\n\n\n\n\u0110\u1ecbnh ngh\u0129a\n\n\nbool smartconfig_start(sc_callback_t cb, uint8 log)\n\n\n\n\nTh\u00f4ng s\u1ed1\n\n\nGi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1\n\n\n\n\n\n\n\n\nTRUE\n\n\nTh\u00e0nh c\u00f4ng\n\n\n\n\n\n\n\n\n\n\nFALSE\n\n\nTh\u1ea5t b\u1ea1i\n\n\n\n\n\n\n\n\nH\u00e0m smartconfig_stop\n#\n\n\nH\u00e0m d\u00f9ng \u0111\u1ec3 d\u1eebng qu\u00e1 tr\u00ecnh Smart Config v\u00e0 gi\u1ea3i ph\u00f3ng b\u1ed9 nh\u1edb \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1edfi h\u00e0m  \nsmartconfig_start\n\n\n\n\nL\u01b0u \u00fd\n\n\nSau khi k\u1ebft n\u1ed1i \u0111\u01b0\u1ee3c thi\u1ebft l\u1eadp th\u00ec ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 g\u1ecdi h\u00e0m gi\u1ea3i ph\u00f3ng b\u1ed9 nh\u1edb\n\n\n\n\n\u0110\u1ecbnh ngh\u0129a\n\n\nbool smartconfig_set_type(sc_type type)\n\n\n\n\nTh\u00f4ng s\u1ed1 \n\n\ntypedef enum {\n SC_TYPE_ESPTOUCH = 0,\n SC_TYPE_AIRKISS,\n SC_TYPE_ESPTOUCH_AIRKISS,\n } sc_type; \n\n\n\n\nGi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1\n\n\n\n\n\n\n\n\nTRUE\n\n\nTh\u00e0nh c\u00f4ng\n\n\n\n\n\n\n\n\n\n\nFALSE\n\n\nTh\u1ea5t b\u1ea1i\n\n\n\n\n\n\n\n\nH\u00e0m smartconfig_set_type\n#\n\n\nH\u00e0m d\u00f9ng \u0111\u1ec3 thi\u1ebft l\u1eadp ki\u1ec3u protocol c\u1ee7a \nsmartconfig_start\n\n\n\n\nL\u01b0u \u00fd\n\n\nPh\u1ea3i g\u1ecdi h\u00e0m n\u00e0y tr\u01b0\u1edbc h\u00e0m \nsmartconfig_start\n\n\n\n\n\u0110\u1ecbnh ngh\u0129a\n\n\nbool smartconfig_stop(void)\n\n\n\n\nTh\u00f4ng s\u1ed1 \nNULL\n\n\nGi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1\n\n\n\n\n\n\n\n\nTRUE\n\n\nTh\u00e0nh c\u00f4ng\n\n\n\n\n\n\n\n\n\n\nFALSE\n\n\nTh\u1ea5t b\u1ea1i\n\n\n\n\n\n\n\n\nC\u1ea5u tr\u00fac\n#\n\n\nC\u00f3 2 ki\u1ec3u c\u1ea5u tr\u00fac cho sc_status v\u00e0 sc_type\n\n\ntypedef enum {\nSC_STATUS_WAIT = 0,\nSC_STATUS_FIND_CHANNEL = 0,\nSC_STATUS_GETTING_SSID_PSWD,\nSC_STATUS_LINK,\nSC_STATUS_LINK_OVER,\n} sc_status; \n\n\n\n\ntypedef enum {\nSC_TYPE_ESPTOUCH = 0,\nSC_TYPE_AIRKISS,\nSC_TYPE_ESPTOUCH_AIRKISS,\n} sc_type;\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nSC_STATUS_FIND_CHANNEL \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 hi\u1ec3n th\u1ecb tr\u1ea1ng th\u00e1i khi t\u00ecm channel\n\n\n\n\nPh\u1ea7n m\u1ec1m cho android v\u00e0 iOS\n#\n\n\nC\u00f3 th\u1ec3 t\u1ea3i file apk d\u00e0nh cho android t\u1ea1i \n\nESP-Touch Android\n\n\nHo\u1eb7c t\u1ea3i tr\u1ef1c ti\u1ebfp t\u1eeb Playstore\n\nESP8266 SmartConfig\n\n\nV\u00e0 file cho iOS\n\nESP-Touch iOS\n\n\nHo\u1ea1t \u0111\u1ed9ng\n#\n\n\n\n\nK\u00edch ho\u1ea1t ch\u1ee9c n\u0103ng Smart Config b\u1eb1ng c\u00e1ch l\u1eadp tr\u00ecnh v\u00e0 n\u1ea1p firmware cho ESP\n\n\nK\u1ebft n\u1ed1i smartphone v\u1edbi router (k\u1ebft n\u1ed1i smartphone v\u1edbi m\u1ea1ng wifi hi\u1ec7n c\u00f3)\n\n\nM\u1edf ESP-TOUCH App \u0111\u00e3 c\u00e0i \u0111\u1eb7t tr\u00ean smartphone\n\n\nKi\u1ec3m tra SSID (t\u01b0\u01a1ng \u1ee9ng v\u1edbi t\u00ean Wifi) v\u00e0 m\u1eadt kh\u1ea9u (\u1edf \u0111\u00e2y l\u00e0 m\u1eadt kh\u1ea9u wifi c\u1ee7a b\u1ea1n) \u0111\u1ec3 k\u1ebft n\u1ed1i t\u1edbi thi\u1ebft b\u1ecb.\n\n\nTh\u1ef1c hi\u1ec7n \u1ea5n n\u00fat trong th\u1eddi gian ng\u1eafn tr\u00ean NodeMCU sau \u0111\u00f3 th\u1ea3 ra s\u1ebd c\u00f3 th\u00f4ng b\u00e1o\n\n\n\n\n[INFO] BOOTUP...\n[INFO] SDK: 2.0.0(656edbf)\n[INFO] Chip ID: 000A8B7A\n[INFO] Memory info:\ndata  : 0x3ffe8000 ~ 0x3ffe880c, len: 2060\nrodata: 0x3ffe8810 ~ 0x3ffe9ff0, len: 6112\nbss   : 0x3ffe9ff0 ~ 0x3fff0858, len: 26728\nheap  : 0x3fff0858 ~ 0x3fffc000, len: 47016\n[INFO] -------------------------------------------\n[INFO] Build time: 2016-Th11-18_16:55:45_ICT\n[INFO] -------------------------------------------\nbcn 0\ndel if1\nusl\nmode : sta(60:01:94:0a:8b:7a)\nadd if0\n\n\n\n\n\n\nM\u1edf ph\u1ea7n m\u1ec1m IOT_Espressift_EspTouch tr\u00ean \u0111i\u1ec7n tho\u1ea1i \u0111\u00e3 k\u1ebft n\u1ed1i wifi, nh\u1eadp m\u1eadt kh\u1ea9u t\u1ea1i Password sau \u0111\u00f3 \u1ea5n confirm\n\n\n\n\n\n\n\n\nTi\u1ebfp t\u1ee5c \u1ea5n n\u00fat Flash tr\u00ean NodeMCU sau \u0111\u00f3 \u1ea5n n\u00fat Confirm tr\u00ean SmartPhone.\n\n\n\n\n\n\nK\u1ebft qu\u1ea3\n#\n\n\n\n\nN\u1ebfu th\u00e0nh c\u00f4ng s\u1ebd c\u00f3 th\u00f4ng b\u00e1o tr\u00ean smartphone v\u1ec1 \u0111\u1ecba ch\u1ec9 IP c\u1ee7a ESP8266 nh\u01b0 sau\n\n\n\n\nEsptouch success, bssid = xxxx, InnetAddress = 192.168.xx.xx\n\n\n\n\n\n\nNg\u01b0\u1ee3c l\u1ea1i s\u1ebd c\u00f3 th\u00f4ng b\u00e1o Esptouch fail.\n\n\nK\u1ebft qu\u1ea3 logfile s\u1ebd \u0111\u01b0\u1ee3c ghi l\u1ea1i tr\u00ean m\u00e1y t\u00ednh nh\u01b0 sau\n\n\n\n\n[INFO] BOOTUP...\n[INFO] SDK: 2.0.0(656edbf)\n[INFO] Chip ID: 000A8B7A\n[INFO] Memory info:\ndata  : 0x3ffe8000 ~ 0x3ffe880c, len: 2060\nrodata: 0x3ffe8810 ~ 0x3ffe9ff0, len: 6112\nbss   : 0x3ffe9ff0 ~ 0x3fff0858, len: 26728\nheap  : 0x3fff0858 ~ 0x3fffc000, len: 47016\n[INFO] -------------------------------------------\n[INFO] Build time: 2016-Th11-18_16:55:45_ICT\n[INFO] -------------------------------------------\nbcn 0\ndel if1\nusl\nmode : sta(60:01:94:0a:8b:7a)\nadd if0\n[KEY] Short press, run smartconfig\nSC version: V2.5.4\n[SC] Started\nscandone\nscandone\n[SC] SC_STATUS_FIND_CHANNEL\n00:16:01:04:6d:d2: 599\n00:16:01:04:6d:d2: 598\n00:16:01:04:6d:d2: 597\n00:16:01:04:6d:d2: 596\nT|once 1 84\n00:16:01:04:6d:d2: 599\n00:16:01:04:6d:d2: 598\n00:16:01:04:6d:d2: 597\n00:16:01:04:6d:d2: 596\nT|once 2 84\niBssid 00:16:01:04:6d:\nbuf 00:16:01:04:6d:\nsave, rssi:-81 00:16:01:04:6d:d2:\niCh lock\n00:16:01:04:6d:d2: 598\n00:16:01:04:6d:d2: 597\nrigtt,rssi:-81 00:16:01:04:6d:d2:\n\nTYPE: ESPTOUCH\nT|sniffer on ch:2\nT|AP MAC: 00 16 01 04 6d d2\nT|Head Len : 84\n[SC] SC_STATUS_GETTING_SSID_PSWD\n[SC] SC_TYPE:SC_TYPE_ESPTOUCH\nT|SYNC STATUS\nxxxxx\nT|pswd: mat_khau_wifi\nT|ssid: ten_wifi\nT|bssid: 00 16 01 04 6d d2 \n[SC] SC_STATUS_LINK\nscandone\nxxxxx\nconnected with ten_wifi, channel 2\ndhcp client start...\npm open,type:2 0\nip:192.168.1.xx,mask:255.255.255.0,gw:192.168.1.1\n[SC] SC_STATUS_LINK_OVER\n[SC] Phone ip: 192.168.1.xx\nfree heap:39984",
            "title": "ESPTOUCH & AIRKISS"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#tong-quan",
            "text": "ESP Touch l\u00e0 protocol \u0111\u01b0\u1ee3c d\u00f9ng trong Smart Config \u0111\u1ec3 ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i t\u1edbi c\u00e1c phi\u00ean b\u1ea3n modul ESP8266 th\u00f4ng qua c\u1ea5u h\u00ecnh \u0111\u01a1n gi\u1ea3n tr\u00ean Smartphone.\nBan \u0111\u1ea7u kh\u00f4ng th\u1ec3 k\u1ebft n\u1ed1i v\u1edbi ESP8266, nh\u01b0ng th\u00f4ng qua giao th\u1ee9c ESP-TOUCH th\u00ec Smartphone s\u1ebd g\u1eedi g\u00f3i UDP t\u1edbi Access Point(AP) \u1edf \u0111\u00e2y l\u00e0 ESP8266, m\u00e3 h\u00f3a SSID v\u00e0 m\u1eadt kh\u1ea9u th\u00e0nh tr\u01b0\u1eddng Length trong g\u00f3i UDP, \u0111\u1ec3 ESP8266 c\u00f3 th\u1ec3 hi\u1ec3u v\u00e0 gi\u1ea3i m\u00e3 \u0111\u01b0\u1ee3c th\u00f4ng tin.  C\u1ea5u tr\u00fac g\u00f3i tin s\u1ebd c\u00f3 d\u1ea1ng     6  6  2  3  5  Variable  4      DA  SA  Length  LLC  SNAP  DATA  FCS     Length bao g\u1ed3m SSID v\u00e0 th\u00f4ng tin key cho ESP8266",
            "title": "T\u1ed5ng quan"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#chuong-trinh",
            "text": "T\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i  Makefile cho c\u00e1c d\u1ef1 \u00e1n ph\u1ee9c t\u1ea1p , to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file,  Makefile, user_config.h, rf_init.c  gi\u1eef nguy\u00ean, thay \u0111\u1ed5i n\u1ed9i dung file  main.c  v\u00e0 th\u00eam m\u1ed9t s\u1ed1 th\u01b0 m\u1ee5c c\u1ea7n thi\u1ebft.    N\u1ed9i dung  Smartconfig cho ESP8266 th\u00f4ng qua Smartphone",
            "title": "Ch\u01b0\u01a1ng tr\u00ecnh"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#lay-du-an-ve-tu-github",
            "text": "https://github.com/esp8266vn/esp8266-nonos-smart-config.git\ncd sp8266-nonos-smart-config && make\nmake flash",
            "title": "L\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#so-o-file",
            "text": "\u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 fota-flow.png\n\u251c\u2500\u2500 build\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 driver\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 key.o\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 led.o\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 uart.o\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.a\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.out\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 rfinit.o\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 sc.o\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 user_main.o\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 wps.o\n\u251c\u2500\u2500 driver\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 key.c\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 led.c\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Makefile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 uart.c\n\u251c\u2500\u2500 firmware\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app0x00000.bin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 esp8266-nonos-app0x10000.bin\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 driver\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 key.h\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 led.h\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 uart.h\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 uart_register.h\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user_config.h\n\u251c\u2500\u2500 ld\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 eagle.rom.addr.v6.ld\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 with-espboot-flash-at-0x2000-size-1M.ld\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 without-bootloader.ld\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 SublimeAStyleFormatter.sublime-settings\n\u2514\u2500\u2500 user\n    \u251c\u2500\u2500 Makefile\n    \u251c\u2500\u2500 rfinit.c\n    \u251c\u2500\u2500 sc.c\n    \u251c\u2500\u2500 sc.h\n    \u251c\u2500\u2500 user_main.c\n    \u251c\u2500\u2500 wps.c\n    \u2514\u2500\u2500 wps.h\n\n10 directories, 41 files",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#ma-nguon",
            "text": "Ch\u01b0\u01a1ng tr\u00ecnh ch\u00ednh s\u1ebd g\u1ecdi ph\u1ea7n c\u1ea5u h\u00ecnh cho Smartconfig sau khi n\u00fat nh\u1ea5n FLASH tr\u00ean NodeMCU \u0111\u01b0\u1ee3c nh\u1ea5n th\u00f4ng qua h\u00e0m  sc_start  (n\u1eb1m \u1edf 2 file l\u00e0  sc.c  v\u00e0  sc.h )  #include \"osapi.h\"\n#include \"user_interface.h\"\n\n#include \"driver/key.h\"\n#include \"driver/uart.h\"\n#include \"driver/led.h\"\n#include \"wps.h\"\n#include \"sc.h\"\n\n#define KEY_NUM        1\n\n#define KEY_IO_MUX     PERIPHS_IO_MUX_MTCK_U\n#define KEY_IO_NUM     0\n#define KEY_IO_FUNC    FUNC_GPIO0\n\n\nLOCAL struct keys_param keys;\nLOCAL struct single_key_param *single_key;\n\nLOCAL void ICACHE_FLASH_ATTR\nshort_press(void)\n{\n  INFO(\"[KEY] Short press, run smartconfig\\r\\n\");\n  led_blink(1, 1);\n  sc_start();\n}\n\nLOCAL void ICACHE_FLASH_ATTR\nlong_press(void)\n{\n  INFO(\"[KEY] Long press, run wps\\r\\n\");\n  led_blink(5, 5);\n}\n\n\nvoid ICACHE_FLASH_ATTR print_info()\n{\n  INFO(\"\\r\\n\\r\\n[INFO] BOOTUP...\\r\\n\");\n  INFO(\"[INFO] SDK: %s\\r\\n\", system_get_sdk_version());\n  INFO(\"[INFO] Chip ID: %08X\\r\\n\", system_get_chip_id());\n  INFO(\"[INFO] Memory info:\\r\\n\");\n  system_print_meminfo();\n\n  INFO(\"[INFO] -------------------------------------------\\n\");\n  INFO(\"[INFO] Build time: %s\\n\", BUID_TIME);\n  INFO(\"[INFO] -------------------------------------------\\n\");\n\n}\n\n\nvoid ICACHE_FLASH_ATTR app_init()\n{\n  // const fota_info fota_conenction = {\n  //   .host = \"test.vidieukhien.net\",\n  //   .port = \"80\",\n  //   .security = 0,\n  //   .device_id = \"device_id\",\n  //   .access_key = \"access_key\",\n  //   .version = \"version\",\n  //   .path = \"/fota.json?dev={device_id|%X}&token={access_key|%s}&version={version:%s}\"\n  // };\n\n  uart_init(BIT_RATE_115200, BIT_RATE_115200);\n\n  print_info();\n\n  single_key = key_init_single(KEY_IO_NUM, KEY_IO_MUX, KEY_IO_FUNC,\n                                        long_press, short_press);\n\n  keys.key_num = KEY_NUM;\n  keys.single_key = &single_key;\n\n  key_init(&keys);\n  led_init();\n  led_blink(10, 10); //1 second on, 1 second off\n\n  wifi_set_opmode_current(STATION_MODE);\n\n}\n\nvoid ICACHE_FLASH_ATTR user_init(void)\n{\n  system_init_done_cb(app_init);\n\n}",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#cac-ham-cau-truc-dung-trong-smartconfig",
            "text": "",
            "title": "C\u00e1c h\u00e0m/ c\u1ea5u tr\u00fac d\u00f9ng trong SmartConfig"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#ham-smartconfig_start",
            "text": "H\u00e0m d\u00f9ng \u0111\u1ec3 c\u1ea5u h\u00ecnh thi\u1ebft b\u1ecb v\u00e0 k\u1ebft n\u1ed1i n\u00f3 t\u1edbi AP   L\u01b0u \u00fd   H\u00e0m ch\u1ec9 \u0111\u01b0\u1ee3c g\u1ecdi trong mode Station  G\u1ecdi h\u00e0m  smartconfig_stop  \u0111\u1ec3 k\u1ebft th\u00fac qu\u00e1 tr\u00ecnh SmartConfig tr\u01b0\u1edbc khi g\u1ecdi c\u00e1c h\u00e0m kh\u00e1c    \u0110\u1ecbnh ngh\u0129a  bool smartconfig_start(sc_callback_t cb, uint8 log)  Th\u00f4ng s\u1ed1  Gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1     TRUE  Th\u00e0nh c\u00f4ng      FALSE  Th\u1ea5t b\u1ea1i",
            "title": "H\u00e0m smartconfig_start"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#ham-smartconfig_stop",
            "text": "H\u00e0m d\u00f9ng \u0111\u1ec3 d\u1eebng qu\u00e1 tr\u00ecnh Smart Config v\u00e0 gi\u1ea3i ph\u00f3ng b\u1ed9 nh\u1edb \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1edfi h\u00e0m   smartconfig_start   L\u01b0u \u00fd  Sau khi k\u1ebft n\u1ed1i \u0111\u01b0\u1ee3c thi\u1ebft l\u1eadp th\u00ec ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 g\u1ecdi h\u00e0m gi\u1ea3i ph\u00f3ng b\u1ed9 nh\u1edb   \u0110\u1ecbnh ngh\u0129a  bool smartconfig_set_type(sc_type type)  Th\u00f4ng s\u1ed1   typedef enum {\n SC_TYPE_ESPTOUCH = 0,\n SC_TYPE_AIRKISS,\n SC_TYPE_ESPTOUCH_AIRKISS,\n } sc_type;   Gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1     TRUE  Th\u00e0nh c\u00f4ng      FALSE  Th\u1ea5t b\u1ea1i",
            "title": "H\u00e0m smartconfig_stop"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#ham-smartconfig_set_type",
            "text": "H\u00e0m d\u00f9ng \u0111\u1ec3 thi\u1ebft l\u1eadp ki\u1ec3u protocol c\u1ee7a  smartconfig_start   L\u01b0u \u00fd  Ph\u1ea3i g\u1ecdi h\u00e0m n\u00e0y tr\u01b0\u1edbc h\u00e0m  smartconfig_start   \u0110\u1ecbnh ngh\u0129a  bool smartconfig_stop(void)  Th\u00f4ng s\u1ed1 \nNULL  Gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1     TRUE  Th\u00e0nh c\u00f4ng      FALSE  Th\u1ea5t b\u1ea1i",
            "title": "H\u00e0m smartconfig_set_type"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#cau-truc",
            "text": "C\u00f3 2 ki\u1ec3u c\u1ea5u tr\u00fac cho sc_status v\u00e0 sc_type  typedef enum {\nSC_STATUS_WAIT = 0,\nSC_STATUS_FIND_CHANNEL = 0,\nSC_STATUS_GETTING_SSID_PSWD,\nSC_STATUS_LINK,\nSC_STATUS_LINK_OVER,\n} sc_status;   typedef enum {\nSC_TYPE_ESPTOUCH = 0,\nSC_TYPE_AIRKISS,\nSC_TYPE_ESPTOUCH_AIRKISS,\n} sc_type;   L\u01b0u \u00fd  SC_STATUS_FIND_CHANNEL \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 hi\u1ec3n th\u1ecb tr\u1ea1ng th\u00e1i khi t\u00ecm channel",
            "title": "C\u1ea5u tr\u00fac"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#phan-mem-cho-android-va-ios",
            "text": "C\u00f3 th\u1ec3 t\u1ea3i file apk d\u00e0nh cho android t\u1ea1i  ESP-Touch Android  Ho\u1eb7c t\u1ea3i tr\u1ef1c ti\u1ebfp t\u1eeb Playstore ESP8266 SmartConfig  V\u00e0 file cho iOS ESP-Touch iOS",
            "title": "Ph\u1ea7n m\u1ec1m cho android v\u00e0 iOS"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#hoat-ong",
            "text": "K\u00edch ho\u1ea1t ch\u1ee9c n\u0103ng Smart Config b\u1eb1ng c\u00e1ch l\u1eadp tr\u00ecnh v\u00e0 n\u1ea1p firmware cho ESP  K\u1ebft n\u1ed1i smartphone v\u1edbi router (k\u1ebft n\u1ed1i smartphone v\u1edbi m\u1ea1ng wifi hi\u1ec7n c\u00f3)  M\u1edf ESP-TOUCH App \u0111\u00e3 c\u00e0i \u0111\u1eb7t tr\u00ean smartphone  Ki\u1ec3m tra SSID (t\u01b0\u01a1ng \u1ee9ng v\u1edbi t\u00ean Wifi) v\u00e0 m\u1eadt kh\u1ea9u (\u1edf \u0111\u00e2y l\u00e0 m\u1eadt kh\u1ea9u wifi c\u1ee7a b\u1ea1n) \u0111\u1ec3 k\u1ebft n\u1ed1i t\u1edbi thi\u1ebft b\u1ecb.  Th\u1ef1c hi\u1ec7n \u1ea5n n\u00fat trong th\u1eddi gian ng\u1eafn tr\u00ean NodeMCU sau \u0111\u00f3 th\u1ea3 ra s\u1ebd c\u00f3 th\u00f4ng b\u00e1o   [INFO] BOOTUP...\n[INFO] SDK: 2.0.0(656edbf)\n[INFO] Chip ID: 000A8B7A\n[INFO] Memory info:\ndata  : 0x3ffe8000 ~ 0x3ffe880c, len: 2060\nrodata: 0x3ffe8810 ~ 0x3ffe9ff0, len: 6112\nbss   : 0x3ffe9ff0 ~ 0x3fff0858, len: 26728\nheap  : 0x3fff0858 ~ 0x3fffc000, len: 47016\n[INFO] -------------------------------------------\n[INFO] Build time: 2016-Th11-18_16:55:45_ICT\n[INFO] -------------------------------------------\nbcn 0\ndel if1\nusl\nmode : sta(60:01:94:0a:8b:7a)\nadd if0   M\u1edf ph\u1ea7n m\u1ec1m IOT_Espressift_EspTouch tr\u00ean \u0111i\u1ec7n tho\u1ea1i \u0111\u00e3 k\u1ebft n\u1ed1i wifi, nh\u1eadp m\u1eadt kh\u1ea9u t\u1ea1i Password sau \u0111\u00f3 \u1ea5n confirm     Ti\u1ebfp t\u1ee5c \u1ea5n n\u00fat Flash tr\u00ean NodeMCU sau \u0111\u00f3 \u1ea5n n\u00fat Confirm tr\u00ean SmartPhone.",
            "title": "Ho\u1ea1t \u0111\u1ed9ng"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#ket-qua",
            "text": "N\u1ebfu th\u00e0nh c\u00f4ng s\u1ebd c\u00f3 th\u00f4ng b\u00e1o tr\u00ean smartphone v\u1ec1 \u0111\u1ecba ch\u1ec9 IP c\u1ee7a ESP8266 nh\u01b0 sau   Esptouch success, bssid = xxxx, InnetAddress = 192.168.xx.xx   Ng\u01b0\u1ee3c l\u1ea1i s\u1ebd c\u00f3 th\u00f4ng b\u00e1o Esptouch fail.  K\u1ebft qu\u1ea3 logfile s\u1ebd \u0111\u01b0\u1ee3c ghi l\u1ea1i tr\u00ean m\u00e1y t\u00ednh nh\u01b0 sau   [INFO] BOOTUP...\n[INFO] SDK: 2.0.0(656edbf)\n[INFO] Chip ID: 000A8B7A\n[INFO] Memory info:\ndata  : 0x3ffe8000 ~ 0x3ffe880c, len: 2060\nrodata: 0x3ffe8810 ~ 0x3ffe9ff0, len: 6112\nbss   : 0x3ffe9ff0 ~ 0x3fff0858, len: 26728\nheap  : 0x3fff0858 ~ 0x3fffc000, len: 47016\n[INFO] -------------------------------------------\n[INFO] Build time: 2016-Th11-18_16:55:45_ICT\n[INFO] -------------------------------------------\nbcn 0\ndel if1\nusl\nmode : sta(60:01:94:0a:8b:7a)\nadd if0\n[KEY] Short press, run smartconfig\nSC version: V2.5.4\n[SC] Started\nscandone\nscandone\n[SC] SC_STATUS_FIND_CHANNEL\n00:16:01:04:6d:d2: 599\n00:16:01:04:6d:d2: 598\n00:16:01:04:6d:d2: 597\n00:16:01:04:6d:d2: 596\nT|once 1 84\n00:16:01:04:6d:d2: 599\n00:16:01:04:6d:d2: 598\n00:16:01:04:6d:d2: 597\n00:16:01:04:6d:d2: 596\nT|once 2 84\niBssid 00:16:01:04:6d:\nbuf 00:16:01:04:6d:\nsave, rssi:-81 00:16:01:04:6d:d2:\niCh lock\n00:16:01:04:6d:d2: 598\n00:16:01:04:6d:d2: 597\nrigtt,rssi:-81 00:16:01:04:6d:d2:\n\nTYPE: ESPTOUCH\nT|sniffer on ch:2\nT|AP MAC: 00 16 01 04 6d d2\nT|Head Len : 84\n[SC] SC_STATUS_GETTING_SSID_PSWD\n[SC] SC_TYPE:SC_TYPE_ESPTOUCH\nT|SYNC STATUS\nxxxxx\nT|pswd: mat_khau_wifi\nT|ssid: ten_wifi\nT|bssid: 00 16 01 04 6d d2 \n[SC] SC_STATUS_LINK\nscandone\nxxxxx\nconnected with ten_wifi, channel 2\ndhcp client start...\npm open,type:2 0\nip:192.168.1.xx,mask:255.255.255.0,gw:192.168.1.1\n[SC] SC_STATUS_LINK_OVER\n[SC] Phone ip: 192.168.1.xx\nfree heap:39984",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/smartconfig/wps/",
            "text": "",
            "title": "WPS"
        },
        {
            "location": "/nonos-sdk/mqtt/what-is-mqtt/",
            "text": "MQTT l\u00e0 g\u00ec\n\n\nPublish, subscribe\n\n\nQoS\n\n\nRetain\n\n\nLWT\n\n\nReference:\n\n\n\n\n\n\n\n\n\n\nMQTT l\u00e0 g\u00ec\n#\n\n\n\n\nMQTT\n (Message Queuing Telemetry Transport) l\u00e0 m\u1ed9t giao th\u1ee9c g\u1edfi d\u1ea1ng publish/subscribe s\u1eed d\u1ee5ng cho c\u00e1c thi\u1ebft b\u1ecb \nInternet of Things\n v\u1edbi b\u0103ng th\u00f4ng th\u1ea5p, \u0111\u1ed9 tin c\u1eady cao v\u00e0 kh\u1ea3 n\u0103ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong m\u1ea1ng l\u01b0\u1edbi kh\u00f4ng \u1ed5n \u0111\u1ecbnh.\n\n\nB\u1edfi v\u00ec giao th\u1ee9c n\u00e0y s\u1eed d\u1ee5ng b\u0103ng th\u00f4ng th\u1ea5p trong m\u00f4i tr\u01b0\u1eddng c\u00f3 \u0111\u1ed9 tr\u1ec5 cao n\u00ean n\u00f3 l\u00e0 m\u1ed9t giao th\u1ee9c l\u00fd t\u01b0\u1edfng cho c\u00e1c \u1ee9ng d\u1ee5ng \nM2M\n\n\nMQTT c\u0169ng l\u00e0 giao th\u1ee9c s\u1eed d\u1ee5ng trong \nFacebook Messager\n\n\nV\u00e0 MQTT l\u00e0 g\u00ec? \u0110\u1ec3 c\u00f3 m\u1ed9t c\u00e1i nh\u00ecn to\u00e0n di\u1ec7n ho\u1eb7c \u0111\u1ecbnh ngh\u0129a chi ti\u1ebft, ch\u1ec9 c\u1ea7n google \u201cwhat is mqtt\u201d, \u201cmqtt slides\u201d \u2026 Trong b\u00e0i vi\u1ebft n\u00e0y ch\u00fang ta ch\u1ec9 n\u00f3i ng\u1eafn g\u1ecdn th\u00f4i, \u0111\u1ee7 \u0111\u1ec3 hi\u1ec3u giao th\u1ee9c MQTT, bao g\u1ed3m c\u00e1c \u0111\u1ecbnh ngh\u0129a \n\u201csubscribe\u201d, \u201cpublish\u201d, \u201cqos\u201d, \u201cretain\u201d, \u201clast will and testament (lwt)\u201d\n - V\u00e0 ch\u1ec9 d\u00e0nh cho nh\u1eefng ai \u0111ang mu\u1ed1n t\u00ecm hi\u1ec3u v\u1ec1 MQTT, kh\u00f4ng th\u00ec \u0111\u1ecdc to\u00e0n ch\u1eef th\u00f4i, m\u1ecfi m\u1eaft l\u1eafm.\n\n\nPublish, subscribe\n#\n\n\nTrong m\u1ed9t h\u1ec7 th\u1ed1ng s\u1eed d\u1ee5ng giao th\u1ee9c MQTT, nhi\u1ec1u node tr\u1ea1m (g\u1ecdi l\u00e0 mqtt client - g\u1ecdi t\u1eaft l\u00e0 client) k\u1ebft n\u1ed1i t\u1edbi m\u1ed9t MQTT server (g\u1ecdi l\u00e0 broker). M\u1ed7i client s\u1ebd \u0111\u0103ng k\u00fd m\u1ed9t v\u00e0i k\u00eanh (topic), v\u00ed d\u1ee5 nh\u01b0 \u201c/client1/channel1\u201d, \u201c/client1/channel2\u201d. Qu\u00e1 tr\u00ecnh \u0111\u0103ng k\u00fd n\u00e0y g\u1ecdi l\u00e0 \n\u201csubscribe\u201d\n, gi\u1ed1ng nh\u01b0 ch\u00fang ta \u0111\u0103ng k\u00fd nh\u1eadn tin tr\u00ean m\u1ed9t k\u00eanh Youtube v\u1eady. M\u1ed7i client s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u khi b\u1ea5t k\u1ef3 tr\u1ea1m n\u00e0o kh\u00e1c g\u1edfi d\u1eef li\u1ec7u v\u00e0 k\u00eanh \u0111\u00e3 \u0111\u0103ng k\u00fd. Khi m\u1ed9t client g\u1edfi d\u1eef li\u1ec7u t\u1edbi k\u00eanh \u0111\u00f3, g\u1ecdi l\u00e0 \n\u201cpublish\u201d\n.\n\n\nQoS\n#\n\n\n\u1ede \u0111\u00e2y c\u00f3 3 tu\u1ef3 ch\u1ecdn \nQoS (Qualities of service) \n khi \u201cpublish\u201d v\u00e0 \u201csubscribe\u201d:\n\n\n\n\nQoS0\n Broker/client s\u1ebd g\u1edfi d\u1eef li\u1ec7u \u0111\u00fang 1 l\u1ea7n, qu\u00e1 tr\u00ecnh g\u1edfi \u0111\u01b0\u1ee3c x\u00e1c nh\u1eadn b\u1edfi ch\u1ec9 giao th\u1ee9c TCP/IP, gi\u1ed1ng ki\u1ec3u \u0111em con b\u1ecf ch\u1ee3.\n\n\nQoS1\n Broker/client s\u1ebd g\u1edfi d\u1eef li\u1ec7u v\u1edbi \u00edt nh\u1ea5t 1 l\u1ea7n x\u00e1c nh\u1eadn t\u1eeb \u0111\u1ea7u kia, ngh\u0129a l\u00e0 c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u h\u01a1n 1 l\u1ea7n x\u00e1c nh\u1eadn \u0111\u00e3 nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u.\n\n\nQoS2\n Broker/client \u0111\u1ea3m b\u1ea3m khi g\u1edfi d\u1eef li\u1ec7u th\u00ec ph\u00eda nh\u1eadn ch\u1ec9 nh\u1eadn \u0111\u01b0\u1ee3c \u0111\u00fang 1 l\u1ea7n, qu\u00e1 tr\u00ecnh n\u00e0y ph\u1ea3i tr\u1ea3i qua 4 b\u01b0\u1edbc b\u1eaft tay.\n\n\n\n\nXem th\u00eam QoS\n: https://code.google.com/p/mqtt4erl/wiki/QualityOfServiceUseCases\n\n\nM\u1ed9t g\u00f3i tin c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u1edfi \u1edf b\u1ea5t k\u1ef3 QoS n\u00e0o, v\u00e0 c\u00e1c client c\u0169ng c\u00f3 th\u1ec3 subscribe v\u1edbi b\u1ea5t k\u1ef3 y\u00eau c\u1ea7u QoS n\u00e0o. C\u00f3 ngh\u0129a l\u00e0 client s\u1ebd l\u1ef1a ch\u1ecdn QoS t\u1ed1i \u0111a m\u00e0 n\u00f3 c\u00f3 \u0111\u1ec3 nh\u1eadn tin. V\u00ed d\u1ee5, n\u1ebfu 1 g\u00f3i d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c publish v\u1edbi QoS2, v\u00e0 client subscribe v\u1edbi QoS0, th\u00ec g\u00f3i d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c nh\u1eadn v\u1ec1 client n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c broker g\u1edfi v\u1edbi QoS0, v\u00e0 1 client kh\u00e1c \u0111\u0103ng k\u00fd c\u00f9ng k\u00eanh n\u00e0y v\u1edbi QoS 2, th\u00ec n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c Broker g\u1edfi d\u1eef li\u1ec7u v\u1edbi QoS2.\n\n\nM\u1ed9t v\u00ed d\u1ee5 kh\u00e1c, n\u1ebfu 1 client subscribe v\u1edbi QoS2 v\u00e0 g\u00f3i d\u1eef li\u1ec7u g\u1edfi v\u00e0o k\u00eanh \u0111\u00f3 publish v\u1edbi QoS0 th\u00ec client \u0111\u00f3 s\u1ebd \u0111\u01b0\u1ee3c Broker g\u1edfi d\u1eef li\u1ec7u v\u1edbi QoS0. QoS c\u00e0ng cao th\u00ec c\u00e0ng \u0111\u00e1ng tin c\u1eady, \u0111\u1ed3ng th\u1eddi \u0111\u1ed9 tr\u1ec5 v\u00e0 b\u0103ng th\u00f4ng \u0111\u00f2i h\u1ecfi c\u0169ng cao h\u01a1n.\n\n\nRetain\n#\n\n\nN\u1ebfu RETAIN \u0111\u01b0\u1ee3c set b\u1eb1ng 1, khi g\u00f3i tin \u0111\u01b0\u1ee3c publish t\u1eeb Client, Broker \nPH\u1ea2I\n l\u01b0u tr\u1eef l\u1ea1i g\u00f3i tin v\u1edbi QoS, v\u00e0 n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c g\u1edfi \u0111\u1ebfn b\u1ea5t k\u1ef3 Client n\u00e0o subscribe c\u00f9ng k\u00eanh trong t\u01b0\u01a1ng lai. Khi m\u1ed9t Client k\u1ebft n\u1ed1i t\u1edbi Broker v\u00e0 subscribe, n\u00f3 s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i tin cu\u1ed1i c\u00f9ng c\u00f3 RETAIN = 1 v\u1edbi b\u1ea5t k\u1ef3 topic n\u00e0o m\u00e0 n\u00f3 \u0111\u0103ng k\u00fd tr\u00f9ng. Tuy nhi\u00ean, n\u1ebfu Broker nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i tin m\u00e0 c\u00f3 QoS = 0 v\u00e0 RETAIN = 1, n\u00f3 s\u1ebd hu\u1ef7 t\u1ea5t c\u1ea3 c\u00e1c g\u00f3i tin c\u00f3 RETAIN = 1 tr\u01b0\u1edbc \u0111\u00f3. V\u00e0 ph\u1ea3i l\u01b0u g\u00f3i tin n\u00e0y l\u1ea1i, nh\u01b0ng ho\u00e0n to\u00e0n c\u00f3 th\u1ec3 hu\u1ef7 b\u1ea5t k\u1ef3 l\u00fac n\u00e0o.\n\n\nKhi publish m\u1ed9t g\u00f3i d\u1eef li\u1ec7u \u0111\u1ebfn Client, Broker ph\u1ea3i se RETAIN = 1 n\u1ebfu g\u00f3i \u0111\u01b0\u1ee3c g\u1edfi nh\u01b0 l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c subscribe m\u1edbi c\u1ee7a Client (gi\u1ed1ng nh\u01b0 tin nh\u1eafn ACK b\u00e1o subscribe th\u00e0nh c\u00f4ng). RETAIN ph\u1ea3i b\u1eb1ng 0 n\u1ebfu kh\u00f4ng quan t\u00e2m t\u1edbi k\u1ebft qu\u1ea3 c\u1ee7a vi\u1eb9c subscribe.\n\n\nLWT\n#\n\n\nG\u00f3i tin LWT (last will and testament) kh\u00f4ng th\u1ef1c s\u1ef1 bi\u1ebft \u0111\u01b0\u1ee3c Client c\u00f3 tr\u1ef1c tuy\u1ebfn hay kh\u00f4ng, c\u00e1i n\u00e0y do g\u00f3i tin KeepAlive \u0111\u1ea3m nh\u1eadn. Tuy nhi\u00ean g\u00f3i tin LWT nh\u01b0 l\u00e0 th\u00f4ng tin \u0111i\u1ec1u g\u00ec s\u1ebd x\u1ea3y \u0111\u1ebfn sau khi thi\u1ebft b\u1ecb ngo\u1ea1i tuy\u1ebfn.\n\n\nM\u1ed9t v\u00ed d\u1ee5\n\n\nT\u00f4i c\u00f3 1 c\u1ea3m bi\u1ebfn, n\u00f3 g\u1edfi nh\u1eefng d\u1eef li\u1ec7u quan tr\u1ecdng v\u00e0 r\u1ea5t kh\u00f4ng th\u01b0\u1eddng xuy\u00ean. N\u00f3 c\u00f3 \u0111\u0103ng k\u00fd tr\u01b0\u1edbc v\u1edbi Broker m\u1ed9t tin nh\u1eafn lwt \u1edf topic \n/node/gone-offline\n v\u1edbi tin nh\u1eafn \nid\n c\u1ee7a n\u00f3. V\u00e0 t\u00f4i c\u0169ng \u0111\u0103ng k\u00fd theo d\u00f5i topic \n/node/gone-offline\n, s\u1ebd g\u1edfi SMS t\u1edbi \u0111i\u1ec7n tho\u1ea1i th\u00f4i m\u1ed7i khi nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn n\u00e0o \u1edf k\u00eanh m\u00e0 t\u00f4i theo d\u00f5i.\nTrong qu\u00e1 tr\u00ecnh ho\u1ea1t \u0111\u1ed9ng, c\u1ea3m bi\u1ebfn lu\u00f4n gi\u1eef k\u1ebft n\u1ed1i v\u1edbi Broker b\u1edfi vi\u1ec7c lu\u00f4n g\u1edfi g\u00f3i tin keepAlive. Nh\u01b0ng n\u1ebfu v\u00ec l\u00fd do g\u00ec \u0111\u00f3, c\u1ea3m bi\u1ebfn n\u00e0y chuy\u1ec3n sang ngo\u1ea1i tuy\u1ebfn, k\u1ebft n\u1ed1i t\u1edbi Broker timeout do Broker kh\u00f4ng c\u00f2n nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i keepAlive.\nL\u00fac n\u00e0y, do c\u1ea3m bi\u1ebfn c\u1ee7a t\u00f4i \u0111\u00e3 \u0111\u0103ng k\u00fd LWT, do v\u1eady broker s\u1ebd \u0111\u00f3ng k\u1ebft n\u1ed1i c\u1ee7a C\u1ea3m bi\u1ebfn, \u0111\u1ed3ng th\u1eddi s\u1ebd publish m\u1ed9t g\u00f3i tin l\u00e0 Id c\u1ee7a c\u1ea3m bi\u1ebfn v\u00e0o k\u00eanh \n/node/gone-offline\n, d\u0129 nhi\u00ean l\u00e0 t\u00f4i c\u0169ng s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn b\u00e1o c\u00e1i C\u1ea3m bi\u1ebfn y\u00eau qu\u00fd c\u1ee7a m\u00ecnh  \u0111\u00e3 ngo\u1ea1i tuy\u1ebfn.\n\n\nNg\u1eafn g\u1ecdn\n\n\nNgo\u00e0i vi\u1ec7c \u0111\u00f3ng k\u1ebft n\u1ed1i c\u1ee7a Client \u0111\u00e3 ngo\u1ea1i tuy\u1ebfn, g\u00f3i tin LWT c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc v\u00e0 \u0111\u01b0\u1ee3c g\u1edfi b\u1edfi Broker t\u1edbi k\u00eanh n\u00e0o \u0111\u00f3 khi thi\u1ebft b\u1ecb \u0111\u0103ng k\u00fd LWT ngo\u1ea1i tuy\u1ebfn.\n\n\nReference:\n#\n\n\n\n\nhttp://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html\n\n\nhttp://bb-smartsensing.com/basics-of-mqtt/\n\n\nhttp://stackoverflow.com/questions/17270863/\n\n\nhttp://tuanpmt.github.io/what-is-mqtt/",
            "title": "Giao th\u1ee9c MQTT"
        },
        {
            "location": "/nonos-sdk/mqtt/what-is-mqtt/#mqtt-la-gi",
            "text": "MQTT  (Message Queuing Telemetry Transport) l\u00e0 m\u1ed9t giao th\u1ee9c g\u1edfi d\u1ea1ng publish/subscribe s\u1eed d\u1ee5ng cho c\u00e1c thi\u1ebft b\u1ecb  Internet of Things  v\u1edbi b\u0103ng th\u00f4ng th\u1ea5p, \u0111\u1ed9 tin c\u1eady cao v\u00e0 kh\u1ea3 n\u0103ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong m\u1ea1ng l\u01b0\u1edbi kh\u00f4ng \u1ed5n \u0111\u1ecbnh.  B\u1edfi v\u00ec giao th\u1ee9c n\u00e0y s\u1eed d\u1ee5ng b\u0103ng th\u00f4ng th\u1ea5p trong m\u00f4i tr\u01b0\u1eddng c\u00f3 \u0111\u1ed9 tr\u1ec5 cao n\u00ean n\u00f3 l\u00e0 m\u1ed9t giao th\u1ee9c l\u00fd t\u01b0\u1edfng cho c\u00e1c \u1ee9ng d\u1ee5ng  M2M  MQTT c\u0169ng l\u00e0 giao th\u1ee9c s\u1eed d\u1ee5ng trong  Facebook Messager  V\u00e0 MQTT l\u00e0 g\u00ec? \u0110\u1ec3 c\u00f3 m\u1ed9t c\u00e1i nh\u00ecn to\u00e0n di\u1ec7n ho\u1eb7c \u0111\u1ecbnh ngh\u0129a chi ti\u1ebft, ch\u1ec9 c\u1ea7n google \u201cwhat is mqtt\u201d, \u201cmqtt slides\u201d \u2026 Trong b\u00e0i vi\u1ebft n\u00e0y ch\u00fang ta ch\u1ec9 n\u00f3i ng\u1eafn g\u1ecdn th\u00f4i, \u0111\u1ee7 \u0111\u1ec3 hi\u1ec3u giao th\u1ee9c MQTT, bao g\u1ed3m c\u00e1c \u0111\u1ecbnh ngh\u0129a  \u201csubscribe\u201d, \u201cpublish\u201d, \u201cqos\u201d, \u201cretain\u201d, \u201clast will and testament (lwt)\u201d  - V\u00e0 ch\u1ec9 d\u00e0nh cho nh\u1eefng ai \u0111ang mu\u1ed1n t\u00ecm hi\u1ec3u v\u1ec1 MQTT, kh\u00f4ng th\u00ec \u0111\u1ecdc to\u00e0n ch\u1eef th\u00f4i, m\u1ecfi m\u1eaft l\u1eafm.",
            "title": "MQTT l\u00e0 g\u00ec"
        },
        {
            "location": "/nonos-sdk/mqtt/what-is-mqtt/#publish-subscribe",
            "text": "Trong m\u1ed9t h\u1ec7 th\u1ed1ng s\u1eed d\u1ee5ng giao th\u1ee9c MQTT, nhi\u1ec1u node tr\u1ea1m (g\u1ecdi l\u00e0 mqtt client - g\u1ecdi t\u1eaft l\u00e0 client) k\u1ebft n\u1ed1i t\u1edbi m\u1ed9t MQTT server (g\u1ecdi l\u00e0 broker). M\u1ed7i client s\u1ebd \u0111\u0103ng k\u00fd m\u1ed9t v\u00e0i k\u00eanh (topic), v\u00ed d\u1ee5 nh\u01b0 \u201c/client1/channel1\u201d, \u201c/client1/channel2\u201d. Qu\u00e1 tr\u00ecnh \u0111\u0103ng k\u00fd n\u00e0y g\u1ecdi l\u00e0  \u201csubscribe\u201d , gi\u1ed1ng nh\u01b0 ch\u00fang ta \u0111\u0103ng k\u00fd nh\u1eadn tin tr\u00ean m\u1ed9t k\u00eanh Youtube v\u1eady. M\u1ed7i client s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u khi b\u1ea5t k\u1ef3 tr\u1ea1m n\u00e0o kh\u00e1c g\u1edfi d\u1eef li\u1ec7u v\u00e0 k\u00eanh \u0111\u00e3 \u0111\u0103ng k\u00fd. Khi m\u1ed9t client g\u1edfi d\u1eef li\u1ec7u t\u1edbi k\u00eanh \u0111\u00f3, g\u1ecdi l\u00e0  \u201cpublish\u201d .",
            "title": "Publish, subscribe"
        },
        {
            "location": "/nonos-sdk/mqtt/what-is-mqtt/#qos",
            "text": "\u1ede \u0111\u00e2y c\u00f3 3 tu\u1ef3 ch\u1ecdn  QoS (Qualities of service)   khi \u201cpublish\u201d v\u00e0 \u201csubscribe\u201d:   QoS0  Broker/client s\u1ebd g\u1edfi d\u1eef li\u1ec7u \u0111\u00fang 1 l\u1ea7n, qu\u00e1 tr\u00ecnh g\u1edfi \u0111\u01b0\u1ee3c x\u00e1c nh\u1eadn b\u1edfi ch\u1ec9 giao th\u1ee9c TCP/IP, gi\u1ed1ng ki\u1ec3u \u0111em con b\u1ecf ch\u1ee3.  QoS1  Broker/client s\u1ebd g\u1edfi d\u1eef li\u1ec7u v\u1edbi \u00edt nh\u1ea5t 1 l\u1ea7n x\u00e1c nh\u1eadn t\u1eeb \u0111\u1ea7u kia, ngh\u0129a l\u00e0 c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u h\u01a1n 1 l\u1ea7n x\u00e1c nh\u1eadn \u0111\u00e3 nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u.  QoS2  Broker/client \u0111\u1ea3m b\u1ea3m khi g\u1edfi d\u1eef li\u1ec7u th\u00ec ph\u00eda nh\u1eadn ch\u1ec9 nh\u1eadn \u0111\u01b0\u1ee3c \u0111\u00fang 1 l\u1ea7n, qu\u00e1 tr\u00ecnh n\u00e0y ph\u1ea3i tr\u1ea3i qua 4 b\u01b0\u1edbc b\u1eaft tay.   Xem th\u00eam QoS : https://code.google.com/p/mqtt4erl/wiki/QualityOfServiceUseCases  M\u1ed9t g\u00f3i tin c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u1edfi \u1edf b\u1ea5t k\u1ef3 QoS n\u00e0o, v\u00e0 c\u00e1c client c\u0169ng c\u00f3 th\u1ec3 subscribe v\u1edbi b\u1ea5t k\u1ef3 y\u00eau c\u1ea7u QoS n\u00e0o. C\u00f3 ngh\u0129a l\u00e0 client s\u1ebd l\u1ef1a ch\u1ecdn QoS t\u1ed1i \u0111a m\u00e0 n\u00f3 c\u00f3 \u0111\u1ec3 nh\u1eadn tin. V\u00ed d\u1ee5, n\u1ebfu 1 g\u00f3i d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c publish v\u1edbi QoS2, v\u00e0 client subscribe v\u1edbi QoS0, th\u00ec g\u00f3i d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c nh\u1eadn v\u1ec1 client n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c broker g\u1edfi v\u1edbi QoS0, v\u00e0 1 client kh\u00e1c \u0111\u0103ng k\u00fd c\u00f9ng k\u00eanh n\u00e0y v\u1edbi QoS 2, th\u00ec n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c Broker g\u1edfi d\u1eef li\u1ec7u v\u1edbi QoS2.  M\u1ed9t v\u00ed d\u1ee5 kh\u00e1c, n\u1ebfu 1 client subscribe v\u1edbi QoS2 v\u00e0 g\u00f3i d\u1eef li\u1ec7u g\u1edfi v\u00e0o k\u00eanh \u0111\u00f3 publish v\u1edbi QoS0 th\u00ec client \u0111\u00f3 s\u1ebd \u0111\u01b0\u1ee3c Broker g\u1edfi d\u1eef li\u1ec7u v\u1edbi QoS0. QoS c\u00e0ng cao th\u00ec c\u00e0ng \u0111\u00e1ng tin c\u1eady, \u0111\u1ed3ng th\u1eddi \u0111\u1ed9 tr\u1ec5 v\u00e0 b\u0103ng th\u00f4ng \u0111\u00f2i h\u1ecfi c\u0169ng cao h\u01a1n.",
            "title": "QoS"
        },
        {
            "location": "/nonos-sdk/mqtt/what-is-mqtt/#retain",
            "text": "N\u1ebfu RETAIN \u0111\u01b0\u1ee3c set b\u1eb1ng 1, khi g\u00f3i tin \u0111\u01b0\u1ee3c publish t\u1eeb Client, Broker  PH\u1ea2I  l\u01b0u tr\u1eef l\u1ea1i g\u00f3i tin v\u1edbi QoS, v\u00e0 n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c g\u1edfi \u0111\u1ebfn b\u1ea5t k\u1ef3 Client n\u00e0o subscribe c\u00f9ng k\u00eanh trong t\u01b0\u01a1ng lai. Khi m\u1ed9t Client k\u1ebft n\u1ed1i t\u1edbi Broker v\u00e0 subscribe, n\u00f3 s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i tin cu\u1ed1i c\u00f9ng c\u00f3 RETAIN = 1 v\u1edbi b\u1ea5t k\u1ef3 topic n\u00e0o m\u00e0 n\u00f3 \u0111\u0103ng k\u00fd tr\u00f9ng. Tuy nhi\u00ean, n\u1ebfu Broker nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i tin m\u00e0 c\u00f3 QoS = 0 v\u00e0 RETAIN = 1, n\u00f3 s\u1ebd hu\u1ef7 t\u1ea5t c\u1ea3 c\u00e1c g\u00f3i tin c\u00f3 RETAIN = 1 tr\u01b0\u1edbc \u0111\u00f3. V\u00e0 ph\u1ea3i l\u01b0u g\u00f3i tin n\u00e0y l\u1ea1i, nh\u01b0ng ho\u00e0n to\u00e0n c\u00f3 th\u1ec3 hu\u1ef7 b\u1ea5t k\u1ef3 l\u00fac n\u00e0o.  Khi publish m\u1ed9t g\u00f3i d\u1eef li\u1ec7u \u0111\u1ebfn Client, Broker ph\u1ea3i se RETAIN = 1 n\u1ebfu g\u00f3i \u0111\u01b0\u1ee3c g\u1edfi nh\u01b0 l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c subscribe m\u1edbi c\u1ee7a Client (gi\u1ed1ng nh\u01b0 tin nh\u1eafn ACK b\u00e1o subscribe th\u00e0nh c\u00f4ng). RETAIN ph\u1ea3i b\u1eb1ng 0 n\u1ebfu kh\u00f4ng quan t\u00e2m t\u1edbi k\u1ebft qu\u1ea3 c\u1ee7a vi\u1eb9c subscribe.",
            "title": "Retain"
        },
        {
            "location": "/nonos-sdk/mqtt/what-is-mqtt/#lwt",
            "text": "G\u00f3i tin LWT (last will and testament) kh\u00f4ng th\u1ef1c s\u1ef1 bi\u1ebft \u0111\u01b0\u1ee3c Client c\u00f3 tr\u1ef1c tuy\u1ebfn hay kh\u00f4ng, c\u00e1i n\u00e0y do g\u00f3i tin KeepAlive \u0111\u1ea3m nh\u1eadn. Tuy nhi\u00ean g\u00f3i tin LWT nh\u01b0 l\u00e0 th\u00f4ng tin \u0111i\u1ec1u g\u00ec s\u1ebd x\u1ea3y \u0111\u1ebfn sau khi thi\u1ebft b\u1ecb ngo\u1ea1i tuy\u1ebfn.  M\u1ed9t v\u00ed d\u1ee5  T\u00f4i c\u00f3 1 c\u1ea3m bi\u1ebfn, n\u00f3 g\u1edfi nh\u1eefng d\u1eef li\u1ec7u quan tr\u1ecdng v\u00e0 r\u1ea5t kh\u00f4ng th\u01b0\u1eddng xuy\u00ean. N\u00f3 c\u00f3 \u0111\u0103ng k\u00fd tr\u01b0\u1edbc v\u1edbi Broker m\u1ed9t tin nh\u1eafn lwt \u1edf topic  /node/gone-offline  v\u1edbi tin nh\u1eafn  id  c\u1ee7a n\u00f3. V\u00e0 t\u00f4i c\u0169ng \u0111\u0103ng k\u00fd theo d\u00f5i topic  /node/gone-offline , s\u1ebd g\u1edfi SMS t\u1edbi \u0111i\u1ec7n tho\u1ea1i th\u00f4i m\u1ed7i khi nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn n\u00e0o \u1edf k\u00eanh m\u00e0 t\u00f4i theo d\u00f5i.\nTrong qu\u00e1 tr\u00ecnh ho\u1ea1t \u0111\u1ed9ng, c\u1ea3m bi\u1ebfn lu\u00f4n gi\u1eef k\u1ebft n\u1ed1i v\u1edbi Broker b\u1edfi vi\u1ec7c lu\u00f4n g\u1edfi g\u00f3i tin keepAlive. Nh\u01b0ng n\u1ebfu v\u00ec l\u00fd do g\u00ec \u0111\u00f3, c\u1ea3m bi\u1ebfn n\u00e0y chuy\u1ec3n sang ngo\u1ea1i tuy\u1ebfn, k\u1ebft n\u1ed1i t\u1edbi Broker timeout do Broker kh\u00f4ng c\u00f2n nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i keepAlive.\nL\u00fac n\u00e0y, do c\u1ea3m bi\u1ebfn c\u1ee7a t\u00f4i \u0111\u00e3 \u0111\u0103ng k\u00fd LWT, do v\u1eady broker s\u1ebd \u0111\u00f3ng k\u1ebft n\u1ed1i c\u1ee7a C\u1ea3m bi\u1ebfn, \u0111\u1ed3ng th\u1eddi s\u1ebd publish m\u1ed9t g\u00f3i tin l\u00e0 Id c\u1ee7a c\u1ea3m bi\u1ebfn v\u00e0o k\u00eanh  /node/gone-offline , d\u0129 nhi\u00ean l\u00e0 t\u00f4i c\u0169ng s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn b\u00e1o c\u00e1i C\u1ea3m bi\u1ebfn y\u00eau qu\u00fd c\u1ee7a m\u00ecnh  \u0111\u00e3 ngo\u1ea1i tuy\u1ebfn.  Ng\u1eafn g\u1ecdn  Ngo\u00e0i vi\u1ec7c \u0111\u00f3ng k\u1ebft n\u1ed1i c\u1ee7a Client \u0111\u00e3 ngo\u1ea1i tuy\u1ebfn, g\u00f3i tin LWT c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc v\u00e0 \u0111\u01b0\u1ee3c g\u1edfi b\u1edfi Broker t\u1edbi k\u00eanh n\u00e0o \u0111\u00f3 khi thi\u1ebft b\u1ecb \u0111\u0103ng k\u00fd LWT ngo\u1ea1i tuy\u1ebfn.",
            "title": "LWT"
        },
        {
            "location": "/nonos-sdk/mqtt/what-is-mqtt/#reference",
            "text": "http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html  http://bb-smartsensing.com/basics-of-mqtt/  http://stackoverflow.com/questions/17270863/  http://tuanpmt.github.io/what-is-mqtt/",
            "title": "Reference:"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/",
            "text": "S\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n MQTT v\u1edbi ESP8266\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n\n\nS\u01a1 \u0111\u1ed3 file\n\n\nM\u00e3 ngu\u1ed3n\n\n\nPublish v\u00e0 subcribe tin nh\u1eafn\n\n\nK\u1ebft qu\u1ea3\n\n\nTham kh\u1ea3o\n\n\n\n\n\n\n\n\n\n\nS\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n MQTT v\u1edbi ESP8266\n#\n\n\nT\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i \nBi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n, to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file, \nMakefile, user_config.h, rf_init.c\n gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file \nmain.c\n. \n\n\n\n\nN\u1ed9i dung\n\n\nS\u1eed d\u1ee5ng MQTT cho ESP8266\n\n\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n#\n\n\ngit clone https://github.com/tuanpmt/esp_mqtt.git\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\n\n\n\n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\nPublish v\u00e0 subcribe tin nh\u1eafn\n#\n\n\n/* TRUE if success */\nBOOL MQTT_Subscribe(MQTT_Client *client, char* topic, uint8_t qos);\n\nBOOL MQTT_Publish(MQTT_Client *client, const char* topic, const char* data, int data_length, int qos, int retain);\n\n\n\n\nK\u1ebft qu\u1ea3\n#\n\n\nTham kh\u1ea3o\n#\n\n\nMQTT LCD\n\n\nMQTT Broker for test\n\n\nMQTT Client for test",
            "title": "ESP8266 MQTT Client"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/#su-dung-thu-vien-mqtt-voi-esp8266",
            "text": "T\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i  Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean , to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file,  Makefile, user_config.h, rf_init.c  gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file  main.c .    N\u1ed9i dung  S\u1eed d\u1ee5ng MQTT cho ESP8266",
            "title": "S\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n MQTT v\u1edbi ESP8266"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/#lay-du-an-ve-tu-github",
            "text": "git clone https://github.com/tuanpmt/esp_mqtt.git",
            "title": "L\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/#so-o-file",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/#ma-nguon",
            "text": "",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/#publish-va-subcribe-tin-nhan",
            "text": "/* TRUE if success */\nBOOL MQTT_Subscribe(MQTT_Client *client, char* topic, uint8_t qos);\n\nBOOL MQTT_Publish(MQTT_Client *client, const char* topic, const char* data, int data_length, int qos, int retain);",
            "title": "Publish v\u00e0 subcribe tin nh\u1eafn"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/#ket-qua",
            "text": "",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/#tham-khao",
            "text": "MQTT LCD  MQTT Broker for test  MQTT Client for test",
            "title": "Tham kh\u1ea3o"
        },
        {
            "location": "/nonos-sdk/http-client/http-client/",
            "text": "",
            "title": "ESP8266 HTTP Client"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/",
            "text": "\u0110i\u1ec1u khi\u1ec3n LED qua webserver\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n\n\nS\u01a1 \u0111\u1ed3 file\n\n\nM\u00e3 ngu\u1ed3n\n\n\nK\u1ebft qu\u1ea3\n\n\nG\u1ee3i \u00fd\n\n\nReferences\n\n\n\n\n\n\n\n\n\n\n\u0110i\u1ec1u khi\u1ec3n LED qua webserver\n#\n\n\nT\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i \nBi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n, to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file, \nMakefile, user_config.h, rf_init.c\n gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file \nmain.c\n. \n\n\n\n\nN\u1ed9i dung\n\n\nT\u1ea1o m\u1ed9t webserver cho ph\u00e9p ng\u01b0\u1eddi d\u00f9ng b\u1eadt t\u1eaft LED t\u1eeb xa\n\n\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n#\n\n\ngit clone https://github.com/esp8266vn/esp-iot-http-server.git\ncd esp-iot-http-server && make\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\nesp-iot-led-blink\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h\n\n\n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\n#include \"ets_sys.h\"\n#include \"osapi.h\"\n#include \"user_interface.h\"\n#include \"espconn.h\"\n#include \"mem.h\"\n\nLOCAL struct espconn esp_conn;\nLOCAL esp_tcp esptcp;\n\n#define SERVER_LOCAL_PORT         8000\n\nchar *index_html =\n\"<!DOCTYPE html>\\r\\n\"\n\"<html>\\r\\n\"\n\"<body>\\r\\n\"\n\"\\r\\n\"\n\"<h1>ESP8266 HTTP server demo </h1>\\r\\n\"\n\"<button type='button' onclick='led_on()'>ON</button><br>\\r\\n\"\n\"<br>\\r\\n\"\n\"<button type='button' onclick='led_off()'>OFF</button><br>\\r\\n\"\n\" \\r\\n\"\n\"<script>\\r\\n\"\n\n\"function led_on() {\\r\\n\"\n\"  var xhttp;\\r\\n\"\n\"  if (window.XMLHttpRequest) {\\r\\n\"\n\"    // code for modern browsers\\r\\n\"\n\"    xhttp = new XMLHttpRequest();\\r\\n\"\n\"    } else {\\r\\n\"\n\"    // code for IE6, IE5\\r\\n\"\n\"    xhttp = new ActiveXObject(\\\"Microsoft.XMLHTTP\\\");\\r\\n\"\n\"  }\\r\\n\"\n\"  xhttp.open(\\\"GET\\\", 'led_on', true);\\r\\n\"\n\"  xhttp.send();\\r\\n\"\n\"}\\r\\n\"\n\n\"function led_off() {\\r\\n\"\n\"  var xhttp;\\r\\n\"\n\"  if (window.XMLHttpRequest) {\\r\\n\"\n\"    // code for modern browsers\\r\\n\"\n\"    xhttp = new XMLHttpRequest();\\r\\n\"\n\"    } else {\\r\\n\"\n\"    // code for IE6, IE5\\r\\n\"\n\"    xhttp = new ActiveXObject(\\\"Microsoft.XMLHTTP\\\");\\r\\n\"\n\"  }\\r\\n\"\n\"  xhttp.open(\\\"GET\\\", 'led_off', true);\\r\\n\"\n\"  xhttp.send();\\r\\n\"\n\"}\\r\\n\"\n\n\"</script>\\r\\n\"\n\"\\r\\n\"\n\"</body>\\r\\n\"\n\"</html>\\r\\n\";\n\n/******************************************************************************\n    * FunctionName : led_init\n    * Description     : led initialization.\n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nled_init(void)\n{\n    WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc) | (uint32_t)0x1);  \n    WRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe) | (uint32_t)0x0);\n    WRITE_PERI_REG(RTC_GPIO_ENABLE, (READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe) | (uint32_t)0x1);\n}\n\n/******************************************************************************\n    * FunctionName : led_set\n    * Description     : set led state according to led_value value.\n    * Parameters         : led_value - led state to be set\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nled_set(uint8_t led_value)\n{\n    WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe)| (uint32_t)(led_value & 1));\n}\n\n/******************************************************************************\n    * FunctionName : http_response\n    * Description     : send the html body with the html header.\n    * Parameters         :  pespconn - espconn of the http server\n    *                       error - status code\n    *                       html_txt - the buffer which contents the html file\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\nhttp_response(struct espconn *pespconn, int error, char *html_txt)\n{\n    char *buffer = NULL;\n    int html_length = 0;\n    buffer = (char *)os_malloc(256 * sizeof(char));\n    if(buffer != NULL)\n    {\n        if(html_txt != NULL)\n        {\n            html_length = os_strlen(html_txt);\n        }\n        else\n        {\n            html_length = 0;\n        }\n\n        os_sprintf(buffer, \"HTTP/1.1 %d OK\\r\\n\"\n                            \"Content-Length: %d\\r\\n\"\n                            \"Content-Type: text/html\\r\\n\"\n                            \"Connection: Closed\\r\\n\"\n                            \"\\r\\n\"\n        ,error, html_length);\n\n        if(html_length > 0)\n        {\n            buffer = (char *)os_realloc(buffer, (256 + html_length) *sizeof(char));\n            os_strcat(buffer, html_txt);\n        }\n\n        espconn_sent(pespconn, buffer, strlen(buffer));\n        os_free(buffer);\n    }\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_sent_cb\n    * Description     : data sent callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_sent_cb(void *arg)\n{\n    //data sent successfully\n\n    os_printf(\"tcp sent cb \\r\\n\");\n}\n\n\n/******************************************************************************\n    * FunctionName : tcp_server_recv_cb\n    * Description     : receive callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_recv_cb(void *arg, char *pusrdata, unsigned short length)\n{\n    char *ptr = 0;\n    //received some data from tcp connection\n\n    struct espconn *pespconn = arg;\n    // os_printf(\"tcp recv : %s \\r\\n\", pusrdata);\n    ptr = (char *)os_strstr(pusrdata, \"\\r\\n\");\n    ptr[0] = '\\0';\n    if (os_strcmp(pusrdata, \"GET / HTTP/1.1\") == 0)\n    {\n        http_response(pespconn, 200, index_html);\n    }\n    else if (os_strcmp(pusrdata, \"GET /led_on HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_on\\r\\n\");\n        led_set(0);\n        http_response(pespconn, 200, NULL);\n    } \n    else if (os_strcmp(pusrdata, \"GET /led_off HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_off\\r\\n\");\n        led_set(1);\n        http_response(pespconn, 200, NULL);\n    }\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_discon_cb\n    * Description     : disconnect callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_discon_cb(void *arg)\n{\n    //tcp disconnect successfully\n\n    os_printf(\"tcp disconnect succeed !!! \\r\\n\");\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_recon_cb\n    * Description     : reconnect callback, error occured in TCP connection.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_recon_cb(void *arg, sint8 err)\n{\n    //error occured , tcp connection broke. \n\n    os_printf(\"reconnect callback, error code %d !!! \\r\\n\",err);\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_listen\n    * Description     : TCP server listened a connection successfully\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_listen(void *arg)\n{\n    struct espconn *pesp_conn = arg;\n    os_printf(\"tcp_server_listen !!! \\r\\n\");\n\n    espconn_regist_recvcb(pesp_conn, tcp_server_recv_cb);\n    espconn_regist_reconcb(pesp_conn, tcp_server_recon_cb);\n    espconn_regist_disconcb(pesp_conn, tcp_server_discon_cb);\n\n    espconn_regist_sentcb(pesp_conn, tcp_server_sent_cb);\n}\n\n/******************************************************************************\n    * FunctionName : user_tcpserver_init\n    * Description     : parameter initialize as a TCP server\n    * Parameters         : port -- server port\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_tcpserver_init(uint32 port)\n{\n    esp_conn.type = ESPCONN_TCP;\n    esp_conn.state = ESPCONN_NONE;\n    esp_conn.proto.tcp = &esptcp;\n    esp_conn.proto.tcp->local_port = port;\n    espconn_regist_connectcb(&esp_conn, tcp_server_listen);\n\n    sint8 ret = espconn_accept(&esp_conn);\n\n    os_printf(\"espconn_accept [%d] !!! \\r\\n\", ret);\n\n}\nLOCAL os_timer_t test_timer;\n\n/******************************************************************************\n    * FunctionName : user_esp_platform_check_ip\n    * Description     : check whether get ip addr or not\n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_esp_platform_check_ip(void)\n{\n    struct ip_info ipconfig;\n\n    //disarm timer first\n    os_timer_disarm(&test_timer);\n\n    //get ip info of ESP8266 station\n    wifi_get_ip_info(STATION_IF, &ipconfig);\n\n    if (wifi_station_get_connect_status() == STATION_GOT_IP && ipconfig.ip.addr != 0) {\n\n            os_printf(\"got ip !!! \\r\\n\");\n            user_tcpserver_init(SERVER_LOCAL_PORT);\n\n    } else {\n\n        if ((wifi_station_get_connect_status() == STATION_WRONG_PASSWORD ||\n                wifi_station_get_connect_status() == STATION_NO_AP_FOUND ||\n                wifi_station_get_connect_status() == STATION_CONNECT_FAIL)) {\n\n            os_printf(\"connect fail !!! \\r\\n\");\n\n        } else {\n\n            //re-arm timer to check ip\n            os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n            os_timer_arm(&test_timer, 100, 0);\n        }\n    }\n}\n\n/******************************************************************************\n    * FunctionName : user_set_station_config\n    * Description     : set the router info which ESP8266 station will connect to \n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_set_station_config(void)\n{\n    // Wifi configuration\n    char ssid[32] = \"yourssid\";\n    char password[64] = \"yourpassword\";\n    struct station_config stationConf;\n\n    os_memset(stationConf.ssid, 0, 32);\n    os_memset(stationConf.password, 0, 64);\n    //need not mac address\n    stationConf.bssid_set = 0;\n\n    //Set ap settings\n    os_memcpy(&stationConf.ssid, ssid, 32);\n    os_memcpy(&stationConf.password, password, 64);\n    wifi_station_set_config(&stationConf);\n\n    //set a timer to check whether got ip from router succeed or not.\n    os_timer_disarm(&test_timer);\n    os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n    os_timer_arm(&test_timer, 100, 0);\n}\n\n/******************************************************************************\n    * FunctionName : user_init\n    * Description     : entry of user application, init user function here\n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_init(void)\n{\n    led_init();\n    led_set(1);\n    uart_div_modify(0, UART_CLK_FREQ / 115200);\n    os_printf(\"SDK version:%s\\n\", system_get_sdk_version());\n\n    //Set the module to station mode\n    wifi_set_opmode(STATION_MODE);\n\n    // ESP8266 connect to router.\n    user_set_station_config();\n}\n\n\n\n\n\n\nK\u1ebft qu\u1ea3\n#\n\n\nKhi ch\u01b0\u01a1ng tr\u00ecnh b\u1eaft \u0111\u1ea7u ch\u1ea1y tr\u00ean terminal s\u1ebd in ra \u0111\u1ecba ch\u1ec9 IP c\u1ee7a esp8266 nh\u01b0 sau\n\n\nconnected with yourssid, channel 13\ndhcp client start...\nip:192.168.1.21,mask:255.255.255.0,gw:192.168.1.1\n\n\n\n\nNh\u01b0 v\u1eady \u0111\u1ecba ch\u1ec9 IP m\u00e0 esp8266 \u0111\u01b0\u1ee3c c\u1ea5p l\u00e0 \n192.168.1.21\n\nL\u00fac n\u00e0y b\u1ea1n m\u1edf tr\u00ecnh duy\u1ec7t web l\u00ean v\u00e0 truy c\u1eadp v\u00e0o \u0111\u1ecba ch\u1ec9 \n192.168.1.21:8000\n th\u00ec s\u1ebd truy c\u1eadp \u0111\u01b0\u1ee3c v\u00e0o 1 webserver nh\u01b0 sau\n\n\n\n\nkhi click v\u00e0o n\u00fat on th\u00ec LED tr\u00ean board s\u1ebd s\u00e1ng, khi click v\u00e0o n\u00fat off th\u00ec LED s\u1ebd t\u1eaft\n\n\nG\u1ee3i \u00fd\n#\n\n\n\u0110\u1ec3 c\u00f3 th\u1ec3 hi\u1ec3u c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a \u0111o\u1ea1n ch\u01b0\u01a1ng tr\u00ecnh tr\u00ean m\u00ecnh xin \u0111\u1ec1 ngh\u1ecb c\u00e1c b\u1ea1n \u0111\u1ecdc qua v\u1ec1 c\u00e1c kh\u00e1i ni\u1ec7m http protocol, http request, http response nh\u1eefng th\u00f4ng tin n\u00e0y c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng t\u00ecm th\u1ea5y \u1edf trang https://www.tutorialspoint.com/\nV\u1ec1 c\u01a1 b\u1ea3n th\u00ec http server c\u0169ng ch\u1ec9 l\u00e0 m\u1ed9t \ntcp server\n nh\u01b0ng s\u1ebd giao ti\u1ebfp v\u1edbi client th\u00f4ng qua \nhttp response\n v\u00e0 \nhttp request\n. M\u1ed7i khi client mu\u1ed1n th\u00f4ng b\u00e1o \u0111i\u1ec1u g\u00ec cho server th\u00ec s\u1ebd g\u1eedi m\u1ed9t \nhttp request\n cho server v\u00e0 server s\u1ebd tr\u1ea3 l\u1eddi l\u1ea1i b\u1eb1ng m\u1ed9t \nhttp response\n.\nD\u01b0\u1edbi \u0111\u00e2y l\u00e0 c\u00e1ch m\u00e0 client v\u00e0 server trao \u0111\u1ed5i th\u00f4ng tin\n\n\n\n\nkhi c\u00f3 m\u1ed9t client truy c\u1eadp v\u00e0o \u0111\u1ecba ch\u1ec9 c\u1ee7a webserver th\u00ec browser s\u1ebd g\u1eedi cho server m\u1ed9t http request nh\u01b0 sau\n\n\nGET / HTTP/1.1\n\n\n\n\nNgay khi nh\u1eadn \u0111\u01b0\u1ee3c request n\u00e0y server s\u1ebd g\u1eedi l\u1ea1i m\u1ed9t http response c\u00f3 ch\u1ee9a n\u1ed9i dung l\u00e0 file html c\u1ee7a webserver\n\n\nHTTP/1.1 200 OK\nContent-Length: 200\nContent-Type: text/html\nConnection: Closed\n\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>ESP8266 HTTP server demo </h1>\n<button type='button' onclick='led_on()'>ON</button><br>\n<br>\n<button type='button' onclick='led_off()'>OFF</button><br>\n\n<script>\n\nfunction led_on(){\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_on', true);\n  xhttp.send();\n}\n\nfunction led_off() {\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_off', true);\n  xhttp.send();\n}\n\n</script>\n</body>\n</html>\n\n\n\n\nCh\u00fa \u00fd l\u00e0 http response n\u00e0y g\u1ed3m 3 ph\u1ea7n l\u00e0 \n\nStatus line\n : tr\u1ea3 v\u1ec1 http version, status code\n\n\nHTTP/1.1 200 OK\n\n\n\n\nHeader\n : ch\u1ee9a message length, message type\n\n\nContent-Length: 200\nContent-Type: text/html\nConnection: Closed\n\n\n\n\nMesage body\n: ch\u1ee9a n\u1ed9i dung m\u00e0 server mu\u1ed1n g\u1eedi cho client th\u00f4ng th\u01b0\u1eddng l\u00e0 n\u1ed9i dung file html,js,php\u2026 \u0111\u01b0\u1ee3c request\n\n\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>ESP8266 HTTP server demo </h1>\n<button type='button' onclick='led_on()'>ON</button><br>\n<br>\n<button type='button' onclick='led_off()'>OFF</button><br>\n\n<script>\n\nfunction led_on(){\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_on', true);\n  xhttp.send();\n}\n\nfunction led_off() {\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_off', true);\n  xhttp.send();\n}\n\n</script>\n</body>\n</html>\n\n\n\n\nCh\u00fa \u00fd:\n    Header v\u00e0 message body \u0111\u01b0\u1ee3c ng\u0103n c\u00e1ch b\u1edfi m\u1ed9t empty line ch\u1ec9 g\u1ed3m k\u00ed t\u1ef1 \u201c\\r\\n\u201d n\u1ebfu kh\u00f4ng c\u00f3 d\u00f2ng n\u00e0y th\u00ec n\u1ed9i dung    m\u00e0 client nh\u1eadn \u0111\u01b0\u1ee3c c\u00f3 th\u1ec3 kh\u00f4ng \u0111\u00fang.\n\n\n\u0110\u1ec3 c\u1eadp nh\u1eadt tr\u1ea1ng th\u00e1i c\u1ee7a LED th\u00ec m\u00ecnh d\u00f9ng k\u1ef9 thu\u1eadt \najax\n\nKhi nh\u1ea5n v\u00e0o n\u00fat \non\n s\u1ef1 ki\u1ec7n \nonclick\n \u0111\u01b0\u1ee3c k\u00edch ho\u1ea1t v\u00e0 h\u00e0m \nled_on()\n s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi v\u00e0 g\u1eedi m\u1ed9t \nget request\n c\u00f3 d\u1ea1ng nh\u01b0 sau \nGET /led_on HTTP/1.1\n \u0111\u1ec3 y\u00eau c\u1ea7u server set on LED\n\n\nT\u01b0\u01a1ng t\u1ef1 khi nh\u1ea5n n\u00fat \noff\n h\u00e0m \nled_off()\n s\u1ebd g\u1eedi request \nGET /led_off HTTP/1.1\n \u0111\u1ec3 y\u00eau c\u1ea7u server t\u1eaft LED\n\n\nNh\u01b0 v\u1eady ph\u00eda esp8266 s\u1ebd c\u1ea7n \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh nh\u01b0 1 \ntcp server\n l\u1eafng nghe v\u00e0 x\u1eed l\u00fd c\u00e1c \nhttp request\n\n\n/******************************************************************************\n    * FunctionName : user_tcpserver_init\n    * Description     : parameter initialize as a TCP server\n    * Parameters         : port -- server port\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_tcpserver_init(uint32 port)\n{\n    esp_conn.type = ESPCONN_TCP;\n    esp_conn.state = ESPCONN_NONE;\n    esp_conn.proto.tcp = &esptcp;\n    esp_conn.proto.tcp->local_port = port;\n    espconn_regist_connectcb(&esp_conn, tcp_server_listen);\n\n    sint8 ret = espconn_accept(&esp_conn);\n\n    os_printf(\"espconn_accept [%d] !!! \\r\\n\", ret);\n\n}\n\n\n\n\nCh\u00fa \u00fd :\n\n\nespconn_regist_connectcb(&esp_conn, tcp_server_listen); \n\n\n\n\nC\u00f3 ngh\u0129a l\u00e0 h\u00e0m \ntcp_server_listen\n s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi sau khi \u0111\u00e3 k\u1ebft n\u1ed1i tcp th\u00e0nh c\u00f4ng\n\n\nTrong h\u00e0m \ntcp_server_listen\n l\u1ea1i c\u1ea5u h\u00ecnh ti\u1ebfp 4 h\u00e0m call back\n\n\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_listen(void *arg)\n{\n    struct espconn *pesp_conn = arg;\n    os_printf(\"tcp_server_listen !!! \\r\\n\");\n\n    espconn_regist_recvcb(pesp_conn, tcp_server_recv_cb);\n    espconn_regist_reconcb(pesp_conn, tcp_server_recon_cb);\n    espconn_regist_disconcb(pesp_conn, tcp_server_discon_cb);\n\n    espconn_regist_sentcb(pesp_conn, tcp_server_sent_cb);\n}\n\n\n\n\ntcp_server_recv_cb\n: \u0111\u01b0\u1ee3c g\u1ecdi khi nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u\n\ntcp_server_recon_cb\n:  \u0111\u01b0\u1ee3c g\u1ecdi khi x\u1ea3y ra l\u1ed7i c\u1ea7n reconnect l\u1ea1i \u0111\u01b0\u1eddng truy\u1ec1n tcp\n\ntcp_server_discon_cb\n: \u0111\u01b0\u1ee3c g\u1ecdi khi tcp b\u1ecb disconnect\n\ntcp_server_sent_cb\n: \u0111\u01b0\u1ee3c g\u1ecdi khi d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c g\u1eedi th\u00e0nh c\u00f4ng\n\n\nNh\u01b0 v\u1eady ch\u00fang ta s\u1ebd x\u1ee7 l\u00fd \nhttp request\n trong h\u00e0m \ntcp_server_recv_cb\n nh\u01b0 trong \u0111o\u1ea1n code b\u00ean d\u01b0\u1edbi\n\n\n/******************************************************************************\n    * FunctionName : tcp_server_recv_cb\n    * Description     : receive callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_recv_cb(void *arg, char *pusrdata, unsigned short length)\n{\n    char *ptr = 0;\n    //received some data from tcp connection\n\n    struct espconn *pespconn = arg;\n    // os_printf(\"tcp recv : %s \\r\\n\", pusrdata);\n    ptr = (char *)os_strstr(pusrdata, \"\\r\\n\");\n    ptr[0] = '\\0';\n    if (os_strcmp(pusrdata, \"GET / HTTP/1.1\") == 0)\n    {\n        http_response(pespconn, 200, index_html);\n    }\n    else if (os_strcmp(pusrdata, \"GET /led_on HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_on\\r\\n\");\n        led_set(0);\n        http_response(pespconn, 200, NULL);\n    } \n    else if (os_strcmp(pusrdata, \"GET /led_off HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_off\\r\\n\");\n        led_set(1);\n        http_response(pespconn, 200, NULL);\n    }\n}\n\n\n\n\nReferences\n#\n\n\n\n\nhttp://www.tutorialspoint.com/http/http_requests\n\n\nhttps://www.tutorialspoint.com/http/http_responses.htm\n\n\nhttp://www.w3schools.com/xml/ajax_intro.asp\n\n\nhttps://espressif.com/en/products/hardware/esp8266ex/resources",
            "title": "ESP8266 HTTP Server"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/#ieu-khien-led-qua-webserver",
            "text": "T\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i  Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean , to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file,  Makefile, user_config.h, rf_init.c  gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file  main.c .    N\u1ed9i dung  T\u1ea1o m\u1ed9t webserver cho ph\u00e9p ng\u01b0\u1eddi d\u00f9ng b\u1eadt t\u1eaft LED t\u1eeb xa",
            "title": "\u0110i\u1ec1u khi\u1ec3n LED qua webserver"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/#lay-du-an-ve-tu-github",
            "text": "git clone https://github.com/esp8266vn/esp-iot-http-server.git\ncd esp-iot-http-server && make",
            "title": "L\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/#so-o-file",
            "text": "esp-iot-led-blink\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/#ma-nguon",
            "text": "#include \"ets_sys.h\"\n#include \"osapi.h\"\n#include \"user_interface.h\"\n#include \"espconn.h\"\n#include \"mem.h\"\n\nLOCAL struct espconn esp_conn;\nLOCAL esp_tcp esptcp;\n\n#define SERVER_LOCAL_PORT         8000\n\nchar *index_html =\n\"<!DOCTYPE html>\\r\\n\"\n\"<html>\\r\\n\"\n\"<body>\\r\\n\"\n\"\\r\\n\"\n\"<h1>ESP8266 HTTP server demo </h1>\\r\\n\"\n\"<button type='button' onclick='led_on()'>ON</button><br>\\r\\n\"\n\"<br>\\r\\n\"\n\"<button type='button' onclick='led_off()'>OFF</button><br>\\r\\n\"\n\" \\r\\n\"\n\"<script>\\r\\n\"\n\n\"function led_on() {\\r\\n\"\n\"  var xhttp;\\r\\n\"\n\"  if (window.XMLHttpRequest) {\\r\\n\"\n\"    // code for modern browsers\\r\\n\"\n\"    xhttp = new XMLHttpRequest();\\r\\n\"\n\"    } else {\\r\\n\"\n\"    // code for IE6, IE5\\r\\n\"\n\"    xhttp = new ActiveXObject(\\\"Microsoft.XMLHTTP\\\");\\r\\n\"\n\"  }\\r\\n\"\n\"  xhttp.open(\\\"GET\\\", 'led_on', true);\\r\\n\"\n\"  xhttp.send();\\r\\n\"\n\"}\\r\\n\"\n\n\"function led_off() {\\r\\n\"\n\"  var xhttp;\\r\\n\"\n\"  if (window.XMLHttpRequest) {\\r\\n\"\n\"    // code for modern browsers\\r\\n\"\n\"    xhttp = new XMLHttpRequest();\\r\\n\"\n\"    } else {\\r\\n\"\n\"    // code for IE6, IE5\\r\\n\"\n\"    xhttp = new ActiveXObject(\\\"Microsoft.XMLHTTP\\\");\\r\\n\"\n\"  }\\r\\n\"\n\"  xhttp.open(\\\"GET\\\", 'led_off', true);\\r\\n\"\n\"  xhttp.send();\\r\\n\"\n\"}\\r\\n\"\n\n\"</script>\\r\\n\"\n\"\\r\\n\"\n\"</body>\\r\\n\"\n\"</html>\\r\\n\";\n\n/******************************************************************************\n    * FunctionName : led_init\n    * Description     : led initialization.\n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nled_init(void)\n{\n    WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc) | (uint32_t)0x1);  \n    WRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe) | (uint32_t)0x0);\n    WRITE_PERI_REG(RTC_GPIO_ENABLE, (READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe) | (uint32_t)0x1);\n}\n\n/******************************************************************************\n    * FunctionName : led_set\n    * Description     : set led state according to led_value value.\n    * Parameters         : led_value - led state to be set\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nled_set(uint8_t led_value)\n{\n    WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe)| (uint32_t)(led_value & 1));\n}\n\n/******************************************************************************\n    * FunctionName : http_response\n    * Description     : send the html body with the html header.\n    * Parameters         :  pespconn - espconn of the http server\n    *                       error - status code\n    *                       html_txt - the buffer which contents the html file\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\nhttp_response(struct espconn *pespconn, int error, char *html_txt)\n{\n    char *buffer = NULL;\n    int html_length = 0;\n    buffer = (char *)os_malloc(256 * sizeof(char));\n    if(buffer != NULL)\n    {\n        if(html_txt != NULL)\n        {\n            html_length = os_strlen(html_txt);\n        }\n        else\n        {\n            html_length = 0;\n        }\n\n        os_sprintf(buffer, \"HTTP/1.1 %d OK\\r\\n\"\n                            \"Content-Length: %d\\r\\n\"\n                            \"Content-Type: text/html\\r\\n\"\n                            \"Connection: Closed\\r\\n\"\n                            \"\\r\\n\"\n        ,error, html_length);\n\n        if(html_length > 0)\n        {\n            buffer = (char *)os_realloc(buffer, (256 + html_length) *sizeof(char));\n            os_strcat(buffer, html_txt);\n        }\n\n        espconn_sent(pespconn, buffer, strlen(buffer));\n        os_free(buffer);\n    }\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_sent_cb\n    * Description     : data sent callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_sent_cb(void *arg)\n{\n    //data sent successfully\n\n    os_printf(\"tcp sent cb \\r\\n\");\n}\n\n\n/******************************************************************************\n    * FunctionName : tcp_server_recv_cb\n    * Description     : receive callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_recv_cb(void *arg, char *pusrdata, unsigned short length)\n{\n    char *ptr = 0;\n    //received some data from tcp connection\n\n    struct espconn *pespconn = arg;\n    // os_printf(\"tcp recv : %s \\r\\n\", pusrdata);\n    ptr = (char *)os_strstr(pusrdata, \"\\r\\n\");\n    ptr[0] = '\\0';\n    if (os_strcmp(pusrdata, \"GET / HTTP/1.1\") == 0)\n    {\n        http_response(pespconn, 200, index_html);\n    }\n    else if (os_strcmp(pusrdata, \"GET /led_on HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_on\\r\\n\");\n        led_set(0);\n        http_response(pespconn, 200, NULL);\n    } \n    else if (os_strcmp(pusrdata, \"GET /led_off HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_off\\r\\n\");\n        led_set(1);\n        http_response(pespconn, 200, NULL);\n    }\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_discon_cb\n    * Description     : disconnect callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_discon_cb(void *arg)\n{\n    //tcp disconnect successfully\n\n    os_printf(\"tcp disconnect succeed !!! \\r\\n\");\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_recon_cb\n    * Description     : reconnect callback, error occured in TCP connection.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_recon_cb(void *arg, sint8 err)\n{\n    //error occured , tcp connection broke. \n\n    os_printf(\"reconnect callback, error code %d !!! \\r\\n\",err);\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_listen\n    * Description     : TCP server listened a connection successfully\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_listen(void *arg)\n{\n    struct espconn *pesp_conn = arg;\n    os_printf(\"tcp_server_listen !!! \\r\\n\");\n\n    espconn_regist_recvcb(pesp_conn, tcp_server_recv_cb);\n    espconn_regist_reconcb(pesp_conn, tcp_server_recon_cb);\n    espconn_regist_disconcb(pesp_conn, tcp_server_discon_cb);\n\n    espconn_regist_sentcb(pesp_conn, tcp_server_sent_cb);\n}\n\n/******************************************************************************\n    * FunctionName : user_tcpserver_init\n    * Description     : parameter initialize as a TCP server\n    * Parameters         : port -- server port\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_tcpserver_init(uint32 port)\n{\n    esp_conn.type = ESPCONN_TCP;\n    esp_conn.state = ESPCONN_NONE;\n    esp_conn.proto.tcp = &esptcp;\n    esp_conn.proto.tcp->local_port = port;\n    espconn_regist_connectcb(&esp_conn, tcp_server_listen);\n\n    sint8 ret = espconn_accept(&esp_conn);\n\n    os_printf(\"espconn_accept [%d] !!! \\r\\n\", ret);\n\n}\nLOCAL os_timer_t test_timer;\n\n/******************************************************************************\n    * FunctionName : user_esp_platform_check_ip\n    * Description     : check whether get ip addr or not\n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_esp_platform_check_ip(void)\n{\n    struct ip_info ipconfig;\n\n    //disarm timer first\n    os_timer_disarm(&test_timer);\n\n    //get ip info of ESP8266 station\n    wifi_get_ip_info(STATION_IF, &ipconfig);\n\n    if (wifi_station_get_connect_status() == STATION_GOT_IP && ipconfig.ip.addr != 0) {\n\n            os_printf(\"got ip !!! \\r\\n\");\n            user_tcpserver_init(SERVER_LOCAL_PORT);\n\n    } else {\n\n        if ((wifi_station_get_connect_status() == STATION_WRONG_PASSWORD ||\n                wifi_station_get_connect_status() == STATION_NO_AP_FOUND ||\n                wifi_station_get_connect_status() == STATION_CONNECT_FAIL)) {\n\n            os_printf(\"connect fail !!! \\r\\n\");\n\n        } else {\n\n            //re-arm timer to check ip\n            os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n            os_timer_arm(&test_timer, 100, 0);\n        }\n    }\n}\n\n/******************************************************************************\n    * FunctionName : user_set_station_config\n    * Description     : set the router info which ESP8266 station will connect to \n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_set_station_config(void)\n{\n    // Wifi configuration\n    char ssid[32] = \"yourssid\";\n    char password[64] = \"yourpassword\";\n    struct station_config stationConf;\n\n    os_memset(stationConf.ssid, 0, 32);\n    os_memset(stationConf.password, 0, 64);\n    //need not mac address\n    stationConf.bssid_set = 0;\n\n    //Set ap settings\n    os_memcpy(&stationConf.ssid, ssid, 32);\n    os_memcpy(&stationConf.password, password, 64);\n    wifi_station_set_config(&stationConf);\n\n    //set a timer to check whether got ip from router succeed or not.\n    os_timer_disarm(&test_timer);\n    os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n    os_timer_arm(&test_timer, 100, 0);\n}\n\n/******************************************************************************\n    * FunctionName : user_init\n    * Description     : entry of user application, init user function here\n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_init(void)\n{\n    led_init();\n    led_set(1);\n    uart_div_modify(0, UART_CLK_FREQ / 115200);\n    os_printf(\"SDK version:%s\\n\", system_get_sdk_version());\n\n    //Set the module to station mode\n    wifi_set_opmode(STATION_MODE);\n\n    // ESP8266 connect to router.\n    user_set_station_config();\n}",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/#ket-qua",
            "text": "Khi ch\u01b0\u01a1ng tr\u00ecnh b\u1eaft \u0111\u1ea7u ch\u1ea1y tr\u00ean terminal s\u1ebd in ra \u0111\u1ecba ch\u1ec9 IP c\u1ee7a esp8266 nh\u01b0 sau  connected with yourssid, channel 13\ndhcp client start...\nip:192.168.1.21,mask:255.255.255.0,gw:192.168.1.1  Nh\u01b0 v\u1eady \u0111\u1ecba ch\u1ec9 IP m\u00e0 esp8266 \u0111\u01b0\u1ee3c c\u1ea5p l\u00e0  192.168.1.21 \nL\u00fac n\u00e0y b\u1ea1n m\u1edf tr\u00ecnh duy\u1ec7t web l\u00ean v\u00e0 truy c\u1eadp v\u00e0o \u0111\u1ecba ch\u1ec9  192.168.1.21:8000  th\u00ec s\u1ebd truy c\u1eadp \u0111\u01b0\u1ee3c v\u00e0o 1 webserver nh\u01b0 sau   khi click v\u00e0o n\u00fat on th\u00ec LED tr\u00ean board s\u1ebd s\u00e1ng, khi click v\u00e0o n\u00fat off th\u00ec LED s\u1ebd t\u1eaft",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/#goi-y",
            "text": "\u0110\u1ec3 c\u00f3 th\u1ec3 hi\u1ec3u c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a \u0111o\u1ea1n ch\u01b0\u01a1ng tr\u00ecnh tr\u00ean m\u00ecnh xin \u0111\u1ec1 ngh\u1ecb c\u00e1c b\u1ea1n \u0111\u1ecdc qua v\u1ec1 c\u00e1c kh\u00e1i ni\u1ec7m http protocol, http request, http response nh\u1eefng th\u00f4ng tin n\u00e0y c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng t\u00ecm th\u1ea5y \u1edf trang https://www.tutorialspoint.com/\nV\u1ec1 c\u01a1 b\u1ea3n th\u00ec http server c\u0169ng ch\u1ec9 l\u00e0 m\u1ed9t  tcp server  nh\u01b0ng s\u1ebd giao ti\u1ebfp v\u1edbi client th\u00f4ng qua  http response  v\u00e0  http request . M\u1ed7i khi client mu\u1ed1n th\u00f4ng b\u00e1o \u0111i\u1ec1u g\u00ec cho server th\u00ec s\u1ebd g\u1eedi m\u1ed9t  http request  cho server v\u00e0 server s\u1ebd tr\u1ea3 l\u1eddi l\u1ea1i b\u1eb1ng m\u1ed9t  http response .\nD\u01b0\u1edbi \u0111\u00e2y l\u00e0 c\u00e1ch m\u00e0 client v\u00e0 server trao \u0111\u1ed5i th\u00f4ng tin   khi c\u00f3 m\u1ed9t client truy c\u1eadp v\u00e0o \u0111\u1ecba ch\u1ec9 c\u1ee7a webserver th\u00ec browser s\u1ebd g\u1eedi cho server m\u1ed9t http request nh\u01b0 sau  GET / HTTP/1.1  Ngay khi nh\u1eadn \u0111\u01b0\u1ee3c request n\u00e0y server s\u1ebd g\u1eedi l\u1ea1i m\u1ed9t http response c\u00f3 ch\u1ee9a n\u1ed9i dung l\u00e0 file html c\u1ee7a webserver  HTTP/1.1 200 OK\nContent-Length: 200\nContent-Type: text/html\nConnection: Closed\n\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>ESP8266 HTTP server demo </h1>\n<button type='button' onclick='led_on()'>ON</button><br>\n<br>\n<button type='button' onclick='led_off()'>OFF</button><br>\n\n<script>\n\nfunction led_on(){\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_on', true);\n  xhttp.send();\n}\n\nfunction led_off() {\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_off', true);\n  xhttp.send();\n}\n\n</script>\n</body>\n</html>  Ch\u00fa \u00fd l\u00e0 http response n\u00e0y g\u1ed3m 3 ph\u1ea7n l\u00e0  Status line  : tr\u1ea3 v\u1ec1 http version, status code  HTTP/1.1 200 OK  Header  : ch\u1ee9a message length, message type  Content-Length: 200\nContent-Type: text/html\nConnection: Closed  Mesage body : ch\u1ee9a n\u1ed9i dung m\u00e0 server mu\u1ed1n g\u1eedi cho client th\u00f4ng th\u01b0\u1eddng l\u00e0 n\u1ed9i dung file html,js,php\u2026 \u0111\u01b0\u1ee3c request  <!DOCTYPE html>\n<html>\n<body>\n\n<h1>ESP8266 HTTP server demo </h1>\n<button type='button' onclick='led_on()'>ON</button><br>\n<br>\n<button type='button' onclick='led_off()'>OFF</button><br>\n\n<script>\n\nfunction led_on(){\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_on', true);\n  xhttp.send();\n}\n\nfunction led_off() {\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_off', true);\n  xhttp.send();\n}\n\n</script>\n</body>\n</html>  Ch\u00fa \u00fd:\n    Header v\u00e0 message body \u0111\u01b0\u1ee3c ng\u0103n c\u00e1ch b\u1edfi m\u1ed9t empty line ch\u1ec9 g\u1ed3m k\u00ed t\u1ef1 \u201c\\r\\n\u201d n\u1ebfu kh\u00f4ng c\u00f3 d\u00f2ng n\u00e0y th\u00ec n\u1ed9i dung    m\u00e0 client nh\u1eadn \u0111\u01b0\u1ee3c c\u00f3 th\u1ec3 kh\u00f4ng \u0111\u00fang.  \u0110\u1ec3 c\u1eadp nh\u1eadt tr\u1ea1ng th\u00e1i c\u1ee7a LED th\u00ec m\u00ecnh d\u00f9ng k\u1ef9 thu\u1eadt  ajax \nKhi nh\u1ea5n v\u00e0o n\u00fat  on  s\u1ef1 ki\u1ec7n  onclick  \u0111\u01b0\u1ee3c k\u00edch ho\u1ea1t v\u00e0 h\u00e0m  led_on()  s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi v\u00e0 g\u1eedi m\u1ed9t  get request  c\u00f3 d\u1ea1ng nh\u01b0 sau  GET /led_on HTTP/1.1  \u0111\u1ec3 y\u00eau c\u1ea7u server set on LED  T\u01b0\u01a1ng t\u1ef1 khi nh\u1ea5n n\u00fat  off  h\u00e0m  led_off()  s\u1ebd g\u1eedi request  GET /led_off HTTP/1.1  \u0111\u1ec3 y\u00eau c\u1ea7u server t\u1eaft LED  Nh\u01b0 v\u1eady ph\u00eda esp8266 s\u1ebd c\u1ea7n \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh nh\u01b0 1  tcp server  l\u1eafng nghe v\u00e0 x\u1eed l\u00fd c\u00e1c  http request  /******************************************************************************\n    * FunctionName : user_tcpserver_init\n    * Description     : parameter initialize as a TCP server\n    * Parameters         : port -- server port\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_tcpserver_init(uint32 port)\n{\n    esp_conn.type = ESPCONN_TCP;\n    esp_conn.state = ESPCONN_NONE;\n    esp_conn.proto.tcp = &esptcp;\n    esp_conn.proto.tcp->local_port = port;\n    espconn_regist_connectcb(&esp_conn, tcp_server_listen);\n\n    sint8 ret = espconn_accept(&esp_conn);\n\n    os_printf(\"espconn_accept [%d] !!! \\r\\n\", ret);\n\n}  Ch\u00fa \u00fd :  espconn_regist_connectcb(&esp_conn, tcp_server_listen);   C\u00f3 ngh\u0129a l\u00e0 h\u00e0m  tcp_server_listen  s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi sau khi \u0111\u00e3 k\u1ebft n\u1ed1i tcp th\u00e0nh c\u00f4ng  Trong h\u00e0m  tcp_server_listen  l\u1ea1i c\u1ea5u h\u00ecnh ti\u1ebfp 4 h\u00e0m call back  LOCAL void ICACHE_FLASH_ATTR\ntcp_server_listen(void *arg)\n{\n    struct espconn *pesp_conn = arg;\n    os_printf(\"tcp_server_listen !!! \\r\\n\");\n\n    espconn_regist_recvcb(pesp_conn, tcp_server_recv_cb);\n    espconn_regist_reconcb(pesp_conn, tcp_server_recon_cb);\n    espconn_regist_disconcb(pesp_conn, tcp_server_discon_cb);\n\n    espconn_regist_sentcb(pesp_conn, tcp_server_sent_cb);\n}  tcp_server_recv_cb : \u0111\u01b0\u1ee3c g\u1ecdi khi nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u tcp_server_recon_cb :  \u0111\u01b0\u1ee3c g\u1ecdi khi x\u1ea3y ra l\u1ed7i c\u1ea7n reconnect l\u1ea1i \u0111\u01b0\u1eddng truy\u1ec1n tcp tcp_server_discon_cb : \u0111\u01b0\u1ee3c g\u1ecdi khi tcp b\u1ecb disconnect tcp_server_sent_cb : \u0111\u01b0\u1ee3c g\u1ecdi khi d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c g\u1eedi th\u00e0nh c\u00f4ng  Nh\u01b0 v\u1eady ch\u00fang ta s\u1ebd x\u1ee7 l\u00fd  http request  trong h\u00e0m  tcp_server_recv_cb  nh\u01b0 trong \u0111o\u1ea1n code b\u00ean d\u01b0\u1edbi  /******************************************************************************\n    * FunctionName : tcp_server_recv_cb\n    * Description     : receive callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_recv_cb(void *arg, char *pusrdata, unsigned short length)\n{\n    char *ptr = 0;\n    //received some data from tcp connection\n\n    struct espconn *pespconn = arg;\n    // os_printf(\"tcp recv : %s \\r\\n\", pusrdata);\n    ptr = (char *)os_strstr(pusrdata, \"\\r\\n\");\n    ptr[0] = '\\0';\n    if (os_strcmp(pusrdata, \"GET / HTTP/1.1\") == 0)\n    {\n        http_response(pespconn, 200, index_html);\n    }\n    else if (os_strcmp(pusrdata, \"GET /led_on HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_on\\r\\n\");\n        led_set(0);\n        http_response(pespconn, 200, NULL);\n    } \n    else if (os_strcmp(pusrdata, \"GET /led_off HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_off\\r\\n\");\n        led_set(1);\n        http_response(pespconn, 200, NULL);\n    }\n}",
            "title": "G\u1ee3i \u00fd"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/#references",
            "text": "http://www.tutorialspoint.com/http/http_requests  https://www.tutorialspoint.com/http/http_responses.htm  http://www.w3schools.com/xml/ajax_intro.asp  https://espressif.com/en/products/hardware/esp8266ex/resources",
            "title": "References"
        },
        {
            "location": "/nonos-sdk/fota/fota/",
            "text": "Gi\u1edbi thi\u1ec7u\n#\n\n\nFOTA l\u00e0 Firmware Over The Air, v\u1edbi FOTA th\u00ec ch\u00fang ta c\u00f3 th\u1ec3 c\u1eadp nh\u1eadt firmware t\u1eeb xa th\u00f4ng qua m\u1ea1ng cho ESP m\u00e0 kh\u00f4ng c\u1ea7n k\u1ebft n\u1ed1i c\u1ed5ng n\u1ea1p gi\u1eefa ESP v\u00e0 m\u00e1y t\u00ednh.\n\u0110\u1ec3 th\u1ef1c hi\u1ec7n FOTA c\u1ea7n t\u1ea1o 2 file \u0111\u1ec3 n\u1ea1p v\u00e0o flash\n- boot.bin \u0111\u01b0\u1ee3c ghi v\u00e0o \u0111\u1ecba ch\u1ec9 0x00000\n- user1.bin \u0111\u01b0\u1ee3c ghi v\u00e0o \u0111\u1ecba ch\u1ec9 0x01000\n\n\nFlash\n#\n\n\nT\u00f9y theo dung l\u01b0\u1ee3ng flash c\u1ee7a c\u00e1c phi\u00ean b\u1ea3n ESP8266 m\u00e0 c\u00f3 c\u00e1c flash kh\u00e1c nhau\n\n\n512KB Flash\n#\n\n\n\n\n\n\n\n\n\n\nSector\n\n\nM\u00f4 t\u1ea3\n\n\nRegion\n\n\nK\u00edch th\u01b0\u1edbc\n\n\n\n\n\n\n\n\n\n\nBoot\n\n\nL\u01b0u boot.bin\n\n\n0~4KB\n\n\n4KB\n\n\n\n\n\n\nUser APP1\n\n\nL\u01b0u user1.bin(=flash.bin+irom0text.bin)\n\n\n4KB~240KB\n\n\n236KB\n\n\n\n\n\n\nUser param\n\n\nL\u01b0u th\u00f4ng s\u1ed1 do ng\u01b0\u1eddi d\u00f9ng \u0111\u1eb7t(4x4KB)\n\n\n240KB~256KB\n\n\n16KB\n\n\n\n\n\n\nReverse\n\n\nD\u1ef1 ph\u00f2ng, c\u1ea7n ph\u1ea3i \u0111\u01b0a user2 v\u00e0 user1 c\u00f9ng offset(0x01000)\n\n\n256KB~260KB\n\n\n4KB\n\n\n\n\n\n\nUser APP2\n\n\nL\u01b0u user2.bin(flash.bin+irom0text.bin)\n\n\n260KB~496KB\n\n\n236KB\n\n\n\n\n\n\nSysem param\n\n\nL\u01b0u th\u00f4ng s\u1ed1 h\u1ec7 th\u1ed1ng (4x4KB)\n\n\n496KB~512KB\n\n\n16KB\n\n\n\n\n\n\n\n\nUser App1 v\u00e0 User App2 \u0111\u01b0\u1ee3c t\u1ea1o ra trong qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch v\u00e0 n\u1ea1p file user1.bin, user2.bin\nFile flash.bin v\u00e0 irom0text.bin s\u1ebd \u0111\u01b0\u1ee3c k\u1ebft h\u1ee3p v\u1edbi user1.bin(ho\u1eb7c user2.bin) \u0111\u1ec3 c\u1eadp nh\u1eadt. M\u1ed9t file user.bin s\u1ebd \u0111\u01b0\u1ee3c backup l\u1ea1i trong qu\u00e1 tr\u00ecnh c\u1eadp nh\u1eadt fail\nFile bootloader (boot.bin) s\u1ebd ki\u1ec3m tra c\u1edd trong th\u00f4ng s\u1ed1 System \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh l\u00e0 s\u1ebd th\u1ef1c hi\u1ec7n User App1(user1.bin) hay User App2(user2.bin)\n\n\nV\u00ed d\u1ee5:\n\nD\u01b0\u1edbi \u0111\u00e2y l\u00e0 v\u00ed d\u1ee5 minh h\u1ecda v\u1ec1 c\u00e1c b\u01b0\u1edbc c\u1ee7a FOTA\n\n\n\n\n\u0110\u1ea7u ti\u00ean l\u00e0 n\u1ea1p file boot.bin v\u00e0 user1.bin (phi\u00ean b\u1ea3n v1.0.0) xu\u1ed1ng ESP8266. C\u1edd c\u1ee7a v\u00f9ng system param s\u1ebd ch\u1ecdn user1.bin l\u00e0 m\u1eb7c \u0111\u1ecbnh. Sau khi kh\u1edfi \u0111\u1ed9ng h\u1ec7 th\u1ed1ng s\u1ebd t\u1ef1 \u0111\u1ed9ng nh\u1ea3y v\u00e0o user1.bin\n\n\nUpload 2 file user1.bin v\u00e0 user2.bin (phi\u00ean b\u1ea3n 1.0.1) l\u00ean cloud ho\u1eb7c server ri\u00eang\n\n\nServer s\u1ebd g\u1eedi tin nh\u1eafn xu\u1ed1ng ESP l\u00e0 \u0111\u00e3 c\u00f3 update m\u1edbi. N\u1ebfu ESP nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn n\u00e0y s\u1ebd ki\u1ec3m tra c\u1edd \u0111\u1ea7u ti\u00ean, c\u1edd n\u00e0y s\u1ebd \u0111\u1eb7t l\u00e0 user1, sau \u0111\u00f3 t\u1ea3i user2.bin c\u1ee7a v1.0.1 xu\u1ed1ng flash \u1edf v\u00f9ng t\u1eeb 260KB~496KB \u0111\u1ec3 c\u1eadp nh\u1eadt.\n\n\nSau khi t\u1ea3i xong, ng\u01b0\u1eddi d\u00f9ng s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn c\u1ee7a FOTA c\u00f3 cho ph\u00e9p update hay kh\u00f4ng. N\u1ebfu c\u00f3 s\u1ebd \u0111\u1ed5i c\u1edd sang user2 v\u00e0 kh\u1edfi \u0111\u1ed9ng l\u1ea1i ch\u1ea1y v\u1edbi user2.bin. N\u1ebfu kh\u00f4ng th\u00ec kh\u00f4ng c\u00f3 g\u00ec x\u1ea3y ra c\u1ea3\n\n\nL\u1ea7n c\u1eadp nh\u1eadt t\u1edbi, b\u1eaft \u0111\u1ea7u v\u1edbi b\u01b0\u1edbc 2, sau \u0111\u00f3 t\u1ea3i user1.bin c\u1ee7a phi\u00ean b\u1ea3n v1.0.2 v\u00e0 flash v\u00e0o v\u00f9ng 4KB~240KB thay th\u1ebf cho phi\u00ean b\u1ea3n user1.bin c\u1ee7a b\u1ea3n v1.0.0\n\n\n\n\nL\u01b0u \u00fd\n\n- C\u1ea7n t\u1ea1o ra 2 file user1.bin v\u00e0 user2.bin trong qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch v\u00e0 upload c\u1ea3 2 file n\u00e0y l\u00ean server. ESP s\u1ebd t\u1ef1 x\u00e1c \u0111\u1ecbnh file bin n\u00e0o c\u1ea7n download.\n- S\u1ef1 kh\u00e1c nhau c\u1ee7a user1.bin v\u00e0 user2.bin l\u00e0 ph\u00e2n v\u00f9ng \u0111\u1ecba ch\u1ec9 \u0111\u01b0\u1ee3c l\u01b0u trong flash.\n- Th\u00f4ng th\u01b0\u1eddng file user1.bin s\u1ebd \u0111\u01b0\u1ee3c n\u1ea1p v\u00e0o flash tr\u01b0\u1edbc. sau \u0111\u00f3 c\u1eadp nh\u1eadt phi\u00ean b\u1ea3n user2.bin th\u00f4ng qua wifi\n\n\n1024KB Flash v\u00e0 c\u00e1c Flash l\u1edbn h\u01a1n\n#\n\n\nC\u00e1ch l\u00e0m t\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1edbi 512KB Flash nh\u01b0ng c\u00e1ch ph\u00e2n chia c\u00e1c ph\u00e2n v\u00f9ng s\u1ebd kh\u00e1c nhau\n\n\n1024KB Flash\n#\n\n\n\n\n2048KB Flash\n#\n\n\n\n\n\n\n4096KB Flash\n#\n\n\n\n\n\n\nHo\u1ea1t \u0111\u1ed9ng\n#\n\n\n\n\n\n\nKhi ho\u1ea1t \u0111\u1ed9ng th\u00ec ESP s\u1ebd g\u1eedi th\u00f4ng tin v\u1ec1 phi\u00ean b\u1ea3n hi\u1ec7n t\u1ea1i l\u00ean server v\u00e0 server s\u1ebd l\u01b0u th\u00f4ng tin n\u00e0y l\u1ea1i\n\n\nHo\u1ea1t \u0111\u1ed9ng b\u00ecnh th\u01b0\u1eddng\n\n\nKhi c\u00f3 m\u1ed9t firmware m\u1edbi \u0111\u01b0\u1ee3c up l\u00ean server. Server s\u1ebd g\u1eedi th\u00f4ng b\u00e1o t\u1edbi ESP\n\n\nESP s\u1ebd y\u00eau c\u1ea7u firmware th\u00f4ng qua device key v\u00e0 \u0111\u01b0\u1eddng d\u1eabn upload (user1.bin ho\u1eb7c user2.bin)\n\n\nT\u1ea3i firmware v\u1ec1 flash\n\n\nG\u1eedi th\u00f4ng tin t\u1ea3i xong cho server\n\n\nServer g\u1eedi th\u00f4ng b\u00e1o cho APP, APP s\u1ebd hi\u1ec3n th\u1ecb th\u00f4ng tin cho ng\u01b0\u1eddi d\u00f9ng\n\n\nAPP s\u1ebd g\u1eedi th\u00f4ng tin quy\u1ebft \u0111\u1ecbnh c\u1ee7a ng\u01b0\u1eddi d\u00f9ng c\u00f3 c\u1eadp nh\u1eadt kh\u00f4ng t\u1edbi server\n\n\nServer g\u1eedi quy\u1ebft \u0111\u1ecbnh c\u1ee7a ng\u01b0\u1eddi d\u00f9ng t\u1edbi ESP\nTh\u00f4ng tin k\u1ebft n\u1ed1i gi\u1eefa device(ESP8266), c\u00e1c d\u1ecbch v\u1ee5 v\u00e0 APP \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a SSL do \u0111\u00f3 qu\u00e1 tr\u00ecnh \u0111\u01b0\u1ee3c \u0111\u1ea3m b\u1ea3o an to\u00e0n.\n\n\n\n\nTham kh\u1ea3o\n#\n\n\n\n\nESP8266 FOTA",
            "title": "FOTA"
        },
        {
            "location": "/nonos-sdk/fota/fota/#gioi-thieu",
            "text": "FOTA l\u00e0 Firmware Over The Air, v\u1edbi FOTA th\u00ec ch\u00fang ta c\u00f3 th\u1ec3 c\u1eadp nh\u1eadt firmware t\u1eeb xa th\u00f4ng qua m\u1ea1ng cho ESP m\u00e0 kh\u00f4ng c\u1ea7n k\u1ebft n\u1ed1i c\u1ed5ng n\u1ea1p gi\u1eefa ESP v\u00e0 m\u00e1y t\u00ednh.\n\u0110\u1ec3 th\u1ef1c hi\u1ec7n FOTA c\u1ea7n t\u1ea1o 2 file \u0111\u1ec3 n\u1ea1p v\u00e0o flash\n- boot.bin \u0111\u01b0\u1ee3c ghi v\u00e0o \u0111\u1ecba ch\u1ec9 0x00000\n- user1.bin \u0111\u01b0\u1ee3c ghi v\u00e0o \u0111\u1ecba ch\u1ec9 0x01000",
            "title": "Gi\u1edbi thi\u1ec7u"
        },
        {
            "location": "/nonos-sdk/fota/fota/#flash",
            "text": "T\u00f9y theo dung l\u01b0\u1ee3ng flash c\u1ee7a c\u00e1c phi\u00ean b\u1ea3n ESP8266 m\u00e0 c\u00f3 c\u00e1c flash kh\u00e1c nhau",
            "title": "Flash"
        },
        {
            "location": "/nonos-sdk/fota/fota/#512kb-flash",
            "text": "Sector  M\u00f4 t\u1ea3  Region  K\u00edch th\u01b0\u1edbc      Boot  L\u01b0u boot.bin  0~4KB  4KB    User APP1  L\u01b0u user1.bin(=flash.bin+irom0text.bin)  4KB~240KB  236KB    User param  L\u01b0u th\u00f4ng s\u1ed1 do ng\u01b0\u1eddi d\u00f9ng \u0111\u1eb7t(4x4KB)  240KB~256KB  16KB    Reverse  D\u1ef1 ph\u00f2ng, c\u1ea7n ph\u1ea3i \u0111\u01b0a user2 v\u00e0 user1 c\u00f9ng offset(0x01000)  256KB~260KB  4KB    User APP2  L\u01b0u user2.bin(flash.bin+irom0text.bin)  260KB~496KB  236KB    Sysem param  L\u01b0u th\u00f4ng s\u1ed1 h\u1ec7 th\u1ed1ng (4x4KB)  496KB~512KB  16KB     User App1 v\u00e0 User App2 \u0111\u01b0\u1ee3c t\u1ea1o ra trong qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch v\u00e0 n\u1ea1p file user1.bin, user2.bin\nFile flash.bin v\u00e0 irom0text.bin s\u1ebd \u0111\u01b0\u1ee3c k\u1ebft h\u1ee3p v\u1edbi user1.bin(ho\u1eb7c user2.bin) \u0111\u1ec3 c\u1eadp nh\u1eadt. M\u1ed9t file user.bin s\u1ebd \u0111\u01b0\u1ee3c backup l\u1ea1i trong qu\u00e1 tr\u00ecnh c\u1eadp nh\u1eadt fail\nFile bootloader (boot.bin) s\u1ebd ki\u1ec3m tra c\u1edd trong th\u00f4ng s\u1ed1 System \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh l\u00e0 s\u1ebd th\u1ef1c hi\u1ec7n User App1(user1.bin) hay User App2(user2.bin)  V\u00ed d\u1ee5: \nD\u01b0\u1edbi \u0111\u00e2y l\u00e0 v\u00ed d\u1ee5 minh h\u1ecda v\u1ec1 c\u00e1c b\u01b0\u1edbc c\u1ee7a FOTA   \u0110\u1ea7u ti\u00ean l\u00e0 n\u1ea1p file boot.bin v\u00e0 user1.bin (phi\u00ean b\u1ea3n v1.0.0) xu\u1ed1ng ESP8266. C\u1edd c\u1ee7a v\u00f9ng system param s\u1ebd ch\u1ecdn user1.bin l\u00e0 m\u1eb7c \u0111\u1ecbnh. Sau khi kh\u1edfi \u0111\u1ed9ng h\u1ec7 th\u1ed1ng s\u1ebd t\u1ef1 \u0111\u1ed9ng nh\u1ea3y v\u00e0o user1.bin  Upload 2 file user1.bin v\u00e0 user2.bin (phi\u00ean b\u1ea3n 1.0.1) l\u00ean cloud ho\u1eb7c server ri\u00eang  Server s\u1ebd g\u1eedi tin nh\u1eafn xu\u1ed1ng ESP l\u00e0 \u0111\u00e3 c\u00f3 update m\u1edbi. N\u1ebfu ESP nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn n\u00e0y s\u1ebd ki\u1ec3m tra c\u1edd \u0111\u1ea7u ti\u00ean, c\u1edd n\u00e0y s\u1ebd \u0111\u1eb7t l\u00e0 user1, sau \u0111\u00f3 t\u1ea3i user2.bin c\u1ee7a v1.0.1 xu\u1ed1ng flash \u1edf v\u00f9ng t\u1eeb 260KB~496KB \u0111\u1ec3 c\u1eadp nh\u1eadt.  Sau khi t\u1ea3i xong, ng\u01b0\u1eddi d\u00f9ng s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn c\u1ee7a FOTA c\u00f3 cho ph\u00e9p update hay kh\u00f4ng. N\u1ebfu c\u00f3 s\u1ebd \u0111\u1ed5i c\u1edd sang user2 v\u00e0 kh\u1edfi \u0111\u1ed9ng l\u1ea1i ch\u1ea1y v\u1edbi user2.bin. N\u1ebfu kh\u00f4ng th\u00ec kh\u00f4ng c\u00f3 g\u00ec x\u1ea3y ra c\u1ea3  L\u1ea7n c\u1eadp nh\u1eadt t\u1edbi, b\u1eaft \u0111\u1ea7u v\u1edbi b\u01b0\u1edbc 2, sau \u0111\u00f3 t\u1ea3i user1.bin c\u1ee7a phi\u00ean b\u1ea3n v1.0.2 v\u00e0 flash v\u00e0o v\u00f9ng 4KB~240KB thay th\u1ebf cho phi\u00ean b\u1ea3n user1.bin c\u1ee7a b\u1ea3n v1.0.0   L\u01b0u \u00fd \n- C\u1ea7n t\u1ea1o ra 2 file user1.bin v\u00e0 user2.bin trong qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch v\u00e0 upload c\u1ea3 2 file n\u00e0y l\u00ean server. ESP s\u1ebd t\u1ef1 x\u00e1c \u0111\u1ecbnh file bin n\u00e0o c\u1ea7n download.\n- S\u1ef1 kh\u00e1c nhau c\u1ee7a user1.bin v\u00e0 user2.bin l\u00e0 ph\u00e2n v\u00f9ng \u0111\u1ecba ch\u1ec9 \u0111\u01b0\u1ee3c l\u01b0u trong flash.\n- Th\u00f4ng th\u01b0\u1eddng file user1.bin s\u1ebd \u0111\u01b0\u1ee3c n\u1ea1p v\u00e0o flash tr\u01b0\u1edbc. sau \u0111\u00f3 c\u1eadp nh\u1eadt phi\u00ean b\u1ea3n user2.bin th\u00f4ng qua wifi",
            "title": "512KB Flash"
        },
        {
            "location": "/nonos-sdk/fota/fota/#1024kb-flash-va-cac-flash-lon-hon",
            "text": "C\u00e1ch l\u00e0m t\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1edbi 512KB Flash nh\u01b0ng c\u00e1ch ph\u00e2n chia c\u00e1c ph\u00e2n v\u00f9ng s\u1ebd kh\u00e1c nhau",
            "title": "1024KB Flash v\u00e0 c\u00e1c Flash l\u1edbn h\u01a1n"
        },
        {
            "location": "/nonos-sdk/fota/fota/#1024kb-flash",
            "text": "",
            "title": "1024KB Flash"
        },
        {
            "location": "/nonos-sdk/fota/fota/#2048kb-flash",
            "text": "",
            "title": "2048KB Flash"
        },
        {
            "location": "/nonos-sdk/fota/fota/#4096kb-flash",
            "text": "",
            "title": "4096KB Flash"
        },
        {
            "location": "/nonos-sdk/fota/fota/#hoat-ong",
            "text": "Khi ho\u1ea1t \u0111\u1ed9ng th\u00ec ESP s\u1ebd g\u1eedi th\u00f4ng tin v\u1ec1 phi\u00ean b\u1ea3n hi\u1ec7n t\u1ea1i l\u00ean server v\u00e0 server s\u1ebd l\u01b0u th\u00f4ng tin n\u00e0y l\u1ea1i  Ho\u1ea1t \u0111\u1ed9ng b\u00ecnh th\u01b0\u1eddng  Khi c\u00f3 m\u1ed9t firmware m\u1edbi \u0111\u01b0\u1ee3c up l\u00ean server. Server s\u1ebd g\u1eedi th\u00f4ng b\u00e1o t\u1edbi ESP  ESP s\u1ebd y\u00eau c\u1ea7u firmware th\u00f4ng qua device key v\u00e0 \u0111\u01b0\u1eddng d\u1eabn upload (user1.bin ho\u1eb7c user2.bin)  T\u1ea3i firmware v\u1ec1 flash  G\u1eedi th\u00f4ng tin t\u1ea3i xong cho server  Server g\u1eedi th\u00f4ng b\u00e1o cho APP, APP s\u1ebd hi\u1ec3n th\u1ecb th\u00f4ng tin cho ng\u01b0\u1eddi d\u00f9ng  APP s\u1ebd g\u1eedi th\u00f4ng tin quy\u1ebft \u0111\u1ecbnh c\u1ee7a ng\u01b0\u1eddi d\u00f9ng c\u00f3 c\u1eadp nh\u1eadt kh\u00f4ng t\u1edbi server  Server g\u1eedi quy\u1ebft \u0111\u1ecbnh c\u1ee7a ng\u01b0\u1eddi d\u00f9ng t\u1edbi ESP\nTh\u00f4ng tin k\u1ebft n\u1ed1i gi\u1eefa device(ESP8266), c\u00e1c d\u1ecbch v\u1ee5 v\u00e0 APP \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a SSL do \u0111\u00f3 qu\u00e1 tr\u00ecnh \u0111\u01b0\u1ee3c \u0111\u1ea3m b\u1ea3o an to\u00e0n.",
            "title": "Ho\u1ea1t \u0111\u1ed9ng"
        },
        {
            "location": "/nonos-sdk/fota/fota/#tham-khao",
            "text": "ESP8266 FOTA",
            "title": "Tham kh\u1ea3o"
        },
        {
            "location": "/nonos-sdk/esp-now/esp-now/",
            "text": "Gi\u1edbi thi\u1ec7u\n\n\nC\u00e1c ch\u1ee9c n\u0103ng ch\u00ednh\n\n\nM\u00f4 t\u1ea3\n\n\nCh\u01b0\u01a1ng tr\u00ecnh\n\n\nTham kh\u1ea3o\n\n\n\n\n\n\nGi\u1edbi thi\u1ec7u\n#\n\n\n\n\nESP-NOW l\u00e0 m\u1ed9t giao th\u1ee9c \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1edfi Espressif cho ph\u00e9p nhi\u1ec1u thi\u1ebft b\u1ecb c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i v\u1edbi nhau m\u00e0 kh\u00f4ng c\u1ea7n d\u00f9ng Wifi. C\u00e1c thi\u1ebft b\u1ecb sau khi k\u1ebft n\u1ed1i \u0111\u01b0\u1ee3c v\u1edbi nhau s\u1ebd l\u00e0 peer-to-peer, v\u00e0 kh\u00f4ng y\u00eau c\u1ea7u b\u1eaft tay.\n\n\nESP-NOW c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c xem l\u00e0 m\u1ed9t c\u00f4ng ngh\u1ec7 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho ESP8266 \u0111\u1ec3 truy\u1ec1n c\u00e1c g\u00f3i d\u1eef li\u1ec7u v\u1edbi t\u1ed1c \u0111\u1ed9 cao, n\u00f3 \u0111\u01b0\u1ee3c \u1ee9ng d\u1ee5ng trong c\u00e1c thi\u1ebft b\u1ecb chi\u1ebfu s\u00e1ng th\u00f4ng minh, \u0111i\u1ec1u khi\u1ec3n t\u1eeb xa c\u00e1c c\u1ea3m bi\u1ebfn,\u2026\n\n\nTrong ESP-NOW d\u00f9ng chu\u1ea9n IEEE802.11 c\u00f9ng c\u00e1c h\u00e0m IE v\u00e0 m\u00e3 h\u00f3a CCMP \u0111\u1ea3m b\u1ea3o \u0111\u01b0\u1ee3c \u0111\u1ed9 tin c\u1eady.\n\n\n\n\nC\u00e1c ch\u1ee9c n\u0103ng ch\u00ednh\n#\n\n\n\n\nESP-NOW c\u00f3 h\u1ed7 tr\u1ee3 c\u00e1c \u0111\u1eb7c \u0111i\u1ec3m sau:\n\n\nM\u00e3 h\u00f3a v\u00e0 gi\u1ea3i m\u00e3 g\u00f3i tin unicast\n\n\nM\u00e3 h\u00f3a tr\u1ed9n v\u00e0 gi\u1ea3i m\u00e3 v\u1edbi peer devices\n\n\nPlayload c\u00f3 th\u1ec3 l\u00ean t\u1edbi 250 byte\n\n\nC\u00f3 h\u00e0m callback \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh \u0111\u01b0\u1ee3c vi\u1ec7c truy\u1ec1n d\u1eef li\u1ec7u th\u00e0nh c\u00f4ng hay th\u1ea5t b\u1ea1i\n\n\n\n\n\n\nTuy nhi\u00ean c\u0169ng c\u00f3 m\u1ed9t s\u1ed1 h\u1ea1n ch\u1ebf:\n\n\nKh\u00f4ng h\u1ed7 tr\u1ee3 broadcast\n\n\nGi\u1edbi h\u1ea1n c\u00e1c peer \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a. Kho\u1ea3ng 10 peer \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a trong mode Station, 6 peer trong SoftAP ho\u1eb7c SoftAP + mode Station. Peer kh\u00f4ng m\u00e3 h\u00f3a c\u00f3 th\u1ec3 c\u00f3 s\u1ed1 l\u01b0\u1ee3ng nhi\u1ec1u h\u01a1n nh\u01b0ng ph\u1ea3i nh\u1ecf h\u01a1n 20.\n\n\nPlayload b\u1ecb gi\u1edbi h\u1ea1n 250 byte.\n\n\n\n\n\n\n\n\nM\u00f4 t\u1ea3\n#\n\n\nTh\u00f4ng tin s\u1ebd bao g\u1ed3m\n\n\n\n\n\n\nTrong local device\n\n\n\n\nPMW\n\n\nRole\n\n\n\n\n\n\n\n\nTrong peer\n\n\n\n\nKey\n\n\n\u0110\u1ecba ch\u1ec9 MAC\n\n\nRole\n\n\nChannel\n\n\n\n\n\n\n\n\nB\u1ea3ng m\u00f4 t\u1ea3\n\n\n\n\n\n\n\n\n\n\n\n\nDevice\n\n\nTh\u00f4ng tin\n\n\nGi\u00e1 tr\u1ecb/ \u0110\u1ed9 d\u00e0i\n\n\nM\u00f4 t\u1ea3\n\n\nGhi ch\u00fa\n\n\n\n\n\n\n\n\n\n\nLocal device\n\n\nPMK\n\n\n\u0110\u1ed9 d\u00e0i 16 byte\n\n\nPrimary Master Key, v\u00ed d\u1ee5 nh\u01b0 KOK trongAPI, d\u00f9ng \u0111\u1ec3 m\u00e3 h\u00f3a Key c\u1ee7a peer.\n\n\nH\u1ec7 th\u1ed1ng s\u1ebd t\u1ea1o PMK m\u1eb7c \u0111\u1ecbnh, kh\u00f4ng c\u1ea7n ph\u1ea3i config\n\n\n\n\n\n\n\n\nRole\n\n\nIDLE CONTROLLER SLAVE COMBO\n\n\n\u0110\u00e2y l\u00e0 vai tr\u00f2(role) c\u1ee7a device IDLE: ch\u01b0a ph\u00e2n role CONTROLLER:controller SLAVE: slave COMBO: \u0111\u1ea3m nhi\u1ec7m 2 role l\u00e0 controller slave\n\n\nRole c\u1ee7a local device \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a th\u00f4ng qua SoftAP ho\u1eb7c Station c\u1ee7a ESP-NOW IDLE:  vi\u1ec7c truy\u1ec1n nh\u1eadn s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c cho ph\u00e9p CONTROLLER: \u01b0u ti\u00ean cho Sation interface SLAVE: \u01b0u ti\u00ean cho SoftAP interface COMBO: \u01b0u ti\u00ean cho c\u1ea3 SoftAP interface v\u00e0 Station interface\n\n\n\n\n\n\nPeer\n\n\nKey\n\n\n\u0110\u1ed9 d\u00e0i 16 byte\n\n\nS\u1eed d\u1ee5ng \u0111\u1ec3 m\u00e3 h\u00f3a paload key trong qu\u00e1 tr\u00ecnh giao ti\u1ebfp v\u1edbi c\u00e1c peer\n\n\n\n\n\n\n\n\n\n\nMacAddress\n\n\n\u0110\u1ed9 d\u00e0i 6 byte\n\n\n\u0110\u1ecba ch\u1ec9 MAC c\u1ee7a peer\n\n\n\u0110\u1ecba ch\u1ec9 MAC ph\u1ea3i c\u00f9ng v\u1edbi \u0111\u1ecba ch\u1ec9 g\u1eedi. V\u00ed d\u1ee5 nh\u01b0 n\u1ebfu g\u00f3i tin \u0111\u01b0\u1ee3c g\u1eedi t\u1eeb Station interface th\u00ec \u0111\u1ecba ch\u1ec9 MAC ph\u1ea3i gi\u1ed1ng v\u1edbi \u0111\u1ecba ch\u1ec9 c\u1ee7a Station\n\n\n\n\n\n\n\n\nRole\n\n\nIDLE CONTROLLER SLAVE COMBO\n\n\n\u0110\u00e2y l\u00e0 vai tr\u00f2(role) c\u1ee7a device IDLE: ch\u01b0a ph\u00e2n role CONTROLLER:controller SLAVE: slave COMBO: \u0111\u1ea3m nhi\u1ec7m 2 role l\u00e0 controller slave\n\n\n\n\n\n\n\n\n\n\nChannel\n\n\nGi\u00e1 tr\u1ecb t\u1eeb 0 - 255\n\n\nK\u00eanh \u0111\u1ec3 local device v\u00e0 peer k\u1ebft n\u1ed1i v\u1edbi nhau\n\n\n\n\n\n\n\n\n# Ho\u1ea1t \u0111\u1ed9ng\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThi\u1ebft l\u1eadp h\u00e0m sending callback\nVi\u1ec7c s\u1eed d\u1ee5ng h\u00e0m sending callback \u0111\u1ec3 th\u00f4ng b\u00e1o vi\u1ec7c truy\u1ec1n nh\u1eadn l\u00e0 th\u00e0nh c\u00f4ng hay th\u1ea5t b\u1ea1i, c\u1ea7n ph\u1ea3i th\u1ef1c hi\u1ec7n theo c\u00e1c b\u01b0\u1edbc sau n\u1ebfu s\u1eed d\u1ee5ng c\u00e1c h\u00e0m n\u00e0y\n\n\n\n\n\n\nV\u1edbi ki\u1ec3u unicast\n\n\n\n\nN\u1ebfu l\u1edbp application kh\u00f4ng nh\u1ea1n \u0111\u01b0\u1ee3c g\u00f3i tin nh\u01b0ng h\u00e0m callback tr\u1ea3 v\u1ec1 success th\u00ec nguy\u00ean nh\u00e2n c\u00f3 th\u1ec3 do:\n\n\nT\u1ea5n c\u00f4ng t\u1eeb c\u00e1c thi\u1ebft b\u1ecb kh\u00e1c\n\n\nThi\u1ebft l\u1eadp m\u00e3 h\u00f3a Key b\u1ecb l\u1ed7i\n\n\nG\u00f3i tin b\u1ecb m\u1ea5t trong l\u1edbp application\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nVi\u1ec7c b\u1eaft tay \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o t\u0103ng t\u1ec9 l\u1ec7 th\u00e0nh c\u00f4ng c\u1ee7a vi\u1ec7c truy\u1ec1n nh\u1eadn\n\n\n\n\nN\u1ebfu l\u1edbp \u1ee9ng d\u1ee5ng nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i tin nh\u01b0ng h\u00e0m callback tr\u1ea3 v\u1ec1 failure th\u00ec nguy\u00ean nh\u00e2n:\n\n\nChannel \u0111ang b\u1eadn ho\u1eb7c kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c ACK.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nV\u1edbi ki\u1ec3u multicast (bao g\u1ed3m c\u1ea3 broadcast)\n\n\n\n\nN\u1ebfu h\u00e0m callback tr\u1ea3 v\u1ec1 success ngh\u0129a l\u00e0 g\u00f3i tin \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1eedi \u0111i th\u00e0nh c\u00f4ng\n\n\nN\u1ebfu h\u00e0m callback tr\u1ea3 v\u1ec1 failure, ngh\u0129a l\u00e0 g\u00f3i tin ch\u01b0a g\u1eedi \u0111\u01b0\u1ee3c\n\n\n\n\n\n\n\n\nThi\u1ebft l\u1eadp h\u00e0m receiving callback\nH\u00e0m reciecing callback \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 th\u00f4ng b\u00e1o t\u1edbi l\u1edbp \u1ee9ng d\u1ee5ng l\u00e0 g\u00f3i tin g\u1eedi \u0111i \u0111\u00e3 \u0111\u01b0\u1ee3c nh\u1eadn b\u1edfi peer\nH\u00e0m n\u00e0y s\u1ebd tr\u1ea3 l\u1ea1i \u0111\u1ecba ch\u1ec9a MAC c\u1ee7a peer v\u00e0 payload c\u1ee7a g\u00f3i tin\n\n\n\n\n\n\nN\u1ebfu Key \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a th\u00ec API c\u1ea5u h\u00ecnh PMK(KOK) s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi \u0111\u1ec3 c\u1ea5u h\u00ecnh\nN\u1ebfu PMK ch\u01b0a \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh th\u00ec s\u1ebd s\u1eed d\u1ee5ng PMK m\u1eb7c \u0111\u1ecbnh.\n\n\n\n\n\n\nL\u1ef1a ch\u1ecdn giao th\u1ee9c cho device\nTh\u00f4ng th\u01b0\u1eddng Station interface \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t cho CONTROLLER, SoftAP interface cho SLAVE v\u00e0 COMBO.\n\n\n\n\n\n\nL\u1ef1a ch\u1ecdn Key cho device. G\u1ecdi h\u00e0m add peer.\n\n\n\n\n\n\nG\u1ecdi h\u00e0m g\u1eedi \u0111\u1ec3 tr\u1ea3 v\u1ec1 payload. \n\n\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nTham kh\u1ea3o th\u00eam c\u00e1c th\u00f4ng tin v\u1ec1 API c\u1ee7a ESP-NOW t\u1ea1i \nSDK API Guide\n\n\n\n\nCh\u01b0\u01a1ng tr\u00ecnh\n#\n\n\nvoid ICACHE_FLASH_ATTR simple_cb(u8 *macaddr, u8 *data, u8 len)\n{\n    int i;\n    u8 ack_buf[16];\n    u8 recv_buf[17];\n    os_printf(\"now from[\");\n    for (i = 0; i < 6; i++)\n        os_printf(\"%02X, \", macaddr[i]);\n    os_printf(\" len: %d]:\", len);\n    os_bzero(recv_buf, 17);\n    os_memcpy(recv_buf, data, len < 17 ? len : 16);\n    if (os_strncmp(data, \"ACK\", 3) == 0)\n        return;\n    os_sprintf(ack_buf, \"ACK[%08x]\", ack_count++);\n    esp_now_send(macaddr, ack_buf, os_strlen(ack_buf));\n}\nvoid user_init(void)\n{\n    u8 key[16] = {0x33, 0x44, 0x33, 0x44, 0x33, 0x44, 0x33, 0x44,\n                  0x33, 0x44, 0x33, 0x44, 0x33, 0x44, 0x33, 0x44\n                 };\n    u8 da1[6] = {0x18, 0xfe, 0x34, 0x97, 0xd5, 0xb1};\n    u8 da2[6] = {0x1a, 0xfe, 0x34, 0x97, 0xd5, 0xb1};\n    if (esp_now_init() == 0) {\n        os_printf(\"esp_now init ok\\n\");\n        esp_now_register_recv_cb(simple_cb);\n        esp_now_set_self_role(1);\n        esp_now_add_peer(da1, 1, key, 16);\n        esp_now_add_peer(da2, 2, key, 16)\n    } else {\n        os_printf(\"esp_now init failed\\n\");\n    }\n}\nvoid ICACHE_FLASH_ATTR demo_send(u8 *mac_addr, u8 *data, u8 len)\n{\n    esp_now_send(NULL, data, len);/* Vi du nay se gui toi 2 thiet bi duoc them vao boi ham esp_now_add_peer() */\n//esp_now_send(mac_addr, data, len); /* gui toi dia chi mac mac_addr */\n}\n\n\n\n\nTham kh\u1ea3o\n#\n\n\n\n\nC\u00f3 th\u1ec3 xem th\u00eam c\u00e1c t\u00e0i li\u1ec7u m\u00f4 t\u1ea3 v\u1ec1 \nESP-NOW\n c\u1ee7a Espressif",
            "title": "ESP Now"
        },
        {
            "location": "/nonos-sdk/esp-now/esp-now/#gioi-thieu",
            "text": "ESP-NOW l\u00e0 m\u1ed9t giao th\u1ee9c \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1edfi Espressif cho ph\u00e9p nhi\u1ec1u thi\u1ebft b\u1ecb c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i v\u1edbi nhau m\u00e0 kh\u00f4ng c\u1ea7n d\u00f9ng Wifi. C\u00e1c thi\u1ebft b\u1ecb sau khi k\u1ebft n\u1ed1i \u0111\u01b0\u1ee3c v\u1edbi nhau s\u1ebd l\u00e0 peer-to-peer, v\u00e0 kh\u00f4ng y\u00eau c\u1ea7u b\u1eaft tay.  ESP-NOW c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c xem l\u00e0 m\u1ed9t c\u00f4ng ngh\u1ec7 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho ESP8266 \u0111\u1ec3 truy\u1ec1n c\u00e1c g\u00f3i d\u1eef li\u1ec7u v\u1edbi t\u1ed1c \u0111\u1ed9 cao, n\u00f3 \u0111\u01b0\u1ee3c \u1ee9ng d\u1ee5ng trong c\u00e1c thi\u1ebft b\u1ecb chi\u1ebfu s\u00e1ng th\u00f4ng minh, \u0111i\u1ec1u khi\u1ec3n t\u1eeb xa c\u00e1c c\u1ea3m bi\u1ebfn,\u2026  Trong ESP-NOW d\u00f9ng chu\u1ea9n IEEE802.11 c\u00f9ng c\u00e1c h\u00e0m IE v\u00e0 m\u00e3 h\u00f3a CCMP \u0111\u1ea3m b\u1ea3o \u0111\u01b0\u1ee3c \u0111\u1ed9 tin c\u1eady.",
            "title": "Gi\u1edbi thi\u1ec7u"
        },
        {
            "location": "/nonos-sdk/esp-now/esp-now/#cac-chuc-nang-chinh",
            "text": "ESP-NOW c\u00f3 h\u1ed7 tr\u1ee3 c\u00e1c \u0111\u1eb7c \u0111i\u1ec3m sau:  M\u00e3 h\u00f3a v\u00e0 gi\u1ea3i m\u00e3 g\u00f3i tin unicast  M\u00e3 h\u00f3a tr\u1ed9n v\u00e0 gi\u1ea3i m\u00e3 v\u1edbi peer devices  Playload c\u00f3 th\u1ec3 l\u00ean t\u1edbi 250 byte  C\u00f3 h\u00e0m callback \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh \u0111\u01b0\u1ee3c vi\u1ec7c truy\u1ec1n d\u1eef li\u1ec7u th\u00e0nh c\u00f4ng hay th\u1ea5t b\u1ea1i    Tuy nhi\u00ean c\u0169ng c\u00f3 m\u1ed9t s\u1ed1 h\u1ea1n ch\u1ebf:  Kh\u00f4ng h\u1ed7 tr\u1ee3 broadcast  Gi\u1edbi h\u1ea1n c\u00e1c peer \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a. Kho\u1ea3ng 10 peer \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a trong mode Station, 6 peer trong SoftAP ho\u1eb7c SoftAP + mode Station. Peer kh\u00f4ng m\u00e3 h\u00f3a c\u00f3 th\u1ec3 c\u00f3 s\u1ed1 l\u01b0\u1ee3ng nhi\u1ec1u h\u01a1n nh\u01b0ng ph\u1ea3i nh\u1ecf h\u01a1n 20.  Playload b\u1ecb gi\u1edbi h\u1ea1n 250 byte.",
            "title": "C\u00e1c ch\u1ee9c n\u0103ng ch\u00ednh"
        },
        {
            "location": "/nonos-sdk/esp-now/esp-now/#mo-ta",
            "text": "Th\u00f4ng tin s\u1ebd bao g\u1ed3m    Trong local device   PMW  Role     Trong peer   Key  \u0110\u1ecba ch\u1ec9 MAC  Role  Channel     B\u1ea3ng m\u00f4 t\u1ea3       Device  Th\u00f4ng tin  Gi\u00e1 tr\u1ecb/ \u0110\u1ed9 d\u00e0i  M\u00f4 t\u1ea3  Ghi ch\u00fa      Local device  PMK  \u0110\u1ed9 d\u00e0i 16 byte  Primary Master Key, v\u00ed d\u1ee5 nh\u01b0 KOK trongAPI, d\u00f9ng \u0111\u1ec3 m\u00e3 h\u00f3a Key c\u1ee7a peer.  H\u1ec7 th\u1ed1ng s\u1ebd t\u1ea1o PMK m\u1eb7c \u0111\u1ecbnh, kh\u00f4ng c\u1ea7n ph\u1ea3i config     Role  IDLE CONTROLLER SLAVE COMBO  \u0110\u00e2y l\u00e0 vai tr\u00f2(role) c\u1ee7a device IDLE: ch\u01b0a ph\u00e2n role CONTROLLER:controller SLAVE: slave COMBO: \u0111\u1ea3m nhi\u1ec7m 2 role l\u00e0 controller slave  Role c\u1ee7a local device \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a th\u00f4ng qua SoftAP ho\u1eb7c Station c\u1ee7a ESP-NOW IDLE:  vi\u1ec7c truy\u1ec1n nh\u1eadn s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c cho ph\u00e9p CONTROLLER: \u01b0u ti\u00ean cho Sation interface SLAVE: \u01b0u ti\u00ean cho SoftAP interface COMBO: \u01b0u ti\u00ean cho c\u1ea3 SoftAP interface v\u00e0 Station interface    Peer  Key  \u0110\u1ed9 d\u00e0i 16 byte  S\u1eed d\u1ee5ng \u0111\u1ec3 m\u00e3 h\u00f3a paload key trong qu\u00e1 tr\u00ecnh giao ti\u1ebfp v\u1edbi c\u00e1c peer      MacAddress  \u0110\u1ed9 d\u00e0i 6 byte  \u0110\u1ecba ch\u1ec9 MAC c\u1ee7a peer  \u0110\u1ecba ch\u1ec9 MAC ph\u1ea3i c\u00f9ng v\u1edbi \u0111\u1ecba ch\u1ec9 g\u1eedi. V\u00ed d\u1ee5 nh\u01b0 n\u1ebfu g\u00f3i tin \u0111\u01b0\u1ee3c g\u1eedi t\u1eeb Station interface th\u00ec \u0111\u1ecba ch\u1ec9 MAC ph\u1ea3i gi\u1ed1ng v\u1edbi \u0111\u1ecba ch\u1ec9 c\u1ee7a Station     Role  IDLE CONTROLLER SLAVE COMBO  \u0110\u00e2y l\u00e0 vai tr\u00f2(role) c\u1ee7a device IDLE: ch\u01b0a ph\u00e2n role CONTROLLER:controller SLAVE: slave COMBO: \u0111\u1ea3m nhi\u1ec7m 2 role l\u00e0 controller slave      Channel  Gi\u00e1 tr\u1ecb t\u1eeb 0 - 255  K\u00eanh \u0111\u1ec3 local device v\u00e0 peer k\u1ebft n\u1ed1i v\u1edbi nhau     # Ho\u1ea1t \u0111\u1ed9ng           Thi\u1ebft l\u1eadp h\u00e0m sending callback\nVi\u1ec7c s\u1eed d\u1ee5ng h\u00e0m sending callback \u0111\u1ec3 th\u00f4ng b\u00e1o vi\u1ec7c truy\u1ec1n nh\u1eadn l\u00e0 th\u00e0nh c\u00f4ng hay th\u1ea5t b\u1ea1i, c\u1ea7n ph\u1ea3i th\u1ef1c hi\u1ec7n theo c\u00e1c b\u01b0\u1edbc sau n\u1ebfu s\u1eed d\u1ee5ng c\u00e1c h\u00e0m n\u00e0y    V\u1edbi ki\u1ec3u unicast   N\u1ebfu l\u1edbp application kh\u00f4ng nh\u1ea1n \u0111\u01b0\u1ee3c g\u00f3i tin nh\u01b0ng h\u00e0m callback tr\u1ea3 v\u1ec1 success th\u00ec nguy\u00ean nh\u00e2n c\u00f3 th\u1ec3 do:  T\u1ea5n c\u00f4ng t\u1eeb c\u00e1c thi\u1ebft b\u1ecb kh\u00e1c  Thi\u1ebft l\u1eadp m\u00e3 h\u00f3a Key b\u1ecb l\u1ed7i  G\u00f3i tin b\u1ecb m\u1ea5t trong l\u1edbp application        L\u01b0u \u00fd  Vi\u1ec7c b\u1eaft tay \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o t\u0103ng t\u1ec9 l\u1ec7 th\u00e0nh c\u00f4ng c\u1ee7a vi\u1ec7c truy\u1ec1n nh\u1eadn   N\u1ebfu l\u1edbp \u1ee9ng d\u1ee5ng nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i tin nh\u01b0ng h\u00e0m callback tr\u1ea3 v\u1ec1 failure th\u00ec nguy\u00ean nh\u00e2n:  Channel \u0111ang b\u1eadn ho\u1eb7c kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c ACK.        V\u1edbi ki\u1ec3u multicast (bao g\u1ed3m c\u1ea3 broadcast)   N\u1ebfu h\u00e0m callback tr\u1ea3 v\u1ec1 success ngh\u0129a l\u00e0 g\u00f3i tin \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1eedi \u0111i th\u00e0nh c\u00f4ng  N\u1ebfu h\u00e0m callback tr\u1ea3 v\u1ec1 failure, ngh\u0129a l\u00e0 g\u00f3i tin ch\u01b0a g\u1eedi \u0111\u01b0\u1ee3c     Thi\u1ebft l\u1eadp h\u00e0m receiving callback\nH\u00e0m reciecing callback \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 th\u00f4ng b\u00e1o t\u1edbi l\u1edbp \u1ee9ng d\u1ee5ng l\u00e0 g\u00f3i tin g\u1eedi \u0111i \u0111\u00e3 \u0111\u01b0\u1ee3c nh\u1eadn b\u1edfi peer\nH\u00e0m n\u00e0y s\u1ebd tr\u1ea3 l\u1ea1i \u0111\u1ecba ch\u1ec9a MAC c\u1ee7a peer v\u00e0 payload c\u1ee7a g\u00f3i tin    N\u1ebfu Key \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a th\u00ec API c\u1ea5u h\u00ecnh PMK(KOK) s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi \u0111\u1ec3 c\u1ea5u h\u00ecnh\nN\u1ebfu PMK ch\u01b0a \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh th\u00ec s\u1ebd s\u1eed d\u1ee5ng PMK m\u1eb7c \u0111\u1ecbnh.    L\u1ef1a ch\u1ecdn giao th\u1ee9c cho device\nTh\u00f4ng th\u01b0\u1eddng Station interface \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t cho CONTROLLER, SoftAP interface cho SLAVE v\u00e0 COMBO.    L\u1ef1a ch\u1ecdn Key cho device. G\u1ecdi h\u00e0m add peer.    G\u1ecdi h\u00e0m g\u1eedi \u0111\u1ec3 tr\u1ea3 v\u1ec1 payload.      L\u01b0u \u00fd  Tham kh\u1ea3o th\u00eam c\u00e1c th\u00f4ng tin v\u1ec1 API c\u1ee7a ESP-NOW t\u1ea1i  SDK API Guide",
            "title": "M\u00f4 t\u1ea3"
        },
        {
            "location": "/nonos-sdk/esp-now/esp-now/#chuong-trinh",
            "text": "void ICACHE_FLASH_ATTR simple_cb(u8 *macaddr, u8 *data, u8 len)\n{\n    int i;\n    u8 ack_buf[16];\n    u8 recv_buf[17];\n    os_printf(\"now from[\");\n    for (i = 0; i < 6; i++)\n        os_printf(\"%02X, \", macaddr[i]);\n    os_printf(\" len: %d]:\", len);\n    os_bzero(recv_buf, 17);\n    os_memcpy(recv_buf, data, len < 17 ? len : 16);\n    if (os_strncmp(data, \"ACK\", 3) == 0)\n        return;\n    os_sprintf(ack_buf, \"ACK[%08x]\", ack_count++);\n    esp_now_send(macaddr, ack_buf, os_strlen(ack_buf));\n}\nvoid user_init(void)\n{\n    u8 key[16] = {0x33, 0x44, 0x33, 0x44, 0x33, 0x44, 0x33, 0x44,\n                  0x33, 0x44, 0x33, 0x44, 0x33, 0x44, 0x33, 0x44\n                 };\n    u8 da1[6] = {0x18, 0xfe, 0x34, 0x97, 0xd5, 0xb1};\n    u8 da2[6] = {0x1a, 0xfe, 0x34, 0x97, 0xd5, 0xb1};\n    if (esp_now_init() == 0) {\n        os_printf(\"esp_now init ok\\n\");\n        esp_now_register_recv_cb(simple_cb);\n        esp_now_set_self_role(1);\n        esp_now_add_peer(da1, 1, key, 16);\n        esp_now_add_peer(da2, 2, key, 16)\n    } else {\n        os_printf(\"esp_now init failed\\n\");\n    }\n}\nvoid ICACHE_FLASH_ATTR demo_send(u8 *mac_addr, u8 *data, u8 len)\n{\n    esp_now_send(NULL, data, len);/* Vi du nay se gui toi 2 thiet bi duoc them vao boi ham esp_now_add_peer() */\n//esp_now_send(mac_addr, data, len); /* gui toi dia chi mac mac_addr */\n}",
            "title": "Ch\u01b0\u01a1ng tr\u00ecnh"
        },
        {
            "location": "/nonos-sdk/esp-now/esp-now/#tham-khao",
            "text": "C\u00f3 th\u1ec3 xem th\u00eam c\u00e1c t\u00e0i li\u1ec7u m\u00f4 t\u1ea3 v\u1ec1  ESP-NOW  c\u1ee7a Espressif",
            "title": "Tham kh\u1ea3o"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/",
            "text": "Gi\u1edbi thi\u1ec7u\n\n\nM\u1ed9t s\u1ed1 \u0111\u1ecbnh ngh\u0129a\n\n\nC\u1ea5u tr\u00fac m\u1ea1ng\n\n\nS\u01a1 \u0111\u1ed3 m\u1ea1ng mesh\n\n\nC\u00e1c node trong m\u1ea1ng\n\n\n\n\n\n\nC\u00e1c header trong Mesh\n\n\nC\u1ea5u tr\u00fac g\u00f3i tin\n\n\nV\u00ed d\u1ee5 g\u00f3i tin g\u1eedi/ nh\u1eadn\n\n\nG\u00f3i tin request\n\n\n\n\n\n\nG\u00f3i tin response\n\n\nC\u1ea5u tr\u00fac d\u1eef li\u1ec7u\n\n\nCh\u01b0\u01a1ng tr\u00ecnh\n\n\nDevice\n\n\nMobile ho\u1eb7c Server\n\n\n\n\n\n\nL\u1ea5y topology\n\n\nPh\u00e2n t\u00edch ph\u1ea3n h\u1ed3i t\u1eeb topology\n\n\nTham kh\u1ea3o\n\n\n\n\n\n\nGi\u1edbi thi\u1ec7u\n#\n\n\n\nTrong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n IoT th\u01b0\u1eddng \u0111\u00f2i h\u1ecfi vi\u1ec7c t\u0103ng s\u1ed1 l\u01b0\u1ee3ng node k\u1ebft n\u1ed1i v\u1edbi Internet.Nh\u01b0\u1ee3c \u0111i\u1ec3m l\u1edbn nh\u1ea5t l\u00e0 s\u1ed1 l\u01b0\u1ee3ng node c\u00f3 th\u1ec3 tr\u1ef1c ti\u1ebfp k\u1ebft n\u1ed1i t\u1edbi router b\u1ecb gi\u1edbi h\u1ea1n nh\u1ecf h\u01a1n 32 node. \u0110\u1ec3 kh\u1eafc ph\u1ee5c \u0111i\u1ec3m n\u00e0y th\u00ec Espressif \u0111\u00e3 ph\u00e1t tri\u1ec3n giao th\u1ee9c ESP-MESH. Trong giao th\u1ee9c n\u00e0y node c\u00f3 th\u1ec3 t\u1ea1o ra m\u1ea1ng \u0111\u1ec3 chuy\u1ec3n ti\u1ebfp g\u00f3i tin, nh\u1edd \u0111\u00f3 m\u00e0 m\u1ed9t s\u1ed1 l\u01b0\u1ee3ng l\u1edbn node c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i Internet m\u00e0 kh\u00f4ng c\u1ea7n ph\u1ea3i c\u1ea3i ti\u1ebfn, n\u00e2ng c\u1ea5p router.\n\n\nM\u1ed9t s\u1ed1 \u0111\u1ecbnh ngh\u0129a\n#\n\n\n\n\nIOT Espressif App: \u1ee9ng d\u1ee5ng c\u1ee7a Espressif d\u00f9ng \u0111\u1ec3 \u0111i\u1ec1u khi\u1ec3n t\u1eeb xa c\u00e1c thi\u1ebft b\u1ecb Wifi\n\n\nESP-Touch: c\u00f4ng ngh\u1ec7 \u0111\u1ec3 k\u1ebft n\u1ed1i Wifi device v\u1edbi router\n\n\nSmart Config Mode cho ESP-Touch: c\u1ea5u h\u00ecnh cho Wifi device d\u00f9ng ESP-Touch th\u00f4ng qua Mode Smart Config.\n\n\n\n\nLocal Device: thi\u1ebft b\u1ecb \u0111\u01b0\u1ee3c ng\u01b0\u1eddi d\u00f9ng c\u1ea5u h\u00ecnh k\u1ebft n\u1ed1i v\u1edbi router th\u00f4ng qua ESP-Touch m\u00e0 kh\u00f4ng k\u00edch ho\u1ea1t tr\u00ean server, ch\u1ec9 c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n th\u00f4ng qua m\u1ea1ng c\u1ee5c b\u1ed9\n\n\n\n\n\n\n\nCloud Device: gi\u1ed1ng nh\u01b0 Local Device nh\u01b0ng \u0111\u01b0\u1ee3c k\u00edch ho\u1ea1t tr\u00ean server, c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n \u1edf m\u1ecdi n\u01a1i c\u00f3 m\u1ea1ng internet.\n\n\n\n\n\n\n\nC\u1ea5u tr\u00fac m\u1ea1ng\n#\n\n\nM\u1ea1ng Mesh h\u1ed7 tr\u1ee3 ch\u1ee9c n\u0103ng auto-networking. Khi ng\u01b0\u1eddi d\u00f9ng thi\u1ebft l\u1eadp m\u1ea1ng mesh th\u00f4ng qua ESP-Touch th\u00ec thi\u1ebft b\u1ecb s\u1ebd t\u1ef1 \u0111\u1ed9ng t\u00ecm c\u00e1c Wifi AP g\u1ea7n k\u1ec1.\n\n\nS\u01a1 \u0111\u1ed3 m\u1ea1ng mesh\n#\n\n\n\n\n\n\nC\u00e1c node s\u1ebd k\u1ebft n\u1ed1i tr\u1ef1c ti\u1ebfp t\u1edbi router \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 root node, c\u00e1c node kh\u00e1c th\u00ec \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 non-root node.\n\n\nOnline-Mesh: Khi router k\u1ebft n\u1ed1i v\u1edbi internet th\u00ec ta c\u00f3 th\u1ec3 d\u00f9ng IOT App \u0111\u1ec3 \u0111i\u1ec1u khi\u1ec3n t\u1eeb xa \u1edf b\u1ea5t k\u1ef3 \u0111\u00e2u\n\n\nLocal-Mesh: B\u1ea1n ch\u1ec9 c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n Local Device trong m\u1ea1ng th\u00f4ng qua router.\n\n\n\n\nC\u00e1c node trong m\u1ea1ng\n#\n\n\n\n\nRoot Node\n\n\nNh\u1eadn v\u00e0 g\u1eedi g\u00f3i tin\n\n\nChuy\u1ec3n ti\u1ebfp g\u00f3i tin t\u1eeb server, \u1ee9ng d\u1ee5ng mobile v\u00e0 c\u00e1c node con c\u1ee7a n\u00f3\n\n\n\n\n\n\nNone-root Node\n\n\nNon-leaf node: Nh\u1eadn v\u00e0 g\u1eedi g\u00f3i tin, chuy\u1ec3n ti\u1ebfp g\u00f3i tin t\u1eeb node cha v\u00e0 c\u00e1c node con kh\u00e1c\n\n\nLeaf node: Ch\u1ec9 \u0111\u01b0\u1ee3c nh\u1eadn v\u00e0 g\u1eedi g\u00f3i tin, kh\u00f4ng c\u00f3 ch\u1ee9c n\u0103ng chuy\u1ec3n ti\u1ebfp.\n\n\n\n\n\n\n\n\nC\u00e1c header trong Mesh\n#\n\n\n\n\nM\u00f4 t\u1ea3\n\n\n\n\n\n\n\n\nT\u00ean tr\u01b0\u1eddng\n\n\n\u0110\u1ed9 d\u00e0i\n\n\nM\u00f4 t\u1ea3\n\n\n\n\n\n\n\n\n\n\nver\n\n\n2 bit\n\n\nTh\u00f4ng tin Mesh\n\n\n\n\n\n\no\n\n\n1 bit\n\n\nT\u00f9y ch\u1ecdn flag\n\n\n\n\n\n\nflags\n\n\n5 bit\n\n\nFP\n\n\n\n\n\n\n\n\nFP\n\n\nCho ph\u00e9p Piggyback flow trong g\u00f3i tin\n\n\n\n\n\n\n\n\nFR\n\n\nY\u00eau c\u1ea7u,Piggyback flow trong g\u00f3i tin\n\n\n\n\n\n\n\n\nresv\n\n\nD\u1ef1 ph\u00f2ng\n\n\n\n\n\n\n\n\n8 bit\n\n\nD\n\n\n\n\n\n\n\n\nD\n\n\nChi\u1ec1u c\u1ee7a g\u00f3i tin: 0: xu\u1ed1ng (downward) 1: l\u00ean (upward)\n\n\n\n\n\n\n\n\nP2P\n\n\nG\u00f3i tin t\u1eeb Node t\u1edbi Node\n\n\n\n\n\n\n\n\nprotocol\n\n\nGiao th\u1ee9c g\u1eedi d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c quy \u0111\u1ecbnh b\u1edfi ng\u01b0\u1eddi d\u00f9ng(6bit)\n\n\n\n\n\n\nlen\n\n\n2 byte\n\n\nChi\u1ec1u d\u00e0i c\u1ee7a g\u00f3i tin (bao g\u1ed3m c\u1ea3 mesh header)\n\n\n\n\n\n\ndst_addr\n\n\n6 bytes\n\n\n\u0110\u1ecba ch\u1ec9 \u0111\u00edch\n\n\n\n\n\n\nsrc_addr\n\n\n6 bytes\n\n\n\u0110\u1ecba ch\u1ec9 ngu\u1ed3n\n\n\n\n\n\n\not_len\n\n\n\n\n\u0110\u1ed9 d\u00e0i c\u1ee7a option (g\u1ed3m c\u1ea3 ch\u00ednh n\u00f3)\n\n\n\n\n\n\noption_list\n\n\n\n\nDanh s\u00e1ch c\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a c\u00e1c option\n\n\n\n\n\n\notype\n\n\n1 byte\n\n\nKi\u1ec3u option\n\n\n\n\n\n\nolen\n\n\n1 byte\n\n\nChi\u1ec1u d\u00e0i c\u1ee7a option hi\u1ec7n t\u1ecba\n\n\n\n\n\n\novalue\n\n\nNg\u01b0\u1eddi d\u00f9ng \u0111\u1ecbnh ngh\u0129a\n\n\nGi\u00e1 tr\u1ecb option hi\u1ec7n t\u1ea1i\n\n\n\n\n\n\n\n\nC\u1ea5u tr\u00fac g\u00f3i tin\n#\n\n\nM\u1ea1ng mesh \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1edfi c\u1ea5u tr\u00fac trong mesh_option_type\n\n\n    enum mesh_option_type {\n    M_O_FLOW_REQ = 0,   //flow request option\n    M_O_FLOW_RESP,      //flow response option\n    M_O_ROUTER_SPREAD,  //router information spread option\n    M_O_ROUTE_ADD,      //route table update (node joins mesh) option\n    M_O_ROUTE_DEL,      //route table update (node exits mesh) option\n    M_O_TOPO_REQ,       //topology request option\n    M_O_TOPO_RESP,      //topology response option\n    M_O_MCAST_GRP,      //group list of mcast\n    M_O_MESH_FRAG,      //mesh management fragmentation option\n    M_O_USR_FRAG,       //user data fragmentation\n    M_O_USR_OPTION,     //user option\n    };\n\n\n\n\n\n\n\n\n\n\nT\u00ean tr\u01b0\u1eddng\n\n\n\u0110\u1ed9 d\u00e0i\n\n\nM\u00f4 t\u1ea3\n\n\n\u0110\u1ecbnh d\u1ea1ng\n\n\n\n\n\n\n\n\n\n\nM_O_FLOW_REQ\n\n\n2 Bytes\n\n\nD\u00f9ng cho flow request\n\n\notype\n\n\n\n\n\n\nM_O_FLOW_RESP\n\n\n6 Bytes\n\n\nD\u00f9ng cho ph\u1ea3n h\u1ed3i t\u1edbi flow\n\n\notype\n\n\n\n\n\n\nM_O_ROUTER_SPREAD\n\n\n106 Bytes\n\n\nD\u00f9ng spread th\u00f4ng tin t\u1eeb router\n\n\notype\n\n\n\n\n\n\nM_O_ROUTE_ADD\n\n\n6*n+2Bytes\n\n\nD\u00f9ng \u0111\u1ec3 c\u1eadp nh\u1eadt b\u1ea3ng \u0111\u1ecbnh tuy\u1ebfn khi c\u00f3 node m\u1edbi tham gia v\u00e0o m\u1ea1ng\n\n\notype\n\n\n\n\n\n\nM_O_ROUTE_DEL\n\n\n6*n+2Bytes\n\n\nD\u00f9ng \u0111\u1ec3 c\u1eadp nh\u1eadt b\u1ea3ng \u0111\u1ecbnh tuy\u1ebfn khi c\u00f3 node r\u1eddi m\u1ea1ng\n\n\notype\n\n\n\n\n\n\nM_O_TOPO_REQ\n\n\n8 Bytes\n\n\nS\u1eed d\u1ee5ng \u0111\u1ec3 l\u1ea5y topo c\u1ee7a m\u1ea1ng mesh\n\n\notype\n\n\n\n\n\n\nM_O_TOPO_RESP\n\n\n6*n+2Bytes\n\n\nS\u1eed d\u1ee5ng \u0111\u1ec3 nh\u1eadn ph\u1ea3n h\u1ed3i topo c\u1ee7a m\u1ea1ng mesh\n\n\notype\n\n\n\n\n\n\n\n\nV\u00ed d\u1ee5 g\u00f3i tin g\u1eedi/ nh\u1eadn\n#\n\n\nG\u00f3i tin request\n#\n\n\n\n\n\n\n\n\n\n\n0\n\n\n1\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\n6\n\n\n7\n\n\n8\n\n\n9\n\n\na\n\n\nb\n\n\nc\n\n\nd\n\n\ne\n\n\nf\n\n\n\n\n\n\n\n\n\n\n00000000h\n\n\n04\n\n\n01\n\n\n14\n\n\n00\n\n\n18\n\n\nFE\n\n\n34\n\n\nA5\n\n\n3B\n\n\nAD\n\n\n18\n\n\nFE\n\n\n34\n\n\nA2\n\n\nC7\n\n\n76\n\n\n\n\n\n\n00000010h\n\n\n04\n\n\n00\n\n\n00\n\n\n02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\u00f4 t\u1ea3\n\n\n\n\n\n\n\n\nT\u00ean tr\u01b0\u1eddng\n\n\nGi\u00e1 tr\u1ecb\n\n\nM\u00f4 t\u1ea3\n\n\n\n\n\n\n\n\n\n\nhead.ver\n\n\n00\n\n\nPhi\u00ean b\u1ea3n hi\u1ec7n t\u1ea1i c\u1ee7a mesh l\u00e0 00\n\n\n\n\n\n\nhead.O\n\n\n1\n\n\nC\u00f3 option trong g\u00f3i tin\n\n\n\n\n\n\nhead.flags.FP\n\n\n0\n\n\nKh\u00f4ng c\u00f3 piggyback flow permit\n\n\n\n\n\n\nhead.flags.FR\n\n\n0\n\n\nKh\u00f4ng c\u00f3 piggyback flow request\n\n\n\n\n\n\nhead.flags.resv\n\n\n000\n\n\nD\u1ef1 ph\u00f2ng\n\n\n\n\n\n\nhead.proto.D\n\n\n1\n\n\nUpwards\n\n\n\n\n\n\nhead.proto.P2P\n\n\n0\n\n\nKh\u00f4ng c\u00f3 g\u00f3i t\u1eeb node t\u1edbi node\n\n\n\n\n\n\nhead.proto.protocol\n\n\n000000\n\n\nG\u00f3i tin qu\u1ea3n l\u00fd mesh\n\n\n\n\n\n\nhead.len\n\n\n0x0014\n\n\nChi\u1ec1u d\u00e0i c\u1ee7a g\u00f3i tin l\u00e0 20 byte\n\n\n\n\n\n\nhead.dst_addr\n\n\n18 FE 34 A5 3B AD\n\n\n\u0110\u1ecba ch\u1ec9 MAC c\u1ee7a destination device\n\n\n\n\n\n\nhead.src_addr\n\n\n18 FE 34 A2 C7 76\n\n\n\u0110\u1ecba ch\u1ec9 MAC c\u1ee7a source device\n\n\n\n\n\n\nhead.ot_len\n\n\n0x0004\n\n\nChi\u1ec1u d\u00e0i c\u1ee7a option l\u00e0 0x0004\n\n\n\n\n\n\nhead.option_list[0].otype\n\n\n0x00\n\n\nM_FLOW_REQ\n\n\n\n\n\n\nhead.option_list[0].olen\n\n\n0x02\n\n\nOption length l\u00e0 0x02\n\n\n\n\n\n\n\n\nG\u00f3i tin response\n#\n\n\n\n\n\n\n\n\n\n\n0\n\n\n1\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\n6\n\n\n7\n\n\n8\n\n\n9\n\n\na\n\n\nb\n\n\nc\n\n\nd\n\n\ne\n\n\nf\n\n\n\n\n\n\n\n\n\n\n00000000h\n\n\n04\n\n\n00\n\n\n18\n\n\n00\n\n\n18\n\n\nFE\n\n\n34\n\n\nA2\n\n\nC7\n\n\n76\n\n\n18\n\n\nFE\n\n\n34\n\n\nA5\n\n\n3B\n\n\nAD\n\n\n\n\n\n\n00000010h\n\n\n08\n\n\n00\n\n\n01\n\n\n06\n\n\n01\n\n\n00\n\n\n00\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\u00f4 t\u1ea3\n\n\n\n\n\n\n\n\nT\u00ean tr\u01b0\u1eddng\n\n\nGi\u00e1 tr\u1ecb\n\n\nM\u00f4 t\u1ea3\n\n\n\n\n\n\n\n\n\n\nhead.ver\n\n\n00\n\n\nPhi\u00ean b\u1ea3n hi\u1ec7n t\u1ea1i c\u1ee7a mesh l\u00e0 00\n\n\n\n\n\n\nhead.O\n\n\n1\n\n\nC\u00f3 option trong g\u00f3i tin\n\n\n\n\n\n\nhead.flags.FP\n\n\n0\n\n\nKh\u00f4ng c\u00f3 piggyback flow permit\n\n\n\n\n\n\nhead.flags.FR\n\n\n0\n\n\nKh\u00f4ng c\u00f3 piggyback flow request\n\n\n\n\n\n\nhead.flags.resv\n\n\n000\n\n\nD\u1ef1 ph\u00f2ng\n\n\n\n\n\n\nhead.proto.D\n\n\n0\n\n\nDownwards.\n\n\n\n\n\n\nhead.proto.P2P\n\n\n0\n\n\nKh\u00f4ng c\u00f3 g\u00f3i t\u1eeb node t\u1edbi node\n\n\n\n\n\n\nhead.proto.protocol\n\n\n000000\n\n\nG\u00f3i tin qu\u1ea3n l\u00fd mesh\n\n\n\n\n\n\nhead.len\n\n\n0x0015\n\n\nChi\u1ec1u d\u00e0i c\u1ee7a g\u00f3i tin l\u00e0 21 byte\n\n\n\n\n\n\nhead.dst_addr\n\n\n18 FE 34 A2 C7 76\n\n\n\u0110\u1ecba ch\u1ec9 MAC c\u1ee7a destination device\n\n\n\n\n\n\nhead.src_addr\n\n\n18 FE 34 A5 3B AD\n\n\n\u0110\u1ecba ch\u1ec9 MAC c\u1ee7a source device\n\n\n\n\n\n\nhead.ot_len\n\n\n0x0008\n\n\nChi\u1ec1u d\u00e0i c\u1ee7a option l\u00e0 0x0008\n\n\n\n\n\n\nhead.option_list[0].otype\n\n\n0x01\n\n\nM_FLOW_RESP\n\n\n\n\n\n\nhead.option_list[0].olen\n\n\n0x06\n\n\nOption length l\u00e0 0x06\n\n\n\n\n\n\nhead.option_list[0].ovalue\n\n\n0x01\n\n\nOption value l\u00e0 0x00000001, flow capacity l\u00e0 0x00000001.\n\n\n\n\n\n\n\n\nC\u1ea5u tr\u00fac d\u1eef li\u1ec7u\n#\n\n\n\n\n\u0110\u1ecbnh d\u1ea1ng mesh header \n\n\n\n\nstruct mesh_header_format {\n    uint8_t ver: 2; // version of mesh\n    uint8_t oe: 1; // option flag\n    uint8_t fp: 1; // piggyback flow permit in packet\n    uint8_t fr: 1; // piggyback flow request in packet\n    uint8_t rsv: 3; // reserved\n    struct {\n        uint8_t d: 1; // direction, 1:upwards, 0:downwards\n        uint8_t p2p: 1; // node to node packet\n        uint8_t protocol: 6; // protocol used by user data\n    } proto;\n    uint16_t len; // packet total length\n    (mesh header included)\n    uint8_t dst_addr[ESP_MESH_ADDR_LEN]; // destination address\n    uint8_t src_addr[ESP_MESH_ADDR_LEN]; // source address\n    struct mesh_header_option_header_type option[0]; // mesh option\n} __packed;\n\n\n\n\n\n\n\u0110\u1ecbnh d\u1ea1ng mesh Option header \n\n\n\n\nstruct mesh_header_option_header_type {\n    uint16_t ot_len; // option total length\n    struct mesh_header_option_format olist[0]; // option list\n} __packed;\n\n\n\n\n\n\n\u0110\u1ecbnh d\u1ea1ng mesh Option \n\n\n\n\nstruct mesh_header_option_format {\n    uint8_t otype; // option type\n    uint8_t olen; // current option length\n    uint8_t ovalue[0]; // option value\n} __packed;\n\n\n\n\n\n\n\u0110\u1ecbnh d\u1ea1ng mesh Option Fragmentation\n\n\n\n\nstruct mesh_header_option_frag_format {\n    uint16_t id; // identity of fragmentation\n    struct {\n        uint16_t resv: 1; // reserved\n        uint16_t mf: 1; // more fragmentation\n        uint16_t idx: 14; // fragmentation offset\n    } offset;\n} __packed;\n\n\n\n\n\n\n\u0110\u1ecbnh d\u1ea1ng Mesh Callback\n\n\n\n\ntypedef void (* espconn_mesh_callback)(int8_t result);\n\n\n\n\n\n\n\u0110\u1ecbnh d\u1ea1ng Mesh Scan Callback\n\n\n\n\ntypedef void (* espconn_mesh_scan_callback)(void *arg, int8_t\nstatus);\n\n\n\n\n\n\n\u0110\u1ecbnh d\u1ea1ng Mesh Scan User Callback\n\n\n\n\ntypedef void (* espconn_mesh_usr_callback)(void *arg);\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nC\u00e1c API c\u1ee7a packet c\u00f3 th\u1ec3 tham kh\u1ea3o t\u1ea1i \nAPI\n\n\n\n\nCh\u01b0\u01a1ng tr\u00ecnh\n#\n\n\nDevice\n#\n\n\nMobile ho\u1eb7c Server\n#\n\n\nvoid controller_entrance(Parameter list)\n{\n    /*Add your codes to check status*/\n    /*Add your codes to build control packet*/\n    uint8_t json_control_data[] = {/*Add your codes*/};\n    uint16_t control_data_len = sizeof(json_control_data)\n                                struct mesh_header_format * mesh_header = NULL;\n    /* src_addr should be the combination of IP and port of\n    Mobile or Server. You can set the address to zero, then the\n    root device will fill in the section. If you fill in the\n    section by yourself, please make sure the value is right.*/\n    uint8_t src_addr[] = {0, 0, 0, 0, 0, 0},\n                         dst_addr[] = {xx, xx, xx, xx, xx, xx};\n    mesh_header = (struct mesh_header_format\n                   *)espconn_mesh_create_packet(dst_addr, src_addr, false, true,\n                           M_PROTO_JSON, control_data_len,\n                           false, 0, false, 0, false, 0, 0);\n    if (!mesh_header)\n    {\n        printf(\u201calloc resp packet fail\\n\u201d);\n        return;\n    }\n    if (espconn_mesh_set_usr_data(mesh_header,\n                                  resp_json_packet_body, resp_data_len))\n    {\n        printf(\u201cset user data fail\\n\u201d);\n        free(mesh_header);\n        return;\n    }\n// sent control packet\n    espconn_mesh_sent(esp, mesh_header, mesh_header->len);\n    free(mesh_header);\n}\n\n\n\n\nL\u1ea5y topology\n#\n\n\nvoid topology_entrance(Parameter list)\n{\n    /*Add your codes to check status*/\n    /*Add your codes to build getting topology packet*/\n    bool res;\n    struct mesh_header_format *mesh_header = NULL;\n    struct mesh_header_option_format *topo_option = NULL;\n    uint8_t src_addr[] = {0, 0, 0, 0, 0, 0};\n    uint8_t dst_addr[] = {xx, xx, xx, xx, xx, xx}; // MAC address of root\n    device\n    uint8_t dev_mac[6] = {xx, xx, xx, xx, xx, xx}; // zero represents\n    topology of all devices\n    uint16_t ot_len = sizeof(*topo_option) + sizeof(struct\n                      mesh_header_option_header_type) + sizeof(dev_mac);\n    mesh_header = (struct mesh_header_format\n                   *)espconn_mesh_create_packet(\n                      dst_addr, src_addr, false, true, M_PROTO_NONE, 0,\n                      true, ot_len, false, 0, false, 0, 0);\n    if (!mesh_header) {\n        printf(\u201calloc resp packet fail\\n\u201d);\n        return;\n    }\n    topo_option = (struct mesh_header_option_format\n                   *)espconn_mesh_create_option(\n                      M_O_TOPO_REQ, dev_mac, sizeof(dev_mac));\n    if (!topo_option) {\n        printf(\u201calloc topo option fail\\n\u201d);\n        free(mesh_header);\n        return;\n    }\n    res = espconn_mesh_add_option(mesh_header, topo_option);\n    free(topo_option);\n    if (res) {\n        printf(\u201cadd topo option fail\\n\u201d);\n        free(mesh_header);\n        return;\n    }\n// send packet of getting topology\n    espconn_mesh_sent(esp, mesh_header, mesh_header->len);\n    free(mesh_header);\n}\n\n\n\n\nPh\u00e2n t\u00edch ph\u1ea3n h\u1ed3i t\u1eeb topology\n#\n\n\nvoid topology_parser_entrance(uint8_t *topo_resp, uint16_t len)\n{\n    /*Add your codes to check parameter*/\n    uint16_t oidx = 1;\n    struct mesh_header_format *mesh_header = NULL;\n    struct mesh_header_option_format *topo_option = NULL;\n    mesh_header = (struct mesh_header_format *)topo_resp;\n    if (!mesh_header->oe) {\n        printf(\u201cno option exist\\n\u201d);\n        return;\n    }\n    /* you need parse all the options one by one in the packet header\n    */\n    while (espconn_mesh_get_option(mesh_header, M_O_TOPO_RESP,\n                                   oidx++, &topo_option)) {\n        uint16_t dev_count = topo_option->olen / 6;\n        process_dev_list(topo_option->ovalue, dev_count);\n    }\n}\n\n\n\n\nTham kh\u1ea3o\n#\n\n\n\n\nESP-MESH",
            "title": "ESP Mesh"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#gioi-thieu",
            "text": "Trong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n IoT th\u01b0\u1eddng \u0111\u00f2i h\u1ecfi vi\u1ec7c t\u0103ng s\u1ed1 l\u01b0\u1ee3ng node k\u1ebft n\u1ed1i v\u1edbi Internet.Nh\u01b0\u1ee3c \u0111i\u1ec3m l\u1edbn nh\u1ea5t l\u00e0 s\u1ed1 l\u01b0\u1ee3ng node c\u00f3 th\u1ec3 tr\u1ef1c ti\u1ebfp k\u1ebft n\u1ed1i t\u1edbi router b\u1ecb gi\u1edbi h\u1ea1n nh\u1ecf h\u01a1n 32 node. \u0110\u1ec3 kh\u1eafc ph\u1ee5c \u0111i\u1ec3m n\u00e0y th\u00ec Espressif \u0111\u00e3 ph\u00e1t tri\u1ec3n giao th\u1ee9c ESP-MESH. Trong giao th\u1ee9c n\u00e0y node c\u00f3 th\u1ec3 t\u1ea1o ra m\u1ea1ng \u0111\u1ec3 chuy\u1ec3n ti\u1ebfp g\u00f3i tin, nh\u1edd \u0111\u00f3 m\u00e0 m\u1ed9t s\u1ed1 l\u01b0\u1ee3ng l\u1edbn node c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i Internet m\u00e0 kh\u00f4ng c\u1ea7n ph\u1ea3i c\u1ea3i ti\u1ebfn, n\u00e2ng c\u1ea5p router.",
            "title": "Gi\u1edbi thi\u1ec7u"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#mot-so-inh-nghia",
            "text": "IOT Espressif App: \u1ee9ng d\u1ee5ng c\u1ee7a Espressif d\u00f9ng \u0111\u1ec3 \u0111i\u1ec1u khi\u1ec3n t\u1eeb xa c\u00e1c thi\u1ebft b\u1ecb Wifi  ESP-Touch: c\u00f4ng ngh\u1ec7 \u0111\u1ec3 k\u1ebft n\u1ed1i Wifi device v\u1edbi router  Smart Config Mode cho ESP-Touch: c\u1ea5u h\u00ecnh cho Wifi device d\u00f9ng ESP-Touch th\u00f4ng qua Mode Smart Config.   Local Device: thi\u1ebft b\u1ecb \u0111\u01b0\u1ee3c ng\u01b0\u1eddi d\u00f9ng c\u1ea5u h\u00ecnh k\u1ebft n\u1ed1i v\u1edbi router th\u00f4ng qua ESP-Touch m\u00e0 kh\u00f4ng k\u00edch ho\u1ea1t tr\u00ean server, ch\u1ec9 c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n th\u00f4ng qua m\u1ea1ng c\u1ee5c b\u1ed9    Cloud Device: gi\u1ed1ng nh\u01b0 Local Device nh\u01b0ng \u0111\u01b0\u1ee3c k\u00edch ho\u1ea1t tr\u00ean server, c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n \u1edf m\u1ecdi n\u01a1i c\u00f3 m\u1ea1ng internet.",
            "title": "M\u1ed9t s\u1ed1 \u0111\u1ecbnh ngh\u0129a"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#cau-truc-mang",
            "text": "M\u1ea1ng Mesh h\u1ed7 tr\u1ee3 ch\u1ee9c n\u0103ng auto-networking. Khi ng\u01b0\u1eddi d\u00f9ng thi\u1ebft l\u1eadp m\u1ea1ng mesh th\u00f4ng qua ESP-Touch th\u00ec thi\u1ebft b\u1ecb s\u1ebd t\u1ef1 \u0111\u1ed9ng t\u00ecm c\u00e1c Wifi AP g\u1ea7n k\u1ec1.",
            "title": "C\u1ea5u tr\u00fac m\u1ea1ng"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#so-o-mang-mesh",
            "text": "C\u00e1c node s\u1ebd k\u1ebft n\u1ed1i tr\u1ef1c ti\u1ebfp t\u1edbi router \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 root node, c\u00e1c node kh\u00e1c th\u00ec \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 non-root node.  Online-Mesh: Khi router k\u1ebft n\u1ed1i v\u1edbi internet th\u00ec ta c\u00f3 th\u1ec3 d\u00f9ng IOT App \u0111\u1ec3 \u0111i\u1ec1u khi\u1ec3n t\u1eeb xa \u1edf b\u1ea5t k\u1ef3 \u0111\u00e2u  Local-Mesh: B\u1ea1n ch\u1ec9 c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n Local Device trong m\u1ea1ng th\u00f4ng qua router.",
            "title": "S\u01a1 \u0111\u1ed3 m\u1ea1ng mesh"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#cac-node-trong-mang",
            "text": "Root Node  Nh\u1eadn v\u00e0 g\u1eedi g\u00f3i tin  Chuy\u1ec3n ti\u1ebfp g\u00f3i tin t\u1eeb server, \u1ee9ng d\u1ee5ng mobile v\u00e0 c\u00e1c node con c\u1ee7a n\u00f3    None-root Node  Non-leaf node: Nh\u1eadn v\u00e0 g\u1eedi g\u00f3i tin, chuy\u1ec3n ti\u1ebfp g\u00f3i tin t\u1eeb node cha v\u00e0 c\u00e1c node con kh\u00e1c  Leaf node: Ch\u1ec9 \u0111\u01b0\u1ee3c nh\u1eadn v\u00e0 g\u1eedi g\u00f3i tin, kh\u00f4ng c\u00f3 ch\u1ee9c n\u0103ng chuy\u1ec3n ti\u1ebfp.",
            "title": "C\u00e1c node trong m\u1ea1ng"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#cac-header-trong-mesh",
            "text": "M\u00f4 t\u1ea3     T\u00ean tr\u01b0\u1eddng  \u0110\u1ed9 d\u00e0i  M\u00f4 t\u1ea3      ver  2 bit  Th\u00f4ng tin Mesh    o  1 bit  T\u00f9y ch\u1ecdn flag    flags  5 bit  FP     FP  Cho ph\u00e9p Piggyback flow trong g\u00f3i tin     FR  Y\u00eau c\u1ea7u,Piggyback flow trong g\u00f3i tin     resv  D\u1ef1 ph\u00f2ng     8 bit  D     D  Chi\u1ec1u c\u1ee7a g\u00f3i tin: 0: xu\u1ed1ng (downward) 1: l\u00ean (upward)     P2P  G\u00f3i tin t\u1eeb Node t\u1edbi Node     protocol  Giao th\u1ee9c g\u1eedi d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c quy \u0111\u1ecbnh b\u1edfi ng\u01b0\u1eddi d\u00f9ng(6bit)    len  2 byte  Chi\u1ec1u d\u00e0i c\u1ee7a g\u00f3i tin (bao g\u1ed3m c\u1ea3 mesh header)    dst_addr  6 bytes  \u0110\u1ecba ch\u1ec9 \u0111\u00edch    src_addr  6 bytes  \u0110\u1ecba ch\u1ec9 ngu\u1ed3n    ot_len   \u0110\u1ed9 d\u00e0i c\u1ee7a option (g\u1ed3m c\u1ea3 ch\u00ednh n\u00f3)    option_list   Danh s\u00e1ch c\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a c\u00e1c option    otype  1 byte  Ki\u1ec3u option    olen  1 byte  Chi\u1ec1u d\u00e0i c\u1ee7a option hi\u1ec7n t\u1ecba    ovalue  Ng\u01b0\u1eddi d\u00f9ng \u0111\u1ecbnh ngh\u0129a  Gi\u00e1 tr\u1ecb option hi\u1ec7n t\u1ea1i",
            "title": "C\u00e1c header trong Mesh"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#cau-truc-goi-tin",
            "text": "M\u1ea1ng mesh \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1edfi c\u1ea5u tr\u00fac trong mesh_option_type      enum mesh_option_type {\n    M_O_FLOW_REQ = 0,   //flow request option\n    M_O_FLOW_RESP,      //flow response option\n    M_O_ROUTER_SPREAD,  //router information spread option\n    M_O_ROUTE_ADD,      //route table update (node joins mesh) option\n    M_O_ROUTE_DEL,      //route table update (node exits mesh) option\n    M_O_TOPO_REQ,       //topology request option\n    M_O_TOPO_RESP,      //topology response option\n    M_O_MCAST_GRP,      //group list of mcast\n    M_O_MESH_FRAG,      //mesh management fragmentation option\n    M_O_USR_FRAG,       //user data fragmentation\n    M_O_USR_OPTION,     //user option\n    };     T\u00ean tr\u01b0\u1eddng  \u0110\u1ed9 d\u00e0i  M\u00f4 t\u1ea3  \u0110\u1ecbnh d\u1ea1ng      M_O_FLOW_REQ  2 Bytes  D\u00f9ng cho flow request  otype    M_O_FLOW_RESP  6 Bytes  D\u00f9ng cho ph\u1ea3n h\u1ed3i t\u1edbi flow  otype    M_O_ROUTER_SPREAD  106 Bytes  D\u00f9ng spread th\u00f4ng tin t\u1eeb router  otype    M_O_ROUTE_ADD  6*n+2Bytes  D\u00f9ng \u0111\u1ec3 c\u1eadp nh\u1eadt b\u1ea3ng \u0111\u1ecbnh tuy\u1ebfn khi c\u00f3 node m\u1edbi tham gia v\u00e0o m\u1ea1ng  otype    M_O_ROUTE_DEL  6*n+2Bytes  D\u00f9ng \u0111\u1ec3 c\u1eadp nh\u1eadt b\u1ea3ng \u0111\u1ecbnh tuy\u1ebfn khi c\u00f3 node r\u1eddi m\u1ea1ng  otype    M_O_TOPO_REQ  8 Bytes  S\u1eed d\u1ee5ng \u0111\u1ec3 l\u1ea5y topo c\u1ee7a m\u1ea1ng mesh  otype    M_O_TOPO_RESP  6*n+2Bytes  S\u1eed d\u1ee5ng \u0111\u1ec3 nh\u1eadn ph\u1ea3n h\u1ed3i topo c\u1ee7a m\u1ea1ng mesh  otype",
            "title": "C\u1ea5u tr\u00fac g\u00f3i tin"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#vi-du-goi-tin-gui-nhan",
            "text": "",
            "title": "V\u00ed d\u1ee5 g\u00f3i tin g\u1eedi/ nh\u1eadn"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#goi-tin-request",
            "text": "0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f      00000000h  04  01  14  00  18  FE  34  A5  3B  AD  18  FE  34  A2  C7  76    00000010h  04  00  00  02                 M\u00f4 t\u1ea3     T\u00ean tr\u01b0\u1eddng  Gi\u00e1 tr\u1ecb  M\u00f4 t\u1ea3      head.ver  00  Phi\u00ean b\u1ea3n hi\u1ec7n t\u1ea1i c\u1ee7a mesh l\u00e0 00    head.O  1  C\u00f3 option trong g\u00f3i tin    head.flags.FP  0  Kh\u00f4ng c\u00f3 piggyback flow permit    head.flags.FR  0  Kh\u00f4ng c\u00f3 piggyback flow request    head.flags.resv  000  D\u1ef1 ph\u00f2ng    head.proto.D  1  Upwards    head.proto.P2P  0  Kh\u00f4ng c\u00f3 g\u00f3i t\u1eeb node t\u1edbi node    head.proto.protocol  000000  G\u00f3i tin qu\u1ea3n l\u00fd mesh    head.len  0x0014  Chi\u1ec1u d\u00e0i c\u1ee7a g\u00f3i tin l\u00e0 20 byte    head.dst_addr  18 FE 34 A5 3B AD  \u0110\u1ecba ch\u1ec9 MAC c\u1ee7a destination device    head.src_addr  18 FE 34 A2 C7 76  \u0110\u1ecba ch\u1ec9 MAC c\u1ee7a source device    head.ot_len  0x0004  Chi\u1ec1u d\u00e0i c\u1ee7a option l\u00e0 0x0004    head.option_list[0].otype  0x00  M_FLOW_REQ    head.option_list[0].olen  0x02  Option length l\u00e0 0x02",
            "title": "G\u00f3i tin request"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#goi-tin-response",
            "text": "0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f      00000000h  04  00  18  00  18  FE  34  A2  C7  76  18  FE  34  A5  3B  AD    00000010h  08  00  01  06  01  00  00  00             M\u00f4 t\u1ea3     T\u00ean tr\u01b0\u1eddng  Gi\u00e1 tr\u1ecb  M\u00f4 t\u1ea3      head.ver  00  Phi\u00ean b\u1ea3n hi\u1ec7n t\u1ea1i c\u1ee7a mesh l\u00e0 00    head.O  1  C\u00f3 option trong g\u00f3i tin    head.flags.FP  0  Kh\u00f4ng c\u00f3 piggyback flow permit    head.flags.FR  0  Kh\u00f4ng c\u00f3 piggyback flow request    head.flags.resv  000  D\u1ef1 ph\u00f2ng    head.proto.D  0  Downwards.    head.proto.P2P  0  Kh\u00f4ng c\u00f3 g\u00f3i t\u1eeb node t\u1edbi node    head.proto.protocol  000000  G\u00f3i tin qu\u1ea3n l\u00fd mesh    head.len  0x0015  Chi\u1ec1u d\u00e0i c\u1ee7a g\u00f3i tin l\u00e0 21 byte    head.dst_addr  18 FE 34 A2 C7 76  \u0110\u1ecba ch\u1ec9 MAC c\u1ee7a destination device    head.src_addr  18 FE 34 A5 3B AD  \u0110\u1ecba ch\u1ec9 MAC c\u1ee7a source device    head.ot_len  0x0008  Chi\u1ec1u d\u00e0i c\u1ee7a option l\u00e0 0x0008    head.option_list[0].otype  0x01  M_FLOW_RESP    head.option_list[0].olen  0x06  Option length l\u00e0 0x06    head.option_list[0].ovalue  0x01  Option value l\u00e0 0x00000001, flow capacity l\u00e0 0x00000001.",
            "title": "G\u00f3i tin response"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#cau-truc-du-lieu",
            "text": "\u0110\u1ecbnh d\u1ea1ng mesh header    struct mesh_header_format {\n    uint8_t ver: 2; // version of mesh\n    uint8_t oe: 1; // option flag\n    uint8_t fp: 1; // piggyback flow permit in packet\n    uint8_t fr: 1; // piggyback flow request in packet\n    uint8_t rsv: 3; // reserved\n    struct {\n        uint8_t d: 1; // direction, 1:upwards, 0:downwards\n        uint8_t p2p: 1; // node to node packet\n        uint8_t protocol: 6; // protocol used by user data\n    } proto;\n    uint16_t len; // packet total length\n    (mesh header included)\n    uint8_t dst_addr[ESP_MESH_ADDR_LEN]; // destination address\n    uint8_t src_addr[ESP_MESH_ADDR_LEN]; // source address\n    struct mesh_header_option_header_type option[0]; // mesh option\n} __packed;   \u0110\u1ecbnh d\u1ea1ng mesh Option header    struct mesh_header_option_header_type {\n    uint16_t ot_len; // option total length\n    struct mesh_header_option_format olist[0]; // option list\n} __packed;   \u0110\u1ecbnh d\u1ea1ng mesh Option    struct mesh_header_option_format {\n    uint8_t otype; // option type\n    uint8_t olen; // current option length\n    uint8_t ovalue[0]; // option value\n} __packed;   \u0110\u1ecbnh d\u1ea1ng mesh Option Fragmentation   struct mesh_header_option_frag_format {\n    uint16_t id; // identity of fragmentation\n    struct {\n        uint16_t resv: 1; // reserved\n        uint16_t mf: 1; // more fragmentation\n        uint16_t idx: 14; // fragmentation offset\n    } offset;\n} __packed;   \u0110\u1ecbnh d\u1ea1ng Mesh Callback   typedef void (* espconn_mesh_callback)(int8_t result);   \u0110\u1ecbnh d\u1ea1ng Mesh Scan Callback   typedef void (* espconn_mesh_scan_callback)(void *arg, int8_t\nstatus);   \u0110\u1ecbnh d\u1ea1ng Mesh Scan User Callback   typedef void (* espconn_mesh_usr_callback)(void *arg);   L\u01b0u \u00fd  C\u00e1c API c\u1ee7a packet c\u00f3 th\u1ec3 tham kh\u1ea3o t\u1ea1i  API",
            "title": "C\u1ea5u tr\u00fac d\u1eef li\u1ec7u"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#chuong-trinh",
            "text": "",
            "title": "Ch\u01b0\u01a1ng tr\u00ecnh"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#device",
            "text": "",
            "title": "Device"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#mobile-hoac-server",
            "text": "void controller_entrance(Parameter list)\n{\n    /*Add your codes to check status*/\n    /*Add your codes to build control packet*/\n    uint8_t json_control_data[] = {/*Add your codes*/};\n    uint16_t control_data_len = sizeof(json_control_data)\n                                struct mesh_header_format * mesh_header = NULL;\n    /* src_addr should be the combination of IP and port of\n    Mobile or Server. You can set the address to zero, then the\n    root device will fill in the section. If you fill in the\n    section by yourself, please make sure the value is right.*/\n    uint8_t src_addr[] = {0, 0, 0, 0, 0, 0},\n                         dst_addr[] = {xx, xx, xx, xx, xx, xx};\n    mesh_header = (struct mesh_header_format\n                   *)espconn_mesh_create_packet(dst_addr, src_addr, false, true,\n                           M_PROTO_JSON, control_data_len,\n                           false, 0, false, 0, false, 0, 0);\n    if (!mesh_header)\n    {\n        printf(\u201calloc resp packet fail\\n\u201d);\n        return;\n    }\n    if (espconn_mesh_set_usr_data(mesh_header,\n                                  resp_json_packet_body, resp_data_len))\n    {\n        printf(\u201cset user data fail\\n\u201d);\n        free(mesh_header);\n        return;\n    }\n// sent control packet\n    espconn_mesh_sent(esp, mesh_header, mesh_header->len);\n    free(mesh_header);\n}",
            "title": "Mobile ho\u1eb7c Server"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#lay-topology",
            "text": "void topology_entrance(Parameter list)\n{\n    /*Add your codes to check status*/\n    /*Add your codes to build getting topology packet*/\n    bool res;\n    struct mesh_header_format *mesh_header = NULL;\n    struct mesh_header_option_format *topo_option = NULL;\n    uint8_t src_addr[] = {0, 0, 0, 0, 0, 0};\n    uint8_t dst_addr[] = {xx, xx, xx, xx, xx, xx}; // MAC address of root\n    device\n    uint8_t dev_mac[6] = {xx, xx, xx, xx, xx, xx}; // zero represents\n    topology of all devices\n    uint16_t ot_len = sizeof(*topo_option) + sizeof(struct\n                      mesh_header_option_header_type) + sizeof(dev_mac);\n    mesh_header = (struct mesh_header_format\n                   *)espconn_mesh_create_packet(\n                      dst_addr, src_addr, false, true, M_PROTO_NONE, 0,\n                      true, ot_len, false, 0, false, 0, 0);\n    if (!mesh_header) {\n        printf(\u201calloc resp packet fail\\n\u201d);\n        return;\n    }\n    topo_option = (struct mesh_header_option_format\n                   *)espconn_mesh_create_option(\n                      M_O_TOPO_REQ, dev_mac, sizeof(dev_mac));\n    if (!topo_option) {\n        printf(\u201calloc topo option fail\\n\u201d);\n        free(mesh_header);\n        return;\n    }\n    res = espconn_mesh_add_option(mesh_header, topo_option);\n    free(topo_option);\n    if (res) {\n        printf(\u201cadd topo option fail\\n\u201d);\n        free(mesh_header);\n        return;\n    }\n// send packet of getting topology\n    espconn_mesh_sent(esp, mesh_header, mesh_header->len);\n    free(mesh_header);\n}",
            "title": "L\u1ea5y topology"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#phan-tich-phan-hoi-tu-topology",
            "text": "void topology_parser_entrance(uint8_t *topo_resp, uint16_t len)\n{\n    /*Add your codes to check parameter*/\n    uint16_t oidx = 1;\n    struct mesh_header_format *mesh_header = NULL;\n    struct mesh_header_option_format *topo_option = NULL;\n    mesh_header = (struct mesh_header_format *)topo_resp;\n    if (!mesh_header->oe) {\n        printf(\u201cno option exist\\n\u201d);\n        return;\n    }\n    /* you need parse all the options one by one in the packet header\n    */\n    while (espconn_mesh_get_option(mesh_header, M_O_TOPO_RESP,\n                                   oidx++, &topo_option)) {\n        uint16_t dev_count = topo_option->olen / 6;\n        process_dev_list(topo_option->ovalue, dev_count);\n    }\n}",
            "title": "Ph\u00e2n t\u00edch ph\u1ea3n h\u1ed3i t\u1eeb topology"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#tham-khao",
            "text": "ESP-MESH",
            "title": "Tham kh\u1ea3o"
        },
        {
            "location": "/nonos-sdk/projects/list/",
            "text": "Danh s\u00e1ch c\u00e1c d\u1ef1 \u00e1n m\u1eabu s\u1eed d\u1ee5ng NONOS-SDK\n#",
            "title": "Danh s\u00e1ch"
        },
        {
            "location": "/nonos-sdk/projects/list/#danh-sach-cac-du-an-mau-su-dung-nonos-sdk",
            "text": "",
            "title": "Danh s\u00e1ch c\u00e1c d\u1ef1 \u00e1n m\u1eabu s\u1eed d\u1ee5ng NONOS-SDK"
        },
        {
            "location": "/freertos-sdk/freertos-sdk/",
            "text": "Gi\u1edbi thi\u1ec7u RTOS SDK c\u1ee7a ESP8266\n#\n\n\n\u0110\u00e2y l\u00e0 b\u1ea3n SDK s\u1eed d\u1ee5ng h\u1ec7 \u0111i\u1ec1u h\u00e0nh th\u1eddi gian th\u1ef1c (Real Time Operation System) \nport\n t\u1eeb FreeRTOS cho ESP8266.\n\n\nFreeRTOS l\u00e0 RTOS mi\u1ec5n ph\u00ed v\u1ed1n \u0111\u01b0\u1ee3c \nport\n cho r\u1ea5t nhi\u1ec1u MCU kh\u00e1c nhau (ARM7, Cortex M\u2026)\n\n\n\n\nTham kh\u1ea3o chi ti\u1ebft v\u1ec1 FreeRTOS\n\n\nDownload FreeRTOS source code (kh\u00f4ng ph\u1ea3i RTOS-SDK cho ESP8266!!!)\n\n\nTham kh\u1ea3o FreeRTOS API\n\n\nEbook: \nStudy of an operating system: FreeRTOS\n, Nicolas Melot.\n\n\nEbook: \nUsing the FreeRTOS\u2122 Real Time Kernel\n, NXP LPC17xx Edition, Richard Barry.\n\n\n\n\nL\u01b0u \u00fd\n#\n\n\nKhi s\u1eed d\u1ee5ng ESP8266_RTOS_SDK c\u1ea7n l\u01b0u \u00fd:\n\n\n\n\nB\u1ea3n \nESP8266_RTOS_SDK\n v\u00e0 \nESP8266_NONOS_SDK\n s\u1eed d\u1ee5ng chung API.\n\n\nS\u1eed d\u1ee5ng freeRTOS timer hay \nos_timer\n kh\u00f4ng \u0111\u01b0\u1ee3c d\u00f9ng \nwhile(1)\n ho\u1eb7c c\u00e1c h\u00e0m c\u00f3 t\u00e1c d\u1ee5ng t\u01b0\u01a1ng t\u1ef1 v\u00ec n\u00f3 s\u1ebd \nblock\n lu\u1ed3ng th\u1ef1c thi l\u1ec7nh (task/thread)\n\n\nVi\u1ec7c th\u1ef1c thi l\u1ec7nh trong h\u00e0m callback c\u1ee7a timer kh\u00f4ng \u0111\u01b0\u1ee3c k\u00e9o d\u00e0i qu\u00e1 \n15ms\n\n\nKh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a bi\u1ebfn ki\u1ec3u \nos_timer_t\n l\u00e0 c\u1ee5c b\u1ed9 (local) m\u00e0 ph\u1ea3i \u0111\u1ecbnh ngh\u0129a l\u00e0 bi\u1ebfn to\u00e0n c\u1ee5c (global), bi\u1ebfn t\u0129nh (static) ho\u1eb7c bi\u1ebfn trong v\u00f9ng nh\u1edb c\u1ea5p ph\u00e1t b\u1eb1ng \nos_malloc\n\n\nK\u1ec3 t\u1eeb phi\u00ean b\u1ea3n ESP8266_RTOS_SDK_v1.2.0, h\u00e0m m\u1eb7c \u0111\u1ecbnh \u0111\u01b0\u1ee3c l\u01b0u trong v\u00f9ng \nCACHE\n n\u00ean kh\u00f4ng c\u1ea7n ph\u1ea3i khai b\u00e1o h\u00e0m v\u1edbi \n_ICACHE_FLASH_ATTR_\n n\u1eefa. K\u1ec3 c\u1ea3 h\u00e0m th\u1ef1c thi ng\u1eaft c\u0169ng v\u1eady. N\u1ebfu c\u1ea7n ph\u00e2n b\u1ed5 h\u00e0m trong RAM (\u0111\u1ec3 g\u1ecdi nhi\u1ec1u l\u1ea7n) th\u00ec khai b\u00e1o h\u00e0m v\u1edbi \nIRAM_ATTR\n\n\nNetwork programming use socket, please do not bind to the same port\n ???\n\n\nTask \u01b0u ti\u00ean cao nh\u1ea5t c\u1ee7a RTOS SDK l\u00e0 14. \nxTaskCreate\n l\u00e0 h\u00e0m d\u00f9ng t\u1ea1o task trong FreeRTOS, tham kh\u1ea3o \nAPI c\u1ee7a FreeRTOS\n\n\nK\u00edch th\u01b0\u1edbc stack (ng\u0103n x\u1ebfp) cho task cho ph\u00e9p trong kho\u1ea3ng t\u1eeb 176 -> 512 bytes\n\n\nN\u1ebfu trong task c\u00f3 bi\u1ebfn m\u1ea3ng local n\u00e0o \u0111\u00f3 v\u01b0\u1ee3t qu\u00e1 60 bytes th\u00ec khuy\u1ebfn c\u00e1o n\u00ean d\u00f9ng \nos_malloc\n v\u00e0 \nos_free\n, v\u00ec k\u00edch th\u01b0\u1edbc bi\u1ebfn c\u1ee5c b\u1ed9 qu\u00e1 l\u1edbn c\u00f3 th\u1ec3 g\u00e2y r\u00f2 r\u1ec9 \u0111\u1ebfn stack c\u1ee7a task,\n\n\nM\u1ed9t s\u1ed1 m\u1ee9c \u01b0u ti\u00ean trong RTOS SDK: c\u1ee7a pp task l\u00e0 13, c\u1ee7a precise timer (ms) l\u00e0 12, c\u1ee7a TCP/IP task l\u00e0 10, c\u1ee7a freeRTOS timer l\u00e0 2 v\u00e0 task idle (r\u1ed7i) l\u00e0 0. \n\n\nNg\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 d\u00f9ng m\u1ee9c \u01b0u ti\u00ean t\u1eeb 1 -> 9\n\n\n\u0110i\u1ec1u quan tr\u1ecdng cu\u1ed1i c\u00f9ng: l\u00e0 kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a/thay \u0111\u1ed5i file \nFreeRTOSConfig.h\n v\u00ec n\u00f3 s\u1ebd \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn th\u01b0 vi\u1ec7n RTOS b\u00ean trong SDK (ch\u1ec9 \u0111\u01b0\u1ee3c nh\u00e0 s\u1ea3n xu\u1ea5t c\u00f3 quy\u1ec1n thay \u0111\u1ed5i)",
            "title": "Gi\u1edbi thi\u1ec7u"
        },
        {
            "location": "/freertos-sdk/freertos-sdk/#gioi-thieu-rtos-sdk-cua-esp8266",
            "text": "\u0110\u00e2y l\u00e0 b\u1ea3n SDK s\u1eed d\u1ee5ng h\u1ec7 \u0111i\u1ec1u h\u00e0nh th\u1eddi gian th\u1ef1c (Real Time Operation System)  port  t\u1eeb FreeRTOS cho ESP8266.  FreeRTOS l\u00e0 RTOS mi\u1ec5n ph\u00ed v\u1ed1n \u0111\u01b0\u1ee3c  port  cho r\u1ea5t nhi\u1ec1u MCU kh\u00e1c nhau (ARM7, Cortex M\u2026)   Tham kh\u1ea3o chi ti\u1ebft v\u1ec1 FreeRTOS  Download FreeRTOS source code (kh\u00f4ng ph\u1ea3i RTOS-SDK cho ESP8266!!!)  Tham kh\u1ea3o FreeRTOS API  Ebook:  Study of an operating system: FreeRTOS , Nicolas Melot.  Ebook:  Using the FreeRTOS\u2122 Real Time Kernel , NXP LPC17xx Edition, Richard Barry.",
            "title": "Gi\u1edbi thi\u1ec7u RTOS SDK c\u1ee7a ESP8266"
        },
        {
            "location": "/freertos-sdk/freertos-sdk/#luu-y",
            "text": "Khi s\u1eed d\u1ee5ng ESP8266_RTOS_SDK c\u1ea7n l\u01b0u \u00fd:   B\u1ea3n  ESP8266_RTOS_SDK  v\u00e0  ESP8266_NONOS_SDK  s\u1eed d\u1ee5ng chung API.  S\u1eed d\u1ee5ng freeRTOS timer hay  os_timer  kh\u00f4ng \u0111\u01b0\u1ee3c d\u00f9ng  while(1)  ho\u1eb7c c\u00e1c h\u00e0m c\u00f3 t\u00e1c d\u1ee5ng t\u01b0\u01a1ng t\u1ef1 v\u00ec n\u00f3 s\u1ebd  block  lu\u1ed3ng th\u1ef1c thi l\u1ec7nh (task/thread)  Vi\u1ec7c th\u1ef1c thi l\u1ec7nh trong h\u00e0m callback c\u1ee7a timer kh\u00f4ng \u0111\u01b0\u1ee3c k\u00e9o d\u00e0i qu\u00e1  15ms  Kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a bi\u1ebfn ki\u1ec3u  os_timer_t  l\u00e0 c\u1ee5c b\u1ed9 (local) m\u00e0 ph\u1ea3i \u0111\u1ecbnh ngh\u0129a l\u00e0 bi\u1ebfn to\u00e0n c\u1ee5c (global), bi\u1ebfn t\u0129nh (static) ho\u1eb7c bi\u1ebfn trong v\u00f9ng nh\u1edb c\u1ea5p ph\u00e1t b\u1eb1ng  os_malloc  K\u1ec3 t\u1eeb phi\u00ean b\u1ea3n ESP8266_RTOS_SDK_v1.2.0, h\u00e0m m\u1eb7c \u0111\u1ecbnh \u0111\u01b0\u1ee3c l\u01b0u trong v\u00f9ng  CACHE  n\u00ean kh\u00f4ng c\u1ea7n ph\u1ea3i khai b\u00e1o h\u00e0m v\u1edbi  _ICACHE_FLASH_ATTR_  n\u1eefa. K\u1ec3 c\u1ea3 h\u00e0m th\u1ef1c thi ng\u1eaft c\u0169ng v\u1eady. N\u1ebfu c\u1ea7n ph\u00e2n b\u1ed5 h\u00e0m trong RAM (\u0111\u1ec3 g\u1ecdi nhi\u1ec1u l\u1ea7n) th\u00ec khai b\u00e1o h\u00e0m v\u1edbi  IRAM_ATTR  Network programming use socket, please do not bind to the same port  ???  Task \u01b0u ti\u00ean cao nh\u1ea5t c\u1ee7a RTOS SDK l\u00e0 14.  xTaskCreate  l\u00e0 h\u00e0m d\u00f9ng t\u1ea1o task trong FreeRTOS, tham kh\u1ea3o  API c\u1ee7a FreeRTOS  K\u00edch th\u01b0\u1edbc stack (ng\u0103n x\u1ebfp) cho task cho ph\u00e9p trong kho\u1ea3ng t\u1eeb 176 -> 512 bytes  N\u1ebfu trong task c\u00f3 bi\u1ebfn m\u1ea3ng local n\u00e0o \u0111\u00f3 v\u01b0\u1ee3t qu\u00e1 60 bytes th\u00ec khuy\u1ebfn c\u00e1o n\u00ean d\u00f9ng  os_malloc  v\u00e0  os_free , v\u00ec k\u00edch th\u01b0\u1edbc bi\u1ebfn c\u1ee5c b\u1ed9 qu\u00e1 l\u1edbn c\u00f3 th\u1ec3 g\u00e2y r\u00f2 r\u1ec9 \u0111\u1ebfn stack c\u1ee7a task,  M\u1ed9t s\u1ed1 m\u1ee9c \u01b0u ti\u00ean trong RTOS SDK: c\u1ee7a pp task l\u00e0 13, c\u1ee7a precise timer (ms) l\u00e0 12, c\u1ee7a TCP/IP task l\u00e0 10, c\u1ee7a freeRTOS timer l\u00e0 2 v\u00e0 task idle (r\u1ed7i) l\u00e0 0.   Ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 d\u00f9ng m\u1ee9c \u01b0u ti\u00ean t\u1eeb 1 -> 9  \u0110i\u1ec1u quan tr\u1ecdng cu\u1ed1i c\u00f9ng: l\u00e0 kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a/thay \u0111\u1ed5i file  FreeRTOSConfig.h  v\u00ec n\u00f3 s\u1ebd \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn th\u01b0 vi\u1ec7n RTOS b\u00ean trong SDK (ch\u1ec9 \u0111\u01b0\u1ee3c nh\u00e0 s\u1ea3n xu\u1ea5t c\u00f3 quy\u1ec1n thay \u0111\u1ed5i)",
            "title": "L\u01b0u \u00fd"
        },
        {
            "location": "/freertos-sdk/basic/introduction/",
            "text": "C\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 c\u1ea7n thi\u1ebft\n#\n\n\nT\u01b0\u01a1ng t\u1ef1 ph\u1ea7n c\u00e0i \u0111\u1eb7t cho ESP8266 NONOS-SDK, tham kh\u1ea3o \nt\u1ea1i \u0111\u00e2y\n\n\nT\u1ea3i RTOS SDK cho ESP8266\n#\n\n\n\n\nT\u1ea3i v\u1ec1 m\u00e1y & gi\u1ea3i n\u00e9n \nt\u1eeb \u0111\u00e2y\n\n\nHo\u1eb7c git clone t\u1eeb:\n\n\n\n\ngit clone https://github.com/espressif/ESP8266_RTOS_SDK.git\ncd ESP8266_RTOS_SDK\n# Nh\u00e1nh 1.4.x \u0111\u00e3 bao g\u1ed3m ph\u1ea7n v\u00e1 l\u1ed7i (patch) cho b\u1ea3n v1.4.0 (nh\u00e1nh master)\ngit checkout 1.4.x\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nV\u1edbi ng\u01b0\u1eddi d\u00f9ng Windows \u0111\u00e3 c\u00e0i \u0111\u1eb7t b\u1ed9 \nUnofficial Dev Kit\n th\u00ec RTOS SDK \u0111\u00e3 bao g\u1ed3m trong \nC:/Espressif/ESP8266_RTOS_SDK\n (m\u1eb7c \u0111\u1ecbnh) n\u00ean kh\u00f4ng c\u1ea7n t\u1ea3i b\u1ed9 RTOS SDK nh\u01b0 tr\u00ean n\u1eefa.\n\n\n\n\n\n\nThay \u0111\u1ed5i \nSDK_BASE\n trong Makefile c\u1ee7a m\u1ed7i d\u1ef1 \u00e1n tr\u1ecf t\u1edbi folder v\u1eeba gi\u1ea3i n\u00e9n/clone:\n\n\n\n\n# V\u00ed d\u1ee5 v\u1edbi ng\u01b0\u1eddi d\u00f9ng windows v\u00e0 unofficial dev kit\nSDK_BASE    ?= C:/Espressif/ESP8266_RTOS_SDK",
            "title": "C\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 c\u1ea7n thi\u1ebft"
        },
        {
            "location": "/freertos-sdk/basic/introduction/#cai-at-cong-cu-can-thiet",
            "text": "T\u01b0\u01a1ng t\u1ef1 ph\u1ea7n c\u00e0i \u0111\u1eb7t cho ESP8266 NONOS-SDK, tham kh\u1ea3o  t\u1ea1i \u0111\u00e2y",
            "title": "C\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 c\u1ea7n thi\u1ebft"
        },
        {
            "location": "/freertos-sdk/basic/introduction/#tai-rtos-sdk-cho-esp8266",
            "text": "T\u1ea3i v\u1ec1 m\u00e1y & gi\u1ea3i n\u00e9n  t\u1eeb \u0111\u00e2y  Ho\u1eb7c git clone t\u1eeb:   git clone https://github.com/espressif/ESP8266_RTOS_SDK.git\ncd ESP8266_RTOS_SDK\n# Nh\u00e1nh 1.4.x \u0111\u00e3 bao g\u1ed3m ph\u1ea7n v\u00e1 l\u1ed7i (patch) cho b\u1ea3n v1.4.0 (nh\u00e1nh master)\ngit checkout 1.4.x   L\u01b0u \u00fd  V\u1edbi ng\u01b0\u1eddi d\u00f9ng Windows \u0111\u00e3 c\u00e0i \u0111\u1eb7t b\u1ed9  Unofficial Dev Kit  th\u00ec RTOS SDK \u0111\u00e3 bao g\u1ed3m trong  C:/Espressif/ESP8266_RTOS_SDK  (m\u1eb7c \u0111\u1ecbnh) n\u00ean kh\u00f4ng c\u1ea7n t\u1ea3i b\u1ed9 RTOS SDK nh\u01b0 tr\u00ean n\u1eefa.    Thay \u0111\u1ed5i  SDK_BASE  trong Makefile c\u1ee7a m\u1ed7i d\u1ef1 \u00e1n tr\u1ecf t\u1edbi folder v\u1eeba gi\u1ea3i n\u00e9n/clone:   # V\u00ed d\u1ee5 v\u1edbi ng\u01b0\u1eddi d\u00f9ng windows v\u00e0 unofficial dev kit\nSDK_BASE    ?= C:/Espressif/ESP8266_RTOS_SDK",
            "title": "T\u1ea3i RTOS SDK cho ESP8266"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/",
            "text": "M\u00e3 ngu\u1ed3n v\u00ed d\u1ee5\n\n\nMakefile\n\n\nC\u1ea5u tr\u00fac ch\u01b0\u01a1ng tr\u00ecnh user_main.c\n\n\nBi\u00ean d\u1ecbch v\u00e0 ch\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh\n\n\nN\u00e2ng cao m\u1ed9t ch\u00fat\n\n\nGi\u1edbi thi\u1ec7u v\u1ec1 t\u00e1c v\u1ee5 (task) trong FreeRTOS\n\n\nC\u00e1c tr\u1ea1ng th\u00e1i (states) c\u1ee7a task\n\n\nC\u00e1c m\u1ee9c \u01b0u ti\u00ean (priorities) c\u1ee7a task\n\n\n\n\n\n\n\n\n\n\nM\u00e3 ngu\u1ed3n v\u00ed d\u1ee5\n#\n\n\ngit clone https://github.com/esp8266vn/esp-rtos-basic-task.git\n\n\n\n\nMakefile\n#\n\n\nC\u1ea5u tr\u00fac c\u1ee7a Makefile trong v\u00ed d\u1ee5 n\u00e0y c\u0169ng t\u01b0\u01a1ng t\u1ef1 \nMakefile cho d\u1ef1 \u00e1n ph\u1ee9c t\u1ea1p s\u1eed d\u1ee5ng NONOS-SDK\n.\nTuy nhi\u00ean, \u0111\u1ec3 s\u1eed d\u1ee5ng cho RTOS SDK th\u00ec m\u1ed9t s\u1ed1 bi\u1ebfn trong Makefile c\u1ea7n thay \u0111\u1ed5i nh\u01b0 sau:\n\n\n# \u0110\u01b0\u1eddng d\u1eabn t\u1edbi RTOS-SDK\nSDK_BASE    ?= C:/Espressif/ESP8266_RTOS_SDK\n...\n# Th\u01b0 vi\u1ec7n s\u1eed d\u1ee5ng \nSDK_LIBS = gcc hal phy pp net80211 wpa crypto main freertos lwip minic smartconfig\n...\n# Th\u01b0 m\u1ee5c \u0111\u01b0a v\u00e0o include\nSDK_INC = extra_include include include/espressif include/json include/udhcp include/lwip include/lwip/lwip include/lwip/ipv4 include/lwip/ipv6\n...\n# C\u1edd khi bi\u00ean d\u1ecbch C\nCFLAGS = -g -save-temps -std=gnu90 -Os -Wpointer-arith -Wundef -Werror \\\n         -Wl,-EL -fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals \\\n         -mno-serialize-volatile -D__ets__ -DICACHE_FLASH -DBUID_TIME=\\\"$(DATETIME)\\\" \n...\n# Comment-out d\u00f2ng n\u00e0y:\n# ifeq (\"$(USE_OPENSDK)\",\"yes\")\n# CFLAGS        += -DUSE_OPENSDK\n# else\n# CFLAGS        += -D_STDINT_H\n# endif\n\n\n\n\nC\u1ea5u tr\u00fac ch\u01b0\u01a1ng tr\u00ecnh \nuser_main.c\n#\n\n\nCh\u01b0\u01a1ng tr\u00ecnh c\u00f3 nhi\u1ec7m v\u1ee5 t\u1ea1o ra 2 task ri\u00eang bi\u1ec7t, m\u1ed9t d\u00f9ng \u0111\u1ec3 nh\u00e1y LED c\u00f3 chu k\u1ef3 200 \nticks\n, task c\u00f2n l\u1ea1i \u0111\u1ec3 in th\u00f4ng tin ra UART0 v\u1edbi chu k\u1ef3 1000 \nticks\n.\n\n\nMu\u1ed1n v\u1eady, tr\u01b0\u1edbc h\u1ebft ph\u1ea3i t\u1ea1o ra 2 h\u00e0m con, tu\u00e2n theo ti\u1ec1n khai b\u00e1o ki\u1ec3u \nTaskFunction_t\n c\u00f3 d\u1ea1ng \nvoid vTaskCode( void * pvParameters )\n cho task LED v\u00e0 UART:\n\n\nvoid task_led(void *pvParameters)\n{\n    for(;;){\n        vTaskDelay(100);\n        GPIO_OUTPUT_SET(LED_GPIO, led_state);\n        led_state ^=1;\n    }\n}\n\nvoid task_printf(void *pvParameters)\n{\n    for(;;){\n        printf(\"task_printf\\n\");\n        vTaskDelay(500);\n    }\n}\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\n\n\nB\u00ean trong h\u00e0m con ph\u1ea3i th\u1ef1c hi\u1ec7n v\u00f2ng l\u1eb7p v\u00f4 t\u1eadn (\ninfinite loop\n), kh\u00f4ng \u0111\u01b0\u1ee3c \nreturn\n.\n\n\nNgo\u00e0i ra, task c\u00f3 th\u1ec3 t\u1ef1 \nh\u1ee7y\n (delete) ch\u00ednh n\u00f3 khi c\u1ea7n (b\u1eb1ng h\u00e0m \nvTaskDelete( TaskHandle_t xTask )\n - xem v\u00ed d\u1ee5 b\u00ean d\u01b0\u1edbi)\n\n\n\n\n\n\n\n\nTick\n\n\n\n\nTick\n l\u00e0 h\u00e0nh \u0111\u1ed9ng khi timer ng\u1eaft \u0111\u1ecbnh k\u1ef3 d\u00f9ng trong nh\u00e2n FreeRTOS \u0111\u1ec3 MCU th\u1ef1c hi\u1ec7n chuy\u1ec3n \nng\u1eef c\u1ea3nh\n (\ncontext\n) khi chuy\u1ec3n qua l\u1ea1i gi\u1eefa c\u00e1c task v\u1edbi nhau, kh\u00e1i ni\u1ec7m \nth\u1ef1c hi\u1ec7n t\u00e1c v\u1ee5 song song, \u0111\u1ed3ng th\u1eddi, c\u00f9ng l\u00fac\n ch\u1ec9 mang t\u00ednh t\u01b0\u01a1ng \u0111\u1ed1i, v\u00ec RTOS th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\u00e0y 1 c\u00e1ch tu\u1ea7n t\u1ef1.\n\n\nGi\u00e1 tr\u1ecb c\u1ee7a \ntick\n kh\u00f4ng ph\u1ea3i l\u00fac n\u00e0o c\u0169ng l\u00e0 1ms, t\u00f9y thu\u1ed9c v\u00e0o c\u1ea5u h\u00ecnh khi \nport\n FreeRTOS l\u00ean t\u1eebng MCU kh\u00e1c nhau (trong tr\u01b0\u1eddng h\u1ee3p, \nconfigTICK_RATE_HZ\n c\u1ee7a RTOS-SDK c\u00f3 gi\u00e1 tr\u1ecb l\u00e0 100). C\u00f3 th\u1ec3 ki\u1ec3m tra ch\u00ednh x\u00e1c chu k\u1ef3 ms c\u1ee7a \ntick\n b\u1eb1ng macro \nportTICK_RATE_MS\n \u2013> \u0110\u1ec3 delay ch\u00ednh x\u00e1c \nt(ms)\n th\u00ec tham s\u1ed1 truy\u1ec1n cho \nvTaskDelay\n l\u00e0 \nt/portTICK_RATE_MS\n\n\n\n\n\n\nTrong h\u00e0m \nuser_init()\n c\u1ee7a ESP8266, sau khi kh\u1edfi t\u1ea1o c\u00e1c gi\u00e1 tr\u1ecb c\u1ea7n thi\u1ebft cho UART v\u00e0 ch\u00e2n GPIO Ouput \u0111\u1ec3 nh\u00e1y LED, s\u1eed d\u1ee5ng h\u00e0m \nxTaskCreate\n trong FreeRTOS \u0111\u1ec3 t\u1ea1o task th\u1ef1c thi 2 h\u00e0m con n\u00e0y, c\u00fa ph\u00e1p \nxTaskCreate\n:\n\n\nBaseType_t xTaskCreate(    TaskFunction_t pvTaskCode,\n                            const char * const pcName,\n                            unsigned short usStackDepth,\n                            void *pvParameters,\n                            UBaseType_t uxPriority,\n                            TaskHandle_t *pxCreatedTask\n                          );\n\n\n\n\nTrong \u0111\u00f3:\n\n\n\n\npvTaskCode\n: tr\u1ecf \u0111\u1ebfn h\u00e0m con c\u1ea7n th\u1ef1c hi\u1ec7n khi t\u1ea1o task\n\n\npcName\n: chu\u1ed7i m\u00f4 t\u1ea3 t\u00ean c\u1ee7a task n\u00e0y\n\n\nusStackDepth\n: \u0111\u1ed9 l\u1edbn c\u1ee7a con tr\u1ecf ng\u0103n x\u1ebfp, ch\u1ecdn sao cho l\u1edbn h\u01a1n \u0111\u1ed9 l\u1edbn c\u1ee7a con tr\u1ecf ng\u0103n x\u1ebfp khi th\u1ef1c hi\u1ec7n h\u00e0m con, v\u00ed d\u1ee5 nh\u01b0 khi h\u00e0m con g\u1ecdi c\u00e0ng nhi\u1ec1u h\u00e0m kh\u00e1c b\u00ean trong l\u1ed3ng nhau, khi \u0111\u00f3 \u0111\u1ed9 l\u1edbn n\u00e0y c\u00e0ng t\u0103ng.\n\n\npvParameters\n: tr\u1ecf \u0111\u1ebfn tham s\u1ed1 c\u1ea7n truy\u1ec1n v\u00e0o h\u00e0m con khi task kh\u1edfi t\u1ea1o.\n\n\nuxPriority\n: m\u1ee9c \u0111\u1ed9 \u01b0u ti\u00ean c\u1ee7a task.\n\n\npxCreatedTask\n: tr\u1ecf \u0111\u1ebfn bi\u1ebfn ki\u1ec3u \nTaskHandle_t\n, bi\u1ebfn s\u1ebd \u0111\u01b0\u1ee3c g\u00e1n sau khi g\u1ecdi \nxTaskCreate\n th\u00e0nh c\u00f4ng, xem nh\u01b0 \nID\n \u0111\u1ec3 ph\u00e2n bi\u1ec7t c\u00e1c task v\u1edbi nhau, v\u00e0 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho nhi\u1ec1u m\u1ee5c \u0111\u00edch, v\u00ed d\u1ee5 nh\u01b0 x\u00f3a task (d\u00f9ng h\u00e0m \nvTaskDelete( TaskHandle_t xTask )\n)\nS\u1eed d\u1ee5ng \nxTaskCreate\n \u0111\u1ec3 t\u1ea1o task LED v\u00e0 UART nh\u01b0 sau:\n\n\n\n\nxTaskCreate(task_led, \"task_led\", 256, NULL, 2, NULL);\nxTaskCreate(task_printf, \"task_printf\", 256, NULL, 2, NULL);\n\n\n\n\nBi\u00ean d\u1ecbch v\u00e0 ch\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh\n#\n\n\nmake clean\nmake\nmake flash\n\n\n\n\nN\u00e2ng cao m\u1ed9t ch\u00fat\n#\n\n\n\n\nIn v\u00e0i th\u00f4ng tin c\u01a1 b\u1ea3n v\u1ec1 \nportTICK_RATE_MS\n v\u00e0 \nconfigMAX_PRIORITIES\n\n\nV\u00ed d\u1ee5 v\u1ec1 \nvTaskDelete()\n cho \ntask_printf\n\n\n\n\ngit checkout task_delete\nmake clean\nmake\nmake flash\n\n\n\n\nGi\u1edbi thi\u1ec7u v\u1ec1 t\u00e1c v\u1ee5 (task) trong FreeRTOS\n#\n\n\nC\u00e1c tr\u1ea1ng th\u00e1i (states) c\u1ee7a task\n#\n\n\nC\u00f3 4 tr\u1ea1ng th\u00e1i: Running, Ready, Blocked v\u00e0 Suspended\n\n\n\n\nRunning: l\u00e0 tr\u1ea1ng th\u00e1i task \u0111ang \u0111\u01b0\u1ee3c MCU th\u1ef1c thi th\u1ef1c s\u1ef1, v\u00ec th\u1ebf trong m\u1ed9t th\u1eddi \u0111i\u1ec3m ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t task \u1edf tr\u1ea1ng th\u00e1i running.\n\n\nReady: l\u00e0 tr\u1ea1ng th\u00e1i task \u0111\u00e3 s\u1eb5n s\u00e0ng \u0111\u1ec3 th\u1ef1c thi (kh\u00f4ng b\u1ecb \nblocked\n ho\u1eb7c \nsuspended\n) nh\u01b0ng \u0111ang kh\u00f4ng \u0111\u01b0\u1ee3c MCU th\u1ef1c thi b\u1edfi v\u00ec MCU \u0111ang th\u1ef1c thi m\u1ed9t task kh\u00e1c.\n\n\nBlocked: task \u0111ang b\u1ecb \nblocked\n n\u1ebfu n\u00f3 \u0111ang \u0111\u1ee3i s\u1ef1 ki\u1ec7n (\nevent\n) b\u00ean ngo\u00e0i ho\u1eb7c s\u1ef1 ki\u1ec7n th\u1eddi gian. V\u00ed d\u1ee5: khi task g\u1ecdi h\u00e0m \nvTaskDelay()\n th\u00ec n\u00f3 s\u1ebd b\u1ecb \nblocked\n cho \u0111\u1ebfn khi h\u1ebft th\u1eddi gian delay (s\u1ef1 ki\u1ec7n th\u1eddi gian). Ho\u1eb7c task c\u00f3 th\u1ec3 b\u1ecb \nblocked\n \u0111\u1ec3 \u0111\u1ee3i m\u1ed9t h\u00e0ng \u0111\u1ee3i (queue), semaphore, notification\u2026 n\u00e0o \u0111\u00f3. Th\u00f4ng th\u01b0\u1eddng, task b\u1ecb \nblocked\n trong kho\u1ea3ng th\u00f2i gian qu\u00e1 h\u1ea1n \ntimeout\n cho tr\u01b0\u1edbc, v\u00ec th\u1ebf task s\u1ebd lu\u00f4n \u0111\u01b0\u1ee3c \nunblocked\n (n\u1ebfu c\u00f3 s\u1ef1 ki\u1ec7n b\u00ean ngo\u00e0i) ho\u1eb7c \ntimeout\n n\u1ebfu h\u1ebft th\u1eddi gian ch\u1edd.\n\n\nSuspended: C\u0169ng gi\u1ed1ng nh\u01b0 tr\u1ea1ng th\u00e1i \nblocked\n nh\u01b0ng kh\u00f4ng c\u00f3 th\u1eddi gian \ntimeout\n, v\u00ec v\u1eady ch\u1ec9 c\u00f3 th\u1ec3 \nenter\n ho\u1eb7c \nexit\n kh\u1ecfi tr\u1ea1ng th\u00e1i \nsuspended\n b\u1edfi h\u00e0m g\u1ecdi t\u1eeb b\u00ean ngo\u00e0i t\u01b0\u01a1ng \u1ee9ng l\u00e0  \nvTaskSuspend()\n v\u00e0 \nxTaskResume()\n \n\n\n\n\n\n\nC\u00e1c m\u1ee9c \u01b0u ti\u00ean (priorities) c\u1ee7a task\n#\n\n\nM\u1ed7i task \u0111\u01b0\u1ee3c t\u1ea1o ra v\u1edbi m\u1ee9c \u01b0u ti\u00ean \u0111\u01b0\u1ee3c g\u00e1n t\u1eeb 0 \u0111\u1ebfn gi\u00e1 tr\u1ecb \n(configMAX_PRIORITIES - 1)\n, v\u1edbi \nconfigMAX_PRIORITIES\n l\u00e0 gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong \nFreeRTOSConfig.h\n (v\u1edbi b\u1ea3n RTOS-SDK v1.4 \u0111ang s\u1eed d\u1ee5ng, \nconfigMAX_PRIORITIES\n l\u00e0 15)\n\n\nTask \u0111ang \u1edf tr\u1ea1ng th\u00e1i \nready\n c\u00f3 \u01b0u ti\u00ean cao h\u01a1n s\u1ebd \u0111\u01b0\u1ee3c ch\u1ecdn \u0111\u1ec3 th\u1ef1c thi (chuy\u1ec3n sang \nrunning\n) trong m\u1ed7i l\u1ea7n \ntick\n\n\nN\u1ebfu c\u00e1c task c\u00f3 c\u00f9ng m\u1ee9c \u01b0u ti\u00ean? Trong tr\u01b0\u1eddng h\u1ee3p RTOS s\u1ebd chia \u0111\u1ec1u ra x\u1eed l\u00fd (do gi\u00e1 tr\u1ecb \nconfigUSE_TIME_SLICING\n \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\u00e0 1 trong b\u1ea3n RTOS-SDK n\u00e0y)",
            "title": "Task c\u01a1 b\u1ea3n"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#ma-nguon-vi-du",
            "text": "git clone https://github.com/esp8266vn/esp-rtos-basic-task.git",
            "title": "M\u00e3 ngu\u1ed3n v\u00ed d\u1ee5"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#makefile",
            "text": "C\u1ea5u tr\u00fac c\u1ee7a Makefile trong v\u00ed d\u1ee5 n\u00e0y c\u0169ng t\u01b0\u01a1ng t\u1ef1  Makefile cho d\u1ef1 \u00e1n ph\u1ee9c t\u1ea1p s\u1eed d\u1ee5ng NONOS-SDK .\nTuy nhi\u00ean, \u0111\u1ec3 s\u1eed d\u1ee5ng cho RTOS SDK th\u00ec m\u1ed9t s\u1ed1 bi\u1ebfn trong Makefile c\u1ea7n thay \u0111\u1ed5i nh\u01b0 sau:  # \u0110\u01b0\u1eddng d\u1eabn t\u1edbi RTOS-SDK\nSDK_BASE    ?= C:/Espressif/ESP8266_RTOS_SDK\n...\n# Th\u01b0 vi\u1ec7n s\u1eed d\u1ee5ng \nSDK_LIBS = gcc hal phy pp net80211 wpa crypto main freertos lwip minic smartconfig\n...\n# Th\u01b0 m\u1ee5c \u0111\u01b0a v\u00e0o include\nSDK_INC = extra_include include include/espressif include/json include/udhcp include/lwip include/lwip/lwip include/lwip/ipv4 include/lwip/ipv6\n...\n# C\u1edd khi bi\u00ean d\u1ecbch C\nCFLAGS = -g -save-temps -std=gnu90 -Os -Wpointer-arith -Wundef -Werror \\\n         -Wl,-EL -fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals \\\n         -mno-serialize-volatile -D__ets__ -DICACHE_FLASH -DBUID_TIME=\\\"$(DATETIME)\\\" \n...\n# Comment-out d\u00f2ng n\u00e0y:\n# ifeq (\"$(USE_OPENSDK)\",\"yes\")\n# CFLAGS        += -DUSE_OPENSDK\n# else\n# CFLAGS        += -D_STDINT_H\n# endif",
            "title": "Makefile"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#cau-truc-chuong-trinh-user_mainc",
            "text": "Ch\u01b0\u01a1ng tr\u00ecnh c\u00f3 nhi\u1ec7m v\u1ee5 t\u1ea1o ra 2 task ri\u00eang bi\u1ec7t, m\u1ed9t d\u00f9ng \u0111\u1ec3 nh\u00e1y LED c\u00f3 chu k\u1ef3 200  ticks , task c\u00f2n l\u1ea1i \u0111\u1ec3 in th\u00f4ng tin ra UART0 v\u1edbi chu k\u1ef3 1000  ticks .  Mu\u1ed1n v\u1eady, tr\u01b0\u1edbc h\u1ebft ph\u1ea3i t\u1ea1o ra 2 h\u00e0m con, tu\u00e2n theo ti\u1ec1n khai b\u00e1o ki\u1ec3u  TaskFunction_t  c\u00f3 d\u1ea1ng  void vTaskCode( void * pvParameters )  cho task LED v\u00e0 UART:  void task_led(void *pvParameters)\n{\n    for(;;){\n        vTaskDelay(100);\n        GPIO_OUTPUT_SET(LED_GPIO, led_state);\n        led_state ^=1;\n    }\n}\n\nvoid task_printf(void *pvParameters)\n{\n    for(;;){\n        printf(\"task_printf\\n\");\n        vTaskDelay(500);\n    }\n}   L\u01b0u \u00fd   B\u00ean trong h\u00e0m con ph\u1ea3i th\u1ef1c hi\u1ec7n v\u00f2ng l\u1eb7p v\u00f4 t\u1eadn ( infinite loop ), kh\u00f4ng \u0111\u01b0\u1ee3c  return .  Ngo\u00e0i ra, task c\u00f3 th\u1ec3 t\u1ef1  h\u1ee7y  (delete) ch\u00ednh n\u00f3 khi c\u1ea7n (b\u1eb1ng h\u00e0m  vTaskDelete( TaskHandle_t xTask )  - xem v\u00ed d\u1ee5 b\u00ean d\u01b0\u1edbi)     Tick   Tick  l\u00e0 h\u00e0nh \u0111\u1ed9ng khi timer ng\u1eaft \u0111\u1ecbnh k\u1ef3 d\u00f9ng trong nh\u00e2n FreeRTOS \u0111\u1ec3 MCU th\u1ef1c hi\u1ec7n chuy\u1ec3n  ng\u1eef c\u1ea3nh  ( context ) khi chuy\u1ec3n qua l\u1ea1i gi\u1eefa c\u00e1c task v\u1edbi nhau, kh\u00e1i ni\u1ec7m  th\u1ef1c hi\u1ec7n t\u00e1c v\u1ee5 song song, \u0111\u1ed3ng th\u1eddi, c\u00f9ng l\u00fac  ch\u1ec9 mang t\u00ednh t\u01b0\u01a1ng \u0111\u1ed1i, v\u00ec RTOS th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\u00e0y 1 c\u00e1ch tu\u1ea7n t\u1ef1.  Gi\u00e1 tr\u1ecb c\u1ee7a  tick  kh\u00f4ng ph\u1ea3i l\u00fac n\u00e0o c\u0169ng l\u00e0 1ms, t\u00f9y thu\u1ed9c v\u00e0o c\u1ea5u h\u00ecnh khi  port  FreeRTOS l\u00ean t\u1eebng MCU kh\u00e1c nhau (trong tr\u01b0\u1eddng h\u1ee3p,  configTICK_RATE_HZ  c\u1ee7a RTOS-SDK c\u00f3 gi\u00e1 tr\u1ecb l\u00e0 100). C\u00f3 th\u1ec3 ki\u1ec3m tra ch\u00ednh x\u00e1c chu k\u1ef3 ms c\u1ee7a  tick  b\u1eb1ng macro  portTICK_RATE_MS  \u2013> \u0110\u1ec3 delay ch\u00ednh x\u00e1c  t(ms)  th\u00ec tham s\u1ed1 truy\u1ec1n cho  vTaskDelay  l\u00e0  t/portTICK_RATE_MS    Trong h\u00e0m  user_init()  c\u1ee7a ESP8266, sau khi kh\u1edfi t\u1ea1o c\u00e1c gi\u00e1 tr\u1ecb c\u1ea7n thi\u1ebft cho UART v\u00e0 ch\u00e2n GPIO Ouput \u0111\u1ec3 nh\u00e1y LED, s\u1eed d\u1ee5ng h\u00e0m  xTaskCreate  trong FreeRTOS \u0111\u1ec3 t\u1ea1o task th\u1ef1c thi 2 h\u00e0m con n\u00e0y, c\u00fa ph\u00e1p  xTaskCreate :  BaseType_t xTaskCreate(    TaskFunction_t pvTaskCode,\n                            const char * const pcName,\n                            unsigned short usStackDepth,\n                            void *pvParameters,\n                            UBaseType_t uxPriority,\n                            TaskHandle_t *pxCreatedTask\n                          );  Trong \u0111\u00f3:   pvTaskCode : tr\u1ecf \u0111\u1ebfn h\u00e0m con c\u1ea7n th\u1ef1c hi\u1ec7n khi t\u1ea1o task  pcName : chu\u1ed7i m\u00f4 t\u1ea3 t\u00ean c\u1ee7a task n\u00e0y  usStackDepth : \u0111\u1ed9 l\u1edbn c\u1ee7a con tr\u1ecf ng\u0103n x\u1ebfp, ch\u1ecdn sao cho l\u1edbn h\u01a1n \u0111\u1ed9 l\u1edbn c\u1ee7a con tr\u1ecf ng\u0103n x\u1ebfp khi th\u1ef1c hi\u1ec7n h\u00e0m con, v\u00ed d\u1ee5 nh\u01b0 khi h\u00e0m con g\u1ecdi c\u00e0ng nhi\u1ec1u h\u00e0m kh\u00e1c b\u00ean trong l\u1ed3ng nhau, khi \u0111\u00f3 \u0111\u1ed9 l\u1edbn n\u00e0y c\u00e0ng t\u0103ng.  pvParameters : tr\u1ecf \u0111\u1ebfn tham s\u1ed1 c\u1ea7n truy\u1ec1n v\u00e0o h\u00e0m con khi task kh\u1edfi t\u1ea1o.  uxPriority : m\u1ee9c \u0111\u1ed9 \u01b0u ti\u00ean c\u1ee7a task.  pxCreatedTask : tr\u1ecf \u0111\u1ebfn bi\u1ebfn ki\u1ec3u  TaskHandle_t , bi\u1ebfn s\u1ebd \u0111\u01b0\u1ee3c g\u00e1n sau khi g\u1ecdi  xTaskCreate  th\u00e0nh c\u00f4ng, xem nh\u01b0  ID  \u0111\u1ec3 ph\u00e2n bi\u1ec7t c\u00e1c task v\u1edbi nhau, v\u00e0 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho nhi\u1ec1u m\u1ee5c \u0111\u00edch, v\u00ed d\u1ee5 nh\u01b0 x\u00f3a task (d\u00f9ng h\u00e0m  vTaskDelete( TaskHandle_t xTask ) )\nS\u1eed d\u1ee5ng  xTaskCreate  \u0111\u1ec3 t\u1ea1o task LED v\u00e0 UART nh\u01b0 sau:   xTaskCreate(task_led, \"task_led\", 256, NULL, 2, NULL);\nxTaskCreate(task_printf, \"task_printf\", 256, NULL, 2, NULL);",
            "title": "C\u1ea5u tr\u00fac ch\u01b0\u01a1ng tr\u00ecnh user_main.c"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#bien-dich-va-chay-chuong-trinh",
            "text": "make clean\nmake\nmake flash",
            "title": "Bi\u00ean d\u1ecbch v\u00e0 ch\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#nang-cao-mot-chut",
            "text": "In v\u00e0i th\u00f4ng tin c\u01a1 b\u1ea3n v\u1ec1  portTICK_RATE_MS  v\u00e0  configMAX_PRIORITIES  V\u00ed d\u1ee5 v\u1ec1  vTaskDelete()  cho  task_printf   git checkout task_delete\nmake clean\nmake\nmake flash",
            "title": "N\u00e2ng cao m\u1ed9t ch\u00fat"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#gioi-thieu-ve-tac-vu-task-trong-freertos",
            "text": "",
            "title": "Gi\u1edbi thi\u1ec7u v\u1ec1 t\u00e1c v\u1ee5 (task) trong FreeRTOS"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#cac-trang-thai-states-cua-task",
            "text": "C\u00f3 4 tr\u1ea1ng th\u00e1i: Running, Ready, Blocked v\u00e0 Suspended   Running: l\u00e0 tr\u1ea1ng th\u00e1i task \u0111ang \u0111\u01b0\u1ee3c MCU th\u1ef1c thi th\u1ef1c s\u1ef1, v\u00ec th\u1ebf trong m\u1ed9t th\u1eddi \u0111i\u1ec3m ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t task \u1edf tr\u1ea1ng th\u00e1i running.  Ready: l\u00e0 tr\u1ea1ng th\u00e1i task \u0111\u00e3 s\u1eb5n s\u00e0ng \u0111\u1ec3 th\u1ef1c thi (kh\u00f4ng b\u1ecb  blocked  ho\u1eb7c  suspended ) nh\u01b0ng \u0111ang kh\u00f4ng \u0111\u01b0\u1ee3c MCU th\u1ef1c thi b\u1edfi v\u00ec MCU \u0111ang th\u1ef1c thi m\u1ed9t task kh\u00e1c.  Blocked: task \u0111ang b\u1ecb  blocked  n\u1ebfu n\u00f3 \u0111ang \u0111\u1ee3i s\u1ef1 ki\u1ec7n ( event ) b\u00ean ngo\u00e0i ho\u1eb7c s\u1ef1 ki\u1ec7n th\u1eddi gian. V\u00ed d\u1ee5: khi task g\u1ecdi h\u00e0m  vTaskDelay()  th\u00ec n\u00f3 s\u1ebd b\u1ecb  blocked  cho \u0111\u1ebfn khi h\u1ebft th\u1eddi gian delay (s\u1ef1 ki\u1ec7n th\u1eddi gian). Ho\u1eb7c task c\u00f3 th\u1ec3 b\u1ecb  blocked  \u0111\u1ec3 \u0111\u1ee3i m\u1ed9t h\u00e0ng \u0111\u1ee3i (queue), semaphore, notification\u2026 n\u00e0o \u0111\u00f3. Th\u00f4ng th\u01b0\u1eddng, task b\u1ecb  blocked  trong kho\u1ea3ng th\u00f2i gian qu\u00e1 h\u1ea1n  timeout  cho tr\u01b0\u1edbc, v\u00ec th\u1ebf task s\u1ebd lu\u00f4n \u0111\u01b0\u1ee3c  unblocked  (n\u1ebfu c\u00f3 s\u1ef1 ki\u1ec7n b\u00ean ngo\u00e0i) ho\u1eb7c  timeout  n\u1ebfu h\u1ebft th\u1eddi gian ch\u1edd.  Suspended: C\u0169ng gi\u1ed1ng nh\u01b0 tr\u1ea1ng th\u00e1i  blocked  nh\u01b0ng kh\u00f4ng c\u00f3 th\u1eddi gian  timeout , v\u00ec v\u1eady ch\u1ec9 c\u00f3 th\u1ec3  enter  ho\u1eb7c  exit  kh\u1ecfi tr\u1ea1ng th\u00e1i  suspended  b\u1edfi h\u00e0m g\u1ecdi t\u1eeb b\u00ean ngo\u00e0i t\u01b0\u01a1ng \u1ee9ng l\u00e0   vTaskSuspend()  v\u00e0  xTaskResume()",
            "title": "C\u00e1c tr\u1ea1ng th\u00e1i (states) c\u1ee7a task"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#cac-muc-uu-tien-priorities-cua-task",
            "text": "M\u1ed7i task \u0111\u01b0\u1ee3c t\u1ea1o ra v\u1edbi m\u1ee9c \u01b0u ti\u00ean \u0111\u01b0\u1ee3c g\u00e1n t\u1eeb 0 \u0111\u1ebfn gi\u00e1 tr\u1ecb  (configMAX_PRIORITIES - 1) , v\u1edbi  configMAX_PRIORITIES  l\u00e0 gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong  FreeRTOSConfig.h  (v\u1edbi b\u1ea3n RTOS-SDK v1.4 \u0111ang s\u1eed d\u1ee5ng,  configMAX_PRIORITIES  l\u00e0 15)  Task \u0111ang \u1edf tr\u1ea1ng th\u00e1i  ready  c\u00f3 \u01b0u ti\u00ean cao h\u01a1n s\u1ebd \u0111\u01b0\u1ee3c ch\u1ecdn \u0111\u1ec3 th\u1ef1c thi (chuy\u1ec3n sang  running ) trong m\u1ed7i l\u1ea7n  tick  N\u1ebfu c\u00e1c task c\u00f3 c\u00f9ng m\u1ee9c \u01b0u ti\u00ean? Trong tr\u01b0\u1eddng h\u1ee3p RTOS s\u1ebd chia \u0111\u1ec1u ra x\u1eed l\u00fd (do gi\u00e1 tr\u1ecb  configUSE_TIME_SLICING  \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\u00e0 1 trong b\u1ea3n RTOS-SDK n\u00e0y)",
            "title": "C\u00e1c m\u1ee9c \u01b0u ti\u00ean (priorities) c\u1ee7a task"
        },
        {
            "location": "/freertos-sdk/basic/software-timer/",
            "text": "Software Timer trong FreeRTOS\n#",
            "title": "Software Timer"
        },
        {
            "location": "/freertos-sdk/basic/software-timer/#software-timer-trong-freertos",
            "text": "",
            "title": "Software Timer trong FreeRTOS"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/",
            "text": "V\u1ea5n \u0111\u1ec1 \u0111\u1ed3ng b\u1ed9 / trao \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa c\u00e1c task\n\n\nH\u00e0ng \u0111\u1ee3i (queue)\n\n\nV\u00ed d\u1ee5\n\n\nT\u1ea1o queue\n\n\nG\u1eedi th\u00f4ng \u0111i\u1ec7p l\u00ean queue\n\n\nNh\u1eadn th\u00f4ng \u0111i\u1ec7p t\u1eeb queue\n\n\nCh\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh\n\n\n\n\n\n\nSemaphore\n\n\nMutex\n\n\n\n\n\n\nV\u1ea5n \u0111\u1ec1 \u0111\u1ed3ng b\u1ed9 / trao \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa c\u00e1c task\n#\n\n\nM\u1ed7i task th\u1ef1c hi\u1ec7n t\u00e1c v\u1ee5 ri\u00eang c\u1ee7a m\u00ecnh, ch\u00fang c\u00f3 kh\u00f4ng gian b\u1ed9 nh\u1edb ri\u00eang v\u00e0 ho\u00e0n to\u00e0n \u0111\u1ed9c l\u1eadp v\u1edbi nhau. \n\n\n\n\nV\u1eady l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 ph\u1ed1i h\u1ee3p ch\u00fang trong m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh l\u1edbn h\u01a1n, n\u1ebfu x\u00e9t m\u1ed7i task nh\u01b0 l\u00e0 m\u1ed9t module?\n\n\nN\u1ebfu task n\u00e0y mu\u1ed1n giao ti\u1ebfp/trao \u0111\u1ed5i th\u00f4ng tin v\u1edbi task kia th\u00ec l\u00e0m th\u1ebf n\u00e0o?\n\n\nN\u1ebfu 2 task c\u00f9ng m\u1ee9c \u01b0u ti\u00ean, c\u00f9ng ch\u1ea1y song song v\u00e0 c\u00f9ng mu\u1ed1n truy c\u1eadp \u0111\u1ebfn m\u1ed9t t\u00e0i nguy\u00ean chung th\u00ec l\u00e0m sao \u0111\u1ec3 tr\u00e1nh xung \u0111\u1ed9t?\n\n\n\n\nT\u1ea5t c\u1ea3 ch\u1ec9 g\u00f3i g\u1ecdn trong h\u00e0ng \u0111\u1ee3i (queue), semaphore v\u00e0 mutex\n\n\nH\u00e0ng \u0111\u1ee3i (queue)\n#\n\n\nHo\u1ea1t \u0111\u1ed9ng theo c\u01a1 ch\u1ebf FIFO (First In - First Out) d\u00f9ng trong FreeRTOS \u0111\u1ec3 trao \u0111\u1ed5i th\u00f4ng \u0111i\u1ec7p (message) gi\u1eefa c\u00e1c task v\u1edbi nhau.\n\n\n\n\nV\u00ed d\u1ee5\n#\n\n\nS\u1eed d\u1ee5ng l\u1ea1i v\u00ed d\u1ee5 \nesp-rtos-basic-task\n, nh\u01b0ng 2 task s\u1eeda l\u1ea1i theo m\u1ee5c \u0111\u00edch sau:\n\n\n\n\ntask_led\n: nh\u00e1y led, \u0111\u1ebfm bi\u1ebfn \ncounter\n, \u0111\u1ebfm xong th\u00ec g\u1eedi gi\u00e1 tr\u1ecb bi\u1ebfn \u0111\u1ebfm n\u00e0y qua queue cho \ntask_printf\n in ra gi\u00e1 tr\u1ecb.\n\n\ntask_printf\n: ch\u1ec9 ch\u1edd  c\u00f3 th\u00f4ng \u0111i\u1ec7p m\u1edbi tr\u00ean queue th\u00ec l\u1ea5y th\u00f4ng \u0111i\u1ec7p n\u00e0y ra kh\u1ecfi queue v\u00e0 in gi\u00e1 tr\u1ecb n\u00e0y!\n\n\n\n\nM\u00e3 ngu\u1ed3n ch\u01b0\u01a1ng tr\u00ecnh:\n\n\ngit clone https://github.com/esp8266vn/esp-rtos-basic-queue-sem-mutex.git\ncd esp-rtos-basic-queue-sem-mutex\n\n\n\n\n\u0110\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c queue ph\u1ea3i \n#include \"freertos/queue.h\"\n\n\nT\u1ea1o queue\n#\n\n\nC\u00fa ph\u00e1p:\n\n\n xQueueHandle xQueueCreate( UBaseType_t uxQueueLength,\n                             UBaseType_t uxItemSize );\n\n\n\n\n\n\nuxQueueLength\n: k\u00edch th\u01b0\u1edbc/s\u1ed1 ph\u1ea7n t\u1eed t\u1ed1i \u0111a tr\u00ean queue\n\n\nuxItemSize\n: k\u00edch th\u01b0\u1edbc c\u1ee7a m\u1ed7i ph\u1ea7n t\u1eed, t\u00f9y thu\u1ed9c v\u00e0o \nki\u1ec3u\n d\u1eef li\u1ec7u c\u1ee7a ph\u1ea7n t\u1eed tr\u00ean queue.\n\n\n\n\nTr\u01b0\u1eddng h\u1ee3p n\u00e0y, bi\u1ebfn \ncounter\n l\u00e0 \nuint32_t\n.\nGi\u1ea3 s\u1eed c\u1ea7n t\u1ed1i \u0111a 10 ph\u1ea7n t\u1eed tr\u00ean queue.\nKhai b\u00e1o v\u00e0 t\u1ea1o nh\u01b0 sau:\n\n\nxQueueHandle xCounterQueue;\n// ...\nxCounterQueue = xQueueCreate( 10, sizeof(uint32_t));\n\n\n\n\nG\u1eedi th\u00f4ng \u0111i\u1ec7p l\u00ean queue\n#\n\n\nTheo c\u00fa ph\u00e1p:\n\n\nBaseType_t xQueueSend(\n                            QueueHandle_t xQueue,\n                            const void * pvItemToQueue,\n                            TickType_t xTicksToWait\n                         );\n\n\n\n\n\n\nxQueue\n: queue handle (\nxCounterQueue\n)\n\n\npvItemToQueue\n: tr\u1ecf \u0111\u1ebfn ph\u1ea7n t\u1eed/th\u00f4ng \u0111i\u1ec7p c\u1ea7n g\u1eedi l\u00ean queue (\n&counter\n)\n\n\nxTicksToWait\n: th\u1eddi gian ch\u1edd t\u1ed1i \u0111a (\ntimeout\n - t\u00ednh b\u1eb1ng \ntick\n) trong tr\u01b0\u1eddng h\u1ee3p queue b\u1ecb \u0111\u1ea7y kh\u00f4ng g\u1eedi th\u00eam v\u00e0o \u0111\u01b0\u1ee3c.\n\n\n\n\ntask_led\n s\u1ebd l\u00e0m nhi\u1ec7m v\u1ee5 n\u00e0y:\n\n\nvoid task_led(void *pvParameters)\n{\n    uint32_t counter = 0;\n    for(;;){\n        vTaskDelay(100);\n        GPIO_OUTPUT_SET(LED_GPIO, led_state);\n        led_state ^=1;\n        counter++;\n        if( xQueueSend( xCounterQueue,( void * ) &counter, 10 ) != pdPASS )\n        {\n            // Failed to send msg to queue, TODO handle\n        }\n    }\n}\n\n\n\n\nNh\u1eadn th\u00f4ng \u0111i\u1ec7p t\u1eeb queue\n#\n\n\nTheo c\u00fa ph\u00e1p:\n\n\nBaseType_t xQueueReceive(\n                               QueueHandle_t xQueue,\n                               void *pvBuffer,\n                               TickType_t xTicksToWait\n                            );\n\n\n\n\n\n\nxQueue\n: queue handle (\nxCounterQueue\n)\n\n\npvBuffer\n: tr\u1ecf \u0111\u1ebfn n\u01a1i s\u1ebd ch\u1ee9a th\u00f4ng \u0111i\u1ec7p l\u1ea5y t\u1eeb queue xu\u1ed1ng.\n\n\nxTicksToWait\n: timeout trong tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eeb n\u00e0o tr\u00ean queue (\u0111ang tr\u1ed1ng)\n\n\n\n\ntask_printf\n s\u1ebd th\u1ef1c hi\u1ec7n nhi\u1ec7m v\u1ee5 n\u00e0y:\n\n\nvoid task_printf(void *pvParameters)\n{\n    uint32_t receiveCounter;\n\n    printf(\"task_printf started\\n\");\n\n    for(;;){\n        if( xQueueReceive( xCounterQueue, &( receiveCounter ), 100 ) )\n        {\n           printf(\"task_printf, received counter = %u\\n\", receiveCounter);\n        }\n    }\n}\n\n\n\n\nCh\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh\n#\n\n\nmake clean\nmake\nmake flash\n\n\n\n\nSemaphore\n#\n\n\nMutex\n#",
            "title": "\u0110\u1ed3ng b\u1ed9 / trao \u0111\u1ed5i d\u1eef li\u1ec7u"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#van-e-ong-bo-trao-oi-du-lieu-giua-cac-task",
            "text": "M\u1ed7i task th\u1ef1c hi\u1ec7n t\u00e1c v\u1ee5 ri\u00eang c\u1ee7a m\u00ecnh, ch\u00fang c\u00f3 kh\u00f4ng gian b\u1ed9 nh\u1edb ri\u00eang v\u00e0 ho\u00e0n to\u00e0n \u0111\u1ed9c l\u1eadp v\u1edbi nhau.    V\u1eady l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 ph\u1ed1i h\u1ee3p ch\u00fang trong m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh l\u1edbn h\u01a1n, n\u1ebfu x\u00e9t m\u1ed7i task nh\u01b0 l\u00e0 m\u1ed9t module?  N\u1ebfu task n\u00e0y mu\u1ed1n giao ti\u1ebfp/trao \u0111\u1ed5i th\u00f4ng tin v\u1edbi task kia th\u00ec l\u00e0m th\u1ebf n\u00e0o?  N\u1ebfu 2 task c\u00f9ng m\u1ee9c \u01b0u ti\u00ean, c\u00f9ng ch\u1ea1y song song v\u00e0 c\u00f9ng mu\u1ed1n truy c\u1eadp \u0111\u1ebfn m\u1ed9t t\u00e0i nguy\u00ean chung th\u00ec l\u00e0m sao \u0111\u1ec3 tr\u00e1nh xung \u0111\u1ed9t?   T\u1ea5t c\u1ea3 ch\u1ec9 g\u00f3i g\u1ecdn trong h\u00e0ng \u0111\u1ee3i (queue), semaphore v\u00e0 mutex",
            "title": "V\u1ea5n \u0111\u1ec1 \u0111\u1ed3ng b\u1ed9 / trao \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa c\u00e1c task"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#hang-oi-queue",
            "text": "Ho\u1ea1t \u0111\u1ed9ng theo c\u01a1 ch\u1ebf FIFO (First In - First Out) d\u00f9ng trong FreeRTOS \u0111\u1ec3 trao \u0111\u1ed5i th\u00f4ng \u0111i\u1ec7p (message) gi\u1eefa c\u00e1c task v\u1edbi nhau.",
            "title": "H\u00e0ng \u0111\u1ee3i (queue)"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#vi-du",
            "text": "S\u1eed d\u1ee5ng l\u1ea1i v\u00ed d\u1ee5  esp-rtos-basic-task , nh\u01b0ng 2 task s\u1eeda l\u1ea1i theo m\u1ee5c \u0111\u00edch sau:   task_led : nh\u00e1y led, \u0111\u1ebfm bi\u1ebfn  counter , \u0111\u1ebfm xong th\u00ec g\u1eedi gi\u00e1 tr\u1ecb bi\u1ebfn \u0111\u1ebfm n\u00e0y qua queue cho  task_printf  in ra gi\u00e1 tr\u1ecb.  task_printf : ch\u1ec9 ch\u1edd  c\u00f3 th\u00f4ng \u0111i\u1ec7p m\u1edbi tr\u00ean queue th\u00ec l\u1ea5y th\u00f4ng \u0111i\u1ec7p n\u00e0y ra kh\u1ecfi queue v\u00e0 in gi\u00e1 tr\u1ecb n\u00e0y!   M\u00e3 ngu\u1ed3n ch\u01b0\u01a1ng tr\u00ecnh:  git clone https://github.com/esp8266vn/esp-rtos-basic-queue-sem-mutex.git\ncd esp-rtos-basic-queue-sem-mutex  \u0110\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c queue ph\u1ea3i  #include \"freertos/queue.h\"",
            "title": "V\u00ed d\u1ee5"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#tao-queue",
            "text": "C\u00fa ph\u00e1p:   xQueueHandle xQueueCreate( UBaseType_t uxQueueLength,\n                             UBaseType_t uxItemSize );   uxQueueLength : k\u00edch th\u01b0\u1edbc/s\u1ed1 ph\u1ea7n t\u1eed t\u1ed1i \u0111a tr\u00ean queue  uxItemSize : k\u00edch th\u01b0\u1edbc c\u1ee7a m\u1ed7i ph\u1ea7n t\u1eed, t\u00f9y thu\u1ed9c v\u00e0o  ki\u1ec3u  d\u1eef li\u1ec7u c\u1ee7a ph\u1ea7n t\u1eed tr\u00ean queue.   Tr\u01b0\u1eddng h\u1ee3p n\u00e0y, bi\u1ebfn  counter  l\u00e0  uint32_t .\nGi\u1ea3 s\u1eed c\u1ea7n t\u1ed1i \u0111a 10 ph\u1ea7n t\u1eed tr\u00ean queue.\nKhai b\u00e1o v\u00e0 t\u1ea1o nh\u01b0 sau:  xQueueHandle xCounterQueue;\n// ...\nxCounterQueue = xQueueCreate( 10, sizeof(uint32_t));",
            "title": "T\u1ea1o queue"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#gui-thong-iep-len-queue",
            "text": "Theo c\u00fa ph\u00e1p:  BaseType_t xQueueSend(\n                            QueueHandle_t xQueue,\n                            const void * pvItemToQueue,\n                            TickType_t xTicksToWait\n                         );   xQueue : queue handle ( xCounterQueue )  pvItemToQueue : tr\u1ecf \u0111\u1ebfn ph\u1ea7n t\u1eed/th\u00f4ng \u0111i\u1ec7p c\u1ea7n g\u1eedi l\u00ean queue ( &counter )  xTicksToWait : th\u1eddi gian ch\u1edd t\u1ed1i \u0111a ( timeout  - t\u00ednh b\u1eb1ng  tick ) trong tr\u01b0\u1eddng h\u1ee3p queue b\u1ecb \u0111\u1ea7y kh\u00f4ng g\u1eedi th\u00eam v\u00e0o \u0111\u01b0\u1ee3c.   task_led  s\u1ebd l\u00e0m nhi\u1ec7m v\u1ee5 n\u00e0y:  void task_led(void *pvParameters)\n{\n    uint32_t counter = 0;\n    for(;;){\n        vTaskDelay(100);\n        GPIO_OUTPUT_SET(LED_GPIO, led_state);\n        led_state ^=1;\n        counter++;\n        if( xQueueSend( xCounterQueue,( void * ) &counter, 10 ) != pdPASS )\n        {\n            // Failed to send msg to queue, TODO handle\n        }\n    }\n}",
            "title": "G\u1eedi th\u00f4ng \u0111i\u1ec7p l\u00ean queue"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#nhan-thong-iep-tu-queue",
            "text": "Theo c\u00fa ph\u00e1p:  BaseType_t xQueueReceive(\n                               QueueHandle_t xQueue,\n                               void *pvBuffer,\n                               TickType_t xTicksToWait\n                            );   xQueue : queue handle ( xCounterQueue )  pvBuffer : tr\u1ecf \u0111\u1ebfn n\u01a1i s\u1ebd ch\u1ee9a th\u00f4ng \u0111i\u1ec7p l\u1ea5y t\u1eeb queue xu\u1ed1ng.  xTicksToWait : timeout trong tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eeb n\u00e0o tr\u00ean queue (\u0111ang tr\u1ed1ng)   task_printf  s\u1ebd th\u1ef1c hi\u1ec7n nhi\u1ec7m v\u1ee5 n\u00e0y:  void task_printf(void *pvParameters)\n{\n    uint32_t receiveCounter;\n\n    printf(\"task_printf started\\n\");\n\n    for(;;){\n        if( xQueueReceive( xCounterQueue, &( receiveCounter ), 100 ) )\n        {\n           printf(\"task_printf, received counter = %u\\n\", receiveCounter);\n        }\n    }\n}",
            "title": "Nh\u1eadn th\u00f4ng \u0111i\u1ec7p t\u1eeb queue"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#chay-chuong-trinh",
            "text": "make clean\nmake\nmake flash",
            "title": "Ch\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#semaphore",
            "text": "",
            "title": "Semaphore"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#mutex",
            "text": "",
            "title": "Mutex"
        },
        {
            "location": "/freertos-sdk/basic/task-notification/",
            "text": "Task notification\n#",
            "title": "Task notification"
        },
        {
            "location": "/freertos-sdk/basic/task-notification/#task-notification",
            "text": "",
            "title": "Task notification"
        },
        {
            "location": "/arduino/arduino/",
            "text": "TH\u00d4NG B\u00c1O:\n#\n\n\nTo\u00e0n b\u1ed9 n\u1ed9i dung ESP8266 \u0111\u01b0\u1ee3c chuy\u1ec3n sang v\u00e0 t\u1ed5 ch\u1ee9c t\u1ea1i:\n\n\nhttps://arduino.esp8266.vn\n#\n\n\nArduino core cho ESP8266 WiFi chip\n#\n\n\n\u0110\u00e2y l\u00e0 m\u1ed9t d\u1ef1 \u00e1n m\u00e3 ngu\u1ed3n m\u1edf gi\u00fap h\u1ed7 tr\u1ee3 m\u00f4i tr\u01b0\u1eddng ph\u00e1t tri\u1ec3n Arduino cho ESP8266. Gi\u00fap b\u1ea1n c\u00f3 th\u1ec3 vi\u1ebft 1 Sketches s\u1eed d\u1ee5ng c\u00e1c th\u01b0 vi\u1ec7n v\u00e0 h\u00e0m t\u01b0\u01a1ng t\u1ef1 c\u1ee7a Arduino, c\u00f3 th\u1ec3 ch\u1ea1y tr\u1ef1c ti\u1ebfp tr\u00ean ESP8266 m\u00e0 kh\u00f4ng c\u1ea7n b\u1ea5t k\u1ef3 Vi \u0111i\u1ec1u khi\u1ec3n n\u00e0o kh\u00e1c.\n\n\nESP8266 Arduino core \u0111i k\u00e8m v\u1edbi th\u01b0 vi\u1ec7n k\u1ebft n\u1ed1i WiFi h\u1ed7 tr\u1ee3 TCP, UDP v\u00e0 c\u00e1c \u1ee9ng d\u1ee5ng HTTP, mDNS, SSDP, DNS Servers. Ngo\u00e0i ra c\u00f2n c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n c\u1eadp nh\u1eadt OTA, s\u1eed d\u1ee5ng Filesystem d\u00f9ng b\u1ed9 nh\u1edb Flash hay th\u1ebb SD, \u0111i\u1ec1u khi\u1ec3n servos, ngo\u1ea1i vi SPI, I2C.\n\n\n\n\n\u0110\u01b0\u1eddng d\u1eabn:\n#\n\n\n\n\nhttp://www.arduino.cc/en/main/software\n\n\nhttp://arduino.esp8266.com/\n\n\nhttp://esp8266.github.io/Arduino/versions/2.3.0/\n\n\nhttp://esp8266.github.io/Arduino/versions/2.3.0-rc2/",
            "title": "Gi\u1edbi thi\u1ec7u"
        },
        {
            "location": "/arduino/arduino/#thong-bao",
            "text": "To\u00e0n b\u1ed9 n\u1ed9i dung ESP8266 \u0111\u01b0\u1ee3c chuy\u1ec3n sang v\u00e0 t\u1ed5 ch\u1ee9c t\u1ea1i:",
            "title": "TH\u00d4NG B\u00c1O:"
        },
        {
            "location": "/arduino/arduino/#httpsarduinoesp8266vn",
            "text": "",
            "title": "https://arduino.esp8266.vn"
        },
        {
            "location": "/arduino/arduino/#arduino-core-cho-esp8266-wifi-chip",
            "text": "\u0110\u00e2y l\u00e0 m\u1ed9t d\u1ef1 \u00e1n m\u00e3 ngu\u1ed3n m\u1edf gi\u00fap h\u1ed7 tr\u1ee3 m\u00f4i tr\u01b0\u1eddng ph\u00e1t tri\u1ec3n Arduino cho ESP8266. Gi\u00fap b\u1ea1n c\u00f3 th\u1ec3 vi\u1ebft 1 Sketches s\u1eed d\u1ee5ng c\u00e1c th\u01b0 vi\u1ec7n v\u00e0 h\u00e0m t\u01b0\u01a1ng t\u1ef1 c\u1ee7a Arduino, c\u00f3 th\u1ec3 ch\u1ea1y tr\u1ef1c ti\u1ebfp tr\u00ean ESP8266 m\u00e0 kh\u00f4ng c\u1ea7n b\u1ea5t k\u1ef3 Vi \u0111i\u1ec1u khi\u1ec3n n\u00e0o kh\u00e1c.  ESP8266 Arduino core \u0111i k\u00e8m v\u1edbi th\u01b0 vi\u1ec7n k\u1ebft n\u1ed1i WiFi h\u1ed7 tr\u1ee3 TCP, UDP v\u00e0 c\u00e1c \u1ee9ng d\u1ee5ng HTTP, mDNS, SSDP, DNS Servers. Ngo\u00e0i ra c\u00f2n c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n c\u1eadp nh\u1eadt OTA, s\u1eed d\u1ee5ng Filesystem d\u00f9ng b\u1ed9 nh\u1edb Flash hay th\u1ebb SD, \u0111i\u1ec1u khi\u1ec3n servos, ngo\u1ea1i vi SPI, I2C.",
            "title": "Arduino core cho ESP8266 WiFi chip"
        },
        {
            "location": "/arduino/arduino/#uong-dan",
            "text": "http://www.arduino.cc/en/main/software  http://arduino.esp8266.com/  http://esp8266.github.io/Arduino/versions/2.3.0/  http://esp8266.github.io/Arduino/versions/2.3.0-rc2/",
            "title": "\u0110\u01b0\u1eddng d\u1eabn:"
        },
        {
            "location": "/micropython/micropython/",
            "text": "ESP8266 Micropython\n#\n\n\n\n\nmicropython\n l\u00e0 tr\u00ecnh th\u00f4ng d\u1ecbch Python3 \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf cho c\u00e1c d\u00f2ng chip c\u00f3 b\u1ed9 nh\u1edb \u00edt \u1ecfi v\u00e0 c\u00f3 kh\u1ea3 n\u0103ng ho\u1ea1t \u0111\u1ed9ng \u1ed5n \u0111\u1ecbnh.\n\n\nL\u1ee3i th\u1ebf c\u1ee7a \nmicropython\n l\u00e0 s\u1eed d\u1ee5ng ng\u00f4n ng\u1eef b\u1eadc cao, d\u1ec5 d\u00e0ng s\u1eed d\u1ee5ng cho ng\u01b0\u1eddi m\u1edbi b\u1eaft \u0111\u1ea7u. C\u00f3 th\u1ec3 th\u1ef1c thi c\u00e1c l\u1ec7nh tr\u1ef1c ti\u1ebfp ngay tr\u00ean Terminal th\u00f4ng qua REPL ho\u1eb7c qua Web REPL. M\u1ed9t khi \u0111\u00e3 flash firmware h\u1ed7 tr\u1ee3 \nmicropython\n th\u00ec vi\u1ec7c vi\u1ebft firmware b\u1eb1ng python s\u1ebd do tr\u00ecnh th\u00f4ng d\u1ecbch b\u00ean d\u01b0\u1edbi chip \u0111\u1ea3m nhi\u1ec7m. B\u1ea1n c\u00f3 th\u1ec3 thay \u0111\u1ed5i ch\u01b0\u01a1ng tr\u00ecnh m\u00e0 kh\u00f4ng ph\u1ea3i n\u1ea1p l\u1ea1i firmware n\u1eefa.\n\n\nNh\u01b0ng m\u1ed9t kh\u00f3 kh\u0103n l\u00e0 khi mu\u1ed1n b\u1ed5 sung nh\u1eefng t\u00ednh n\u0103ng m\u1edbi, module m\u1edbi kh\u00f4ng s\u1eb5n c\u00f3, th\u00ec c\u1ea7n ph\u1ea3i am hi\u1ec3u v\u1ec1 \nmicropython\n \u0111\u1ec3 c\u00f3 th\u1ec3 vi\u1ebft \u0111\u01b0\u1ee3c module b\u1ed5 sung.\n\n\n\n\nWebsite: \nhttp://www.micropython.org/\n\n\nGithub: \nhttps://github.com/micropython/micropython\n\n\nT\u00e0i li\u1ec7u \nhttp://docs.micropython.org/en/latest/esp8266/esp8266/quickref.html",
            "title": "Gi\u1edbi thi\u1ec7u"
        },
        {
            "location": "/micropython/micropython/#esp8266-micropython",
            "text": "micropython  l\u00e0 tr\u00ecnh th\u00f4ng d\u1ecbch Python3 \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf cho c\u00e1c d\u00f2ng chip c\u00f3 b\u1ed9 nh\u1edb \u00edt \u1ecfi v\u00e0 c\u00f3 kh\u1ea3 n\u0103ng ho\u1ea1t \u0111\u1ed9ng \u1ed5n \u0111\u1ecbnh.  L\u1ee3i th\u1ebf c\u1ee7a  micropython  l\u00e0 s\u1eed d\u1ee5ng ng\u00f4n ng\u1eef b\u1eadc cao, d\u1ec5 d\u00e0ng s\u1eed d\u1ee5ng cho ng\u01b0\u1eddi m\u1edbi b\u1eaft \u0111\u1ea7u. C\u00f3 th\u1ec3 th\u1ef1c thi c\u00e1c l\u1ec7nh tr\u1ef1c ti\u1ebfp ngay tr\u00ean Terminal th\u00f4ng qua REPL ho\u1eb7c qua Web REPL. M\u1ed9t khi \u0111\u00e3 flash firmware h\u1ed7 tr\u1ee3  micropython  th\u00ec vi\u1ec7c vi\u1ebft firmware b\u1eb1ng python s\u1ebd do tr\u00ecnh th\u00f4ng d\u1ecbch b\u00ean d\u01b0\u1edbi chip \u0111\u1ea3m nhi\u1ec7m. B\u1ea1n c\u00f3 th\u1ec3 thay \u0111\u1ed5i ch\u01b0\u01a1ng tr\u00ecnh m\u00e0 kh\u00f4ng ph\u1ea3i n\u1ea1p l\u1ea1i firmware n\u1eefa.  Nh\u01b0ng m\u1ed9t kh\u00f3 kh\u0103n l\u00e0 khi mu\u1ed1n b\u1ed5 sung nh\u1eefng t\u00ednh n\u0103ng m\u1edbi, module m\u1edbi kh\u00f4ng s\u1eb5n c\u00f3, th\u00ec c\u1ea7n ph\u1ea3i am hi\u1ec3u v\u1ec1  micropython  \u0111\u1ec3 c\u00f3 th\u1ec3 vi\u1ebft \u0111\u01b0\u1ee3c module b\u1ed5 sung.   Website:  http://www.micropython.org/  Github:  https://github.com/micropython/micropython  T\u00e0i li\u1ec7u  http://docs.micropython.org/en/latest/esp8266/esp8266/quickref.html",
            "title": "ESP8266 Micropython"
        },
        {
            "location": "/micropython/basic/introduction/",
            "text": "C\u00e0i \u0111\u1eb7t\n#\n\n\nC\u00e0i \u0111\u1eb7t esp-open-sdk\n#\n\n\nB\u1edfi v\u00ec \nmicropython\n build cho ESP8266 c\u1ea7n 1 s\u1ed1 s\u1ef1 thay \u0111\u1ed5i trong compile v\u00e0 th\u01b0 vi\u1ec7n \u0111i k\u00e8m n\u00ean ph\u1ea3i s\u1eed d\u1ee5ng compiler, sdk t\u1eeb esp-open-sdk\n\n\nC\u00e0i \u0111\u1eb7t theo h\u01b0\u1edbng d\u1eabn t\u1ea1i \nesp-open-sdk\n\n\nTr\u01b0\u1edbc khi th\u1ef1c hi\u1ec7n \nmake\n th\u00ec th\u1ef1c hi\u1ec7n l\u1ec7nh n\u00e0y tr\u01b0\u1edbc:\n\n\nsed -i.bak '1s/^/gettext=\\'$'\\n/' crosstool-NG/kconfig/Makefile\nsed -i.bak -e 's/[[:<:]]sed[[:>:]]/gsed/' Makefile\nsed -i.bak -e 's/[[:<:]]awk[[:>:]]/\\$(AWK)/' lx106-hal/src/Makefile.am\nsed -i.bak 's/AM_PROG_AS/AM_PROG_AS\\'$'\\nAM_PROG_AR/' lx106-hal/configure.ac \n\n\n\n\nBi\u00ean d\u1ecbch Firmware Micropython cho ESP8266\n#\n\n\ngit clone --recursive https://github.com/micropython/micropython.git \ngit submodule update --init\ncd micropython\nmake -C mpy-cross\ncd esp8266\nmake axtls\nmake\n\n\n\n\nXem h\u01b0\u1edbng d\u1eabn r\u00f5 h\u01a1n t\u1ea1i \u0111\u00e2y: \nhttps://github.com/micropython/micropython/tree/master/esp8266\n\n\nDownload firmware\n#\n\n\nT\u1ed1t nh\u1ea5t b\u1ea1n n\u00ean c\u00f3 th\u1ec3 t\u1ef1 build firmware cho micropython, b\u1edfi v\u00ec firmware \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt li\u00ean t\u1ee5c. Tuy nhi\u00ean, v\u00ec v\u1ea5n \u0111\u1ec1 b\u1ea1n mu\u1ed1n th\u1eed firmware th\u1eadt nhanh v\u00e0 kh\u00f4ng quan t\u00e2m t\u1edbi t\u00ednh n\u0103ng. \u0110\u01b0\u1eddng link b\u00ean d\u01b0\u1edbi cung c\u1ea5p firmware \u0111\u00e3 \u0111\u01b0\u1ee3c build s\u1eb5n, v\u00e0 \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt b\u1ea5t c\u1ee9 khi n\u00e0o c\u00f3 th\u1ec3:\n- \ndropbox 1.8.5 build 20-oct-2016\n\n\nFlash firmware\n#\n\n\nL\u01b0u \u00fd vi\u1ec7c Flash firmware cho ESP8266 d\u00f9ng esptool.py \n\n\nesptool.py --port /dev/tty.SLAB_USBtoUART --baud 921600 write_flash --verify --flash_size=32m --flash_mode=qio 0 build/firmware-combined.bin\n\n\n\n\nPh\u1ea7n c\u1ee9ng - Pinout\n#\n\n\n\n\nL\u01b0u \u00fd\n\n\nL\u01b0u \u00fd l\u00e0 Micropython s\u1eed d\u1ee5ng GPIO gi\u1ed1ng v\u1edbi t\u00ean GPIO cho chip ESP8266, kh\u00e1c c\u00e1ch \u0111\u1eb7t t\u00ean c\u1ee7a NodeMCU, do v\u1eady, n\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng Board NodeMCU ho\u1eb7c c\u00e1c board n\u00e0o kh\u00e1c th\u00ec l\u01b0u \u00fd\n\n\n\n\n\n\nV\u00ed d\u1ee5: \n\n\nfrom machine import Pin \nled = Pin(16, Pin.OUT) #T\u01b0\u01a1ng \u0111\u01b0\u01a1ng LED tr\u00ean board NodeMCU\ngpio13 = Pin(13, Pin.OUT) # T\u01b0\u01a1ng \u0111\u01b0\u01a1ng ch\u00e2n D7 tr\u00ean NodeMCU",
            "title": "C\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 c\u1ea7n thi\u1ebft"
        },
        {
            "location": "/micropython/basic/introduction/#cai-at",
            "text": "",
            "title": "C\u00e0i \u0111\u1eb7t"
        },
        {
            "location": "/micropython/basic/introduction/#cai-at-esp-open-sdk",
            "text": "B\u1edfi v\u00ec  micropython  build cho ESP8266 c\u1ea7n 1 s\u1ed1 s\u1ef1 thay \u0111\u1ed5i trong compile v\u00e0 th\u01b0 vi\u1ec7n \u0111i k\u00e8m n\u00ean ph\u1ea3i s\u1eed d\u1ee5ng compiler, sdk t\u1eeb esp-open-sdk  C\u00e0i \u0111\u1eb7t theo h\u01b0\u1edbng d\u1eabn t\u1ea1i  esp-open-sdk  Tr\u01b0\u1edbc khi th\u1ef1c hi\u1ec7n  make  th\u00ec th\u1ef1c hi\u1ec7n l\u1ec7nh n\u00e0y tr\u01b0\u1edbc:  sed -i.bak '1s/^/gettext=\\'$'\\n/' crosstool-NG/kconfig/Makefile\nsed -i.bak -e 's/[[:<:]]sed[[:>:]]/gsed/' Makefile\nsed -i.bak -e 's/[[:<:]]awk[[:>:]]/\\$(AWK)/' lx106-hal/src/Makefile.am\nsed -i.bak 's/AM_PROG_AS/AM_PROG_AS\\'$'\\nAM_PROG_AR/' lx106-hal/configure.ac",
            "title": "C\u00e0i \u0111\u1eb7t esp-open-sdk"
        },
        {
            "location": "/micropython/basic/introduction/#bien-dich-firmware-micropython-cho-esp8266",
            "text": "git clone --recursive https://github.com/micropython/micropython.git \ngit submodule update --init\ncd micropython\nmake -C mpy-cross\ncd esp8266\nmake axtls\nmake  Xem h\u01b0\u1edbng d\u1eabn r\u00f5 h\u01a1n t\u1ea1i \u0111\u00e2y:  https://github.com/micropython/micropython/tree/master/esp8266",
            "title": "Bi\u00ean d\u1ecbch Firmware Micropython cho ESP8266"
        },
        {
            "location": "/micropython/basic/introduction/#download-firmware",
            "text": "T\u1ed1t nh\u1ea5t b\u1ea1n n\u00ean c\u00f3 th\u1ec3 t\u1ef1 build firmware cho micropython, b\u1edfi v\u00ec firmware \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt li\u00ean t\u1ee5c. Tuy nhi\u00ean, v\u00ec v\u1ea5n \u0111\u1ec1 b\u1ea1n mu\u1ed1n th\u1eed firmware th\u1eadt nhanh v\u00e0 kh\u00f4ng quan t\u00e2m t\u1edbi t\u00ednh n\u0103ng. \u0110\u01b0\u1eddng link b\u00ean d\u01b0\u1edbi cung c\u1ea5p firmware \u0111\u00e3 \u0111\u01b0\u1ee3c build s\u1eb5n, v\u00e0 \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt b\u1ea5t c\u1ee9 khi n\u00e0o c\u00f3 th\u1ec3:\n-  dropbox 1.8.5 build 20-oct-2016",
            "title": "Download firmware"
        },
        {
            "location": "/micropython/basic/introduction/#flash-firmware",
            "text": "L\u01b0u \u00fd vi\u1ec7c Flash firmware cho ESP8266 d\u00f9ng esptool.py   esptool.py --port /dev/tty.SLAB_USBtoUART --baud 921600 write_flash --verify --flash_size=32m --flash_mode=qio 0 build/firmware-combined.bin",
            "title": "Flash firmware"
        },
        {
            "location": "/micropython/basic/introduction/#phan-cung-pinout",
            "text": "L\u01b0u \u00fd  L\u01b0u \u00fd l\u00e0 Micropython s\u1eed d\u1ee5ng GPIO gi\u1ed1ng v\u1edbi t\u00ean GPIO cho chip ESP8266, kh\u00e1c c\u00e1ch \u0111\u1eb7t t\u00ean c\u1ee7a NodeMCU, do v\u1eady, n\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng Board NodeMCU ho\u1eb7c c\u00e1c board n\u00e0o kh\u00e1c th\u00ec l\u01b0u \u00fd    V\u00ed d\u1ee5:   from machine import Pin \nled = Pin(16, Pin.OUT) #T\u01b0\u01a1ng \u0111\u01b0\u01a1ng LED tr\u00ean board NodeMCU\ngpio13 = Pin(13, Pin.OUT) # T\u01b0\u01a1ng \u0111\u01b0\u01a1ng ch\u00e2n D7 tr\u00ean NodeMCU",
            "title": "Ph\u1ea7n c\u1ee9ng - Pinout"
        },
        {
            "location": "/projects/list/",
            "text": "C\u00e1c d\u1ef1 \u00e1n\n#",
            "title": "C\u00e1c d\u1ef1 \u00e1n"
        },
        {
            "location": "/projects/list/#cac-du-an",
            "text": "",
            "title": "C\u00e1c d\u1ef1 \u00e1n"
        },
        {
            "location": "/license/",
            "text": "B\u1ea3n quy\u1ec1n\n#\n\n\nTo\u00e0n b\u1ed9 t\u00e0i li\u1ec7u \u0111\u01b0\u1ee3c ph\u00e2n ph\u1ed1i theo gi\u1ea5y ph\u00e9p CC BY-SA-NC\n\n\nGhi nh\u00e2\u0323n \u0111o\u0301ng go\u0301p Phi Th\u01b0\u01a1ng ma\u0323i Chia se\u0309 v\u01a1\u0301i \u0110i\u00ea\u0300u ki\u00ea\u0323n Nh\u01b0 nhau (cc by-nc-sa):\nGi\u00e2\u0301y phe\u0301p na\u0300y cho phe\u0301p ng\u01b0\u01a1\u0300i kha\u0301c ph\u00f4\u0301i la\u0323i, tu\u0300y chi\u0309nh, va\u0300 x\u00e2y d\u01b0\u0323ng d\u01b0\u0323a tr\u00ean ta\u0301c ph\u00e2\u0309m cu\u0309a Ba\u0323n v\u01a1\u0301i mu\u0323c \u0111i\u0301ch Phi Th\u01b0\u01a1ng ma\u0323i, v\u01a1\u0301i \u0111i\u00ea\u0300u ki\u00ea\u0323n chu\u0301ng n\u00e2ng cao uy ti\u0301n cu\u0309a Ba\u0323n v\u00e0 cho phe\u0301p c\u00e2\u0301p phe\u0301p \u0111\u00f4\u0301i v\u01a1\u0301i ca\u0301c ta\u0301c ph\u00e2\u0309m sa\u0301ng ta\u0323o m\u01a1\u0301i cu\u0309a ho\u0323 theo ca\u0301c \u0111i\u00ea\u0300u khoa\u0309n gi\u00f4\u0301ng h\u00ea\u0323t.",
            "title": "B\u1ea3n quy\u1ec1n"
        },
        {
            "location": "/license/#ban-quyen",
            "text": "To\u00e0n b\u1ed9 t\u00e0i li\u1ec7u \u0111\u01b0\u1ee3c ph\u00e2n ph\u1ed1i theo gi\u1ea5y ph\u00e9p CC BY-SA-NC  Ghi nh\u00e2\u0323n \u0111o\u0301ng go\u0301p Phi Th\u01b0\u01a1ng ma\u0323i Chia se\u0309 v\u01a1\u0301i \u0110i\u00ea\u0300u ki\u00ea\u0323n Nh\u01b0 nhau (cc by-nc-sa):\nGi\u00e2\u0301y phe\u0301p na\u0300y cho phe\u0301p ng\u01b0\u01a1\u0300i kha\u0301c ph\u00f4\u0301i la\u0323i, tu\u0300y chi\u0309nh, va\u0300 x\u00e2y d\u01b0\u0323ng d\u01b0\u0323a tr\u00ean ta\u0301c ph\u00e2\u0309m cu\u0309a Ba\u0323n v\u01a1\u0301i mu\u0323c \u0111i\u0301ch Phi Th\u01b0\u01a1ng ma\u0323i, v\u01a1\u0301i \u0111i\u00ea\u0300u ki\u00ea\u0323n chu\u0301ng n\u00e2ng cao uy ti\u0301n cu\u0309a Ba\u0323n v\u00e0 cho phe\u0301p c\u00e2\u0301p phe\u0301p \u0111\u00f4\u0301i v\u01a1\u0301i ca\u0301c ta\u0301c ph\u00e2\u0309m sa\u0301ng ta\u0323o m\u01a1\u0301i cu\u0309a ho\u0323 theo ca\u0301c \u0111i\u00ea\u0300u khoa\u0309n gi\u00f4\u0301ng h\u00ea\u0323t.",
            "title": "B\u1ea3n quy\u1ec1n"
        },
        {
            "location": "/contributor/",
            "text": "Danh s\u00e1ch th\u00e0nh vi\u00ean \u0111\u00f3ng g\u00f3p:\n#\n\n\n\n\nTu\u1ea5n PM\n\n\nTr\u1ecbnh \u0110\u1ee9c\n\n\nH\u1ecdc ARM\n\n\nHi\u1ebfu Nguy\u1ec5n\n\n\n\u0110\u1eb7ng H\u1eefu To\u00e0n\n\n\n\n\nDanh s\u00e1ch c\u00e1 nh\u00e2n \u1ee7ng h\u1ed9 d\u1ef1 \u00e1n:\n#",
            "title": "\u0110\u00f3ng g\u00f3p"
        },
        {
            "location": "/contributor/#danh-sach-thanh-vien-ong-gop",
            "text": "Tu\u1ea5n PM  Tr\u1ecbnh \u0110\u1ee9c  H\u1ecdc ARM  Hi\u1ebfu Nguy\u1ec5n  \u0110\u1eb7ng H\u1eefu To\u00e0n",
            "title": "Danh s\u00e1ch th\u00e0nh vi\u00ean \u0111\u00f3ng g\u00f3p:"
        },
        {
            "location": "/contributor/#danh-sach-ca-nhan-ung-ho-du-an",
            "text": "",
            "title": "Danh s\u00e1ch c\u00e1 nh\u00e2n \u1ee7ng h\u1ed9 d\u1ef1 \u00e1n:"
        }
    ]
}