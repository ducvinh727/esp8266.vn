{
    "docs": [
        {
            "location": "/",
            "text": "Internet Of Things (IoT) v\u1edbi ESP8266\n#\n\n\nWebsitte \u0111\u01b0\u1ee3c cung c\u1ea5p d\u01b0\u1edbi d\u1ea1ng t\u00e0i li\u1ec7u \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c, h\u1ed7 tr\u1ee3 nh\u1eefng ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ph\u1ea7n c\u1ee9ng Internet Of Things s\u1eed d\u1ee5ng ESP8266. Kh\u00f4ng ch\u1ec9 l\u00e0 nh\u1eefng ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ph\u1ea7n c\u1ee9ng, ESP8266 m\u00e0 c\u00f2n h\u1ed7 tr\u1ee3 nh\u1eefng ki\u1ebfn th\u1ee9c n\u1ec1n t\u1ea3ng, hi\u1ec3u bi\u1ebft v\u1ec1 network, connectivity \u0111\u1ec3 c\u00f3 th\u1ec3 ph\u00e1t tri\u1ec3n c\u00e1c \u1ee9ng d\u1ee5ng IoT t\u1eeb prototype t\u1edbi production.\n\n\nN\u1ed9i dung cung c\u1ea5p\n#\n\n\n\n\n\n\n\n\nN\u1ed9i dung\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKi\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ESP8266 d\u00f9ng NONOS-SDK\n\n\n\n\n\n\n\n\nKi\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh FreeRTOS v\u1edbi ESP8266 v\u00e0 RTOS-SDK\n\n\n\n\n\n\n\n\nKi\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ESP8266 v\u1edbi Arduino\n\n\n\n\n\n\n\n\nKi\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ESP8266 v\u1edbi Micropython\n\n\n\n\n\n\n-\n\n\nC\u00e1c d\u1ef1 \u00e1n \u1ee9ng d\u1ee5ng th\u1ef1c ti\u1ec5n\n\n\n\n\n\n\n\n\nB\u1ea3n quy\u1ec1n\n#\n\n\nTo\u00e0n b\u1ed9 t\u00e0i li\u1ec7u \u0111\u01b0\u1ee3c ph\u00e2n ph\u1ed1i theo gi\u1ea5y ph\u00e9p CC BY-SA-NC\n\n\nGhi nh\u00e2\u0323n \u0111o\u0301ng go\u0301p Phi Th\u01b0\u01a1ng ma\u0323i Chia se\u0309 v\u01a1\u0301i \u0110i\u00ea\u0300u ki\u00ea\u0323n Nh\u01b0 nhau (cc by-nc-sa):\nGi\u00e2\u0301y phe\u0301p na\u0300y cho phe\u0301p ng\u01b0\u01a1\u0300i kha\u0301c ph\u00f4\u0301i la\u0323i, tu\u0300y chi\u0309nh, va\u0300 x\u00e2y d\u01b0\u0323ng d\u01b0\u0323a tr\u00ean ta\u0301c ph\u00e2\u0309m cu\u0309a Ba\u0323n v\u01a1\u0301i mu\u0323c \u0111i\u0301ch Phi Th\u01b0\u01a1ng ma\u0323i, v\u01a1\u0301i \u0111i\u00ea\u0300u ki\u00ea\u0323n chu\u0301ng n\u00e2ng cao uy ti\u0301n cu\u0309a Ba\u0323n v\u00e0 cho phe\u0301p c\u00e2\u0301p phe\u0301p \u0111\u00f4\u0301i v\u01a1\u0301i ca\u0301c ta\u0301c ph\u00e2\u0309m sa\u0301ng ta\u0323o m\u01a1\u0301i cu\u0309a ho\u0323 theo ca\u0301c \u0111i\u00ea\u0300u khoa\u0309n gi\u00f4\u0301ng h\u00ea\u0323t.\n\n\n\n\n(H\u00ecnh \u1ea3nh s\u1eed d\u1ee5ng \nlink\n)",
            "title": "Trang ch\u1ee7"
        },
        {
            "location": "/#internet-of-things-iot-voi-esp8266",
            "text": "Websitte \u0111\u01b0\u1ee3c cung c\u1ea5p d\u01b0\u1edbi d\u1ea1ng t\u00e0i li\u1ec7u \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c, h\u1ed7 tr\u1ee3 nh\u1eefng ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ph\u1ea7n c\u1ee9ng Internet Of Things s\u1eed d\u1ee5ng ESP8266. Kh\u00f4ng ch\u1ec9 l\u00e0 nh\u1eefng ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ph\u1ea7n c\u1ee9ng, ESP8266 m\u00e0 c\u00f2n h\u1ed7 tr\u1ee3 nh\u1eefng ki\u1ebfn th\u1ee9c n\u1ec1n t\u1ea3ng, hi\u1ec3u bi\u1ebft v\u1ec1 network, connectivity \u0111\u1ec3 c\u00f3 th\u1ec3 ph\u00e1t tri\u1ec3n c\u00e1c \u1ee9ng d\u1ee5ng IoT t\u1eeb prototype t\u1edbi production.",
            "title": "Internet Of Things (IoT) v\u1edbi ESP8266"
        },
        {
            "location": "/#noi-dung-cung-cap",
            "text": "N\u1ed9i dung        Ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ESP8266 d\u00f9ng NONOS-SDK     Ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh FreeRTOS v\u1edbi ESP8266 v\u00e0 RTOS-SDK     Ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ESP8266 v\u1edbi Arduino     Ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh ESP8266 v\u1edbi Micropython    -  C\u00e1c d\u1ef1 \u00e1n \u1ee9ng d\u1ee5ng th\u1ef1c ti\u1ec5n",
            "title": "N\u1ed9i dung cung c\u1ea5p"
        },
        {
            "location": "/#ban-quyen",
            "text": "To\u00e0n b\u1ed9 t\u00e0i li\u1ec7u \u0111\u01b0\u1ee3c ph\u00e2n ph\u1ed1i theo gi\u1ea5y ph\u00e9p CC BY-SA-NC  Ghi nh\u00e2\u0323n \u0111o\u0301ng go\u0301p Phi Th\u01b0\u01a1ng ma\u0323i Chia se\u0309 v\u01a1\u0301i \u0110i\u00ea\u0300u ki\u00ea\u0323n Nh\u01b0 nhau (cc by-nc-sa):\nGi\u00e2\u0301y phe\u0301p na\u0300y cho phe\u0301p ng\u01b0\u01a1\u0300i kha\u0301c ph\u00f4\u0301i la\u0323i, tu\u0300y chi\u0309nh, va\u0300 x\u00e2y d\u01b0\u0323ng d\u01b0\u0323a tr\u00ean ta\u0301c ph\u00e2\u0309m cu\u0309a Ba\u0323n v\u01a1\u0301i mu\u0323c \u0111i\u0301ch Phi Th\u01b0\u01a1ng ma\u0323i, v\u01a1\u0301i \u0111i\u00ea\u0300u ki\u00ea\u0323n chu\u0301ng n\u00e2ng cao uy ti\u0301n cu\u0309a Ba\u0323n v\u00e0 cho phe\u0301p c\u00e2\u0301p phe\u0301p \u0111\u00f4\u0301i v\u01a1\u0301i ca\u0301c ta\u0301c ph\u00e2\u0309m sa\u0301ng ta\u0323o m\u01a1\u0301i cu\u0309a ho\u0323 theo ca\u0301c \u0111i\u00ea\u0300u khoa\u0309n gi\u00f4\u0301ng h\u00ea\u0323t.   (H\u00ecnh \u1ea3nh s\u1eed d\u1ee5ng  link )",
            "title": "B\u1ea3n quy\u1ec1n"
        },
        {
            "location": "/introduction/introduction/",
            "text": "Ki\u1ebfn th\u1ee9c c\u01a1 b\u1ea3n\n#\n\n\nPh\u1ea7n n\u00e0y s\u1ebd t\u00ecm hi\u1ec3u v\u00e8 c\u00e1c kh\u00e1i ni\u1ec7m li\u00ean quan \u0111\u1ebfn \nIoT\n, l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 b\u1eaft \u0111\u1ea7u l\u1eadp tr\u00ecnh \u1ee9ng d\u1ee5ng \nIoT\n v\u1edbi \nESP8266\n.\n\n\nCh\u00fang ta s\u1ebd b\u1eaft \u0111\u1ea7u b\u1eb1ng vi\u1ec7c t\u00ecm hi\u1ec3u t\u1ed5ng quan v\u1ec1 h\u1ec7 th\u1ed1ng \nIoT\n, t\u1ed5ng quan v\u1ec1 d\u00f2ng chip ESP8266, r\u1ed3i \u0111\u1ebfn vi\u1ec7c c\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 ph\u00e1t tri\u1ec3n tr\u00ean m\u00e1y t\u00ednh c\u1ee7a b\u1ea1n. Ti\u1ebfp \u0111\u1ebfn l\u00e0 vi\u1ec7c bi\u00ean d\u1ecbch c\u00e1c d\u1ef1 \u00e1n m\u1eabu, l\u1ef1a ch\u1ecdn tr\u00ecnh th\u01b0 vi\u1ec7n, tr\u00ecnh so\u1ea1n th\u1ea3o s\u1ebd l\u00e0m vi\u1ec7c. K\u1ebft th\u00fac ch\u01b0\u01a1ng n\u00e0y ch\u00fang ta n\u00ean c\u00f3 \u0111\u01b0\u1ee3c c\u00e1i nh\u00ecn t\u1ed5ng qu\u00e1t v\u1ec1 h\u1ec7 th\u1ed1ng IoT, l\u00e0m th\u1ebf n\u00e0o v\u00e0 s\u1eed d\u1ee5ng c\u00f4ng c\u1ee5 g\u00ec \u0111\u1ec3 l\u1eadp tr\u00ecnh \u1ee9ng d\u1ee5ng v\u1edbi ESP8266. Ngo\u00e0i ra  c\u00f2n b\u1ed5 sung m\u1ed9t s\u1ed1 ki\u1ebfn th\u1ee9c c\u1ef1c k\u1ef3 c\u01a1 b\u1ea3n v\u1ec1 l\u1eadp tr\u00ecnh \nC\n.\n\n\nV\u1edbi nh\u1eefng ai \u0111\u00e3 t\u1eebng hi\u1ec3u r\u00f5 ESP8266, \u0111\u00e3n t\u1eebng l\u00e0m v\u1ec1 h\u1ec7 th\u1ed1ng IoT, \u0111\u00e3 chuy\u00ean nghi\u1ec7p trong l\u1eadp tr\u00ecnh \nC\n ho\u00e0n to\u00e0n c\u00f3 th\u1ec3 b\u1ecf qua.",
            "title": "T\u1ed5ng quan"
        },
        {
            "location": "/introduction/introduction/#kien-thuc-co-ban",
            "text": "Ph\u1ea7n n\u00e0y s\u1ebd t\u00ecm hi\u1ec3u v\u00e8 c\u00e1c kh\u00e1i ni\u1ec7m li\u00ean quan \u0111\u1ebfn  IoT , l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 b\u1eaft \u0111\u1ea7u l\u1eadp tr\u00ecnh \u1ee9ng d\u1ee5ng  IoT  v\u1edbi  ESP8266 .  Ch\u00fang ta s\u1ebd b\u1eaft \u0111\u1ea7u b\u1eb1ng vi\u1ec7c t\u00ecm hi\u1ec3u t\u1ed5ng quan v\u1ec1 h\u1ec7 th\u1ed1ng  IoT , t\u1ed5ng quan v\u1ec1 d\u00f2ng chip ESP8266, r\u1ed3i \u0111\u1ebfn vi\u1ec7c c\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 ph\u00e1t tri\u1ec3n tr\u00ean m\u00e1y t\u00ednh c\u1ee7a b\u1ea1n. Ti\u1ebfp \u0111\u1ebfn l\u00e0 vi\u1ec7c bi\u00ean d\u1ecbch c\u00e1c d\u1ef1 \u00e1n m\u1eabu, l\u1ef1a ch\u1ecdn tr\u00ecnh th\u01b0 vi\u1ec7n, tr\u00ecnh so\u1ea1n th\u1ea3o s\u1ebd l\u00e0m vi\u1ec7c. K\u1ebft th\u00fac ch\u01b0\u01a1ng n\u00e0y ch\u00fang ta n\u00ean c\u00f3 \u0111\u01b0\u1ee3c c\u00e1i nh\u00ecn t\u1ed5ng qu\u00e1t v\u1ec1 h\u1ec7 th\u1ed1ng IoT, l\u00e0m th\u1ebf n\u00e0o v\u00e0 s\u1eed d\u1ee5ng c\u00f4ng c\u1ee5 g\u00ec \u0111\u1ec3 l\u1eadp tr\u00ecnh \u1ee9ng d\u1ee5ng v\u1edbi ESP8266. Ngo\u00e0i ra  c\u00f2n b\u1ed5 sung m\u1ed9t s\u1ed1 ki\u1ebfn th\u1ee9c c\u1ef1c k\u1ef3 c\u01a1 b\u1ea3n v\u1ec1 l\u1eadp tr\u00ecnh  C .  V\u1edbi nh\u1eefng ai \u0111\u00e3 t\u1eebng hi\u1ec3u r\u00f5 ESP8266, \u0111\u00e3n t\u1eebng l\u00e0m v\u1ec1 h\u1ec7 th\u1ed1ng IoT, \u0111\u00e3 chuy\u00ean nghi\u1ec7p trong l\u1eadp tr\u00ecnh  C  ho\u00e0n to\u00e0n c\u00f3 th\u1ec3 b\u1ecf qua.",
            "title": "Ki\u1ebfn th\u1ee9c c\u01a1 b\u1ea3n"
        },
        {
            "location": "/introduction/about-iot/",
            "text": "Internet Of Things (IoT)\n#\n\n\nInternet of Things (IoT) hay M\u1ea1ng l\u01b0\u1edbi v\u1ea1n v\u1eadt k\u1ebft n\u1ed1i Internet\n#\n\n\nL\u00e0 m\u1ed9t k\u1ecbch b\u1ea3n c\u1ee7a th\u1ebf gi\u1edbi, khi m\u00e0 m\u1ed7i \u0111\u1ed3 v\u1eadt, con ng\u01b0\u1eddi \u0111\u01b0\u1ee3c cung c\u1ea5p m\u1ed9t \u0111\u1ecbnh danh c\u1ee7a ri\u00eang m\u00ecnh, v\u00e0 t\u1ea5t c\u1ea3 c\u00f3 kh\u1ea3 n\u0103ng truy\u1ec1n t\u1ea3i, trao \u0111\u1ed5i th\u00f4ng tin, d\u1eef li\u1ec7u qua m\u1ed9t m\u1ea1ng duy nh\u1ea5t m\u00e0 kh\u00f4ng c\u1ea7n \u0111\u1ebfn s\u1ef1 t\u01b0\u01a1ng t\u00e1c tr\u1ef1c ti\u1ebfp gi\u1eefa ng\u01b0\u1eddi v\u1edbi ng\u01b0\u1eddi, hay ng\u01b0\u1eddi v\u1edbi m\u00e1y t\u00ednh. IoT \u0111\u00e3 ph\u00e1t tri\u1ec3n t\u1eeb s\u1ef1 h\u1ed9i t\u1ee5 c\u1ee7a c\u00f4ng ngh\u1ec7 kh\u00f4ng d\u00e2y, c\u00f4ng ngh\u1ec7 vi c\u01a1 \u0111i\u1ec7n t\u1eed v\u00e0 Internet[1]. N\u00f3i \u0111\u01a1n gi\u1ea3n l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c thi\u1ebft b\u1ecb c\u00f3 kh\u1ea3 n\u0103ng k\u1ebft n\u1ed1i v\u1edbi nhau, v\u1edbi Internet v\u00e0 v\u1edbi th\u1ebf gi\u1edbi b\u00ean ngo\u00e0i \u0111\u1ec3 th\u1ef1c hi\u1ec7n m\u1ed9t c\u00f4ng vi\u1ec7c n\u00e0o \u0111\u00f3.\n\n\nhttp://vi.wikipedia.org/wiki/M\u1ea1ng_l\u01b0\u1edbi_v\u1ea1n_v\u1eadt_k\u1ebft_n\u1ed1i_Internet",
            "title": "Internet Of Things (IoT)"
        },
        {
            "location": "/introduction/about-iot/#internet-of-things-iot",
            "text": "",
            "title": "Internet Of Things (IoT)"
        },
        {
            "location": "/introduction/about-iot/#internet-of-things-iot-hay-mang-luoi-van-vat-ket-noi-internet",
            "text": "L\u00e0 m\u1ed9t k\u1ecbch b\u1ea3n c\u1ee7a th\u1ebf gi\u1edbi, khi m\u00e0 m\u1ed7i \u0111\u1ed3 v\u1eadt, con ng\u01b0\u1eddi \u0111\u01b0\u1ee3c cung c\u1ea5p m\u1ed9t \u0111\u1ecbnh danh c\u1ee7a ri\u00eang m\u00ecnh, v\u00e0 t\u1ea5t c\u1ea3 c\u00f3 kh\u1ea3 n\u0103ng truy\u1ec1n t\u1ea3i, trao \u0111\u1ed5i th\u00f4ng tin, d\u1eef li\u1ec7u qua m\u1ed9t m\u1ea1ng duy nh\u1ea5t m\u00e0 kh\u00f4ng c\u1ea7n \u0111\u1ebfn s\u1ef1 t\u01b0\u01a1ng t\u00e1c tr\u1ef1c ti\u1ebfp gi\u1eefa ng\u01b0\u1eddi v\u1edbi ng\u01b0\u1eddi, hay ng\u01b0\u1eddi v\u1edbi m\u00e1y t\u00ednh. IoT \u0111\u00e3 ph\u00e1t tri\u1ec3n t\u1eeb s\u1ef1 h\u1ed9i t\u1ee5 c\u1ee7a c\u00f4ng ngh\u1ec7 kh\u00f4ng d\u00e2y, c\u00f4ng ngh\u1ec7 vi c\u01a1 \u0111i\u1ec7n t\u1eed v\u00e0 Internet[1]. N\u00f3i \u0111\u01a1n gi\u1ea3n l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c thi\u1ebft b\u1ecb c\u00f3 kh\u1ea3 n\u0103ng k\u1ebft n\u1ed1i v\u1edbi nhau, v\u1edbi Internet v\u00e0 v\u1edbi th\u1ebf gi\u1edbi b\u00ean ngo\u00e0i \u0111\u1ec3 th\u1ef1c hi\u1ec7n m\u1ed9t c\u00f4ng vi\u1ec7c n\u00e0o \u0111\u00f3.  http://vi.wikipedia.org/wiki/M\u1ea1ng_l\u01b0\u1edbi_v\u1ea1n_v\u1eadt_k\u1ebft_n\u1ed1i_Internet",
            "title": "Internet of Things (IoT) hay M\u1ea1ng l\u01b0\u1edbi v\u1ea1n v\u1eadt k\u1ebft n\u1ed1i Internet"
        },
        {
            "location": "/introduction/about-esp8266/",
            "text": "ESP8266\n#\n\n\nESP8266 l\u00e0 d\u00f2ng chip t\u00edch h\u1ee3p Wi-Fi 2.4Ghz c\u00f3 th\u1ec3 l\u1eadp tr\u00ecnh \u0111\u01b0\u1ee3c, r\u1ebb ti\u1ec1n \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t b\u1edfi m\u1ed9t c\u00f4ng ty b\u00e1n d\u1eabn Trung Qu\u1ed1c: Espressif Systems.\n\n\n\u0110\u01b0\u1ee3c ph\u00e1t h\u00e0nh \u0111\u1ea7u ti\u00ean v\u00e0o th\u00e1ng 8 n\u0103m 2014, \u0111\u00f3ng g\u00f3i \u0111\u01b0a ra th\u1ecb tr\u01b0\u1eddng d\u1ea1ng M\u00f4 dun ESP-01, \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t b\u1edfi b\u00ean th\u1ee9 3: AI-Thinker. C\u00f3 kh\u1ea3 n\u0103ng k\u1ebft n\u1ed1i Internet qua m\u1ea1ng Wi-Fi m\u1ed9t c\u00e1ch nhanh ch\u00f3ng v\u00e0 s\u1eed d\u1ee5ng r\u1ea5t \u00edt linh ki\u1ec7n \u0111i k\u00e8m. V\u1edbi gi\u00e1 c\u1ea3 c\u00f3 th\u1ec3 n\u00f3i l\u00e0 r\u1ea5t r\u1ebb so v\u1edbi t\u00ednh n\u0103ng v\u00e0 kh\u1ea3 n\u0103ng ESP8266 c\u00f3 th\u1ec3 l\u00e0m \u0111\u01b0\u1ee3c.\n\n\nESP8266 c\u00f3 m\u1ed9t c\u1ed9ng \u0111\u1ed3ng c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n tr\u00ean th\u1ebf gi\u1edbi r\u1ea5t l\u1edbn, cung c\u1ea5p nhi\u1ec1u Module l\u1eadp tr\u00ecnh m\u00e3 m\u1edf gi\u00fap nhi\u1ec1u ng\u01b0\u1eddi c\u00f3 th\u1ec3 ti\u1ebfp c\u1eadn v\u00e0 x\u00e2y d\u1ef1ng \u1ee9ng d\u1ee5ng r\u1ea5t nhanh.\n\n\nHi\u1ec7n nay t\u1ea5t c\u1ea3 c\u00e1c d\u00f2ng chip ESP8266 tr\u00ean th\u1ecb tr\u01b0\u1eddng \u0111\u1ec1u mang nh\u00e3n ESP8266EX, l\u00e0 phi\u00ean b\u1ea3n n\u00e2ng c\u1ea5p c\u1ee7a ESP8266\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n & S\u01a1 \u0111\u1ed3 kh\u1ed1i\n#\n\n\n.S\u01a1 \u0111\u1ed3 ch\u00e2n & s\u01a1 \u0111\u1ed3 kh\u1ed1i ESP8266EX\n\n\n\nTh\u00f4ng s\u1ed1 ph\u1ea7n c\u1ee9ng\n#\n\n\n\n\n32-bit RISC CPU : Tensilica Xtensa LX106 running at 80 MHz\n\n\nH\u1ed5 tr\u1ee3 Flash ngo\u00e0i t\u1eeb 512KiB \u0111\u1ebfn 4MiB\n\n\n64KBytes RAM th\u1ef1c thi l\u1ec7nh\n\n\n96KBytes RAM d\u1eef li\u1ec7u\n\n\n64KBytes boot ROM\n\n\nChu\u1ea9n wifi EEE 802.11 b/g/n, Wi-Fi 2.4 GHz\n\n T\u00edch h\u1ee3p TR switch, balun, LNA, khu\u1ebfch \u0111\u1ea1i c\u00f4ng su\u1ea5t v\u00e0 matching network\n\n H\u1ed5 tr\u1ee3 WEP, WPA/WPA2, Open network\n\n\nT\u00edch h\u1ee3p giao th\u1ee9c TCP/IP\n\n\nH\u1ed5 tr\u1ee3 nhi\u1ec1u lo\u1ea1i anten\n\n\n16 ch\u00e2n GPIO\n\n\nH\u1ed5 tr\u1ee3 SDIO 2.0, UART, SPI, I\u00b2C, PWM,I\u00b2S v\u1edbi DMA\n\n\n1 ADC 10-bit\n\n\nD\u1ea3i nhi\u1ec7t \u0111\u1ed9 ho\u1ea1t \u0111\u1ed9ng r\u1ed9ng : -40C ~ 125C\n\n\n\n\nSDK h\u1ed7 tr\u1ee3 ch\u00ednh th\u1ee9c t\u1eeb h\u00e3ng\n#\n\n\nT\u1ea1i th\u1eddi \u0111i\u1ec3m xu\u1ea5t b\u1ea3n s\u00e1ch n\u00e0y, Espressif \u0111\u00e3 h\u1ed7 tr\u1ee3 2 n\u1ec1n t\u1ea3ng SDK (Software Development Kit - G\u00f3i ph\u00e1t tri\u1ec3n ph\u1ea7n m\u1ec1m) \u0111\u1ed9c l\u1eadp, l\u00e0: \nNONOS SDK\n v\u00e0 \nRTOS SDK\n. C\u1ea3 2 \u0111\u1ec1u c\u00f3 nh\u1eefng \u01b0u \u0111i\u1ec3m ri\u00eang ph\u00f9 h\u1ee3p v\u1edbi t\u1eebng \u1ee9ng d\u1ee5ng nh\u1ea5t \u0111\u1ecbnh, v\u00e0 s\u1eed d\u1ee5ng chung nhi\u1ec1u c\u00e1c h\u00e0m \u0111i\u1ec1u khi\u1ec3n ph\u1ea7n c\u1ee9ng. Tuy nhi\u00ean \nNONOS SDK\n \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 c\u1eadp nh\u1eadt s\u1edbm nh\u1ea5t, nhi\u1ec1u t\u00ednh n\u0103ng nh\u1ea5t v\u00e0 \u0111\u01a1n gi\u1ea3n, d\u1ec5 s\u1eed d\u1ee5ng h\u01a1n. Ch\u00ednh v\u00ec v\u1eady \nNONOS SDK\n s\u1ebd l\u00e0 SDK \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ch\u00ednh th\u1ee9c \u1edf t\u1ea5t c\u1ea3 c\u00e1c h\u01b0\u1edbng d\u1eabn c\u1ee7a cu\u1ed1n s\u00e1ch n\u00e0y.\n\n\nESP8266 NONOS SDK\n#\n\n\nHi\u1ec7n nay, \nNONOS SDK\n phi\u00ean b\u1ea3n t\u1eeb \n2.0.0\n tr\u1edf l\u00ean \u0111\u00e3 \u1ed5n \u0111\u1ecbnh v\u00e0 cung c\u1ea5p g\u1ea7n nh\u01b0 l\u00e0 \u0111\u1ea7y \u0111\u1ee7 t\u1ea5t c\u1ea3 c\u00e1c t\u00ednh n\u0103ng m\u00e0 ESP8266 c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n:\n\n\n\n\nC\u00e1c API cho Timer, System, Wifi, \u0111\u1ecdc ghi SPI Flash, Sleep v\u00e0 c\u00e1c Module ph\u1ea7n c\u1ee9ng: GPIO, SPI, I\u00b2C, PWM, I\u00b2S v\u1edbi DMA.\n\n\nSmartconfig\n: H\u1ed7 tr\u1ee3 c\u1ea5u h\u00ecnh th\u00f4ng s\u1ed1 Wi-Fi cho ESP8266 nhanh ch\u00f3ng.\n\n\nSniffer\n API: B\u1eaft c\u00e1c g\u00f3i tin trong m\u1ea1ng kh\u00f4ng d\u00e2y 2.4Ghz.\n\n\nSNTP\n API: \u0110\u1ed3ng b\u1ed9 th\u1eddi gian v\u1edbi M\u00e1y ch\u1ee7 th\u1eddi gian.\n\n\nWPA2 Enterprise\n API: Cung c\u1ea5p vi\u1ec7c qu\u1ea3n l\u00fd k\u1ebft n\u1ed1i Wi-Fi b\u1eb1ng t\u00e0i kho\u1ea3n s\u1eed d\u1ee5ng c\u00e1c m\u00e1y ch\u1ee7 RADIUS.\n\n\nTCP/UDP\n API: Cho k\u1ebft n\u1ed1i internet, v\u00e0 h\u1ed7 tr\u1ee3 c\u00e1c Module d\u1ef1a tr\u00ean, nh\u01b0: HTTP, MQTT, CoAP.\n\n\nmDNS\n API: Gi\u00fap t\u00ecm ra \nIP\n c\u1ee7a thi\u1ebft b\u1ecb trong m\u1ea1ng n\u1ed9i b\u1ed9 b\u1eb1ng t\u00ean (hostname).\n\n\nMESH\n API: Li\u00ean k\u1ebft c\u00e1c module ESP8266 v\u1edbi c\u1ea5u tr\u00fac m\u1ea1ng MESH\n\n\nFOTA\n API: Firmware Over The Air - c\u1eadp nh\u1eadt firmware t\u1eeb xa cho thi\u1ebft b\u1ecb .\n\n\nESP-Now\n API: S\u1eed d\u1ee5ng c\u00e1c g\u00f3i tin Wireless 2.4GHz trao \u0111\u1ed5i tr\u1ef1c ti\u1ebfp v\u1edbi ESP8266 kh\u00e1c m\u00e0 kh\u00f4ng c\u1ea7n k\u1ebft n\u1ed1i t\u1edbi Access Point.\n\n\nSimple Pair\n API: Thi\u1ebft l\u1eadp k\u1ebft n\u1ed1i b\u1ea3o m\u1eadt gi\u1eefa 2 thi\u1ebft b\u1ecb t\u1ef1 \u0111\u1ed9ng.\n\n\n\n\nESP8266 RTOS SDK\n#\n\n\nRTOS SDK\n s\u1eed d\u1ee5ng \nFreeRTOS\n l\u00e0m n\u1ec1n t\u1ea3ng, \u0111\u1ed3ng th\u1eddi h\u1ea7u h\u1ebft c\u00e1c API c\u1ee7a \nNON OS\n SDK \u0111\u1ec1u c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi \nRTOS SDK\n.\n\n\nESP8285\n#\n\n\nESP8285 l\u00e0 m\u1ed9t phi\u00ean b\u1ea3n kh\u00e1c sau n\u00e0y c\u1ee7a ESP8266EX, gi\u1ed1ng ho\u00e0n to\u00e0n ESP8266EX ngo\u1ea1i tr\u1eeb vi\u1ec7c thay v\u00ec d\u00f9ng SPI FLASH b\u00ean ngo\u00e0i th\u00ec ESP8285 t\u00edch h\u1ee3p 1MiB Flash b\u00ean trong gi\u00fap gi\u1ea3m di\u1ec7n t\u00edch ph\u1ea7n c\u1ee9ng v\u00e0 \u0111\u01a1n gi\u1ea3n h\u00f3a qu\u00e1 tr\u00ecnh s\u1ea3n xu\u1ea5t.\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\nTh\u00f4ng s\u1ed1 ph\u1ea7n c\u1ee9ng\n#",
            "title": "ESP8266 & ESP8285"
        },
        {
            "location": "/introduction/about-esp8266/#esp8266",
            "text": "ESP8266 l\u00e0 d\u00f2ng chip t\u00edch h\u1ee3p Wi-Fi 2.4Ghz c\u00f3 th\u1ec3 l\u1eadp tr\u00ecnh \u0111\u01b0\u1ee3c, r\u1ebb ti\u1ec1n \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t b\u1edfi m\u1ed9t c\u00f4ng ty b\u00e1n d\u1eabn Trung Qu\u1ed1c: Espressif Systems.  \u0110\u01b0\u1ee3c ph\u00e1t h\u00e0nh \u0111\u1ea7u ti\u00ean v\u00e0o th\u00e1ng 8 n\u0103m 2014, \u0111\u00f3ng g\u00f3i \u0111\u01b0a ra th\u1ecb tr\u01b0\u1eddng d\u1ea1ng M\u00f4 dun ESP-01, \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t b\u1edfi b\u00ean th\u1ee9 3: AI-Thinker. C\u00f3 kh\u1ea3 n\u0103ng k\u1ebft n\u1ed1i Internet qua m\u1ea1ng Wi-Fi m\u1ed9t c\u00e1ch nhanh ch\u00f3ng v\u00e0 s\u1eed d\u1ee5ng r\u1ea5t \u00edt linh ki\u1ec7n \u0111i k\u00e8m. V\u1edbi gi\u00e1 c\u1ea3 c\u00f3 th\u1ec3 n\u00f3i l\u00e0 r\u1ea5t r\u1ebb so v\u1edbi t\u00ednh n\u0103ng v\u00e0 kh\u1ea3 n\u0103ng ESP8266 c\u00f3 th\u1ec3 l\u00e0m \u0111\u01b0\u1ee3c.  ESP8266 c\u00f3 m\u1ed9t c\u1ed9ng \u0111\u1ed3ng c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n tr\u00ean th\u1ebf gi\u1edbi r\u1ea5t l\u1edbn, cung c\u1ea5p nhi\u1ec1u Module l\u1eadp tr\u00ecnh m\u00e3 m\u1edf gi\u00fap nhi\u1ec1u ng\u01b0\u1eddi c\u00f3 th\u1ec3 ti\u1ebfp c\u1eadn v\u00e0 x\u00e2y d\u1ef1ng \u1ee9ng d\u1ee5ng r\u1ea5t nhanh.  Hi\u1ec7n nay t\u1ea5t c\u1ea3 c\u00e1c d\u00f2ng chip ESP8266 tr\u00ean th\u1ecb tr\u01b0\u1eddng \u0111\u1ec1u mang nh\u00e3n ESP8266EX, l\u00e0 phi\u00ean b\u1ea3n n\u00e2ng c\u1ea5p c\u1ee7a ESP8266",
            "title": "ESP8266"
        },
        {
            "location": "/introduction/about-esp8266/#so-o-chan-so-o-khoi",
            "text": ".S\u01a1 \u0111\u1ed3 ch\u00e2n & s\u01a1 \u0111\u1ed3 kh\u1ed1i ESP8266EX",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n &amp; S\u01a1 \u0111\u1ed3 kh\u1ed1i"
        },
        {
            "location": "/introduction/about-esp8266/#thong-so-phan-cung",
            "text": "32-bit RISC CPU : Tensilica Xtensa LX106 running at 80 MHz  H\u1ed5 tr\u1ee3 Flash ngo\u00e0i t\u1eeb 512KiB \u0111\u1ebfn 4MiB  64KBytes RAM th\u1ef1c thi l\u1ec7nh  96KBytes RAM d\u1eef li\u1ec7u  64KBytes boot ROM  Chu\u1ea9n wifi EEE 802.11 b/g/n, Wi-Fi 2.4 GHz  T\u00edch h\u1ee3p TR switch, balun, LNA, khu\u1ebfch \u0111\u1ea1i c\u00f4ng su\u1ea5t v\u00e0 matching network  H\u1ed5 tr\u1ee3 WEP, WPA/WPA2, Open network  T\u00edch h\u1ee3p giao th\u1ee9c TCP/IP  H\u1ed5 tr\u1ee3 nhi\u1ec1u lo\u1ea1i anten  16 ch\u00e2n GPIO  H\u1ed5 tr\u1ee3 SDIO 2.0, UART, SPI, I\u00b2C, PWM,I\u00b2S v\u1edbi DMA  1 ADC 10-bit  D\u1ea3i nhi\u1ec7t \u0111\u1ed9 ho\u1ea1t \u0111\u1ed9ng r\u1ed9ng : -40C ~ 125C",
            "title": "Th\u00f4ng s\u1ed1 ph\u1ea7n c\u1ee9ng"
        },
        {
            "location": "/introduction/about-esp8266/#sdk-ho-tro-chinh-thuc-tu-hang",
            "text": "T\u1ea1i th\u1eddi \u0111i\u1ec3m xu\u1ea5t b\u1ea3n s\u00e1ch n\u00e0y, Espressif \u0111\u00e3 h\u1ed7 tr\u1ee3 2 n\u1ec1n t\u1ea3ng SDK (Software Development Kit - G\u00f3i ph\u00e1t tri\u1ec3n ph\u1ea7n m\u1ec1m) \u0111\u1ed9c l\u1eadp, l\u00e0:  NONOS SDK  v\u00e0  RTOS SDK . C\u1ea3 2 \u0111\u1ec1u c\u00f3 nh\u1eefng \u01b0u \u0111i\u1ec3m ri\u00eang ph\u00f9 h\u1ee3p v\u1edbi t\u1eebng \u1ee9ng d\u1ee5ng nh\u1ea5t \u0111\u1ecbnh, v\u00e0 s\u1eed d\u1ee5ng chung nhi\u1ec1u c\u00e1c h\u00e0m \u0111i\u1ec1u khi\u1ec3n ph\u1ea7n c\u1ee9ng. Tuy nhi\u00ean  NONOS SDK  \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 c\u1eadp nh\u1eadt s\u1edbm nh\u1ea5t, nhi\u1ec1u t\u00ednh n\u0103ng nh\u1ea5t v\u00e0 \u0111\u01a1n gi\u1ea3n, d\u1ec5 s\u1eed d\u1ee5ng h\u01a1n. Ch\u00ednh v\u00ec v\u1eady  NONOS SDK  s\u1ebd l\u00e0 SDK \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ch\u00ednh th\u1ee9c \u1edf t\u1ea5t c\u1ea3 c\u00e1c h\u01b0\u1edbng d\u1eabn c\u1ee7a cu\u1ed1n s\u00e1ch n\u00e0y.",
            "title": "SDK h\u1ed7 tr\u1ee3 ch\u00ednh th\u1ee9c t\u1eeb h\u00e3ng"
        },
        {
            "location": "/introduction/about-esp8266/#esp8266-nonos-sdk",
            "text": "Hi\u1ec7n nay,  NONOS SDK  phi\u00ean b\u1ea3n t\u1eeb  2.0.0  tr\u1edf l\u00ean \u0111\u00e3 \u1ed5n \u0111\u1ecbnh v\u00e0 cung c\u1ea5p g\u1ea7n nh\u01b0 l\u00e0 \u0111\u1ea7y \u0111\u1ee7 t\u1ea5t c\u1ea3 c\u00e1c t\u00ednh n\u0103ng m\u00e0 ESP8266 c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n:   C\u00e1c API cho Timer, System, Wifi, \u0111\u1ecdc ghi SPI Flash, Sleep v\u00e0 c\u00e1c Module ph\u1ea7n c\u1ee9ng: GPIO, SPI, I\u00b2C, PWM, I\u00b2S v\u1edbi DMA.  Smartconfig : H\u1ed7 tr\u1ee3 c\u1ea5u h\u00ecnh th\u00f4ng s\u1ed1 Wi-Fi cho ESP8266 nhanh ch\u00f3ng.  Sniffer  API: B\u1eaft c\u00e1c g\u00f3i tin trong m\u1ea1ng kh\u00f4ng d\u00e2y 2.4Ghz.  SNTP  API: \u0110\u1ed3ng b\u1ed9 th\u1eddi gian v\u1edbi M\u00e1y ch\u1ee7 th\u1eddi gian.  WPA2 Enterprise  API: Cung c\u1ea5p vi\u1ec7c qu\u1ea3n l\u00fd k\u1ebft n\u1ed1i Wi-Fi b\u1eb1ng t\u00e0i kho\u1ea3n s\u1eed d\u1ee5ng c\u00e1c m\u00e1y ch\u1ee7 RADIUS.  TCP/UDP  API: Cho k\u1ebft n\u1ed1i internet, v\u00e0 h\u1ed7 tr\u1ee3 c\u00e1c Module d\u1ef1a tr\u00ean, nh\u01b0: HTTP, MQTT, CoAP.  mDNS  API: Gi\u00fap t\u00ecm ra  IP  c\u1ee7a thi\u1ebft b\u1ecb trong m\u1ea1ng n\u1ed9i b\u1ed9 b\u1eb1ng t\u00ean (hostname).  MESH  API: Li\u00ean k\u1ebft c\u00e1c module ESP8266 v\u1edbi c\u1ea5u tr\u00fac m\u1ea1ng MESH  FOTA  API: Firmware Over The Air - c\u1eadp nh\u1eadt firmware t\u1eeb xa cho thi\u1ebft b\u1ecb .  ESP-Now  API: S\u1eed d\u1ee5ng c\u00e1c g\u00f3i tin Wireless 2.4GHz trao \u0111\u1ed5i tr\u1ef1c ti\u1ebfp v\u1edbi ESP8266 kh\u00e1c m\u00e0 kh\u00f4ng c\u1ea7n k\u1ebft n\u1ed1i t\u1edbi Access Point.  Simple Pair  API: Thi\u1ebft l\u1eadp k\u1ebft n\u1ed1i b\u1ea3o m\u1eadt gi\u1eefa 2 thi\u1ebft b\u1ecb t\u1ef1 \u0111\u1ed9ng.",
            "title": "ESP8266 NONOS SDK"
        },
        {
            "location": "/introduction/about-esp8266/#esp8266-rtos-sdk",
            "text": "RTOS SDK  s\u1eed d\u1ee5ng  FreeRTOS  l\u00e0m n\u1ec1n t\u1ea3ng, \u0111\u1ed3ng th\u1eddi h\u1ea7u h\u1ebft c\u00e1c API c\u1ee7a  NON OS  SDK \u0111\u1ec1u c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng v\u1edbi  RTOS SDK .",
            "title": "ESP8266 RTOS SDK"
        },
        {
            "location": "/introduction/about-esp8266/#esp8285",
            "text": "ESP8285 l\u00e0 m\u1ed9t phi\u00ean b\u1ea3n kh\u00e1c sau n\u00e0y c\u1ee7a ESP8266EX, gi\u1ed1ng ho\u00e0n to\u00e0n ESP8266EX ngo\u1ea1i tr\u1eeb vi\u1ec7c thay v\u00ec d\u00f9ng SPI FLASH b\u00ean ngo\u00e0i th\u00ec ESP8285 t\u00edch h\u1ee3p 1MiB Flash b\u00ean trong gi\u00fap gi\u1ea3m di\u1ec7n t\u00edch ph\u1ea7n c\u1ee9ng v\u00e0 \u0111\u01a1n gi\u1ea3n h\u00f3a qu\u00e1 tr\u00ecnh s\u1ea3n xu\u1ea5t.",
            "title": "ESP8285"
        },
        {
            "location": "/introduction/about-esp8266/#so-o-chan",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/about-esp8266/#thong-so-phan-cung_1",
            "text": "",
            "title": "Th\u00f4ng s\u1ed1 ph\u1ea7n c\u1ee9ng"
        },
        {
            "location": "/introduction/esp-module/",
            "text": "C\u00e1c lo\u1ea1i Module ESP8266\n#\n\n\nESP8266 c\u1ea7n \u00edt nh\u1ea5t th\u00eam 7 linh ki\u1ec7n n\u1eefa m\u1edbi c\u00f3 th\u1ec3 ho\u1ea1t \u0111\u1ed9ng, trong \u0111\u00f3 ph\u1ea7n kh\u00f3 nh\u1ea5t l\u00e0 Antena. \u0110\u00f2i h\u1ecfi ph\u1ea3i \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t, ki\u1ec3m tra v\u1edbi c\u00e1c thi\u1ebft b\u1ecb hi\u1ec7n \u0111\u1ea1i. Do \u0111\u00f3, tr\u00ean th\u1ecb tr\u01b0\u1eddng xu\u1ea5t hi\u1ec7n nhi\u1ec1u Module v\u00e0 Board m\u1ea1ch ph\u00e1t tri\u1ec3n \u0111\u1ea3m \u0111\u01b0\u01a1ng h\u1ebft \u0111\u1ec3 ng\u01b0\u1eddi d\u00f9ng \u0111\u01a1n gi\u1ea3n nh\u1ea5t trong vi\u1ec7c ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng. M\u1ed9t s\u1ed1 Module v\u00e0 Board ph\u00e1t tri\u1ec3n ph\u1ed5 bi\u1ebfn:\n\n\nB\u1ea3ng so s\u00e1nh c\u00e1c th\u00f4ng s\u1ed1\n#\n\n\n\n\n\n\n\n\nPhi\u00ean b\u1ea3n\n\n\nS\u1ed1 ch\u00e2n\n\n\npitch\n\n\nform factor\n\n\nLEDs\n\n\nAntenna\n\n\nAnt.Socket\n\n\nShielded\n\n\nd\u00e0i mm\n\n\n\n\n\n\n\n\n\n\nESP-01\n\n\n8\n\n\n.1\u201c\n\n\n2\u00d74 DIL\n\n\nYes\n\n\nEtched-on PCB\n\n\nNo\n\n\nNo\n\n\n14.3 x 24.8\n\n\n\n\n\n\nESP-02\n\n\n8\n\n\n.1\u201d\n\n\n2\u00d74 notch\n\n\nNo?\n\n\nNone\n\n\nYes\n\n\nNo\n\n\n14.2 x 14.2\n\n\n\n\n\n\nESP-03\n\n\n14\n\n\n2mm\n\n\n2\u00d77 notch\n\n\nNo\n\n\nCeramic\n\n\nNo\n\n\nNo\n\n\n17.3 x 12.1\n\n\n\n\n\n\nESP-04\n\n\n14\n\n\n2mm\n\n\n2\u00d74 notch\n\n\nNo?\n\n\nNone\n\n\nNo\n\n\nNo\n\n\n14.7 x 12.1\n\n\n\n\n\n\nESP-05\n\n\n5\n\n\n.1\u201c\n\n\n1\u00d75 SIL\n\n\nNo\n\n\nNone\n\n\nYes\n\n\nNo\n\n\n14.2 x 14.2\n\n\n\n\n\n\nESP-06\n\n\n12+GND\n\n\nmisc\n\n\n4\u00d73 dice\n\n\nNo\n\n\nNone\n\n\nNo\n\n\nYes\n\n\n16.3 x 13.1\n\n\n\n\n\n\nESP-07\n\n\n16\n\n\n2mm\n\n\n2\u00d78 pinhole\n\n\nYes\n\n\nCeramic\n\n\nYes\n\n\nYes\n\n\n20.0 x 16.0\n\n\n\n\n\n\nESP-08\n\n\n14\n\n\n2mm\n\n\n2\u00d77 notch\n\n\nNo\n\n\nNone\n\n\nNo\n\n\nYes\n\n\n17.0 x 16.0\n\n\n\n\n\n\nESP-08 New\n\n\n16\n\n\n2mm\n\n\n2\u00d78 notch\n\n\nNo\n\n\nNone\n\n\nNo\n\n\nYes\n\n\n18.0 x 16.0\n\n\n\n\n\n\nESP-09\n\n\n12+GND\n\n\nmisc\n\n\n4\u00d73 dice\n\n\nNo\n\n\nNone\n\n\nNo\n\n\nNo\n\n\n10.0 x 10.0\n\n\n\n\n\n\nESP-10\n\n\n5\n\n\n2mmm?\n\n\n1\u00d75 notch\n\n\nNo\n\n\nNone\n\n\nNo\n\n\nNo\n\n\n14.2 x 10.0\n\n\n\n\n\n\nESP-11\n\n\n8\n\n\n1.27mm\n\n\n1\u00d78 pinhole\n\n\nNo?\n\n\nCeramic\n\n\nNo\n\n\nNo\n\n\n17.3 x 12.1\n\n\n\n\n\n\nESP-12\n\n\n16\n\n\n2mm\n\n\n2\u00d78 notch\n\n\nYes\n\n\nEtched-on PCB\n\n\nNo\n\n\nYes\n\n\n24.0 x 16.0\n\n\n\n\n\n\nESP-12-E\n\n\n22\n\n\n2mm\n\n\n2\u00d78 notch\n\n\nYes\n\n\nEtched-on PCB\n\n\nNo\n\n\nYes\n\n\n24.0 x 16.0\n\n\n\n\n\n\nESP-13\n\n\n18\n\n\n1.5mm\n\n\n2\u00d79\n\n\n?\n\n\nEtched-on PCB\n\n\nNo\n\n\nYes\n\n\n? x ?\n\n\n\n\n\n\nESP-14\n\n\n22\n\n\n2mm\n\n\n2\u00d78 + 6\n\n\n1\n\n\nEtched-on PCB\n\n\nNo\n\n\nYes\n\n\n24.3 x 16.2\n\n\n\n\n\n\nWROOM-02\n\n\n18\n\n\n1.5mm\n\n\n2\u00d79\n\n\nNo\n\n\nEtched on PCB\n\n\nNo\n\n\nYes\n\n\n20.0 x 18.0\n\n\n\n\n\n\nWT8266-S1\n\n\n18\n\n\n1.5mm\n\n\n3\u00d76\n\n\n1\n\n\nEtched on PCB\n\n\nNo\n\n\nYes\n\n\n15.0 x 18.6\n\n\n\n\n\n\n\n\nM\u1ed9t s\u1ed1 module ESP8266 tr\u00ean th\u1ecb tr\u01b0\u1eddng\n#\n\n\nESP-WROOM-02\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nESP-WROOM-02 l\u00e0 m\u1ed9t module MCU Wifi 32-bit ti\u1ebft ki\u1ec7m n\u0103ng l\u01b0\u1ee3ng d\u1ef1a tr\u00ean chip ESP8266.\n\n\nH\u1ed5 tr\u1ee3 c\u00e1c chu\u1ea9n m\u1ea1ng kh\u00f4ng d\u00e2y 802.11 b/g/n\n\n\nT\u00edch h\u1ee3p s\u1eb3n giao th\u1ee9c TCP/IP, 10-bit ADC, TR switch, balun, LNA, v\u00e0 c\u00e1c chu\u1ea9n giao ti\u1ebfp HSPI/UART/PWM/I2C/I2S.\n\n\nH\u1ed5 tr\u1ee3 Wi-Fi Alliance, SRRC, FCC, CE, TELEC, IC & KCC Certified, RoHS, Halogen Free, REACH & CFSI Compliant, HTOL, ESD-HM, MSL, \u03bcHAST, HTSL\n\n\nH\u1ed5 tr\u1ee3 Cloud Server Development\n\n\nCustom firmware development qua SDK\n\n\nC\u1ea5u h\u00ecnh ng\u01b0\u1eddi d\u00f9ng qua AT Instruction Set, Cloud Server v\u00e0 \u1ee9ng d\u1ee5ng Afdroid/iOS\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-01\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nM\u1ea1ch nh\u1ecf, g\u1ecdn (24.75mm x 14.5mm)\n\n\n\u0110i\u1ec7n \u00e1p l\u00e0m vi\u1ec7c 3.3v\n\n\nT\u00edch h\u1ee3p s\u1eb3n anten PCB trace tr\u00ean module \n\n\nC\u00f3 hai led b\u00e1o hi\u1ec7u : led ngu\u1ed3n, led TXD\n\n\nC\u00f3 c\u00e1c ch\u1ebf \u0111\u1ed9: AP, STA, AT + STA\n\n\nL\u1ec7nh AT r\u1ea5t \u0111\u01a1n gi\u1ea3n, d\u1ec5 d\u00e0ng s\u1eed d\u1ee5ng\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-02\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nS\u1eed d\u1ee5ng anten ngo\u00e0i - U.FL\n\n\nWireless network mode : station, softAP, softAP + station\n\n\nT\u1ea7n s\u1ed1 wifi ho\u1ea1t \u0111\u1ed9ng 2.4GHz, v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nD\u1ec5 d\u00e0ng ph\u00e1t tri\u1ec3n c\u00e1c d\u1ef1 \u00e1n v\u1edbi l\u1ec7nh AT\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-03\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nT\u00edch h\u1ee3p s\u1eb3n anten ceramic tr\u00ean module v\u00e0 1 pin\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, 2.4GHz\n\n\nWireless network mode : station, softAP, softAP + station\n\n\nH\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nD\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-04\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nWireless network mode : station, softAP, softAP + station\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz,v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nD\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-05\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nS\u1eed d\u1ee5ng anten ngo\u00e0i - U.FL\n\n\nWireless network mode : station, softAP, softAP + station\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nD\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-06\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nWireless network mode : station, softAP, softAP + station\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nH\u1ed5 tr\u1ee3 TCP/UDP\n\n\nD\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-07\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nT\u00edch h\u1ee3p s\u1eb3n anten ceramic v\u00e0 anten ngo\u00e0i U.FL\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nH\u1ed5 tr\u1ee3 TCP/UDP\n\n\nD\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-08\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nH\u1ed5 tr\u1ee3 TCP/UDP\n\n\nC\u00f3 c\u00e1c ch\u1ebf \u0111\u1ed9: AP, STA, AT + STA\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-09\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nK\u00edch th\u01b0\u1edbc m\u1ea1ch nh\u1ecf (10mmx10mm)\n\n\nH\u1ed5 tr\u1ee3 LWIP\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-10\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nH\u1ed5 tr\u1ee3 TCP/UDP\n\n\nC\u00f3 c\u00e1c ch\u1ebf \u0111\u1ed9: AP, STA, AT + STA\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-11\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nT\u00edch h\u1ee3p s\u1eb3n anten ceramic tr\u00ean module\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nD\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 1.27mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-12\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nT\u00edch h\u1ee3p anten PCB trace tr\u00ean module\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-12E\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nT\u00edch h\u1ee3p anten PCB trace tr\u00ean module\n\n\n4MB flash\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-13\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nT\u00edch h\u1ee3p anten PCB trace tr\u00ean module\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 1.5mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nESP-14\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nT\u00edch h\u1ee3p anten PCB trace tr\u00ean module\n\n\nT\u00edch h\u1ee3p th\u00eam STM8S003F3P6, STM8S c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n ESP8266 b\u1eb1ng l\u1ec7nh AT\n\n\nTi\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2\n\n\nKho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#\n\n\n\n\n\n\nWT8266-S1\n#\n\n\n\n\nT\u00ednh n\u0103ng\n#\n\n\n\n\nS\u1eed d\u1ee5ng ngu\u1ed3n 3.3v\n\n\nNhi\u1ec7t \u0111\u1ed9 ho\u1ea1t \u0111\u1ed9ng  : -20\u00b0C - 70\u00b0C\n\n\nChip Tensilica L106\n\n\nRAM 36KB\n\n\nFlash 16Mbit\n\n\n\n\n\n\nH\u1ec7 th\u1ed1ng \n\n\nH\u1ed5 tr\u1ee3 c\u00e1c chu\u1ea9n wifi 802.11 b/g/n \n\n\nT\u1ea7n s\u1ed1 ho\u1ea1t \u0111\u1ed9ng h\u1ed5 tr\u1ee3 t\u1eeb 80MHz \u0111\u1ebfn 160 MHz, h\u1ed5 tr\u1ee3 RTOS\n\n\nWIFI 2.4 GHz, h\u1ed5 tr\u1ee3 WPA/WPA2 \n\n\nT\u00edch h\u1ee3p 10-bit ADC \u0111\u1ed9 ch\u00ednh x\u00e1c cao\n\n\nH\u1ed5 tr\u1ee3 TCP/IP stack\n\n\nT\u00edch h\u1ee3p TR Switch/balun/LNA/b\u1ed9 khu\u1ebfch \u0111\u1ea1i c\u00f4ng su\u1ea5t v\u00e0 matching network\n\n\nT\u00edch h\u1ee3p anten PCB trace tr\u00ean module\n\n\nH\u1ed5 tr\u1ee3 n\u00e2ng c\u1ea5p AT t\u1eeb xa v\u00e0 cloud OTA\n\n\n\n\n\n\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n\n#",
            "title": "C\u00e1c lo\u1ea1i Module"
        },
        {
            "location": "/introduction/esp-module/#cac-loai-module-esp8266",
            "text": "ESP8266 c\u1ea7n \u00edt nh\u1ea5t th\u00eam 7 linh ki\u1ec7n n\u1eefa m\u1edbi c\u00f3 th\u1ec3 ho\u1ea1t \u0111\u1ed9ng, trong \u0111\u00f3 ph\u1ea7n kh\u00f3 nh\u1ea5t l\u00e0 Antena. \u0110\u00f2i h\u1ecfi ph\u1ea3i \u0111\u01b0\u1ee3c s\u1ea3n xu\u1ea5t, ki\u1ec3m tra v\u1edbi c\u00e1c thi\u1ebft b\u1ecb hi\u1ec7n \u0111\u1ea1i. Do \u0111\u00f3, tr\u00ean th\u1ecb tr\u01b0\u1eddng xu\u1ea5t hi\u1ec7n nhi\u1ec1u Module v\u00e0 Board m\u1ea1ch ph\u00e1t tri\u1ec3n \u0111\u1ea3m \u0111\u01b0\u01a1ng h\u1ebft \u0111\u1ec3 ng\u01b0\u1eddi d\u00f9ng \u0111\u01a1n gi\u1ea3n nh\u1ea5t trong vi\u1ec7c ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng. M\u1ed9t s\u1ed1 Module v\u00e0 Board ph\u00e1t tri\u1ec3n ph\u1ed5 bi\u1ebfn:",
            "title": "C\u00e1c lo\u1ea1i Module ESP8266"
        },
        {
            "location": "/introduction/esp-module/#bang-so-sanh-cac-thong-so",
            "text": "Phi\u00ean b\u1ea3n  S\u1ed1 ch\u00e2n  pitch  form factor  LEDs  Antenna  Ant.Socket  Shielded  d\u00e0i mm      ESP-01  8  .1\u201c  2\u00d74 DIL  Yes  Etched-on PCB  No  No  14.3 x 24.8    ESP-02  8  .1\u201d  2\u00d74 notch  No?  None  Yes  No  14.2 x 14.2    ESP-03  14  2mm  2\u00d77 notch  No  Ceramic  No  No  17.3 x 12.1    ESP-04  14  2mm  2\u00d74 notch  No?  None  No  No  14.7 x 12.1    ESP-05  5  .1\u201c  1\u00d75 SIL  No  None  Yes  No  14.2 x 14.2    ESP-06  12+GND  misc  4\u00d73 dice  No  None  No  Yes  16.3 x 13.1    ESP-07  16  2mm  2\u00d78 pinhole  Yes  Ceramic  Yes  Yes  20.0 x 16.0    ESP-08  14  2mm  2\u00d77 notch  No  None  No  Yes  17.0 x 16.0    ESP-08 New  16  2mm  2\u00d78 notch  No  None  No  Yes  18.0 x 16.0    ESP-09  12+GND  misc  4\u00d73 dice  No  None  No  No  10.0 x 10.0    ESP-10  5  2mmm?  1\u00d75 notch  No  None  No  No  14.2 x 10.0    ESP-11  8  1.27mm  1\u00d78 pinhole  No?  Ceramic  No  No  17.3 x 12.1    ESP-12  16  2mm  2\u00d78 notch  Yes  Etched-on PCB  No  Yes  24.0 x 16.0    ESP-12-E  22  2mm  2\u00d78 notch  Yes  Etched-on PCB  No  Yes  24.0 x 16.0    ESP-13  18  1.5mm  2\u00d79  ?  Etched-on PCB  No  Yes  ? x ?    ESP-14  22  2mm  2\u00d78 + 6  1  Etched-on PCB  No  Yes  24.3 x 16.2    WROOM-02  18  1.5mm  2\u00d79  No  Etched on PCB  No  Yes  20.0 x 18.0    WT8266-S1  18  1.5mm  3\u00d76  1  Etched on PCB  No  Yes  15.0 x 18.6",
            "title": "B\u1ea3ng so s\u00e1nh c\u00e1c th\u00f4ng s\u1ed1"
        },
        {
            "location": "/introduction/esp-module/#mot-so-module-esp8266-tren-thi-truong",
            "text": "",
            "title": "M\u1ed9t s\u1ed1 module ESP8266 tr\u00ean th\u1ecb tr\u01b0\u1eddng"
        },
        {
            "location": "/introduction/esp-module/#esp-wroom-02",
            "text": "",
            "title": "ESP-WROOM-02"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang",
            "text": "ESP-WROOM-02 l\u00e0 m\u1ed9t module MCU Wifi 32-bit ti\u1ebft ki\u1ec7m n\u0103ng l\u01b0\u1ee3ng d\u1ef1a tr\u00ean chip ESP8266.  H\u1ed5 tr\u1ee3 c\u00e1c chu\u1ea9n m\u1ea1ng kh\u00f4ng d\u00e2y 802.11 b/g/n  T\u00edch h\u1ee3p s\u1eb3n giao th\u1ee9c TCP/IP, 10-bit ADC, TR switch, balun, LNA, v\u00e0 c\u00e1c chu\u1ea9n giao ti\u1ebfp HSPI/UART/PWM/I2C/I2S.  H\u1ed5 tr\u1ee3 Wi-Fi Alliance, SRRC, FCC, CE, TELEC, IC & KCC Certified, RoHS, Halogen Free, REACH & CFSI Compliant, HTOL, ESD-HM, MSL, \u03bcHAST, HTSL  H\u1ed5 tr\u1ee3 Cloud Server Development  Custom firmware development qua SDK  C\u1ea5u h\u00ecnh ng\u01b0\u1eddi d\u00f9ng qua AT Instruction Set, Cloud Server v\u00e0 \u1ee9ng d\u1ee5ng Afdroid/iOS  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-01",
            "text": "",
            "title": "ESP-01"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_1",
            "text": "M\u1ea1ch nh\u1ecf, g\u1ecdn (24.75mm x 14.5mm)  \u0110i\u1ec7n \u00e1p l\u00e0m vi\u1ec7c 3.3v  T\u00edch h\u1ee3p s\u1eb3n anten PCB trace tr\u00ean module   C\u00f3 hai led b\u00e1o hi\u1ec7u : led ngu\u1ed3n, led TXD  C\u00f3 c\u00e1c ch\u1ebf \u0111\u1ed9: AP, STA, AT + STA  L\u1ec7nh AT r\u1ea5t \u0111\u01a1n gi\u1ea3n, d\u1ec5 d\u00e0ng s\u1eed d\u1ee5ng  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_1",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-02",
            "text": "",
            "title": "ESP-02"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_2",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  S\u1eed d\u1ee5ng anten ngo\u00e0i - U.FL  Wireless network mode : station, softAP, softAP + station  T\u1ea7n s\u1ed1 wifi ho\u1ea1t \u0111\u1ed9ng 2.4GHz, v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  D\u1ec5 d\u00e0ng ph\u00e1t tri\u1ec3n c\u00e1c d\u1ef1 \u00e1n v\u1edbi l\u1ec7nh AT  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_2",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-03",
            "text": "",
            "title": "ESP-03"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_3",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  T\u00edch h\u1ee3p s\u1eb3n anten ceramic tr\u00ean module v\u00e0 1 pin  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, 2.4GHz  Wireless network mode : station, softAP, softAP + station  H\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  D\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_3",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-04",
            "text": "",
            "title": "ESP-04"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_4",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  Wireless network mode : station, softAP, softAP + station  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz,v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  D\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_4",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-05",
            "text": "",
            "title": "ESP-05"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_5",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  S\u1eed d\u1ee5ng anten ngo\u00e0i - U.FL  Wireless network mode : station, softAP, softAP + station  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  D\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2.54mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_5",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-06",
            "text": "",
            "title": "ESP-06"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_6",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  Wireless network mode : station, softAP, softAP + station  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  H\u1ed5 tr\u1ee3 TCP/UDP  D\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_6",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-07",
            "text": "",
            "title": "ESP-07"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_7",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  T\u00edch h\u1ee3p s\u1eb3n anten ceramic v\u00e0 anten ngo\u00e0i U.FL  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  H\u1ed5 tr\u1ee3 TCP/UDP  D\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_7",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-08",
            "text": "",
            "title": "ESP-08"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_8",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  H\u1ed5 tr\u1ee3 TCP/UDP  C\u00f3 c\u00e1c ch\u1ebf \u0111\u1ed9: AP, STA, AT + STA  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_8",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-09",
            "text": "",
            "title": "ESP-09"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_9",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  K\u00edch th\u01b0\u1edbc m\u1ea1ch nh\u1ecf (10mmx10mm)  H\u1ed5 tr\u1ee3 LWIP  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_9",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-10",
            "text": "",
            "title": "ESP-10"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_10",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  H\u1ed5 tr\u1ee3 TCP/UDP  C\u00f3 c\u00e1c ch\u1ebf \u0111\u1ed9: AP, STA, AT + STA  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_10",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-11",
            "text": "",
            "title": "ESP-11"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_11",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  T\u00edch h\u1ee3p s\u1eb3n anten ceramic tr\u00ean module  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  D\u1ec5 d\u00e1ng s\u1eed d\u1ee5ng v\u1edbi l\u1ec7nh AT  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 1.27mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_11",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-12",
            "text": "",
            "title": "ESP-12"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_12",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  T\u00edch h\u1ee3p anten PCB trace tr\u00ean module  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_12",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-12e",
            "text": "",
            "title": "ESP-12E"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_13",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  T\u00edch h\u1ee3p anten PCB trace tr\u00ean module  4MB flash  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_13",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-13",
            "text": "",
            "title": "ESP-13"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_14",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  T\u00edch h\u1ee3p anten PCB trace tr\u00ean module  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 1.5mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_14",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#esp-14",
            "text": "",
            "title": "ESP-14"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_15",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  T\u00edch h\u1ee3p anten PCB trace tr\u00ean module  T\u00edch h\u1ee3p th\u00eam STM8S003F3P6, STM8S c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n ESP8266 b\u1eb1ng l\u1ec7nh AT  Ti\u00eau chu\u1ea9n wifi : 802.11b/g/n, v\u1edbi t\u1ea7n s\u1ed1 2.4GHz v\u00e0 h\u1ed5 tr\u1ee3 b\u1ea3o m\u1eadt WPA/WPA2  Kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c ch\u00e2n 2mm",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_15",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/esp-module/#wt8266-s1",
            "text": "",
            "title": "WT8266-S1"
        },
        {
            "location": "/introduction/esp-module/#tinh-nang_16",
            "text": "S\u1eed d\u1ee5ng ngu\u1ed3n 3.3v  Nhi\u1ec7t \u0111\u1ed9 ho\u1ea1t \u0111\u1ed9ng  : -20\u00b0C - 70\u00b0C  Chip Tensilica L106  RAM 36KB  Flash 16Mbit    H\u1ec7 th\u1ed1ng   H\u1ed5 tr\u1ee3 c\u00e1c chu\u1ea9n wifi 802.11 b/g/n   T\u1ea7n s\u1ed1 ho\u1ea1t \u0111\u1ed9ng h\u1ed5 tr\u1ee3 t\u1eeb 80MHz \u0111\u1ebfn 160 MHz, h\u1ed5 tr\u1ee3 RTOS  WIFI 2.4 GHz, h\u1ed5 tr\u1ee3 WPA/WPA2   T\u00edch h\u1ee3p 10-bit ADC \u0111\u1ed9 ch\u00ednh x\u00e1c cao  H\u1ed5 tr\u1ee3 TCP/IP stack  T\u00edch h\u1ee3p TR Switch/balun/LNA/b\u1ed9 khu\u1ebfch \u0111\u1ea1i c\u00f4ng su\u1ea5t v\u00e0 matching network  T\u00edch h\u1ee3p anten PCB trace tr\u00ean module  H\u1ed5 tr\u1ee3 n\u00e2ng c\u1ea5p AT t\u1eeb xa v\u00e0 cloud OTA",
            "title": "T\u00ednh n\u0103ng"
        },
        {
            "location": "/introduction/esp-module/#so-o-chan_16",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 ch\u00e2n"
        },
        {
            "location": "/introduction/board/",
            "text": "Board m\u1ea1ch ph\u00e1t tri\u1ec3n\n#\n\n\nNodeMCU\n#\n\n\nWemos\n#\n\n\n\u2026",
            "title": "Board ph\u00e1t tri\u1ec3n"
        },
        {
            "location": "/introduction/board/#board-mach-phat-trien",
            "text": "",
            "title": "Board m\u1ea1ch ph\u00e1t tri\u1ec3n"
        },
        {
            "location": "/introduction/board/#nodemcu",
            "text": "",
            "title": "NodeMCU"
        },
        {
            "location": "/introduction/board/#wemos",
            "text": "\u2026",
            "title": "Wemos"
        },
        {
            "location": "/introduction/prepare/",
            "text": "Ph\u1ea7n c\u1ee9ng v\u00e0 ki\u1ebfn th\u1ee9c c\u1ea7n chu\u1ea9n b\u1ecb\n#\n\n\nGi\u1ed1ng nh\u01b0 t\u1ea5t c\u1ea3 c\u00e1c Vi \u0111i\u1ec1u khi\u1ec3n kh\u00e1c, vi\u1ec7c l\u1eadp tr\u00ecnh cho ESP8266 c\u1ea7n nh\u1eefng ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh \nC\n c\u0169ng nh\u01b0 ph\u1ea7n c\u1ee9ng \u0111\u1ec3 th\u1ef1c h\u00e0nh. Trong s\u00e1ch n\u00e0y ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng m\u1ea1ch ph\u00e1t tri\u1ec3n NodeMCU \u0111\u1ec3 th\u1eed nghi\u1ec7m t\u1ea5t c\u1ea3 c\u00e1c v\u00ed d\u1ee5 m\u1eabu.\n\n\nM\u1ea1ch ph\u00e1t tri\u1ec3n NodeMCU\n#\n\n\nM\u1ea1ch n\u00e0y c\u00f3 b\u00e1n r\u1ed9ng r\u00e3i tr\u00ean th\u1ecb tr\u01b0\u1eddng, ti\u1ec7n l\u1ee3i khi ph\u00e1t tri\u1ec3n, v\u00e0 \u0111\u01b0\u1ee3c cung c\u1ea5p \u0111\u1ea7y \u0111\u1ee7 m\u1ea1ch nguy\u00ean l\u00fd, m\u1edf v\u1ec1 ph\u1ea7n c\u1ee9ng. Chip USB-TTL h\u1ed7 tr\u1ee3 DTR v\u00e0 RTS cho ph\u00e9p ph\u1ea7n m\u1ec1m n\u1ea1p \nesptool.py\n c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n ESP8266 v\u00e0o ch\u1ebf \u0111\u1ed9 n\u1ea1p lu\u00f4n m\u00e0 kh\u00f4ng c\u1ea7n thao t\u00e1c ph\u1ea7n c\u1ee9ng n\u00e0o.\n\n\nCh\u00fa \u00fd\n#\n\n\nT\u1edbi th\u1eddi \u0111i\u1ec3m hi\u1ec7n nay, c\u00f4ng c\u1ee5 n\u1ea1p cho ESP8266 c\u00f3 th\u1ec3 \u0111\u1ea1t t\u1ed1c \u0111\u1ed9 921600 baud. Tuy nhi\u00ean, c\u00e1c m\u1ea1ch NodeMCU hi\u1ec7n tr\u00ean th\u1ecb tr\u01b0\u1eddng s\u1eed d\u1ee5ng nhi\u1ec1u lo\u1ea1i chip USB-TTL kh\u00e1c nhau, n\u00ean c\u1ea7n ki\u1ec3m tra t\u1ed1c \u0111\u1ed9 h\u1ed7 tr\u1ee3 tr\u01b0\u1edbc khi mua. N\u1ebfu t\u1ed1c \u0111\u1ed9 th\u1ea5p, th\u00ec vi\u1ec7c n\u1ea1p \u1ee9ng d\u1ee5ng cho ESP8266 kh\u00e1 l\u00e2u cho nh\u1eefng \u1ee9ng d\u1ee5ng l\u1edbn.\n\n\nhttps://github.com/nodemcu/nodemcu-devkit-v1.0\n\n\nS\u01a1 \u0111\u1ed3 ch\u00e2n & s\u01a1 \u0111\u1ed3 kh\u1ed1i ESP8266EX\n\n\n\nM\u1ea1ch nguy\u00ean l\u00fd\n#\n\n\n// S\u01a1 \u0111\u1ed3 nguy\u00ean l\u00fd -> SVG\n//image::nodemcu_devkit_1.0.svg[NodeMCU schematic]\n\n\nNh\u1eefng l\u1ef1a ch\u1ecdn kh\u00e1c\n#\n\n\n\n\nWeMos\n\n\nAdafruit\n\n\n\n\nC\u00e0i \u0111\u1eb7t tr\u00ecnh so\u1ea1n th\u1ea3o & c\u00e0i \u0111\u1eb7t ban \u0111\u1ea7u\n#\n\n\nSublime Text 3\n#\n\n\n\n\nLink download: \nhttps://www.sublimetext.com/\n\n\nLearn shortcut: \nhttps://sublime-learning.herokuapp.com/\n\n\nShortcut : \n\n\nhttp://www.hongkiat.com/blog/sublime-text-tips/\n\n\nhttps://www.viget.com/articles/my-overused-sublime-text-keyboard-shortcuts\n\n\n\n\n\n\nGetting started: \nhttps://gist.github.com/anotheruiguy/11054534\n\n\nPlug-ins:\n\n\nhttp://emmet.io/\n\n\nMarkdown Editing\n\n\nSideBarEnhancements\n\n\nGithubEmoji\n\n\nSublimeAStyleFormatter\n - \nRecommend setting for C\n\n\n.editorconfig\n - \nRecommend config\n\n\nGitGutter\n\n\nsublime-text-git\n\n\nBabel\n\n\nhttps://github.com/feross/standard\n\n\nhttps://packagecontrol.io/packages/FileHeader\n\n\n\n\n\n\n\n\nEclipse\n#\n\n\nNotepad++\n#\n\n\nNg\u00f4n ng\u1eef l\u1eadp tr\u00ecnh C\n#\n\n\nT\u1ea5t nhi\u00ean vi\u1ec7c ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng cho nh\u1eefng Vi \u0111i\u1ec1u khi\u1ec3n \u00edt t\u00e0i nguy\u00ean, dung l\u01b0\u1ee3ng b\u1ed9 nh\u1edb c\u00f2n v\u00e0i ch\u1ee5c KiB th\u00ec hi\u1ebfm c\u00f3 s\u1ef1 l\u1ef1a ch\u1ecdn n\u00e0o kh\u00e1c ngo\u00e0i ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh \nC/C++\n. Nh\u1eefng ng\u00f4n ng\u1eef kh\u00e1c nh\u01b0: \nLua\n, \nPython\n c\u0169ng \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n cho ESP8266, nh\u01b0ng \u0111\u1ec3 ho\u00e0n th\u00e0nh c\u00f4ng vi\u1ec7c c\u00e0ng d\u1ec5 d\u00e0ng, th\u00ec \u0111\u00f2i h\u1ecfi t\u00e0i nguy\u00ean c\u00e0ng nhi\u1ec1u. V\u00e0 s\u1ef1 \u1ed5n \u0111\u1ecbnh c\u1ee7a \u1ee9ng d\u1ee5ng s\u1ebd ph\u1ee5 thu\u1ed9c r\u1ea5t nhi\u1ec1u v\u00e0o vi\u1ec7c d\u01b0 gi\u1ea3 t\u00e0i nguy\u00ean. Chip ESP8266 kh\u00f4ng \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 \u0111\u1ee7 t\u00e0i nguy\u00ean ch\u1ea1y \u1ed5n \u0111\u1ecbnh cho c\u00e1c tr\u00ecnh th\u00f4ng d\u1ecbch (Interpreter) n\u00e0y.\n\n\nMakefile\n#\n\n\n\u0110\u1ec3 bi\u00ean d\u1ecbch \u0111\u01b0\u1ee3c ch\u00fang ta c\u1ea7n ho\u00e0n th\u00e0nh vi\u1ec7c c\u00e0i \u0111\u1eb7t tr\u00ecnh bi\u00ean d\u1ecbch b\u00ean tr\u00ean, v\u00e0 t\u00ecm hi\u1ec3u m\u1ed9t ch\u00fat v\u1ec1 k\u1ecbch b\u1ea3n \nMakefile\n. C\u00e1c ki\u1ebfn th\u1ee9c n\u00e0y th\u00f4ng th\u01b0\u1eddng c\u00e1c b\u1ea1n \u0111\u1ec1u ph\u1ea3i bi\u1ebft khi h\u1ecdc v\u1ec1 ng\u00f4n ng\u1eef \nC\n. N\u1ed9i dung ph\u1ea7n n\u00e0y ch\u1ec9 n\u00f3i ng\u1eafn g\u1ecdn, x\u00fac t\u00edch nh\u1eefng g\u00ec c\u1ea7n thi\u1ebft nh\u1ea5t.\n\n\nMakefile\n l\u00e0 c\u00f4ng c\u1ee5 k\u1ecbch b\u1ea3n h\u00f3a qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong h\u1ec7 \u0111i\u1ec1u h\u00e0nh Unix, Linux, t\u1ea5t nhi\u00ean c\u00f3 c\u1ea3 tr\u00ean Windows nh\u01b0ng kh\u00f4ng ph\u1ed5 bi\u1ebfn. N\u00f3 \u0111\u01a1n gi\u1ea3n qu\u00e1 h\u00f3a tr\u00ecnh th\u1ef1c hi\u1ec7n bi\u00ean d\u1ecbch b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng c\u00e1c module c\u00f3 s\u1eb5n trong h\u1ec7 \u0111i\u1ec1u h\u00e0nh.\n\n\nVi\u1ec7c s\u1eed d\u1ee5ng Makefile trong c\u00e1c d\u1ef1 \u00e1n \nC\n \u00edt th\u01b0\u1eddng xuy\u00ean v\u00e0 th\u01b0\u1eddng \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf s\u1eb5n b\u1edfi ng\u01b0\u1eddi t\u1ea1o n\u00ean d\u1ef1 \u00e1n \u0111\u00f3. Do v\u1eady, b\u1ea1n ch\u1ec9 c\u1ea7n hi\u1ec3u s\u01a1 v\u1ec1 \nMakefile\n \u0111\u1ec3 c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng s\u1eeda ch\u1eefa theo \u00fd m\u00ecnh, n\u1ebfu kh\u00f4ng mu\u1ed1n chuy\u00ean s\u00e2u. M\u1ed9t s\u1ed1 t\u1eeb kh\u00f3a google \u0111\u1ec3 d\u1ec5 d\u00e0ng t\u00ecm hi\u1ec3u v\u1ec1 \nMakefile\n: \u201cMakefile basics\u201d, \u201cMakefile tutorial\u201d.\n\n\n\u0110\u1ec3 bi\u00ean d\u1ecbch, b\u1ea1n g\u00f5 \nmake\n t\u1eeb c\u1eeda s\u1ed5 terminal, ch\u01b0\u01a1ng tr\u00ecnh \nmake\n s\u1ebd t\u00ecm v\u00e0 \u0111\u1ecdc file m\u1eb7c \u0111\u1ecbnh c\u00f3 t\u00ean \nMakefile\n \u1edf th\u01b0 m\u1ee5c hi\u1ec7n h\u00e0nh v\u00e0 th\u1ef1c thi n\u00f3.",
            "title": "Ph\u1ea7n c\u1ee9ng & c\u00f4ng c\u1ee5"
        },
        {
            "location": "/introduction/prepare/#phan-cung-va-kien-thuc-can-chuan-bi",
            "text": "Gi\u1ed1ng nh\u01b0 t\u1ea5t c\u1ea3 c\u00e1c Vi \u0111i\u1ec1u khi\u1ec3n kh\u00e1c, vi\u1ec7c l\u1eadp tr\u00ecnh cho ESP8266 c\u1ea7n nh\u1eefng ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh  C  c\u0169ng nh\u01b0 ph\u1ea7n c\u1ee9ng \u0111\u1ec3 th\u1ef1c h\u00e0nh. Trong s\u00e1ch n\u00e0y ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng m\u1ea1ch ph\u00e1t tri\u1ec3n NodeMCU \u0111\u1ec3 th\u1eed nghi\u1ec7m t\u1ea5t c\u1ea3 c\u00e1c v\u00ed d\u1ee5 m\u1eabu.",
            "title": "Ph\u1ea7n c\u1ee9ng v\u00e0 ki\u1ebfn th\u1ee9c c\u1ea7n chu\u1ea9n b\u1ecb"
        },
        {
            "location": "/introduction/prepare/#mach-phat-trien-nodemcu",
            "text": "M\u1ea1ch n\u00e0y c\u00f3 b\u00e1n r\u1ed9ng r\u00e3i tr\u00ean th\u1ecb tr\u01b0\u1eddng, ti\u1ec7n l\u1ee3i khi ph\u00e1t tri\u1ec3n, v\u00e0 \u0111\u01b0\u1ee3c cung c\u1ea5p \u0111\u1ea7y \u0111\u1ee7 m\u1ea1ch nguy\u00ean l\u00fd, m\u1edf v\u1ec1 ph\u1ea7n c\u1ee9ng. Chip USB-TTL h\u1ed7 tr\u1ee3 DTR v\u00e0 RTS cho ph\u00e9p ph\u1ea7n m\u1ec1m n\u1ea1p  esptool.py  c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n ESP8266 v\u00e0o ch\u1ebf \u0111\u1ed9 n\u1ea1p lu\u00f4n m\u00e0 kh\u00f4ng c\u1ea7n thao t\u00e1c ph\u1ea7n c\u1ee9ng n\u00e0o.",
            "title": "M\u1ea1ch ph\u00e1t tri\u1ec3n NodeMCU"
        },
        {
            "location": "/introduction/prepare/#chu-y",
            "text": "T\u1edbi th\u1eddi \u0111i\u1ec3m hi\u1ec7n nay, c\u00f4ng c\u1ee5 n\u1ea1p cho ESP8266 c\u00f3 th\u1ec3 \u0111\u1ea1t t\u1ed1c \u0111\u1ed9 921600 baud. Tuy nhi\u00ean, c\u00e1c m\u1ea1ch NodeMCU hi\u1ec7n tr\u00ean th\u1ecb tr\u01b0\u1eddng s\u1eed d\u1ee5ng nhi\u1ec1u lo\u1ea1i chip USB-TTL kh\u00e1c nhau, n\u00ean c\u1ea7n ki\u1ec3m tra t\u1ed1c \u0111\u1ed9 h\u1ed7 tr\u1ee3 tr\u01b0\u1edbc khi mua. N\u1ebfu t\u1ed1c \u0111\u1ed9 th\u1ea5p, th\u00ec vi\u1ec7c n\u1ea1p \u1ee9ng d\u1ee5ng cho ESP8266 kh\u00e1 l\u00e2u cho nh\u1eefng \u1ee9ng d\u1ee5ng l\u1edbn.  https://github.com/nodemcu/nodemcu-devkit-v1.0  S\u01a1 \u0111\u1ed3 ch\u00e2n & s\u01a1 \u0111\u1ed3 kh\u1ed1i ESP8266EX",
            "title": "Ch\u00fa \u00fd"
        },
        {
            "location": "/introduction/prepare/#mach-nguyen-ly",
            "text": "// S\u01a1 \u0111\u1ed3 nguy\u00ean l\u00fd -> SVG\n//image::nodemcu_devkit_1.0.svg[NodeMCU schematic]",
            "title": "M\u1ea1ch nguy\u00ean l\u00fd"
        },
        {
            "location": "/introduction/prepare/#nhung-lua-chon-khac",
            "text": "WeMos  Adafruit",
            "title": "Nh\u1eefng l\u1ef1a ch\u1ecdn kh\u00e1c"
        },
        {
            "location": "/introduction/prepare/#cai-at-trinh-soan-thao-cai-at-ban-au",
            "text": "",
            "title": "C\u00e0i \u0111\u1eb7t tr\u00ecnh so\u1ea1n th\u1ea3o &amp; c\u00e0i \u0111\u1eb7t ban \u0111\u1ea7u"
        },
        {
            "location": "/introduction/prepare/#sublime-text-3",
            "text": "Link download:  https://www.sublimetext.com/  Learn shortcut:  https://sublime-learning.herokuapp.com/  Shortcut :   http://www.hongkiat.com/blog/sublime-text-tips/  https://www.viget.com/articles/my-overused-sublime-text-keyboard-shortcuts    Getting started:  https://gist.github.com/anotheruiguy/11054534  Plug-ins:  http://emmet.io/  Markdown Editing  SideBarEnhancements  GithubEmoji  SublimeAStyleFormatter  -  Recommend setting for C  .editorconfig  -  Recommend config  GitGutter  sublime-text-git  Babel  https://github.com/feross/standard  https://packagecontrol.io/packages/FileHeader",
            "title": "Sublime Text 3"
        },
        {
            "location": "/introduction/prepare/#eclipse",
            "text": "",
            "title": "Eclipse"
        },
        {
            "location": "/introduction/prepare/#notepad",
            "text": "",
            "title": "Notepad++"
        },
        {
            "location": "/introduction/prepare/#ngon-ngu-lap-trinh-c",
            "text": "T\u1ea5t nhi\u00ean vi\u1ec7c ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng cho nh\u1eefng Vi \u0111i\u1ec1u khi\u1ec3n \u00edt t\u00e0i nguy\u00ean, dung l\u01b0\u1ee3ng b\u1ed9 nh\u1edb c\u00f2n v\u00e0i ch\u1ee5c KiB th\u00ec hi\u1ebfm c\u00f3 s\u1ef1 l\u1ef1a ch\u1ecdn n\u00e0o kh\u00e1c ngo\u00e0i ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh  C/C++ . Nh\u1eefng ng\u00f4n ng\u1eef kh\u00e1c nh\u01b0:  Lua ,  Python  c\u0169ng \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n cho ESP8266, nh\u01b0ng \u0111\u1ec3 ho\u00e0n th\u00e0nh c\u00f4ng vi\u1ec7c c\u00e0ng d\u1ec5 d\u00e0ng, th\u00ec \u0111\u00f2i h\u1ecfi t\u00e0i nguy\u00ean c\u00e0ng nhi\u1ec1u. V\u00e0 s\u1ef1 \u1ed5n \u0111\u1ecbnh c\u1ee7a \u1ee9ng d\u1ee5ng s\u1ebd ph\u1ee5 thu\u1ed9c r\u1ea5t nhi\u1ec1u v\u00e0o vi\u1ec7c d\u01b0 gi\u1ea3 t\u00e0i nguy\u00ean. Chip ESP8266 kh\u00f4ng \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 \u0111\u1ee7 t\u00e0i nguy\u00ean ch\u1ea1y \u1ed5n \u0111\u1ecbnh cho c\u00e1c tr\u00ecnh th\u00f4ng d\u1ecbch (Interpreter) n\u00e0y.",
            "title": "Ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh C"
        },
        {
            "location": "/introduction/prepare/#makefile",
            "text": "\u0110\u1ec3 bi\u00ean d\u1ecbch \u0111\u01b0\u1ee3c ch\u00fang ta c\u1ea7n ho\u00e0n th\u00e0nh vi\u1ec7c c\u00e0i \u0111\u1eb7t tr\u00ecnh bi\u00ean d\u1ecbch b\u00ean tr\u00ean, v\u00e0 t\u00ecm hi\u1ec3u m\u1ed9t ch\u00fat v\u1ec1 k\u1ecbch b\u1ea3n  Makefile . C\u00e1c ki\u1ebfn th\u1ee9c n\u00e0y th\u00f4ng th\u01b0\u1eddng c\u00e1c b\u1ea1n \u0111\u1ec1u ph\u1ea3i bi\u1ebft khi h\u1ecdc v\u1ec1 ng\u00f4n ng\u1eef  C . N\u1ed9i dung ph\u1ea7n n\u00e0y ch\u1ec9 n\u00f3i ng\u1eafn g\u1ecdn, x\u00fac t\u00edch nh\u1eefng g\u00ec c\u1ea7n thi\u1ebft nh\u1ea5t.  Makefile  l\u00e0 c\u00f4ng c\u1ee5 k\u1ecbch b\u1ea3n h\u00f3a qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong h\u1ec7 \u0111i\u1ec1u h\u00e0nh Unix, Linux, t\u1ea5t nhi\u00ean c\u00f3 c\u1ea3 tr\u00ean Windows nh\u01b0ng kh\u00f4ng ph\u1ed5 bi\u1ebfn. N\u00f3 \u0111\u01a1n gi\u1ea3n qu\u00e1 h\u00f3a tr\u00ecnh th\u1ef1c hi\u1ec7n bi\u00ean d\u1ecbch b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng c\u00e1c module c\u00f3 s\u1eb5n trong h\u1ec7 \u0111i\u1ec1u h\u00e0nh.  Vi\u1ec7c s\u1eed d\u1ee5ng Makefile trong c\u00e1c d\u1ef1 \u00e1n  C  \u00edt th\u01b0\u1eddng xuy\u00ean v\u00e0 th\u01b0\u1eddng \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf s\u1eb5n b\u1edfi ng\u01b0\u1eddi t\u1ea1o n\u00ean d\u1ef1 \u00e1n \u0111\u00f3. Do v\u1eady, b\u1ea1n ch\u1ec9 c\u1ea7n hi\u1ec3u s\u01a1 v\u1ec1  Makefile  \u0111\u1ec3 c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng s\u1eeda ch\u1eefa theo \u00fd m\u00ecnh, n\u1ebfu kh\u00f4ng mu\u1ed1n chuy\u00ean s\u00e2u. M\u1ed9t s\u1ed1 t\u1eeb kh\u00f3a google \u0111\u1ec3 d\u1ec5 d\u00e0ng t\u00ecm hi\u1ec3u v\u1ec1  Makefile : \u201cMakefile basics\u201d, \u201cMakefile tutorial\u201d.  \u0110\u1ec3 bi\u00ean d\u1ecbch, b\u1ea1n g\u00f5  make  t\u1eeb c\u1eeda s\u1ed5 terminal, ch\u01b0\u01a1ng tr\u00ecnh  make  s\u1ebd t\u00ecm v\u00e0 \u0111\u1ecdc file m\u1eb7c \u0111\u1ecbnh c\u00f3 t\u00ean  Makefile  \u1edf th\u01b0 m\u1ee5c hi\u1ec7n h\u00e0nh v\u00e0 th\u1ef1c thi n\u00f3.",
            "title": "Makefile"
        },
        {
            "location": "/nonos-sdk/nonos-sdk/",
            "text": "Gi\u1edbi thi\u1ec7u NonOS - SDK\n#\n\n\n\u0110\u00e2y l\u00e0 g\u00f3i ph\u1ea7n m\u1ec1m h\u1ed7 tr\u1ee3 ch\u00ednh th\u1ee9c t\u1eeb Espressif Systems c\u00f3 nhi\u1ec1u t\u00ednh n\u0103ng v\u00e0 \u1ed5n \u0111\u1ecbnh nh\u1ea5t.",
            "title": "Gi\u1edbi thi\u1ec7u"
        },
        {
            "location": "/nonos-sdk/nonos-sdk/#gioi-thieu-nonos-sdk",
            "text": "\u0110\u00e2y l\u00e0 g\u00f3i ph\u1ea7n m\u1ec1m h\u1ed7 tr\u1ee3 ch\u00ednh th\u1ee9c t\u1eeb Espressif Systems c\u00f3 nhi\u1ec1u t\u00ednh n\u0103ng v\u00e0 \u1ed5n \u0111\u1ecbnh nh\u1ea5t.",
            "title": "Gi\u1edbi thi\u1ec7u NonOS - SDK"
        },
        {
            "location": "/nonos-sdk/basic/basic/",
            "text": "C\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 c\u1ea7n thi\u1ebft\n#\n\n\n\n\nTr\u00ecnh so\u1ea1n th\u1ea3o tr\u00ean m\u00e1y t\u00ednh, \u0111\u1ec3 vi\u1ebft m\u00e3 ngu\u1ed3n \nC\n\n\nTr\u00ecnh bi\u00ean d\u1ecbch, nh\u1eb1m m\u1ee5c \u0111\u1ecbch bi\u00ean d\u1ecbch m\u00e3 ngu\u1ed3n \nC\n sang m\u00e3 m\u00e1y\n\n\nTr\u00ecnh n\u1ea1p, n\u1ea1p m\u00e3 m\u00e1y \u0111\u00e3 bi\u00ean d\u1ecbch xu\u1ed1ng Flash c\u1ee7a ESP8266\n\n\nSDK\n\n\n\n\nC\u00e0i \u0111\u1eb7t tr\u00ecnh bi\u00ean d\u1ecbch & c\u00e1c th\u01b0 vi\u1ec7n c\u01a1 b\u1ea3n\n#\n\n\nMacOS/OSX\n#\n\n\nB\u1ea1n c\u00f3 \u00edt nh\u1ea5t 2 c\u00e1ch \u0111\u1ec3 c\u00f3 tr\u00ecnh bi\u00ean d\u1ecbch, \u0111\u01a1n gi\u1ea3n nh\u1ea5t l\u00e0 t\u1ea3i v\u1ec1 t\u1eeb 1 trong c\u00e1c link sau:\n\n\n\n\nxtensa-lx106-elf.zip\n\n\n\n\nv\u00e0 gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c: \n/tools/esp8266/compiler/\n\n\nC\u00e1ch 2\n ph\u1ee9c t\u1ea1p h\u01a1n, nh\u01b0ng s\u1ebd ph\u00f9 h\u1ee3p v\u1edbi t\u1ea5t c\u1ea3 phi\u00ean b\u1ea3n h\u1ec7 \u0111i\u1ec1u h\u00e0nh c\u1ee7a b\u1ea1n. Bi\u00ean d\u1ecbch Tr\u00ecnh bi\u00ean d\u1ecbch t\u1eeb m\u00e3 ngu\u1ed3n:\n\n\n\nsudo port install git gsed gawk binutils gperf grep gettext py-serial wget libtool autoconf automake \n\nhdiutil create -size 5g -fs \"Case-sensitive HFS+\" -volname ESPTools ESPTools.sparsebundle \nhdiutil attach ESPTools.sparsebundle <3>\nsudo ln -s /Volumes/ESPTools/ /tools <3>\nmkdir /tools/esp8266 <4>\nmkdir /tools/esp8266/sdk <4>\nmkdir /tools/esp8266/compiler <4>\ncd /tools/esp8266/compiler\n\ngit clone -b lx106 git://github.com/jcmvbkbc/crosstool-NG.git <5>\ncd crosstool-NG\nsed -i.bak '1s/^/gettext=\\'$'\\n/' crosstool-NG/kconfig/Makefile\n./bootstrap && ./configure --prefix=`pwd` && make && make install\n./ct-ng xtensa-lx106-elf\n./ct-ng build\n\n\n\n\n\n\nC\u00e1c th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft \u0111\u1ec3 bi\u00ean d\u1ecbch crosstool-NG, s\u1eed d\u1ee5ng MacPorts \u0111\u1ec3 c\u00e0i \u0111\u1eb7t. N\u1ebfu ch\u01b0a c\u00e0i \u0111\u1eb7t MacPorts c\u00f3 th\u1ebb t\u1ea3i t\u1ea1i \u0111\u00e2y: https://www.macports.org/\n\n\nBi\u00ean d\u1ecbch \ncrosstool-NG\n c\u1ea7n \u0111\u1ecbnh d\u1ea1ng \u1ed5 c\u1ee9ng h\u1ed7 tr\u1ee3 ph\u00e2n bi\u1ec7t \u0111\u01b0\u1eddng d\u1eabn ch\u1eef Hoa v\u00e0 ch\u1eef th\u01b0\u1eddng, n\u00ean c\u1ea7n t\u1ea1o m\u1ed9t \u1ed5 \u0111\u0129a \u1ea3o nh\u01b0 v\u1eady.\n\n\nMount \u1ed5 \u0111\u0129a \nESPTools ESPTools.sparsebundle\n t\u1edbi th\u01b0 m\u1ee5c \n/tools/\n\n\nT\u1ea1o c\u00e1c th\u01b0 m\u1ee5c cho \u0111\u1ec3 ch\u1ee9a SDK, tr\u00ecnh bi\u00ean d\u1ecbch v\u00e0 c\u00f4ng c\u1ee5 n\u1ea1p\n\n\nClone d\u1ef1 \u00e1n crosstool-NG, nh\u00e1nh \nlx106\n v\u1ec1, ti\u1ebfn h\u00e0nh c\u00e1c thao t\u00e1c bi\u00ean d\u1ecbch\n\n\n\n\nL\u01b0u \u00fd\n#\n\n\nL\u01b0u \u00fd r\u1eb1ng, qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch c\u1ea7n kho\u1ea3ng 1 gi\u1edd (t\u00f9y c\u1ea5u h\u00ecnh m\u00e1y) v\u00e0 1.5GiB dung l\u01b0\u1ee3ng \u1ed5 c\u1ee9ng tr\u1ed1ng\n\n\nTi\u1ebfp theo, c\u1ea7n ph\u1ea3i th\u00eam \u0111\u01b0\u1eddng d\u1eabn c\u1ee7a compiler v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng \nPATH\n c\u1ee7a h\u1ec7 \u0111i\u1ec1u h\u00e0nh\n\n\necho \"export PATH=$PATH:/tools/esp8266/compiler/crosstool-NG/builds/xtensa-lx106-elf/bin\" >>  ~/.bash_profile <1>\nsource ~/.bash_profile \n\n\n\n\n\n\nTh\u00eam d\u00f2ng \nexport\n v\u00e0o cu\u1ed1i file \n~/.bash_profile\n b\u1eb1ng \necho\n\n\nsource\n \u0111\u1ec3 t\u1ea3i l\u1ea1i bi\u1ebfn m\u00f4i tr\u01b0\u1eddng\n\n\n\n\nKi\u1ec3m tra vi\u1ec7c c\u00e0i \u0111\u1eb7t, C\u00f3 d\u00f2ng n\u00e0y hi\u1ec3n th\u1ecb \u1edf cu\u1ed1i c\u00f9ng th\u00ec vi\u1ec7c c\u00e0i \u0111\u1eb7t d\u00e3 th\u00e0nh c\u00f4ng\n\n\nxtensa-lx106-elf-gcc -v\ngcc version 4.8.2 (crosstool-NG 1.20.0) \n\n\n\n\nWindows\n#\n\n\nC\u00e0i \u0111\u1eb7t Git, Python\n#\n\n\n\n\nGit\n\n\nPython\n\n\nM\u1eb7c \u0111\u1ecbnh python \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t t\u1ea1i \nC:\\Python27\n, th\u00eam \u0111\u01b0\u1eddng d\u1eabn n\u00e0y v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng \nPATH\n (xem h\u01b0\u1edbng d\u1eabn c\u00e1c b\u01b0\u1edbc b\u00ean d\u01b0\u1edbi)\n\n\n\n\n\n\n\n\nC\u00e0i \u0111\u1eb7t MINGW make\n#\n\n\n\n\nT\u1ea3i v\u00e0 c\u00e0i \u0111\u1eb7t \nMingw setup\n \n\n\nT\u1ea3i v\u00e0 ch\u1ea1y t\u1eadp tin \ninstall-mingw-package.bat\n (Run as Administractor) t\u1eeb \nMinGW packages install script\n\n\n\n\nM\u1eb7c \u0111\u1ecbnh MINGW \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t t\u1ea1i \nC:\\MinGW\n, Th\u00eam \u0111\u01b0\u1eddng d\u1eabn \nC:\\MinGW\\msys\\1.0\\bin\\\n v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng \nPATH\n (xem h\u01b0\u1edbng d\u1eabn c\u00e1c b\u01b0\u1edbc b\u00ean d\u01b0\u1edbi). \n\n\nV\u00e0o 1 th\u01b0 m\u1ee5c tr\u1ed1ng b\u1ea5t k\u1ef3 (kh\u00f4ng c\u00f3 ch\u1ee9a \nMakefile\n), ch\u1ea1y \nmake\n m\u00e0 hi\u1ec7n d\u00f2ng n\u00e0y l\u00e0 c\u00e0i \u0111\u1eb7t th\u00e0nh c\u00f4ng:\n\n\ncd C:\\\nmake\nmake: *** No targets specified and no makefile found.  Stop.\n\n\n\n\nT\u1ea3i SDK v\u1ec1 t\u1ea1i m\u1ed9t trong c\u00e1c \u0111\u1ecba ch\u1ec9 sau & c\u00e0i \u0111\u1eb7t:\n#\n\n\n\n\nhttp://programs74.ru/udkew-en.html\n\n\nLink Dropbox\n\n\n\n\n\u0110\u00e2y l\u00e0 b\u1ed9 KIT \u0111\u00e3 bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c c\u00f4ng c\u1ee5, SDK v\u00e0 m\u00e3 ngu\u1ed3n ch\u01b0\u01a1ng tr\u00ecnh c\u1ea7n thi\u1ebft \u0111\u1ec3 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng ESP8266. Tuy kh\u00f4ng ph\u1ea3i l\u00e0 ch\u00ednh th\u1ee9c c\u1ee7a h\u00e3ng (unofficial) nh\u01b0ng thu\u1ed9c d\u1ea1ng t\u1ea5t-c\u1ea3-trong-m\u1ed9t, r\u1ea5t ti\u1ec7n l\u1ee3i & d\u1ec5 s\u1eed d\u1ee5ng.\nV\u1ecb tr\u00ed m\u1eb7c \u0111\u1ecbnh c\u1ee7a b\u1ed9 KIT sau khi c\u00e0i \u0111\u1eb7t l\u00e0 \nC:\\Espressif\n, bao g\u1ed3m:\n\n\n\n\nC:\\Espressif\\xtensa-lx106-elf\\bin\n: tr\u00ecnh bi\u00ean d\u1ecbch xtensa-lx106-elf\n\n\nC:\\Espressif\\utils\\ESP8266\n: c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh ti\u1ec7n \u00edch, v\u00ed d\u1ee5 \nesptool.exe\n \u0111\u1ec3 n\u1ea1p ESP8266\n\n\nC:\\Espressif\\docs\\ESP8266\n: t\u00e0i li\u1ec7u li\u00ean quan.\n\n\nC:\\Espressif\\ESP8266_SDK\n: t\u01b0\u01a1ng \u1ee9ng v\u1edbi b\u1ea3n \nESP8266_NONOS_SDK v2.0.0\n\n\nC:\\Espressif\\ESP8266_RTOS_SDK\n: t\u01b0\u01a1ng \u1ee9ng v\u1edbi b\u1ea3n \nESP8266 RTOS SDK v1.4.0\n\n\nC:\\Espressif\\examples\\ESP8266\n: m\u00e3 ngu\u1ed3n v\u00ed d\u1ee5 c\u00e1c d\u1ef1 \u00e1n.\n\n\n\n\nC\u00e0i \u0111\u1eb7t \u0111\u01b0\u1eddng d\u1eabn \nC:\\Espressif\\xtensa-lx106-elf\\bin\n v\u00e0 \nC:\\Espressif\\utils\\ESP8266\n v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng \nPATH\n c\u1ee7a windows, c\u00f3 2 c\u00e1ch:\n\n\n\n\nC\u00e0i \u0111\u1eb7t c\u1ee9ng trong \nMy Computer\n -> (Chu\u1ed9t ph\u1ea3i) -> \nProperties\n -> \nAdvanced system settings\n -> \nEnvironment Variables...\n -> \nSystem variables\n, ch\u1ecdn gi\u00e1 tr\u1ecb \nPATH\n -> ch\u1ecdn \nEdit...\n -> di chuy\u1ec3n \u0111\u1ebfn cu\u1ed1i chu\u1ed7i, th\u00eam \n;C:\\Espressif\\xtensa-lx106-elf\\bin;C:\\Espressif\\utils\\ESP8266;\n\n\nC\u00e0i \u0111\u1eb7t khi ch\u1ea1y: trong c\u1eeda s\u1ed5 console, nh\u1eadp \nset PATH=%PATH%;C:\\Espressif\\xtensa-lx106-elf\\bin;C:\\Espressif\\utils\\ESP8266;\n\n\n\n\nKi\u1ec3m tra vi\u1ec7c c\u00e0i \u0111\u1eb7t \nxtensa-lx106-elf\n v\u00e0 \nesptool\n, c\u00f3 d\u00f2ng n\u00e0y hi\u1ec3n th\u1ecb \u1edf cu\u1ed1i c\u00f9ng th\u00ec vi\u1ec7c c\u00e0i \u0111\u1eb7t \u0111\u00e3 th\u00e0nh c\u00f4ng:\n\n\nxtensa-lx106-elf-gcc --version\nxtensa-lx106-elf-gcc (GCC) 5.2.0\n\n\n\n\nesptool.py\nusage: esptool [-h] [--port PORT] [--baud BAUD]\n\n\n\n\nLinux\n#\n\n\nC\u00e0i \u0111\u1eb7t Git\n\n\nsudo apt-get update\nsudo apt-get install make unrar-free autoconf automake libtool gcc g++ gperf \\\n    flex bison texinfo gawk ncurses-dev libexpat-dev python-dev python python-serial \\\n    sed git unzip bash help2man wget bzip2\nsudo apt-get install libtool-bin\n\n\n\n\nC\u00e0i \u0111\u1eb7t complier\n\n\nmkdir /tools /tools/esp8266 /tools/esp8266/sdk /tools/esp8266/compiler\ncd /tools/esp8266/compiler\ngit clone -b lx106 git://github.com/jcmvbkbc/crosstool-NG.git \ncd crosstool-NG\n./bootstrap && ./configure --prefix=`pwd` && make && make install\n./ct-ng xtensa-lx106-elf\nunset LD_LIBRARY_PATH\n./ct-ng build\nPATH=$PWD/builds/xtensa-lx106-elf/bin:$PATH\n\n\n\n\nKi\u1ec3m tra vi\u1ec7c c\u00e0i \u0111\u1eb7t b\u1eb1ng l\u1ec7nh\n\n\nxtensa-lx106-elf-gcc -v\n\n\nC\u00f3 d\u00f2ng n\u00e0y hi\u1ec3n th\u1ecb \u1edf cu\u1ed1i c\u00f9ng th\u00ec vi\u1ec7c c\u00e0i \u0111\u1eb7t d\u00e3 th\u00e0nh c\u00f4ng\n\n\nThread model: single\ngcc version 4.8.5 (crosstool-NG crosstool-ng-1.22.0-55-gecfc19a) \n\n\n\n\nT\u1ea3i ESP8266_NONOS_SDK\n#\n\n\nT\u1ea3i ESP8266-NONOS-SDK 2.0 t\u1eeb m\u1ed9t trong c\u00e1c ngu\u1ed3n sau: \n\n\n\n\nhttp://bbs.espressif.com/viewtopic.php?f=46&t=2451\n\n\nDropbox ESP8266-NONOS-SDK\n\n\n\n\nGi\u1ea3i n\u00e9n ra (v\u00ed d\u1ee5 t\u1ea1i th\u01b0 m\u1ee5c: \n/tools/esp8266/sdk/ESP8266_NONOS_SDK\n)\n\n\nT\u1ea3i \nesptool.py\n#\n\n\ncd /tools/esp8266/\ngit clone https://github.com/themadinventor/esptool.git\n\n\n\n\n\nHo\u1eb7c Download t\u1eeb \nDropbox\n v\u00e0 gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c \n/tools/esp8266/\n\n\nT\u1ea3i libc,libhal, file include (v\u1edbi ubuntu th\u00eam l\u1ec7nh sudo tr\u01b0\u1edbc wget)\n#\n\n\ncd tools/esp8266/complier/crosstool-NG/builds/xtensa-lx106-elf/xtensa-lx106-elf/sysroot/usr\nwget -O lib/libc.a https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a\nwget -O lib/libhal.a https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a\nwget -O include.tgz https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz\ntar -xvzf include.tgz\n\n\n\n\nC\u00f4ng c\u1ee5 COM Terminal\n#\n\n\n\n\nMinicom\n\n\nCoolTerm\n (Window, MAC, kh\u00f4ng support Ubuntu)\n\n\nGtkterm\n\n\nC\u00e0i \u0111\u1eb7t\n\napt-get install gtkterm\n\n\nT\u00ecm ki\u1ebfm COM k\u1ebft n\u1ed1i d\u00f9ng l\u1ec7nh \nlsusb\n trong terminal\n\n\nCh\u1ea1y gtkterm\n\nsudo gtkterm\n\n\nC\u1ea5u h\u00ecnh Port v\u00e0 baud trong Configuration>Port\n\n\n\n\n\n\n\n\nT\u00e0i li\u1ec7u t\u1eeb Espressif\n#\n\n\nhttp://espressif.com",
            "title": "C\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 c\u1ea7n thi\u1ebft"
        },
        {
            "location": "/nonos-sdk/basic/basic/#cai-at-cong-cu-can-thiet",
            "text": "Tr\u00ecnh so\u1ea1n th\u1ea3o tr\u00ean m\u00e1y t\u00ednh, \u0111\u1ec3 vi\u1ebft m\u00e3 ngu\u1ed3n  C  Tr\u00ecnh bi\u00ean d\u1ecbch, nh\u1eb1m m\u1ee5c \u0111\u1ecbch bi\u00ean d\u1ecbch m\u00e3 ngu\u1ed3n  C  sang m\u00e3 m\u00e1y  Tr\u00ecnh n\u1ea1p, n\u1ea1p m\u00e3 m\u00e1y \u0111\u00e3 bi\u00ean d\u1ecbch xu\u1ed1ng Flash c\u1ee7a ESP8266  SDK",
            "title": "C\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 c\u1ea7n thi\u1ebft"
        },
        {
            "location": "/nonos-sdk/basic/basic/#cai-at-trinh-bien-dich-cac-thu-vien-co-ban",
            "text": "",
            "title": "C\u00e0i \u0111\u1eb7t tr\u00ecnh bi\u00ean d\u1ecbch &amp; c\u00e1c th\u01b0 vi\u1ec7n c\u01a1 b\u1ea3n"
        },
        {
            "location": "/nonos-sdk/basic/basic/#macososx",
            "text": "B\u1ea1n c\u00f3 \u00edt nh\u1ea5t 2 c\u00e1ch \u0111\u1ec3 c\u00f3 tr\u00ecnh bi\u00ean d\u1ecbch, \u0111\u01a1n gi\u1ea3n nh\u1ea5t l\u00e0 t\u1ea3i v\u1ec1 t\u1eeb 1 trong c\u00e1c link sau:   xtensa-lx106-elf.zip   v\u00e0 gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c:  /tools/esp8266/compiler/  C\u00e1ch 2  ph\u1ee9c t\u1ea1p h\u01a1n, nh\u01b0ng s\u1ebd ph\u00f9 h\u1ee3p v\u1edbi t\u1ea5t c\u1ea3 phi\u00ean b\u1ea3n h\u1ec7 \u0111i\u1ec1u h\u00e0nh c\u1ee7a b\u1ea1n. Bi\u00ean d\u1ecbch Tr\u00ecnh bi\u00ean d\u1ecbch t\u1eeb m\u00e3 ngu\u1ed3n:  \nsudo port install git gsed gawk binutils gperf grep gettext py-serial wget libtool autoconf automake \n\nhdiutil create -size 5g -fs \"Case-sensitive HFS+\" -volname ESPTools ESPTools.sparsebundle \nhdiutil attach ESPTools.sparsebundle <3>\nsudo ln -s /Volumes/ESPTools/ /tools <3>\nmkdir /tools/esp8266 <4>\nmkdir /tools/esp8266/sdk <4>\nmkdir /tools/esp8266/compiler <4>\ncd /tools/esp8266/compiler\n\ngit clone -b lx106 git://github.com/jcmvbkbc/crosstool-NG.git <5>\ncd crosstool-NG\nsed -i.bak '1s/^/gettext=\\'$'\\n/' crosstool-NG/kconfig/Makefile\n./bootstrap && ./configure --prefix=`pwd` && make && make install\n./ct-ng xtensa-lx106-elf\n./ct-ng build   C\u00e1c th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft \u0111\u1ec3 bi\u00ean d\u1ecbch crosstool-NG, s\u1eed d\u1ee5ng MacPorts \u0111\u1ec3 c\u00e0i \u0111\u1eb7t. N\u1ebfu ch\u01b0a c\u00e0i \u0111\u1eb7t MacPorts c\u00f3 th\u1ebb t\u1ea3i t\u1ea1i \u0111\u00e2y: https://www.macports.org/  Bi\u00ean d\u1ecbch  crosstool-NG  c\u1ea7n \u0111\u1ecbnh d\u1ea1ng \u1ed5 c\u1ee9ng h\u1ed7 tr\u1ee3 ph\u00e2n bi\u1ec7t \u0111\u01b0\u1eddng d\u1eabn ch\u1eef Hoa v\u00e0 ch\u1eef th\u01b0\u1eddng, n\u00ean c\u1ea7n t\u1ea1o m\u1ed9t \u1ed5 \u0111\u0129a \u1ea3o nh\u01b0 v\u1eady.  Mount \u1ed5 \u0111\u0129a  ESPTools ESPTools.sparsebundle  t\u1edbi th\u01b0 m\u1ee5c  /tools/  T\u1ea1o c\u00e1c th\u01b0 m\u1ee5c cho \u0111\u1ec3 ch\u1ee9a SDK, tr\u00ecnh bi\u00ean d\u1ecbch v\u00e0 c\u00f4ng c\u1ee5 n\u1ea1p  Clone d\u1ef1 \u00e1n crosstool-NG, nh\u00e1nh  lx106  v\u1ec1, ti\u1ebfn h\u00e0nh c\u00e1c thao t\u00e1c bi\u00ean d\u1ecbch",
            "title": "MacOS/OSX"
        },
        {
            "location": "/nonos-sdk/basic/basic/#luu-y",
            "text": "L\u01b0u \u00fd r\u1eb1ng, qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch c\u1ea7n kho\u1ea3ng 1 gi\u1edd (t\u00f9y c\u1ea5u h\u00ecnh m\u00e1y) v\u00e0 1.5GiB dung l\u01b0\u1ee3ng \u1ed5 c\u1ee9ng tr\u1ed1ng  Ti\u1ebfp theo, c\u1ea7n ph\u1ea3i th\u00eam \u0111\u01b0\u1eddng d\u1eabn c\u1ee7a compiler v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng  PATH  c\u1ee7a h\u1ec7 \u0111i\u1ec1u h\u00e0nh  echo \"export PATH=$PATH:/tools/esp8266/compiler/crosstool-NG/builds/xtensa-lx106-elf/bin\" >>  ~/.bash_profile <1>\nsource ~/.bash_profile    Th\u00eam d\u00f2ng  export  v\u00e0o cu\u1ed1i file  ~/.bash_profile  b\u1eb1ng  echo  source  \u0111\u1ec3 t\u1ea3i l\u1ea1i bi\u1ebfn m\u00f4i tr\u01b0\u1eddng   Ki\u1ec3m tra vi\u1ec7c c\u00e0i \u0111\u1eb7t, C\u00f3 d\u00f2ng n\u00e0y hi\u1ec3n th\u1ecb \u1edf cu\u1ed1i c\u00f9ng th\u00ec vi\u1ec7c c\u00e0i \u0111\u1eb7t d\u00e3 th\u00e0nh c\u00f4ng  xtensa-lx106-elf-gcc -v\ngcc version 4.8.2 (crosstool-NG 1.20.0)",
            "title": "L\u01b0u \u00fd"
        },
        {
            "location": "/nonos-sdk/basic/basic/#windows",
            "text": "",
            "title": "Windows"
        },
        {
            "location": "/nonos-sdk/basic/basic/#cai-at-git-python",
            "text": "Git  Python  M\u1eb7c \u0111\u1ecbnh python \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t t\u1ea1i  C:\\Python27 , th\u00eam \u0111\u01b0\u1eddng d\u1eabn n\u00e0y v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng  PATH  (xem h\u01b0\u1edbng d\u1eabn c\u00e1c b\u01b0\u1edbc b\u00ean d\u01b0\u1edbi)",
            "title": "C\u00e0i \u0111\u1eb7t Git, Python"
        },
        {
            "location": "/nonos-sdk/basic/basic/#cai-at-mingw-make",
            "text": "T\u1ea3i v\u00e0 c\u00e0i \u0111\u1eb7t  Mingw setup    T\u1ea3i v\u00e0 ch\u1ea1y t\u1eadp tin  install-mingw-package.bat  (Run as Administractor) t\u1eeb  MinGW packages install script   M\u1eb7c \u0111\u1ecbnh MINGW \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t t\u1ea1i  C:\\MinGW , Th\u00eam \u0111\u01b0\u1eddng d\u1eabn  C:\\MinGW\\msys\\1.0\\bin\\  v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng  PATH  (xem h\u01b0\u1edbng d\u1eabn c\u00e1c b\u01b0\u1edbc b\u00ean d\u01b0\u1edbi).   V\u00e0o 1 th\u01b0 m\u1ee5c tr\u1ed1ng b\u1ea5t k\u1ef3 (kh\u00f4ng c\u00f3 ch\u1ee9a  Makefile ), ch\u1ea1y  make  m\u00e0 hi\u1ec7n d\u00f2ng n\u00e0y l\u00e0 c\u00e0i \u0111\u1eb7t th\u00e0nh c\u00f4ng:  cd C:\\\nmake\nmake: *** No targets specified and no makefile found.  Stop.",
            "title": "C\u00e0i \u0111\u1eb7t MINGW make"
        },
        {
            "location": "/nonos-sdk/basic/basic/#tai-sdk-ve-tai-mot-trong-cac-ia-chi-sau-cai-at",
            "text": "http://programs74.ru/udkew-en.html  Link Dropbox   \u0110\u00e2y l\u00e0 b\u1ed9 KIT \u0111\u00e3 bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c c\u00f4ng c\u1ee5, SDK v\u00e0 m\u00e3 ngu\u1ed3n ch\u01b0\u01a1ng tr\u00ecnh c\u1ea7n thi\u1ebft \u0111\u1ec3 ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng ESP8266. Tuy kh\u00f4ng ph\u1ea3i l\u00e0 ch\u00ednh th\u1ee9c c\u1ee7a h\u00e3ng (unofficial) nh\u01b0ng thu\u1ed9c d\u1ea1ng t\u1ea5t-c\u1ea3-trong-m\u1ed9t, r\u1ea5t ti\u1ec7n l\u1ee3i & d\u1ec5 s\u1eed d\u1ee5ng.\nV\u1ecb tr\u00ed m\u1eb7c \u0111\u1ecbnh c\u1ee7a b\u1ed9 KIT sau khi c\u00e0i \u0111\u1eb7t l\u00e0  C:\\Espressif , bao g\u1ed3m:   C:\\Espressif\\xtensa-lx106-elf\\bin : tr\u00ecnh bi\u00ean d\u1ecbch xtensa-lx106-elf  C:\\Espressif\\utils\\ESP8266 : c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh ti\u1ec7n \u00edch, v\u00ed d\u1ee5  esptool.exe  \u0111\u1ec3 n\u1ea1p ESP8266  C:\\Espressif\\docs\\ESP8266 : t\u00e0i li\u1ec7u li\u00ean quan.  C:\\Espressif\\ESP8266_SDK : t\u01b0\u01a1ng \u1ee9ng v\u1edbi b\u1ea3n  ESP8266_NONOS_SDK v2.0.0  C:\\Espressif\\ESP8266_RTOS_SDK : t\u01b0\u01a1ng \u1ee9ng v\u1edbi b\u1ea3n  ESP8266 RTOS SDK v1.4.0  C:\\Espressif\\examples\\ESP8266 : m\u00e3 ngu\u1ed3n v\u00ed d\u1ee5 c\u00e1c d\u1ef1 \u00e1n.   C\u00e0i \u0111\u1eb7t \u0111\u01b0\u1eddng d\u1eabn  C:\\Espressif\\xtensa-lx106-elf\\bin  v\u00e0  C:\\Espressif\\utils\\ESP8266  v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng  PATH  c\u1ee7a windows, c\u00f3 2 c\u00e1ch:   C\u00e0i \u0111\u1eb7t c\u1ee9ng trong  My Computer  -> (Chu\u1ed9t ph\u1ea3i) ->  Properties  ->  Advanced system settings  ->  Environment Variables...  ->  System variables , ch\u1ecdn gi\u00e1 tr\u1ecb  PATH  -> ch\u1ecdn  Edit...  -> di chuy\u1ec3n \u0111\u1ebfn cu\u1ed1i chu\u1ed7i, th\u00eam  ;C:\\Espressif\\xtensa-lx106-elf\\bin;C:\\Espressif\\utils\\ESP8266;  C\u00e0i \u0111\u1eb7t khi ch\u1ea1y: trong c\u1eeda s\u1ed5 console, nh\u1eadp  set PATH=%PATH%;C:\\Espressif\\xtensa-lx106-elf\\bin;C:\\Espressif\\utils\\ESP8266;   Ki\u1ec3m tra vi\u1ec7c c\u00e0i \u0111\u1eb7t  xtensa-lx106-elf  v\u00e0  esptool , c\u00f3 d\u00f2ng n\u00e0y hi\u1ec3n th\u1ecb \u1edf cu\u1ed1i c\u00f9ng th\u00ec vi\u1ec7c c\u00e0i \u0111\u1eb7t \u0111\u00e3 th\u00e0nh c\u00f4ng:  xtensa-lx106-elf-gcc --version\nxtensa-lx106-elf-gcc (GCC) 5.2.0  esptool.py\nusage: esptool [-h] [--port PORT] [--baud BAUD]",
            "title": "T\u1ea3i SDK v\u1ec1 t\u1ea1i m\u1ed9t trong c\u00e1c \u0111\u1ecba ch\u1ec9 sau &amp; c\u00e0i \u0111\u1eb7t:"
        },
        {
            "location": "/nonos-sdk/basic/basic/#linux",
            "text": "C\u00e0i \u0111\u1eb7t Git  sudo apt-get update\nsudo apt-get install make unrar-free autoconf automake libtool gcc g++ gperf \\\n    flex bison texinfo gawk ncurses-dev libexpat-dev python-dev python python-serial \\\n    sed git unzip bash help2man wget bzip2\nsudo apt-get install libtool-bin  C\u00e0i \u0111\u1eb7t complier  mkdir /tools /tools/esp8266 /tools/esp8266/sdk /tools/esp8266/compiler\ncd /tools/esp8266/compiler\ngit clone -b lx106 git://github.com/jcmvbkbc/crosstool-NG.git \ncd crosstool-NG\n./bootstrap && ./configure --prefix=`pwd` && make && make install\n./ct-ng xtensa-lx106-elf\nunset LD_LIBRARY_PATH\n./ct-ng build\nPATH=$PWD/builds/xtensa-lx106-elf/bin:$PATH  Ki\u1ec3m tra vi\u1ec7c c\u00e0i \u0111\u1eb7t b\u1eb1ng l\u1ec7nh  xtensa-lx106-elf-gcc -v  C\u00f3 d\u00f2ng n\u00e0y hi\u1ec3n th\u1ecb \u1edf cu\u1ed1i c\u00f9ng th\u00ec vi\u1ec7c c\u00e0i \u0111\u1eb7t d\u00e3 th\u00e0nh c\u00f4ng  Thread model: single\ngcc version 4.8.5 (crosstool-NG crosstool-ng-1.22.0-55-gecfc19a)",
            "title": "Linux"
        },
        {
            "location": "/nonos-sdk/basic/basic/#tai-esp8266_nonos_sdk",
            "text": "T\u1ea3i ESP8266-NONOS-SDK 2.0 t\u1eeb m\u1ed9t trong c\u00e1c ngu\u1ed3n sau:    http://bbs.espressif.com/viewtopic.php?f=46&t=2451  Dropbox ESP8266-NONOS-SDK   Gi\u1ea3i n\u00e9n ra (v\u00ed d\u1ee5 t\u1ea1i th\u01b0 m\u1ee5c:  /tools/esp8266/sdk/ESP8266_NONOS_SDK )",
            "title": "T\u1ea3i ESP8266_NONOS_SDK"
        },
        {
            "location": "/nonos-sdk/basic/basic/#tai-esptoolpy",
            "text": "cd /tools/esp8266/\ngit clone https://github.com/themadinventor/esptool.git  Ho\u1eb7c Download t\u1eeb  Dropbox  v\u00e0 gi\u1ea3i n\u00e9n v\u00e0o th\u01b0 m\u1ee5c  /tools/esp8266/",
            "title": "T\u1ea3i esptool.py"
        },
        {
            "location": "/nonos-sdk/basic/basic/#tai-libclibhal-file-include-voi-ubuntu-them-lenh-sudo-truoc-wget",
            "text": "cd tools/esp8266/complier/crosstool-NG/builds/xtensa-lx106-elf/xtensa-lx106-elf/sysroot/usr\nwget -O lib/libc.a https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a\nwget -O lib/libhal.a https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a\nwget -O include.tgz https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz\ntar -xvzf include.tgz",
            "title": "T\u1ea3i libc,libhal, file include (v\u1edbi ubuntu th\u00eam l\u1ec7nh sudo tr\u01b0\u1edbc wget)"
        },
        {
            "location": "/nonos-sdk/basic/basic/#cong-cu-com-terminal",
            "text": "Minicom  CoolTerm  (Window, MAC, kh\u00f4ng support Ubuntu)  Gtkterm  C\u00e0i \u0111\u1eb7t apt-get install gtkterm  T\u00ecm ki\u1ebfm COM k\u1ebft n\u1ed1i d\u00f9ng l\u1ec7nh  lsusb  trong terminal  Ch\u1ea1y gtkterm sudo gtkterm  C\u1ea5u h\u00ecnh Port v\u00e0 baud trong Configuration>Port",
            "title": "C\u00f4ng c\u1ee5 COM Terminal"
        },
        {
            "location": "/nonos-sdk/basic/basic/#tai-lieu-tu-espressif",
            "text": "http://espressif.com",
            "title": "T\u00e0i li\u1ec7u t\u1eeb Espressif"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/",
            "text": "Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n\n\nL\u1ea5y d\u1ef1 \u00e1n m\u1eabu t\u1eeb Github:\n\n\nS\u01a1 \u0111\u1ed3 file\n\n\nMakefile\n\n\nrf_init.c\n\n\nmain.c\n\n\n\n\n\n\nBi\u00ean d\u1ecbch\n\n\nK\u1ebft qu\u1ea3\n\n\n\n\n\n\n\n\n\n\nBi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n#\n\n\nTr\u01b0\u1edbc khi bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1eabu, b\u1ea1n c\u1ea7n ph\u1ea3i c\u00e0i \u0111\u1eb7t \u0111\u1ea7y \u0111\u1ee7 \nTr\u00ecnh bi\u00ean d\u1ecbch\n, t\u1ea3i v\u1ec1 \nesptool.py\n v\u00e0 \nESP8266-NONOS-SDK\n nh\u01b0 h\u01b0\u1edbng d\u1eabn C\u00e0i \u0111\u1eb7t\n\n\nTrong ph\u1ea7n n\u00e0y s\u1ebd tr\u00ecnh b\u00e0y r\u1ea5t chi ti\u1ebft \u0111\u1ec3 bi\u00ean d\u1ecbch m\u1ed9t d\u1ef1 \u00e1n ho\u00e0n ch\u1ec9nh, bao g\u1ed3m m\u1ed9t s\u1ed1 ki\u1ebfn th\u1ee9c b\u1ed5 tr\u1ee3 li\u00ean quan t\u1edbi l\u1eadp tr\u00ecnh \nC\n v\u00e0 \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch r\u00f5 r\u00e0ng, c\u1ea9n th\u1eadn. B\u1ea1n c\u00f3 th\u1ec3 b\u1ecf qua ph\u1ea7n n\u00e0y n\u1ebfu \u0111\u00e3 hi\u1ec3u r\u00f5 v\u1ec1 \nl\u1eadp tr\u00ecnh C\n\n\n\n\nN\u1ed9i dung\n\n\nHi\u1ec3n th\u1ecb \nhelloworld\n tr\u00ean terminal\n\n\n\n\nL\u1ea5y d\u1ef1 \u00e1n m\u1eabu t\u1eeb Github:\n#\n\n\nB\u1ea1n c\u00f3 th\u1ec3 l\u1ea5y d\u1ef1 \u00e1n m\u1eabu t\u1eeb github v\u00e0 bi\u00ean d\u1ecbch ngay:\n\n\ngit clone https://github.com/esp8266vn/esp-iot-basic.git\ncd esp-iot-basic && make\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\nesp-iot-basic\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h\n\n\n\n\n\n\nMakefile\n Gi\u00fap cho c\u00f4ng c\u1ee5 \nmake\n th\u1ef1c hi\u1ec7n vi\u1ec7c bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1ed9t c\u00e1ch t\u1ef1 \u0111\u1ed9ng\n\n\nmain.c\n Ch\u1ee9a m\u00e3 ngu\u1ed3n th\u1ef1c thi ch\u00ednh c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh\n\n\nrf_init.c\n Khi kh\u1edfi \u0111\u1ed9ng, {esp} s\u1ebd th\u1ef1c hi\u1ec7n m\u1ed9t s\u1ed1 l\u1ec7nh c\u1ea5u h\u00ecnh RF (thu ph\u00e1t kh\u00f4ng d\u00e2y), SDK s\u1ebd g\u1ecdi c\u00e1c h\u00e0m n\u00e0y. B\u1ea1n b\u1eaft bu\u1ed9c ph\u1ea3i cung c\u1ea5p gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 cho n\u00f3.\n\n\nuser_config.h\n Khi bi\u00ean d\u1ecbch, SDK s\u1ebd \ninclude\n file n\u00e0y, b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ec3 file tr\u1ed1ng kh\u00f4ng n\u1ed9i dung.\n\n\n\n\nMakefile\n#\n\n\n#esp-iot-basic/Makefile\nXTENSA    ?= \nSDK_BASE  ?= /tools/esp8266/sdk/ESP8266_NONOS_SDK \nESPTOOL   ?= /tools/esp8266/esptool/esptool.py\nSDK_LIBS  := -lc -lgcc -lhal -lphy -lpp -lnet80211 -lwpa -lmain\\\n            -llwip -lcrypto -ljson \nCC        := $(XTENSA)xtensa-lx106-elf-gcc\nLD        := $(XTENSA)xtensa-lx106-elf-gcc\nAR        := $(XTENSA)xtensa-lx106-elf-ar\nLDFLAGS   = -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static\nCFLAGS    = -g -Wpointer-arith -Wundef -Wl,-EL -fno-inline-functions -nostdlib\\ \n        -mlongcalls -mtext-section-literals -ffunction-sections -fdata-sections\\\n        -fno-builtin-printf -DICACHE_FLASH\\\n        -I.\\\n        -I$(SDK_BASE)/include\nLD_SCRIPT = -T$(SDK_BASE)/ld/eagle.app.v6.ld \n\nall: main.bin\n\nmain.bin: main.out\n  $(ESPTOOL) elf2image $(ESPTOOL_FLASHDEF) main.out -o main\n\nmain.out: main.a\n  @echo \"LD main.out\"\n  $(LD) -L$(SDK_BASE)/lib $(LD_SCRIPT) $(LDFLAGS) -L$(SDK_BASE)/lib\\\n  -Wl,--start-group $(SDK_LIBS) main.a -Wl,--end-group -o main.out \n\nmain.a: main.o\n  @echo \"AR main.o\"\n  $(AR) cru main.a main.\n\nmain.o:\n  @echo \"CC main.c & rf_init.c\"\n  $(CC) $(CFLAGS) -c main.c -o main.o <14>\n  $(CC) $(CFLAGS) -c rf_init.c -o rf_init.o <14>\n\nclean:\n  rm -rf *.o *.bin *.a *.out \n\nflash:\n  $(ESPTOOL) --port /dev/tty.SLAB_USBtoUART \\\n                   --baud 480600 \\\n                   write_flash --flash_freq 40m --flash_mode dio --flash_size 32m \\\n                   0x00000 main0x00000.bin \\\n                   0x10000 main0x10000.bin \\\n                   0x3fc000 $(SDK_BASE)/bin/esp_init_data_default.bin\n.PHONY: all clean flash\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nN\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng v\u00ed d\u1ee5 n\u00e0y cho b\u1ea3n Unofficial Developement KIT tr\u00ean Windows, v\u1edbi \u0111\u01b0\u1eddng d\u1eabn c\u00e0i \u0111\u1eb7t m\u1eb7c \u0111\u1ecbnh l\u00e0 \nC:\\Espressif\n, Makefile c\u1ea7n thay \u0111\u1ed5i nh\u01b0 sau:\n\n\n\n\nXTENSA    ?=\nSDK_BASE  ?= C:/Espressif/ESP8266_SDK\nESPTOOL   ?= C:/Espressif/utils/ESP8266/esptool.py\n...\n# V\u00ed d\u1ee5 c\u1ed5ng serial d\u00f9ng \u0111\u1ec3 n\u1ea1p cho ESP8266 l\u00e0 COM3:\nflash:\n   $(ESPTOOL) --port COM3 \\\n          --baud 480600 \\\n          write_flash --flash_freq 40m --flash_mode dio --flash_size 32m \\\n          0x00000 main0x00000.bin \\\n          0x10000 main0x10000.bin \\\n          0x3fc000 $(SDK_BASE)/bin/esp_init_data_default.bin\n\n\n\n\nGi\u1ea3i th\u00edch Makefile nh\u01b0 sau:\n\n\n\n\nXTENSA\n \u0110\u01b0\u1eddng d\u1eabn t\u1edbi tr\u00ecnh bi\u00ean d\u1ecbch, \u0111\u1ec3 tr\u1ed1ng n\u1ebfu b\u1ea1n \u0111\u00e3 th\u00eam v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng \nPATH\n c\u1ee7a h\u1ec7 \u0111i\u1ec1u h\u00e0nh, ho\u1eb7c c\u00f3 d\u1ea1ng \n/tools/esp8266/compiler/xtensa-lx106-elf/bin/\n\n\nSDK_BASE\n \u0110\u01b0\u1eddng d\u1eabn t\u1edbi \nSDK\n, n\u1ebfu l\u00e0 Windows c\u00f3 d\u1ea1ng \nC:\\Espressif\\ESP8266_NONOS_SDK\n\n\nESPTOOL\n \u0110\u01b0\u1eddng d\u1eabn t\u1edbi \nesptool.py\n, nh\u1edb \u0111\u1ea3m b\u1ea3o quy\u1ec1n th\u1ef1c thi cho file n\u00e0y (th\u1ef1c hi\u1ec7n l\u1ec7nh \nchmod +x\n)\n\n\nSDK_LIBS\n C\u00e1c th\u01b0 vi\u1ec7n \u0111i k\u00e8m v\u1edbi \nSDK\n, v\u00ed d\u1ee5 n\u1ebfu b\u1ea1n d\u00f9ng \nsmartconfig\n th\u00ec th\u00eam v\u00e0o \n-lsmartconfig\n\n\nCC\n, \nAR\n, \nLD\n \u0110\u1ecbnh ngh\u0129a ng\u1eafn g\u1ecdn Compiler, Linker, Archiver\n\n\nLDFLAGS\n l\u00e0 c\u1edd d\u00e0nh cho Linker \n\n\nCFLAGS\n l\u00e0 c\u1edd d\u00e0nh cho Compiler\n\n\nC\u1edd \n-I.\n \u0111\u1ec3 b\u00e1o Compiler bi\u1ebft c\u00f3 th\u1ec3 t\u00ecm header file (t\u1eeb kh\u00f3a \n#include\n) trong th\u01b0 m\u1ee5c hi\u1ec7n t\u1ea1i v\u00e0 SDK include\n\n\nLD_SCRIPT\n Linker scirpt m\u1eb7c \u0111\u1ecbnh c\u1ee7a \nSDK\n cho chip ESP8266\n\n\n\n\nM\u1eb7c \u0111\u1ecbnh khi g\u1ecdi \nmake\n hay \nmake all\n s\u1ebd g\u1ecdi \nall\n, nh\u01b0ng tr\u01b0\u1edbc \u0111\u00f3 s\u1ebd c\u1ea7n g\u1ecdi \nmain.bin\n\n\n\n\n\n\nTh\u1ef1c hi\u1ec7n \nmake clean\n x\u00f3a h\u1ebft c\u00e1c file \u0111\u01b0\u1ee3c t\u1ea1o ra khi g\u1ecdi \nmake all\n\n\n\n\nTh\u1ef1c hi\u1ec7n \nmake flash\n \u0111\u1ec3 n\u1ea1p ESP8266, c\u1ea7n ch\u1eafc ch\u1eafc m\u1ea1ch n\u1ea1p \u0111\u00e3 \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i m\u00e1y t\u00ednh, v\u00e0 t\u00ean c\u1ed5ng \u0111\u01b0\u1ee3c thay th\u1ebf \u0111\u00fang cho \n/dev/tty.SLAB_USBtoUART\n (th\u01b0\u1eddng v\u1edbi linux s\u1ebd l\u00e0 /dev/ttyUSB0, MAC OS l\u00e0 SLAB_USBtoUART). Ngo\u00e0i ra t\u1ed1c \u0111\u1ed9 baud c\u1ea7n ph\u1ea3i thay th\u1ebf cho ph\u00f9 h\u1ee3p(m\u1eb7c \u0111\u1ecbnh ban \u0111\u1ea7u c\u00f3 th\u1ec3 l\u00e0 9600 ho\u1eb7c 115200 ho\u1eb7c 480600) .B\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u th\u00eam v\u1ec1 vi\u1ec7c \u0111\u1ecdc t\u00ean c\u00f4ng COM tr\u00ean m\u00e1y t\u00ednh t\u1ea1i (OSX, Windows, Linux)\n\n\n\n\n\n\nQuan tr\u1ecdng\n\n\n\n\nD\u1ea5u \n\\\n b\u00e1o ch\u01b0a k\u1ebft th\u00fac d\u00f2ng trong Makefile\n\n\nTrong \nMakefile\n, lu\u00f4n lu\u00f4n \u0111\u1eb7t ch\u1ebf \u0111\u1ed9 Indent l\u00e0 Tab, n\u1ebfu d\u00f9ng Space s\u1ebd b\u00e1o l\u1ed7i \nMakefile:35: *** missing separator.  Stop.\n\n\n\n\n\n\nC\u00e1c b\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u r\u00f5 h\u01a1n v\u1ec1 Makefile b\u1eb1ng google v\u1edbi t\u1eeb kh\u00f3a \nMakefile basic\n. Makefile n\u00e0y nh\u01b0 l\u00e0 1 k\u1ecbch b\u1ea3n \u0111\u01a1n gi\u1ea3n nh\u1ea5t \u0111\u1ec3 c\u00f4ng c\u1ee5 \nmake\n th\u1ef1c hi\u1ec7n vi\u1ec7c bi\u00ean d\u1ecbch m\u00e3 ngu\u1ed3n \nC\n sang m\u00e3 m\u00e1y \u0111\u1ec3 n\u1ea1p cho ESP8266. M\u1ee5c \u0111\u00edch \u0111\u1ec3 b\u1ea3n n\u1eafm r\u00f5 h\u01a1n v\u1ec1 c\u00e1ch th\u1ee9c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a SDK, tr\u00ecnh bi\u00ean d\u1ecbch. C\u00e1c v\u00ed d\u1ee5 sau n\u00e0y s\u1ebd d\u00f9ng Makefile ph\u1ee9c t\u1ea1p h\u01a1n, v\u00e0 \u0111\u01b0\u1ee3c cung c\u1ea5p k\u00e8m v\u1edbi c\u00e1c d\u1ef1 \u00e1n m\u1eabu t\u1ea1i https://github.com/esp8266vn\n\n\nrf_init.c\n#\n\n\n//esp-iot-basic/rf_init.c\n#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\n\nvoid __attribute__((weak)) user_rf_pre_init(void)\n{\n  system_phy_set_rfoption(1);\n  system_phy_set_max_tpw(82);\n}\n\nuint32_t __attribute__((weak)) user_rf_cal_sector_set(void)\n{\n    enum flash_size_map size_map = system_get_flash_size_map();\n    uint32 rf_cal_sec = 0;\n\n    switch (size_map) {\n        case FLASH_SIZE_4M_MAP_256_256:\n            rf_cal_sec = 128 - 5;\n            break;\n\n        case FLASH_SIZE_8M_MAP_512_512:\n            rf_cal_sec = 256 - 5;\n            break;\n\n        case FLASH_SIZE_16M_MAP_512_512:\n        case FLASH_SIZE_16M_MAP_1024_1024:\n            rf_cal_sec = 512 - 5;\n            break;\n\n        case FLASH_SIZE_32M_MAP_512_512:\n        case FLASH_SIZE_32M_MAP_1024_1024:\n            rf_cal_sec = 1024 - 5;\n            break;\n\n        default:\n            rf_cal_sec = 0;\n            break;\n    }\n    return rf_cal_sec;\n\n\n\n\nmain.c\n#\n\n\n#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\n\nvoid app_init()\n{\n    uart_div_modify(0, UART_CLK_FREQ / 115200);\n    os_delay_us(1000000);\n    os_printf(\"\\r\\nhello world\\r\\n\");\n}\n\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}\n\n\n\n\n\nBi\u00ean d\u1ecbch\n#\n\n\nTh\u1ef1c hi\u1ec7n bi\u00ean d\u1ecbch d\u1ef1 \u00e1n\n\n\ncd esp-iot-basic\nmake clean\nmake\nmake flash\n\n\n\n\nM\u00e0n h\u00ecnh Terminal k\u1ebft th\u00fac nh\u01b0 sau l\u00e0 \u0111\u00e3 ho\u00e0n th\u00e0nh vi\u1ec7c ghi v\u00e0o ESP8266:\n\n\nesptool.py v1.2-dev\nConnecting...\nRunning Cesanta flasher stub...\nFlash params set to 0x0240\nWriting 32768 @ 0x0... 32768 (100 %)\nWrote 32768 bytes at 0x0 in 0.8 seconds (334.0 kbit/s)...\nWriting 196608 @ 0x10000... 196608 (100 %)\nWrote 196608 bytes at 0x10000 in 4.7 seconds (334.5 kbit/s)...\nWriting 4096 @ 0x3fc000... 4096 (100 %)\nWrote 4096 bytes at 0x3fc000 in 0.1 seconds (320.4 kbit/s)...\nLeaving...\n\n\n\n\nK\u1ebft qu\u1ea3\n#\n\n\nM\u1edf c\u1ed5ng COM b\u1eb1ng b\u1ea5t k\u1ef3 ph\u1ea7n m\u1ec1m n\u00e0o h\u1ed7 tr\u1ee3. Windows c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng teraterm, putty; MacOS/OSX, Linux th\u00ec s\u1eed d\u1ee5ng screen, minicom. Sau khi k\u1ebft n\u1ed1i xong, b\u1ea5m n\u00fat RESET tr\u00ean board ph\u00e1t tri\u1ec3n, b\u1ea1n s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c 1 lo\u1ea1t c\u00e1c k\u00fd t\u1ef1 l\u1ea1 \u0111\u1ea7u ti\u00ean. \u0110\u00f3 l\u00e0 c\u00e1c k\u00fd t\u1ef1 do c\u00e1c module c\u1ee7a SDK sinh ra, nh\u01b0ng tr\u01b0\u1edbc khi \u1ee9ng d\u1ee5ng m\u1eabu c\u1ea5u h\u00ecnh \u0111\u00fang t\u1ed1c \u0111\u1ed9 Baud:\n\n\n...\nhello world\nscandone",
            "title": "Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1eabu"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#bien-dich-du-an-au-tien",
            "text": "Tr\u01b0\u1edbc khi bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1eabu, b\u1ea1n c\u1ea7n ph\u1ea3i c\u00e0i \u0111\u1eb7t \u0111\u1ea7y \u0111\u1ee7  Tr\u00ecnh bi\u00ean d\u1ecbch , t\u1ea3i v\u1ec1  esptool.py  v\u00e0  ESP8266-NONOS-SDK  nh\u01b0 h\u01b0\u1edbng d\u1eabn C\u00e0i \u0111\u1eb7t  Trong ph\u1ea7n n\u00e0y s\u1ebd tr\u00ecnh b\u00e0y r\u1ea5t chi ti\u1ebft \u0111\u1ec3 bi\u00ean d\u1ecbch m\u1ed9t d\u1ef1 \u00e1n ho\u00e0n ch\u1ec9nh, bao g\u1ed3m m\u1ed9t s\u1ed1 ki\u1ebfn th\u1ee9c b\u1ed5 tr\u1ee3 li\u00ean quan t\u1edbi l\u1eadp tr\u00ecnh  C  v\u00e0 \u0111\u01b0\u1ee3c gi\u1ea3i th\u00edch r\u00f5 r\u00e0ng, c\u1ea9n th\u1eadn. B\u1ea1n c\u00f3 th\u1ec3 b\u1ecf qua ph\u1ea7n n\u00e0y n\u1ebfu \u0111\u00e3 hi\u1ec3u r\u00f5 v\u1ec1  l\u1eadp tr\u00ecnh C   N\u1ed9i dung  Hi\u1ec3n th\u1ecb  helloworld  tr\u00ean terminal",
            "title": "Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#lay-du-an-mau-tu-github",
            "text": "B\u1ea1n c\u00f3 th\u1ec3 l\u1ea5y d\u1ef1 \u00e1n m\u1eabu t\u1eeb github v\u00e0 bi\u00ean d\u1ecbch ngay:  git clone https://github.com/esp8266vn/esp-iot-basic.git\ncd esp-iot-basic && make",
            "title": "L\u1ea5y d\u1ef1 \u00e1n m\u1eabu t\u1eeb Github:"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#so-o-file",
            "text": "esp-iot-basic\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h   Makefile  Gi\u00fap cho c\u00f4ng c\u1ee5  make  th\u1ef1c hi\u1ec7n vi\u1ec7c bi\u00ean d\u1ecbch d\u1ef1 \u00e1n m\u1ed9t c\u00e1ch t\u1ef1 \u0111\u1ed9ng  main.c  Ch\u1ee9a m\u00e3 ngu\u1ed3n th\u1ef1c thi ch\u00ednh c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh  rf_init.c  Khi kh\u1edfi \u0111\u1ed9ng, {esp} s\u1ebd th\u1ef1c hi\u1ec7n m\u1ed9t s\u1ed1 l\u1ec7nh c\u1ea5u h\u00ecnh RF (thu ph\u00e1t kh\u00f4ng d\u00e2y), SDK s\u1ebd g\u1ecdi c\u00e1c h\u00e0m n\u00e0y. B\u1ea1n b\u1eaft bu\u1ed9c ph\u1ea3i cung c\u1ea5p gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 cho n\u00f3.  user_config.h  Khi bi\u00ean d\u1ecbch, SDK s\u1ebd  include  file n\u00e0y, b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ec3 file tr\u1ed1ng kh\u00f4ng n\u1ed9i dung.",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#makefile",
            "text": "#esp-iot-basic/Makefile\nXTENSA    ?= \nSDK_BASE  ?= /tools/esp8266/sdk/ESP8266_NONOS_SDK \nESPTOOL   ?= /tools/esp8266/esptool/esptool.py\nSDK_LIBS  := -lc -lgcc -lhal -lphy -lpp -lnet80211 -lwpa -lmain\\\n            -llwip -lcrypto -ljson \nCC        := $(XTENSA)xtensa-lx106-elf-gcc\nLD        := $(XTENSA)xtensa-lx106-elf-gcc\nAR        := $(XTENSA)xtensa-lx106-elf-ar\nLDFLAGS   = -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static\nCFLAGS    = -g -Wpointer-arith -Wundef -Wl,-EL -fno-inline-functions -nostdlib\\ \n        -mlongcalls -mtext-section-literals -ffunction-sections -fdata-sections\\\n        -fno-builtin-printf -DICACHE_FLASH\\\n        -I.\\\n        -I$(SDK_BASE)/include\nLD_SCRIPT = -T$(SDK_BASE)/ld/eagle.app.v6.ld \n\nall: main.bin\n\nmain.bin: main.out\n  $(ESPTOOL) elf2image $(ESPTOOL_FLASHDEF) main.out -o main\n\nmain.out: main.a\n  @echo \"LD main.out\"\n  $(LD) -L$(SDK_BASE)/lib $(LD_SCRIPT) $(LDFLAGS) -L$(SDK_BASE)/lib\\\n  -Wl,--start-group $(SDK_LIBS) main.a -Wl,--end-group -o main.out \n\nmain.a: main.o\n  @echo \"AR main.o\"\n  $(AR) cru main.a main.\n\nmain.o:\n  @echo \"CC main.c & rf_init.c\"\n  $(CC) $(CFLAGS) -c main.c -o main.o <14>\n  $(CC) $(CFLAGS) -c rf_init.c -o rf_init.o <14>\n\nclean:\n  rm -rf *.o *.bin *.a *.out \n\nflash:\n  $(ESPTOOL) --port /dev/tty.SLAB_USBtoUART \\\n                   --baud 480600 \\\n                   write_flash --flash_freq 40m --flash_mode dio --flash_size 32m \\\n                   0x00000 main0x00000.bin \\\n                   0x10000 main0x10000.bin \\\n                   0x3fc000 $(SDK_BASE)/bin/esp_init_data_default.bin\n.PHONY: all clean flash   L\u01b0u \u00fd  N\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng v\u00ed d\u1ee5 n\u00e0y cho b\u1ea3n Unofficial Developement KIT tr\u00ean Windows, v\u1edbi \u0111\u01b0\u1eddng d\u1eabn c\u00e0i \u0111\u1eb7t m\u1eb7c \u0111\u1ecbnh l\u00e0  C:\\Espressif , Makefile c\u1ea7n thay \u0111\u1ed5i nh\u01b0 sau:   XTENSA    ?=\nSDK_BASE  ?= C:/Espressif/ESP8266_SDK\nESPTOOL   ?= C:/Espressif/utils/ESP8266/esptool.py\n...\n# V\u00ed d\u1ee5 c\u1ed5ng serial d\u00f9ng \u0111\u1ec3 n\u1ea1p cho ESP8266 l\u00e0 COM3:\nflash:\n   $(ESPTOOL) --port COM3 \\\n          --baud 480600 \\\n          write_flash --flash_freq 40m --flash_mode dio --flash_size 32m \\\n          0x00000 main0x00000.bin \\\n          0x10000 main0x10000.bin \\\n          0x3fc000 $(SDK_BASE)/bin/esp_init_data_default.bin  Gi\u1ea3i th\u00edch Makefile nh\u01b0 sau:   XTENSA  \u0110\u01b0\u1eddng d\u1eabn t\u1edbi tr\u00ecnh bi\u00ean d\u1ecbch, \u0111\u1ec3 tr\u1ed1ng n\u1ebfu b\u1ea1n \u0111\u00e3 th\u00eam v\u00e0o bi\u1ebfn m\u00f4i tr\u01b0\u1eddng  PATH  c\u1ee7a h\u1ec7 \u0111i\u1ec1u h\u00e0nh, ho\u1eb7c c\u00f3 d\u1ea1ng  /tools/esp8266/compiler/xtensa-lx106-elf/bin/  SDK_BASE  \u0110\u01b0\u1eddng d\u1eabn t\u1edbi  SDK , n\u1ebfu l\u00e0 Windows c\u00f3 d\u1ea1ng  C:\\Espressif\\ESP8266_NONOS_SDK  ESPTOOL  \u0110\u01b0\u1eddng d\u1eabn t\u1edbi  esptool.py , nh\u1edb \u0111\u1ea3m b\u1ea3o quy\u1ec1n th\u1ef1c thi cho file n\u00e0y (th\u1ef1c hi\u1ec7n l\u1ec7nh  chmod +x )  SDK_LIBS  C\u00e1c th\u01b0 vi\u1ec7n \u0111i k\u00e8m v\u1edbi  SDK , v\u00ed d\u1ee5 n\u1ebfu b\u1ea1n d\u00f9ng  smartconfig  th\u00ec th\u00eam v\u00e0o  -lsmartconfig  CC ,  AR ,  LD  \u0110\u1ecbnh ngh\u0129a ng\u1eafn g\u1ecdn Compiler, Linker, Archiver  LDFLAGS  l\u00e0 c\u1edd d\u00e0nh cho Linker   CFLAGS  l\u00e0 c\u1edd d\u00e0nh cho Compiler  C\u1edd  -I.  \u0111\u1ec3 b\u00e1o Compiler bi\u1ebft c\u00f3 th\u1ec3 t\u00ecm header file (t\u1eeb kh\u00f3a  #include ) trong th\u01b0 m\u1ee5c hi\u1ec7n t\u1ea1i v\u00e0 SDK include  LD_SCRIPT  Linker scirpt m\u1eb7c \u0111\u1ecbnh c\u1ee7a  SDK  cho chip ESP8266   M\u1eb7c \u0111\u1ecbnh khi g\u1ecdi  make  hay  make all  s\u1ebd g\u1ecdi  all , nh\u01b0ng tr\u01b0\u1edbc \u0111\u00f3 s\u1ebd c\u1ea7n g\u1ecdi  main.bin    Th\u1ef1c hi\u1ec7n  make clean  x\u00f3a h\u1ebft c\u00e1c file \u0111\u01b0\u1ee3c t\u1ea1o ra khi g\u1ecdi  make all   Th\u1ef1c hi\u1ec7n  make flash  \u0111\u1ec3 n\u1ea1p ESP8266, c\u1ea7n ch\u1eafc ch\u1eafc m\u1ea1ch n\u1ea1p \u0111\u00e3 \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i m\u00e1y t\u00ednh, v\u00e0 t\u00ean c\u1ed5ng \u0111\u01b0\u1ee3c thay th\u1ebf \u0111\u00fang cho  /dev/tty.SLAB_USBtoUART  (th\u01b0\u1eddng v\u1edbi linux s\u1ebd l\u00e0 /dev/ttyUSB0, MAC OS l\u00e0 SLAB_USBtoUART). Ngo\u00e0i ra t\u1ed1c \u0111\u1ed9 baud c\u1ea7n ph\u1ea3i thay th\u1ebf cho ph\u00f9 h\u1ee3p(m\u1eb7c \u0111\u1ecbnh ban \u0111\u1ea7u c\u00f3 th\u1ec3 l\u00e0 9600 ho\u1eb7c 115200 ho\u1eb7c 480600) .B\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u th\u00eam v\u1ec1 vi\u1ec7c \u0111\u1ecdc t\u00ean c\u00f4ng COM tr\u00ean m\u00e1y t\u00ednh t\u1ea1i (OSX, Windows, Linux)    Quan tr\u1ecdng   D\u1ea5u  \\  b\u00e1o ch\u01b0a k\u1ebft th\u00fac d\u00f2ng trong Makefile  Trong  Makefile , lu\u00f4n lu\u00f4n \u0111\u1eb7t ch\u1ebf \u0111\u1ed9 Indent l\u00e0 Tab, n\u1ebfu d\u00f9ng Space s\u1ebd b\u00e1o l\u1ed7i  Makefile:35: *** missing separator.  Stop.    C\u00e1c b\u1ea1n c\u00f3 th\u1ec3 t\u00ecm hi\u1ec3u r\u00f5 h\u01a1n v\u1ec1 Makefile b\u1eb1ng google v\u1edbi t\u1eeb kh\u00f3a  Makefile basic . Makefile n\u00e0y nh\u01b0 l\u00e0 1 k\u1ecbch b\u1ea3n \u0111\u01a1n gi\u1ea3n nh\u1ea5t \u0111\u1ec3 c\u00f4ng c\u1ee5  make  th\u1ef1c hi\u1ec7n vi\u1ec7c bi\u00ean d\u1ecbch m\u00e3 ngu\u1ed3n  C  sang m\u00e3 m\u00e1y \u0111\u1ec3 n\u1ea1p cho ESP8266. M\u1ee5c \u0111\u00edch \u0111\u1ec3 b\u1ea3n n\u1eafm r\u00f5 h\u01a1n v\u1ec1 c\u00e1ch th\u1ee9c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a SDK, tr\u00ecnh bi\u00ean d\u1ecbch. C\u00e1c v\u00ed d\u1ee5 sau n\u00e0y s\u1ebd d\u00f9ng Makefile ph\u1ee9c t\u1ea1p h\u01a1n, v\u00e0 \u0111\u01b0\u1ee3c cung c\u1ea5p k\u00e8m v\u1edbi c\u00e1c d\u1ef1 \u00e1n m\u1eabu t\u1ea1i https://github.com/esp8266vn",
            "title": "Makefile"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#rf_initc",
            "text": "//esp-iot-basic/rf_init.c\n#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\n\nvoid __attribute__((weak)) user_rf_pre_init(void)\n{\n  system_phy_set_rfoption(1);\n  system_phy_set_max_tpw(82);\n}\n\nuint32_t __attribute__((weak)) user_rf_cal_sector_set(void)\n{\n    enum flash_size_map size_map = system_get_flash_size_map();\n    uint32 rf_cal_sec = 0;\n\n    switch (size_map) {\n        case FLASH_SIZE_4M_MAP_256_256:\n            rf_cal_sec = 128 - 5;\n            break;\n\n        case FLASH_SIZE_8M_MAP_512_512:\n            rf_cal_sec = 256 - 5;\n            break;\n\n        case FLASH_SIZE_16M_MAP_512_512:\n        case FLASH_SIZE_16M_MAP_1024_1024:\n            rf_cal_sec = 512 - 5;\n            break;\n\n        case FLASH_SIZE_32M_MAP_512_512:\n        case FLASH_SIZE_32M_MAP_1024_1024:\n            rf_cal_sec = 1024 - 5;\n            break;\n\n        default:\n            rf_cal_sec = 0;\n            break;\n    }\n    return rf_cal_sec;",
            "title": "rf_init.c"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#mainc",
            "text": "#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\n\nvoid app_init()\n{\n    uart_div_modify(0, UART_CLK_FREQ / 115200);\n    os_delay_us(1000000);\n    os_printf(\"\\r\\nhello world\\r\\n\");\n}\n\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}",
            "title": "main.c"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#bien-dich",
            "text": "Th\u1ef1c hi\u1ec7n bi\u00ean d\u1ecbch d\u1ef1 \u00e1n  cd esp-iot-basic\nmake clean\nmake\nmake flash  M\u00e0n h\u00ecnh Terminal k\u1ebft th\u00fac nh\u01b0 sau l\u00e0 \u0111\u00e3 ho\u00e0n th\u00e0nh vi\u1ec7c ghi v\u00e0o ESP8266:  esptool.py v1.2-dev\nConnecting...\nRunning Cesanta flasher stub...\nFlash params set to 0x0240\nWriting 32768 @ 0x0... 32768 (100 %)\nWrote 32768 bytes at 0x0 in 0.8 seconds (334.0 kbit/s)...\nWriting 196608 @ 0x10000... 196608 (100 %)\nWrote 196608 bytes at 0x10000 in 4.7 seconds (334.5 kbit/s)...\nWriting 4096 @ 0x3fc000... 4096 (100 %)\nWrote 4096 bytes at 0x3fc000 in 0.1 seconds (320.4 kbit/s)...\nLeaving...",
            "title": "Bi\u00ean d\u1ecbch"
        },
        {
            "location": "/nonos-sdk/basic/compile-first-time/#ket-qua",
            "text": "M\u1edf c\u1ed5ng COM b\u1eb1ng b\u1ea5t k\u1ef3 ph\u1ea7n m\u1ec1m n\u00e0o h\u1ed7 tr\u1ee3. Windows c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng teraterm, putty; MacOS/OSX, Linux th\u00ec s\u1eed d\u1ee5ng screen, minicom. Sau khi k\u1ebft n\u1ed1i xong, b\u1ea5m n\u00fat RESET tr\u00ean board ph\u00e1t tri\u1ec3n, b\u1ea1n s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c 1 lo\u1ea1t c\u00e1c k\u00fd t\u1ef1 l\u1ea1 \u0111\u1ea7u ti\u00ean. \u0110\u00f3 l\u00e0 c\u00e1c k\u00fd t\u1ef1 do c\u00e1c module c\u1ee7a SDK sinh ra, nh\u01b0ng tr\u01b0\u1edbc khi \u1ee9ng d\u1ee5ng m\u1eabu c\u1ea5u h\u00ecnh \u0111\u00fang t\u1ed1c \u0111\u1ed9 Baud:  ...\nhello world\nscandone",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/basic/blink-led/",
            "text": "B\u1eadt t\u1eaft LED\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n\n\nS\u01a1 \u0111\u1ed3 file\n\n\nM\u00e3 ngu\u1ed3n\n\n\nK\u1ebft qu\u1ea3\n\n\nG\u1ee3i \u00fd\n\n\n\n\n\n\n\n\n\n\nB\u1eadt t\u1eaft LED\n#\n\n\nT\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i \nBi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n, to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file, \nMakefile, user_config.h, rf_init.c\n gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file \nmain.c\n. \n\n\n\n\nN\u1ed9i dung\n\n\nCh\u1edbp t\u1eaft \u0111\u00e8n LED tr\u00ean GPIO16 m\u1ed7i 1 gi\u00e2y\n\n\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n#\n\n\ngit clone https://github.com/esp8266vn/esp-iot-led-blink.git\ncd esp-iot-led-blink && make\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\nesp-iot-led-blink\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h\n\n\n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\n//esp-led/main.c\n#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\nstatic os_timer_t led_timer;\nstatic int led_value = 0;\nvoid led_service_cb(void *args) //H\u00e0m n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi khi soft timer `led_timer` ho\u00e0n th\u00e0nh vi\u1ec7c \u0111\u1ebfm \n{\n    led_value ^= 0x01;\n    //Ghi gi\u00e1 tr\u1ecb ra LED IO, `led_value` khi th\u1ef1c hi\u1ec7n **XOR** v\u1edbi 1 s\u1ebd \u0111\u1ea3o gi\u00e1 tr\u1ecb gi\u1eefa 1 v\u00e0 0\n    WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe)| (uint32_t)(led_value & 1)); \n    os_printf(\"Blink\\r\\n\");\n}\nvoid app_init()\n{\n    //C\u1ea5u h\u00ecnh ng\u00f5 ra UART 115200 baud\n    uart_div_modify(0, UART_CLK_FREQ / 115200); \n\n    //C\u1ea5u h\u00ecnh ch\u00e2n LED l\u00e0 ch\u1ee9c n\u0103ng ch\u00ednh GPIO, ng\u00f5 ra \n    WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc)| (uint32_t)0x1);  \n    WRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe)| (uint32_t)0x0); \n    WRITE_PERI_REG(RTC_GPIO_ENABLE, (READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe)| (uint32_t)0x1); \n\n    //C\u1ea5u h\u00ecnh \u0111\u1ecba ch\u1ec9 h\u00e0m g\u1ecdi khi timer `led_timer` \u0111\u1ebfm xong \n    os_timer_setfn(&led_timer, (os_timer_func_t *)led_service_cb, NULL); \n\n    //C\u1ea5u h\u00ecnh `led_timer` t\u1edbi h\u1ea1n trong 1000 mili gi\u00e2y v\u00e0 kh\u1edfi \u0111\u1ed9ng l\u1ea1i khi t\u1edbi h\u1ea1n\n    os_timer_arm(&led_timer, 1000, 1); \n}\n\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}\n\n\n\n\n\n\u1ede ph\u1ea7n n\u00e0y ch\u00fang ta s\u1ebd bi\u1ebft th\u00eam v\u1ec1 c\u00e1ch th\u1ee9c \u0111\u1ecdc/ghi thanh ghi c\u1ee7a ESP8266, \u0111\u1ed3ng th\u1eddi s\u1eed d\u1ee5ng Software Timer:\n\n\n\n\n\u0110\u1ec3 ghi v\u00e0o thanh ghi, ch\u00fang ta d\u00f9ng \u0111\u1ecbnh ngh\u0129a: \nWRITE_PERI_REG\n v\u1edbi tham s\u1ed1 \u0111\u1ea7u ti\u00ean l\u00e0 \u0111\u1ecba ch\u1ec9 thanh ghi, th\u00f4ng s\u1ed1 th\u1ee9 2 l\u00e0 gi\u00e1 tr\u1ecb. T\u01b0\u01a1ng t\u1ef1 v\u1edbi vi\u1ec7c \u0111\u1ecdc, \u0111\u1ecbnh ngh\u0129a \nREAD_PERI_REG\n ch\u1ec9 c\u1ea7n 1 tham s\u1ed1 l\u00e0 \u0111\u1ecba ch\u1ec9 thanh ghi, v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a thanh ghi.\n\n\nTr\u01b0\u1edbc khi s\u1eed d\u1ee5ng Software Timer, c\u1ea7n \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc bi\u1ebfn ch\u01b0a th\u00f4ng tin l\u00e0 \nos_timer_t led_timer\n, kh\u1edfi t\u1ea1o h\u00e0m s\u1ebd g\u1ecdi khi Timer \u0111\u1ebfn t\u1edbi h\u1ea1n v\u1edbi \nos_timer_setfn\n v\u00e0 \nos_timer_arm\n v\u1edbi tham s\u1ed1 th\u1ee9 3 = 1 \u0111\u1ea3m b\u1ea3o s\u1ebd l\u1eb7p l\u1ea1i vi\u1ec7c \u0111\u1ebfm li\u00ean t\u1ee5c.\n\n\n\n\nK\u1ebft qu\u1ea3\n#\n\n\nSau khi n\u1ea1p th\u00e0nh c\u00f4ng ch\u01b0\u01a1ng tr\u00ecnh v\u00e0 k\u1ebft n\u1ed1i LED v\u1edbi ch\u00e2n GPIO16 s\u1ebd th\u1ea5y ch\u1edbp LED m\u1ed7i 1 gi\u00e2y.\n\n\nS\u1eed d\u1ee5ng Terminal quan s\u00e1t s\u1ebd th\u1ea5y\n\n\nBlink\nBlink\nBlink\nBlink\nBlink\n\n\n\n\nG\u1ee3i \u00fd\n#\n\n\nC\u00f3 th\u1ec3 t\u00ecm th\u1ea5y \u0111\u1ecbnh ngh\u0129a c\u00e1c \u0111\u1ecba ch\u1ec9 thanh ghi t\u1ea1i th\u01b0 m\u1ee5c ch\u1ee9a SDK \n$SDK_BASE\\include\\eagle_soc.h\n. Ngo\u00e0i ra, b\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o vi\u1ec7c c\u1ea5u h\u00ecnh GPIO16 t\u1ea1i \n$SDK_BASE\\driver_lib\\driver\\gpio16.c\n \n\n\nTa c\u00f3 th\u1ec3 th\u1ea5y \n\n\nWRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe)| (uint32_t)(led_value & 1));\n\n\n\n\nt\u01b0\u01a1ng \u1ee9ng v\u1edbi l\u1ec7nh \ngpio16_output_set(led_value);\n \n\n\nv\u00e0 c\u00e1c l\u1ec7nh\n\n\nWRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc) | (uint32_t)0x1);  \nWRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe) | (uint32_t)0x0);\nWRITE_PERI_REG(RTC_GPIO_ENABLE, (READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe) | (uint32_t)0x1);\n\n\n\n\nt\u01b0\u01a1ng \u1ee9ng v\u1edbi\n\ngpio16_output_conf(void)\n trong gpio16.c\n\n\n\n\nC\u1ea3nh b\u00e1o\n\n\nCh\u00e2n \nGPIO16\n c\u1ee7a ESP8266 l\u00e0 ch\u00e2n kh\u00e1 \u0111\u1eb7c bi\u1ec7t, s\u1eed d\u1ee5ng chung v\u1edbi RTC OUTPUT, d\u00f9ng \u1edf ch\u1ebf \u0111\u1ed9 DEEPSLEEP, khi RTC t\u1edbi h\u1ea1n v\u00e0 kh\u1edfi \u0111\u1ed9ng Chip b\u1eb1ng c\u00e1ch h\u1ea1 m\u1ee9c th\u1ea5p ch\u00e2n n\u00e0y. N\u1ebfu b\u1ea1n thi\u1ebft k\u1ebf \u1ee9ng d\u1ee5ng c\u1ea7n s\u1eed d\u1ee5ng ch\u1ebf \u0111\u1ed9 ng\u1ee7 DEEPSLEEP th\u00ec \u0111\u1eebng s\u1eed d\u1ee5ng ch\u00e2n GPIO16 cho m\u1ee5c \u0111\u00edch kh\u00e1c, ngo\u1ea1i tr\u1eeb vi\u1ec7c n\u1ed1i th\u1eb3ng v\u00e0o ch\u00e2n nRST (ch\u00e2n \n32\n c\u1ee7a ESP8266)",
            "title": "B\u1eadt t\u1eaft LED"
        },
        {
            "location": "/nonos-sdk/basic/blink-led/#bat-tat-led",
            "text": "T\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i  Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean , to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file,  Makefile, user_config.h, rf_init.c  gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file  main.c .    N\u1ed9i dung  Ch\u1edbp t\u1eaft \u0111\u00e8n LED tr\u00ean GPIO16 m\u1ed7i 1 gi\u00e2y",
            "title": "B\u1eadt t\u1eaft LED"
        },
        {
            "location": "/nonos-sdk/basic/blink-led/#lay-du-an-ve-tu-github",
            "text": "git clone https://github.com/esp8266vn/esp-iot-led-blink.git\ncd esp-iot-led-blink && make",
            "title": "L\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github"
        },
        {
            "location": "/nonos-sdk/basic/blink-led/#so-o-file",
            "text": "esp-iot-led-blink\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/basic/blink-led/#ma-nguon",
            "text": "//esp-led/main.c\n#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\nstatic os_timer_t led_timer;\nstatic int led_value = 0;\nvoid led_service_cb(void *args) //H\u00e0m n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi khi soft timer `led_timer` ho\u00e0n th\u00e0nh vi\u1ec7c \u0111\u1ebfm \n{\n    led_value ^= 0x01;\n    //Ghi gi\u00e1 tr\u1ecb ra LED IO, `led_value` khi th\u1ef1c hi\u1ec7n **XOR** v\u1edbi 1 s\u1ebd \u0111\u1ea3o gi\u00e1 tr\u1ecb gi\u1eefa 1 v\u00e0 0\n    WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe)| (uint32_t)(led_value & 1)); \n    os_printf(\"Blink\\r\\n\");\n}\nvoid app_init()\n{\n    //C\u1ea5u h\u00ecnh ng\u00f5 ra UART 115200 baud\n    uart_div_modify(0, UART_CLK_FREQ / 115200); \n\n    //C\u1ea5u h\u00ecnh ch\u00e2n LED l\u00e0 ch\u1ee9c n\u0103ng ch\u00ednh GPIO, ng\u00f5 ra \n    WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc)| (uint32_t)0x1);  \n    WRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe)| (uint32_t)0x0); \n    WRITE_PERI_REG(RTC_GPIO_ENABLE, (READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe)| (uint32_t)0x1); \n\n    //C\u1ea5u h\u00ecnh \u0111\u1ecba ch\u1ec9 h\u00e0m g\u1ecdi khi timer `led_timer` \u0111\u1ebfm xong \n    os_timer_setfn(&led_timer, (os_timer_func_t *)led_service_cb, NULL); \n\n    //C\u1ea5u h\u00ecnh `led_timer` t\u1edbi h\u1ea1n trong 1000 mili gi\u00e2y v\u00e0 kh\u1edfi \u0111\u1ed9ng l\u1ea1i khi t\u1edbi h\u1ea1n\n    os_timer_arm(&led_timer, 1000, 1); \n}\n\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}  \u1ede ph\u1ea7n n\u00e0y ch\u00fang ta s\u1ebd bi\u1ebft th\u00eam v\u1ec1 c\u00e1ch th\u1ee9c \u0111\u1ecdc/ghi thanh ghi c\u1ee7a ESP8266, \u0111\u1ed3ng th\u1eddi s\u1eed d\u1ee5ng Software Timer:   \u0110\u1ec3 ghi v\u00e0o thanh ghi, ch\u00fang ta d\u00f9ng \u0111\u1ecbnh ngh\u0129a:  WRITE_PERI_REG  v\u1edbi tham s\u1ed1 \u0111\u1ea7u ti\u00ean l\u00e0 \u0111\u1ecba ch\u1ec9 thanh ghi, th\u00f4ng s\u1ed1 th\u1ee9 2 l\u00e0 gi\u00e1 tr\u1ecb. T\u01b0\u01a1ng t\u1ef1 v\u1edbi vi\u1ec7c \u0111\u1ecdc, \u0111\u1ecbnh ngh\u0129a  READ_PERI_REG  ch\u1ec9 c\u1ea7n 1 tham s\u1ed1 l\u00e0 \u0111\u1ecba ch\u1ec9 thanh ghi, v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb c\u1ee7a thanh ghi.  Tr\u01b0\u1edbc khi s\u1eed d\u1ee5ng Software Timer, c\u1ea7n \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc bi\u1ebfn ch\u01b0a th\u00f4ng tin l\u00e0  os_timer_t led_timer , kh\u1edfi t\u1ea1o h\u00e0m s\u1ebd g\u1ecdi khi Timer \u0111\u1ebfn t\u1edbi h\u1ea1n v\u1edbi  os_timer_setfn  v\u00e0  os_timer_arm  v\u1edbi tham s\u1ed1 th\u1ee9 3 = 1 \u0111\u1ea3m b\u1ea3o s\u1ebd l\u1eb7p l\u1ea1i vi\u1ec7c \u0111\u1ebfm li\u00ean t\u1ee5c.",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/basic/blink-led/#ket-qua",
            "text": "Sau khi n\u1ea1p th\u00e0nh c\u00f4ng ch\u01b0\u01a1ng tr\u00ecnh v\u00e0 k\u1ebft n\u1ed1i LED v\u1edbi ch\u00e2n GPIO16 s\u1ebd th\u1ea5y ch\u1edbp LED m\u1ed7i 1 gi\u00e2y.  S\u1eed d\u1ee5ng Terminal quan s\u00e1t s\u1ebd th\u1ea5y  Blink\nBlink\nBlink\nBlink\nBlink",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/basic/blink-led/#goi-y",
            "text": "C\u00f3 th\u1ec3 t\u00ecm th\u1ea5y \u0111\u1ecbnh ngh\u0129a c\u00e1c \u0111\u1ecba ch\u1ec9 thanh ghi t\u1ea1i th\u01b0 m\u1ee5c ch\u1ee9a SDK  $SDK_BASE\\include\\eagle_soc.h . Ngo\u00e0i ra, b\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o vi\u1ec7c c\u1ea5u h\u00ecnh GPIO16 t\u1ea1i  $SDK_BASE\\driver_lib\\driver\\gpio16.c    Ta c\u00f3 th\u1ec3 th\u1ea5y   WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe)| (uint32_t)(led_value & 1));  t\u01b0\u01a1ng \u1ee9ng v\u1edbi l\u1ec7nh  gpio16_output_set(led_value);    v\u00e0 c\u00e1c l\u1ec7nh  WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc) | (uint32_t)0x1);  \nWRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe) | (uint32_t)0x0);\nWRITE_PERI_REG(RTC_GPIO_ENABLE, (READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe) | (uint32_t)0x1);  t\u01b0\u01a1ng \u1ee9ng v\u1edbi gpio16_output_conf(void)  trong gpio16.c   C\u1ea3nh b\u00e1o  Ch\u00e2n  GPIO16  c\u1ee7a ESP8266 l\u00e0 ch\u00e2n kh\u00e1 \u0111\u1eb7c bi\u1ec7t, s\u1eed d\u1ee5ng chung v\u1edbi RTC OUTPUT, d\u00f9ng \u1edf ch\u1ebf \u0111\u1ed9 DEEPSLEEP, khi RTC t\u1edbi h\u1ea1n v\u00e0 kh\u1edfi \u0111\u1ed9ng Chip b\u1eb1ng c\u00e1ch h\u1ea1 m\u1ee9c th\u1ea5p ch\u00e2n n\u00e0y. N\u1ebfu b\u1ea1n thi\u1ebft k\u1ebf \u1ee9ng d\u1ee5ng c\u1ea7n s\u1eed d\u1ee5ng ch\u1ebf \u0111\u1ed9 ng\u1ee7 DEEPSLEEP th\u00ec \u0111\u1eebng s\u1eed d\u1ee5ng ch\u00e2n GPIO16 cho m\u1ee5c \u0111\u00edch kh\u00e1c, ngo\u1ea1i tr\u1eeb vi\u1ec7c n\u1ed1i th\u1eb3ng v\u00e0o ch\u00e2n nRST (ch\u00e2n  32  c\u1ee7a ESP8266)",
            "title": "G\u1ee3i \u00fd"
        },
        {
            "location": "/nonos-sdk/basic/button/",
            "text": "N\u00fat nh\u1ea5n\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github:\n\n\nS\u01a1 \u0111\u1ed3 file\n\n\nM\u00e3 ngu\u1ed3n\n\n\n\n\n\n\n\n\n\n\nN\u00fat nh\u1ea5n\n#\n\n\nT\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i \nBi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n, bao g\u1ed3m c\u00e1c file \nMakefile\n, \nmain.c\n, \nrf_init.c\n, \nuser_config.h\n. Tuy nhi\u00ean ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file \nmain.c\n\n\n\n\nN\u1ed9i dung\n\n\nNh\u1ea5n n\u00fat (GPIO0)th\u00ec ch\u1edbp t\u1eaft \u0111\u00e8n LED (GPIO6)\n\n\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github:\n#\n\n\ngit clone https://github.com/esp8266vn/esp-iot-button.git\ncd eps-iot-button\nmake\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\nesp-iot-button\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h\n\n\n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\n//esp-button/main.c\n#include \"osapi.h\"\n#include \"user_interface.h\"\n#include \"gpio.h\"\n#define BTN_PIN 0 //GPIO0 \nstatic int led_value = 0;\nvoid key_intr_handler(void *args); //Khai b\u00e1o `prototype` \nvoid app_init()\n{\n    //C\u1ea5u h\u00ecnh ch\u00e2n GPIO16 l\u00e0 ng\u00f5 ra, \u0111i\u1ec1u khi\u1ec3n \u0111\u00e8n LED\n  WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc) | (uint32_t)0x1);\n\n  //C\u1ea5u h\u00ecnh ch\u00e2n GPIO16 l\u00e0 ng\u00f5 ra, \u0111i\u1ec1u khi\u1ec3n \u0111\u00e8n LED\n  WRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe) | (uint32_t)0x0);\n  WRITE_PERI_REG(RTC_GPIO_ENABLE,(READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe) | (uint32_t)0x1);\n\n  //C\u1ea5u h\u00ecnh `key_intr_handler` l\u00e0 h\u00e0m x\u1eed l\u00fd ng\u1eaft GPIO\n  ETS_GPIO_INTR_ATTACH(key_intr_handler, NULL);\n\n  //V\u00f4 hi\u1ec7u h\u00f3a ng\u1eaft GPIO \u0111\u1ec3 vi\u1ec7c c\u1ea5u h\u00ecnh kh\u00f4ng \u1ea3nh h\u01b0\u1edfng\n  ETS_GPIO_INTR_DISABLE();\n\n  //L\u1ef1a ch\u1ecdn ch\u1ee9c n\u0103ng cho GPIO0 s\u1eed d\u1ee5ng In/Out Logic\n  PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO0_U, FUNC_GPIO0);\n\n  //C\u1ea5u h\u00ecnh GPIO0 ho\u1ea1t \u0111\u1ed9ng nh\u01b0 ng\u00f5 v\u00e0o (Input)\n  gpio_output_set(0, 0, 0, GPIO_ID_PIN(BTN_PIN));\n  gpio_register_set(GPIO_PIN_ADDR(BTN_PIN), GPIO_PIN_INT_TYPE_SET(GPIO_PIN_INTR_DISABLE)\n                      | GPIO_PIN_PAD_DRIVER_SET(GPIO_PAD_DRIVER_DISABLE)\n                      | GPIO_PIN_SOURCE_SET(GPIO_AS_PIN_SOURCE));\n\n  //X\u00f3a c\u1edd ng\u1eaft GPIO\n  GPIO_REG_WRITE(GPIO_STATUS_W1TC_ADDRESS, BIT(BTN_PIN));\n\n  //C\u1ea5u h\u00ecnh ng\u1eaft GPIO0 c\u1ea1nh xu\u1ed1ng\n  gpio_pin_intr_state_set(GPIO_ID_PIN(BTN_PIN), GPIO_PIN_INTR_NEGEDGE);\n\n  //Cho ph\u00e9p ng\u1eaft GPIO\n  ETS_GPIO_INTR_ENABLE();\n}\nvoid user_init(void)\n{\n  system_init_done_cb(app_init);\n}\nvoid key_intr_handler(void *args)\n{\n  //\u0110\u1ecdc tr\u1ea1ng th\u00e1i ng\u1eaft GPIO hi\u1ec7n t\u1ea1i\n  uint32 gpio_status = GPIO_REG_READ(GPIO_STATUS_ADDRESS);\n  if (gpio_status & BIT(BTN_PIN)) { //Ch\u1eafc ch\u1eafn r\u1eb1ng ng\u1eaft xu\u1ea5t ph\u00e1t t\u1eeb GPIO0\n    //Ghi gi\u00e1 tr\u1ecb \u0111\u1ea3o \u0111\u1ec3 hi\u1ec3n th\u1ecb LED\n    led_value ^= 0x01;\n    led_value ^= 0x01;\n    WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe) | (uint32_t)(led_value & 1));\n  }\n  GPIO_REG_WRITE(GPIO_STATUS_W1TC_ADDRESS, BIT(BTN_PIN));  //X\u00f3a ng\u1eaft GPIO\n}\n\n\n\n\nN\u00fat nh\u1ea5n s\u1ebd gi\u00fap vi\u1ec7c ESP8266 kh\u1edfi \u0111\u1ed9ng m\u1ed9t h\u00e0nh \u0111\u1ed9ng n\u00e0o \u0111\u00f3 khi c\u1ea7n thi\u1ebft. Trong nhi\u1ec1u \u1ee9ng d\u1ee5ng ch\u00fang ta h\u1ea7u nh\u01b0 \u0111\u1ec1u c\u1ea7n nh\u1eefng k\u00edch ho\u1ea1t t\u1eeb b\u00ean ngo\u00e0i. Xuy\u00ean su\u1ed1t cu\u1ed1n s\u00e1ch n\u00e0y, s\u1ebd d\u00f9ng n\u00fat nh\u1ea5n \u0111\u1ec3 k\u00edch ho\u1ea1t ch\u1ea1y c\u00e1c \u1ee9ng d\u1ee5ng m\u1eabu c\u0169ng nh\u01b0 \u0111\u00e8n LED \u0111\u1ec3 th\u00f4ng b\u00e1o c\u00e1c tr\u1ea1ng th\u00e1i. Trong ph\u1ea7n n\u00e0y, nh\u1ea5n n\u00fat \u0111\u00e8n LED s\u1ebd chuy\u1ec3n tr\u1ea1ng th\u00e1i (t\u1eeb s\u00e1ng -> t\u1eaft v\u00e0 ng\u01b0\u1ee3c l\u1ea1i). \n\n\n\u0110\u00e2y l\u00e0 v\u00ed d\u1ee5 \u0111\u01a1n gi\u1ea3n, trong th\u1ef1c t\u1ebf vi\u1ec7c x\u1eed l\u00fd n\u00fat nh\u1ea5n kh\u00e1 phi\u1ec1n ph\u1ee9c. B\u1edfi v\u00ec n\u00fat nh\u1ea5n v\u1eadt l\u00fd khi \u0111\u01b0\u1ee3c nh\u1ea5n s\u1ebd t\u1ea1o ra h\u00e0ng lo\u1ea1t c\u00e1c xung l\u00ean xu\u1ed1ng (nhi\u1ec5u, bouncing\u2026). Th\u01b0\u1eddng th\u00ec ch\u1ec9 c\u1ea7n \u0111\u1ea3m b\u1ea3o m\u1ee9c Logic c\u1ee7a ch\u00e2n \u0111o \u0111\u01b0\u1ee3c \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1eef \u1ed5n \u0111\u1ecbnh trong kho\u1ea3ng 100 mili gi\u00e2y l\u00e0 \u0111\u01b0\u1ee3c xem \u0111\u00e3 \u1ed5n \u0111\u1ecbnh. \n\n\nNgo\u00e0i c\u00e1ch d\u00f9ng ng\u1eaft \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh n\u00fat nh\u1ea5n c\u00f3 \u0111\u01b0\u1ee3c nh\u1ea5n hay kh\u00f4ng - c\u00e1ch n\u00e0y s\u1ebd ti\u1ebft ki\u1ec7m t\u00e0i nguy\u00ean t\u00ednh to\u00e1n c\u1ee7a CPU, n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c g\u1ecdi khi c\u00f3 s\u1ef1 ki\u1ec7n s\u1ea3y ra, th\u00ec c\u00f2n m\u1ed9t c\u00e1ch n\u1eefa l\u00e0 h\u1ecfi v\u00f2ng: C\u00e1ch n\u00e0y \u0111\u1ecfi h\u1ecfi CPU li\u00ean t\u1ee5c ki\u1ec3m tra xem m\u1ee9c Logic c\u1ee7a n\u00fat nh\u1ea5n. \u0110\u1ed3ng th\u1eddi vi\u1ec7c \u0111\u00e1p \u1ee9ng c\u0169ng kh\u00f4ng nhanh b\u1eb1ng s\u1eed d\u1ee5ng ng\u1eaft.",
            "title": "N\u00fat nh\u1ea5n"
        },
        {
            "location": "/nonos-sdk/basic/button/#nut-nhan",
            "text": "T\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i  Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean , bao g\u1ed3m c\u00e1c file  Makefile ,  main.c ,  rf_init.c ,  user_config.h . Tuy nhi\u00ean ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file  main.c   N\u1ed9i dung  Nh\u1ea5n n\u00fat (GPIO0)th\u00ec ch\u1edbp t\u1eaft \u0111\u00e8n LED (GPIO6)",
            "title": "N\u00fat nh\u1ea5n"
        },
        {
            "location": "/nonos-sdk/basic/button/#lay-du-an-ve-tu-github",
            "text": "git clone https://github.com/esp8266vn/esp-iot-button.git\ncd eps-iot-button\nmake",
            "title": "L\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github:"
        },
        {
            "location": "/nonos-sdk/basic/button/#so-o-file",
            "text": "esp-iot-button\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/basic/button/#ma-nguon",
            "text": "//esp-button/main.c\n#include \"osapi.h\"\n#include \"user_interface.h\"\n#include \"gpio.h\"\n#define BTN_PIN 0 //GPIO0 \nstatic int led_value = 0;\nvoid key_intr_handler(void *args); //Khai b\u00e1o `prototype` \nvoid app_init()\n{\n    //C\u1ea5u h\u00ecnh ch\u00e2n GPIO16 l\u00e0 ng\u00f5 ra, \u0111i\u1ec1u khi\u1ec3n \u0111\u00e8n LED\n  WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc) | (uint32_t)0x1);\n\n  //C\u1ea5u h\u00ecnh ch\u00e2n GPIO16 l\u00e0 ng\u00f5 ra, \u0111i\u1ec1u khi\u1ec3n \u0111\u00e8n LED\n  WRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe) | (uint32_t)0x0);\n  WRITE_PERI_REG(RTC_GPIO_ENABLE,(READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe) | (uint32_t)0x1);\n\n  //C\u1ea5u h\u00ecnh `key_intr_handler` l\u00e0 h\u00e0m x\u1eed l\u00fd ng\u1eaft GPIO\n  ETS_GPIO_INTR_ATTACH(key_intr_handler, NULL);\n\n  //V\u00f4 hi\u1ec7u h\u00f3a ng\u1eaft GPIO \u0111\u1ec3 vi\u1ec7c c\u1ea5u h\u00ecnh kh\u00f4ng \u1ea3nh h\u01b0\u1edfng\n  ETS_GPIO_INTR_DISABLE();\n\n  //L\u1ef1a ch\u1ecdn ch\u1ee9c n\u0103ng cho GPIO0 s\u1eed d\u1ee5ng In/Out Logic\n  PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO0_U, FUNC_GPIO0);\n\n  //C\u1ea5u h\u00ecnh GPIO0 ho\u1ea1t \u0111\u1ed9ng nh\u01b0 ng\u00f5 v\u00e0o (Input)\n  gpio_output_set(0, 0, 0, GPIO_ID_PIN(BTN_PIN));\n  gpio_register_set(GPIO_PIN_ADDR(BTN_PIN), GPIO_PIN_INT_TYPE_SET(GPIO_PIN_INTR_DISABLE)\n                      | GPIO_PIN_PAD_DRIVER_SET(GPIO_PAD_DRIVER_DISABLE)\n                      | GPIO_PIN_SOURCE_SET(GPIO_AS_PIN_SOURCE));\n\n  //X\u00f3a c\u1edd ng\u1eaft GPIO\n  GPIO_REG_WRITE(GPIO_STATUS_W1TC_ADDRESS, BIT(BTN_PIN));\n\n  //C\u1ea5u h\u00ecnh ng\u1eaft GPIO0 c\u1ea1nh xu\u1ed1ng\n  gpio_pin_intr_state_set(GPIO_ID_PIN(BTN_PIN), GPIO_PIN_INTR_NEGEDGE);\n\n  //Cho ph\u00e9p ng\u1eaft GPIO\n  ETS_GPIO_INTR_ENABLE();\n}\nvoid user_init(void)\n{\n  system_init_done_cb(app_init);\n}\nvoid key_intr_handler(void *args)\n{\n  //\u0110\u1ecdc tr\u1ea1ng th\u00e1i ng\u1eaft GPIO hi\u1ec7n t\u1ea1i\n  uint32 gpio_status = GPIO_REG_READ(GPIO_STATUS_ADDRESS);\n  if (gpio_status & BIT(BTN_PIN)) { //Ch\u1eafc ch\u1eafn r\u1eb1ng ng\u1eaft xu\u1ea5t ph\u00e1t t\u1eeb GPIO0\n    //Ghi gi\u00e1 tr\u1ecb \u0111\u1ea3o \u0111\u1ec3 hi\u1ec3n th\u1ecb LED\n    led_value ^= 0x01;\n    led_value ^= 0x01;\n    WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe) | (uint32_t)(led_value & 1));\n  }\n  GPIO_REG_WRITE(GPIO_STATUS_W1TC_ADDRESS, BIT(BTN_PIN));  //X\u00f3a ng\u1eaft GPIO\n}  N\u00fat nh\u1ea5n s\u1ebd gi\u00fap vi\u1ec7c ESP8266 kh\u1edfi \u0111\u1ed9ng m\u1ed9t h\u00e0nh \u0111\u1ed9ng n\u00e0o \u0111\u00f3 khi c\u1ea7n thi\u1ebft. Trong nhi\u1ec1u \u1ee9ng d\u1ee5ng ch\u00fang ta h\u1ea7u nh\u01b0 \u0111\u1ec1u c\u1ea7n nh\u1eefng k\u00edch ho\u1ea1t t\u1eeb b\u00ean ngo\u00e0i. Xuy\u00ean su\u1ed1t cu\u1ed1n s\u00e1ch n\u00e0y, s\u1ebd d\u00f9ng n\u00fat nh\u1ea5n \u0111\u1ec3 k\u00edch ho\u1ea1t ch\u1ea1y c\u00e1c \u1ee9ng d\u1ee5ng m\u1eabu c\u0169ng nh\u01b0 \u0111\u00e8n LED \u0111\u1ec3 th\u00f4ng b\u00e1o c\u00e1c tr\u1ea1ng th\u00e1i. Trong ph\u1ea7n n\u00e0y, nh\u1ea5n n\u00fat \u0111\u00e8n LED s\u1ebd chuy\u1ec3n tr\u1ea1ng th\u00e1i (t\u1eeb s\u00e1ng -> t\u1eaft v\u00e0 ng\u01b0\u1ee3c l\u1ea1i).   \u0110\u00e2y l\u00e0 v\u00ed d\u1ee5 \u0111\u01a1n gi\u1ea3n, trong th\u1ef1c t\u1ebf vi\u1ec7c x\u1eed l\u00fd n\u00fat nh\u1ea5n kh\u00e1 phi\u1ec1n ph\u1ee9c. B\u1edfi v\u00ec n\u00fat nh\u1ea5n v\u1eadt l\u00fd khi \u0111\u01b0\u1ee3c nh\u1ea5n s\u1ebd t\u1ea1o ra h\u00e0ng lo\u1ea1t c\u00e1c xung l\u00ean xu\u1ed1ng (nhi\u1ec5u, bouncing\u2026). Th\u01b0\u1eddng th\u00ec ch\u1ec9 c\u1ea7n \u0111\u1ea3m b\u1ea3o m\u1ee9c Logic c\u1ee7a ch\u00e2n \u0111o \u0111\u01b0\u1ee3c \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1eef \u1ed5n \u0111\u1ecbnh trong kho\u1ea3ng 100 mili gi\u00e2y l\u00e0 \u0111\u01b0\u1ee3c xem \u0111\u00e3 \u1ed5n \u0111\u1ecbnh.   Ngo\u00e0i c\u00e1ch d\u00f9ng ng\u1eaft \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh n\u00fat nh\u1ea5n c\u00f3 \u0111\u01b0\u1ee3c nh\u1ea5n hay kh\u00f4ng - c\u00e1ch n\u00e0y s\u1ebd ti\u1ebft ki\u1ec7m t\u00e0i nguy\u00ean t\u00ednh to\u00e1n c\u1ee7a CPU, n\u00f3 ch\u1ec9 \u0111\u01b0\u1ee3c g\u1ecdi khi c\u00f3 s\u1ef1 ki\u1ec7n s\u1ea3y ra, th\u00ec c\u00f2n m\u1ed9t c\u00e1ch n\u1eefa l\u00e0 h\u1ecfi v\u00f2ng: C\u00e1ch n\u00e0y \u0111\u1ecfi h\u1ecfi CPU li\u00ean t\u1ee5c ki\u1ec3m tra xem m\u1ee9c Logic c\u1ee7a n\u00fat nh\u1ea5n. \u0110\u1ed3ng th\u1eddi vi\u1ec7c \u0111\u00e1p \u1ee9ng c\u0169ng kh\u00f4ng nhanh b\u1eb1ng s\u1eed d\u1ee5ng ng\u1eaft.",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/basic/uart/",
            "text": "Truy\u1ec1n nh\u1eadn UART\n#\n\n\nESP8266 c\u00f3 2 UART, trong \u0111\u00f3 UART0 c\u00f3 \u0111\u1ea7y \u0111\u1ee7 2 t\u00ednh n\u0103ng TX, RX, v\u00e0 d\u00f9ng l\u00e0m ng\u00f5 ra m\u1eb7c \u0111\u1ecbnh cho c\u00e1c th\u00f4ng tin debug cho SDK, c\u0169ng nh\u01b0 l\u00e0 c\u1ed5ng n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh.\n\n\nT\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i \nBi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n, b\u1ed5 sung th\u00eam file \nuart.c\n, \nuart.h\n \u0111\u1ec3 c\u1ea5u h\u00ecnh c\u1ed5ng UART0 cho vi\u1ec7c nh\u1eadn d\u1eef li\u1ec7u, t\u1ed1c \u0111\u1ed9 baud trong v\u00ed d\u1ee5 n\u00e0y l\u00e0 115200 theo h\u00e0m \nuart_div_modify(0, UART_CLK_FREQ / 115200);\n\n\n\n\nUART0 c\u1ee7a ESP8266 h\u1ed7 tr\u1ee3 128 Byte FIFO v\u00e0 t\u00ednh n\u0103ng Ng\u1eaft Timeout, ng\u1eaft khi \u0111\u1ea7y FIFO. C\u00f3 th\u1ec3 hi\u1ec3u n\u1ebfu b\u1ea1n c\u1ea5u h\u00ecnh ng\u1eaft 128 bytes FIFO, v\u00e0 ng\u1eaft Timeout, khi UART nh\u1eadn \u0111\u1ea7y FIFO s\u1ebd k\u00edch ho\u1ea1t ng\u1eaft \u0111\u1ea7y FIFO, ho\u1eb7c n\u1ebfu tr\u01b0\u1eddng h\u1ee3p ch\u01b0a \u0111\u1ea7y FIFO nh\u01b0ng qua 1 kho\u1ea3ng th\u1eddi gian (c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh \u0111\u01b0\u1ee3c) m\u00e0 kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u n\u1eefa th\u00ec c\u0169ng ph\u00e1t sinh ng\u1eaft TOUT \n\n\nB\u1ea1n c\u00f3 th\u1ec3 l\u1ea5y driver tr\u1ef1c ti\u1ebfp t\u1eeb b\u00e0i n\u00e0y ho\u1eb7c c\u00e1c v\u00ed d\u1ee5 t\u1eeb SDK m\u00e0 kh\u00f4ng ph\u1ea3i l\u00e0m g\u00ec n\u1eefa n\u1ebfu vi\u1ec7c truy\u1ec1n nh\u1eadn kh\u00f4ng qu\u00e1 ph\u1ee9c t\u1ea1p\n\n\n\n\n\n\nN\u1ed9i dung\n\n\nKhi nh\u1eadn \u0111\u01b0\u1ee3c k\u00fd t\u1ef1 \n1\n t\u1eeb Terminal, b\u1eadt \u0111\u00e8n LED, xu\u1ea5t n\u1ed9i dung \nLED On\n tr\u1edf l\u1ea1i, v\u00e0 \n0\n s\u1ebd t\u1eaft, xu\u1ea5t n\u1ed9i dung \nLED Off\n\n\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github:\n#\n\n\ngit clone https://github.com/esp8266vn/eps-iot-uart.git\ncd eps-iot-uart\nmake\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\nesp-iot-uart\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    |-- uart.c\n    |-- uart.h\n    |-- led_btn.c\n    |-- led_btn.h\n    `-- user_config.h\n\n\n\n\nPh\u1ea7n c\u1ea5u h\u00ecnh cho \nLED\n v\u00e0 \nN\u00fat nh\u1ea5n\n \u0111\u01b0\u1ee3c g\u1ed9p l\u1ea1i th\u00e0nh 1 v\u00e0 n\u1eb1m trong file \nled_btn.c\n v\u00e0 \nled_btn.h\n . \n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\n//main.c\n#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\n#include \"led_btn.h\"\n#include \"uart.h\"\n\nvoid btn_pressed()\n{\n    led_toggle();\n}\nvoid uart_received(char data)\n{\n  if(data == '0') {\n    led_off();\n    os_printf(\"LED off\\n\");\n  } else if(data == '1') {\n    led_on();\n    os_printf(\"LED on\\n\");\n  }\n}\nvoid app_init()\n{\n    led_init();\n    btn_init(btn_pressed);\n    uart_setup(uart_received);\n}\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}\n\n\n\n\nN\u1ed9i dung file \nuart.c\n kh\u00e1 d\u00e0i, c\u00f3 th\u1ec3 xem tr\u1ef1c ti\u1ebfp tr\u00ean github ho\u1eb7c trong th\u01b0 m\u1ee5c \nesp-iot-uart\n \u0111\u00e3 clone v\u1ec1 \n\n\nK\u1ebft qu\u1ea3\n#\n\n\nKhi th\u1ef1c hi\u1ec7n \u1ea5n s\u1ed1 0 v\u00e0 s\u1ed1 1 tr\u00ean terminal s\u1ebd in ra d\u00f2ng t\u01b0\u01a1ng \u1ee9ng\n\n\nLED on\nLED off\nLED on\nLED off",
            "title": "UART"
        },
        {
            "location": "/nonos-sdk/basic/uart/#truyen-nhan-uart",
            "text": "ESP8266 c\u00f3 2 UART, trong \u0111\u00f3 UART0 c\u00f3 \u0111\u1ea7y \u0111\u1ee7 2 t\u00ednh n\u0103ng TX, RX, v\u00e0 d\u00f9ng l\u00e0m ng\u00f5 ra m\u1eb7c \u0111\u1ecbnh cho c\u00e1c th\u00f4ng tin debug cho SDK, c\u0169ng nh\u01b0 l\u00e0 c\u1ed5ng n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh.  T\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i  Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean , b\u1ed5 sung th\u00eam file  uart.c ,  uart.h  \u0111\u1ec3 c\u1ea5u h\u00ecnh c\u1ed5ng UART0 cho vi\u1ec7c nh\u1eadn d\u1eef li\u1ec7u, t\u1ed1c \u0111\u1ed9 baud trong v\u00ed d\u1ee5 n\u00e0y l\u00e0 115200 theo h\u00e0m  uart_div_modify(0, UART_CLK_FREQ / 115200);   UART0 c\u1ee7a ESP8266 h\u1ed7 tr\u1ee3 128 Byte FIFO v\u00e0 t\u00ednh n\u0103ng Ng\u1eaft Timeout, ng\u1eaft khi \u0111\u1ea7y FIFO. C\u00f3 th\u1ec3 hi\u1ec3u n\u1ebfu b\u1ea1n c\u1ea5u h\u00ecnh ng\u1eaft 128 bytes FIFO, v\u00e0 ng\u1eaft Timeout, khi UART nh\u1eadn \u0111\u1ea7y FIFO s\u1ebd k\u00edch ho\u1ea1t ng\u1eaft \u0111\u1ea7y FIFO, ho\u1eb7c n\u1ebfu tr\u01b0\u1eddng h\u1ee3p ch\u01b0a \u0111\u1ea7y FIFO nh\u01b0ng qua 1 kho\u1ea3ng th\u1eddi gian (c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh \u0111\u01b0\u1ee3c) m\u00e0 kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u n\u1eefa th\u00ec c\u0169ng ph\u00e1t sinh ng\u1eaft TOUT   B\u1ea1n c\u00f3 th\u1ec3 l\u1ea5y driver tr\u1ef1c ti\u1ebfp t\u1eeb b\u00e0i n\u00e0y ho\u1eb7c c\u00e1c v\u00ed d\u1ee5 t\u1eeb SDK m\u00e0 kh\u00f4ng ph\u1ea3i l\u00e0m g\u00ec n\u1eefa n\u1ebfu vi\u1ec7c truy\u1ec1n nh\u1eadn kh\u00f4ng qu\u00e1 ph\u1ee9c t\u1ea1p    N\u1ed9i dung  Khi nh\u1eadn \u0111\u01b0\u1ee3c k\u00fd t\u1ef1  1  t\u1eeb Terminal, b\u1eadt \u0111\u00e8n LED, xu\u1ea5t n\u1ed9i dung  LED On  tr\u1edf l\u1ea1i, v\u00e0  0  s\u1ebd t\u1eaft, xu\u1ea5t n\u1ed9i dung  LED Off",
            "title": "Truy\u1ec1n nh\u1eadn UART"
        },
        {
            "location": "/nonos-sdk/basic/uart/#lay-du-an-ve-tu-github",
            "text": "git clone https://github.com/esp8266vn/eps-iot-uart.git\ncd eps-iot-uart\nmake",
            "title": "L\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github:"
        },
        {
            "location": "/nonos-sdk/basic/uart/#so-o-file",
            "text": "esp-iot-uart\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    |-- uart.c\n    |-- uart.h\n    |-- led_btn.c\n    |-- led_btn.h\n    `-- user_config.h  Ph\u1ea7n c\u1ea5u h\u00ecnh cho  LED  v\u00e0  N\u00fat nh\u1ea5n  \u0111\u01b0\u1ee3c g\u1ed9p l\u1ea1i th\u00e0nh 1 v\u00e0 n\u1eb1m trong file  led_btn.c  v\u00e0  led_btn.h  .",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/basic/uart/#ma-nguon",
            "text": "//main.c\n#include <stdio.h>\n#include \"osapi.h\"\n#include \"user_interface.h\"\n#include \"led_btn.h\"\n#include \"uart.h\"\n\nvoid btn_pressed()\n{\n    led_toggle();\n}\nvoid uart_received(char data)\n{\n  if(data == '0') {\n    led_off();\n    os_printf(\"LED off\\n\");\n  } else if(data == '1') {\n    led_on();\n    os_printf(\"LED on\\n\");\n  }\n}\nvoid app_init()\n{\n    led_init();\n    btn_init(btn_pressed);\n    uart_setup(uart_received);\n}\nvoid user_init(void)\n{\n    system_init_done_cb(app_init);\n}  N\u1ed9i dung file  uart.c  kh\u00e1 d\u00e0i, c\u00f3 th\u1ec3 xem tr\u1ef1c ti\u1ebfp tr\u00ean github ho\u1eb7c trong th\u01b0 m\u1ee5c  esp-iot-uart  \u0111\u00e3 clone v\u1ec1",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/basic/uart/#ket-qua",
            "text": "Khi th\u1ef1c hi\u1ec7n \u1ea5n s\u1ed1 0 v\u00e0 s\u1ed1 1 tr\u00ean terminal s\u1ebd in ra d\u00f2ng t\u01b0\u01a1ng \u1ee9ng  LED on\nLED off\nLED on\nLED off",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/",
            "text": "S\u1eed d\u1ee5ng s\u1ef1 \u00e1n c\u00f3 Makefile ph\u1ee9c t\u1ea1p\n\n\nD\u1ef1 \u00e1n m\u1eabu\n\n\nC\u1ea5u tr\u00fac d\u1ef1 \u00e1n\n\n\nL\u01b0u \u00fd\n\n\nC\u1ea5u tr\u00fac d\u1ef1 \u00e1n sau khi build th\u00e0nh c\u00f4ng\n\n\n\n\n\n\nM\u00e3 ngu\u1ed3n\n\n\nL\u01b0u \u00fd\n\n\n\n\n\n\nK\u1ebft qu\u1ea3\n\n\n\n\n\n\n\n\n\n\nS\u1eed d\u1ee5ng s\u1ef1 \u00e1n c\u00f3 Makefile ph\u1ee9c t\u1ea1p\n#\n\n\n\u0110\u1ec3 bi\u00ean d\u1ecbch s\u1ef1 \u00e1n c\u00f3 nhi\u1ec1u file h\u01a1n n\u1eefa th\u00ec vi\u1ec7c s\u1eed d\u1ee5ng Makefile nh\u01b0 c\u00e1c v\u00ed d\u1ee5 tr\u00ean kh\u00e1 phi\u1ec1n ph\u1ee9c, ph\u1ea3i thay \u0111\u1ed5i nhi\u1ec1u ch\u1ed7. M\u1ee5c \u0111\u00edch c\u1ee7a Makefile \u0111\u01a1n gi\u1ea3n l\u00e0 gi\u00fap ch\u00fang ta hi\u1ec3u \u0111\u01b0\u1ee3c nguy\u00ean l\u00fd ho\u1ea1t \u0111\u1ed9ng c\u1ee7a compiler v\u00e0 c\u00e1ch th\u1ee9c bi\u00ean d\u1ecbch \u1ee9ng d\u1ee5ng v\u1edbi Nonos-sdk. \n\u0110\u1ec3 ti\u1ec7n l\u1ee3i, k\u1ec3 t\u1eeb m\u1ee5c n\u00e0y tr\u1edf \u0111i, ch\u00fang ta s\u1eed d\u1ee5ng Makefile trong d\u1ef1 \u00e1n m\u1eabu v\u00e0 ph\u00e2n b\u1ed5 d\u1ef1 \u00e1n theo c\u1ea5u tr\u00fac nh\u01b0 b\u00ean d\u01b0\u1edbi. D\u1ef1 \u00e1n \u0111\u00e3 vi\u1ebft s\u1eb5n Makefile t\u1ef1 \u0111\u1ed9ng t\u00ecm v\u00e0 bi\u00ean d\u1ecbch c\u00e1c file \n.c\n \n\n\nD\u1ef1 \u00e1n m\u1eabu\n#\n\n\n\n\nhttps://github.com/esp8266vn/esp8266-nonos-sdk-boilerplate\n\n\nHo\u1eb7c l\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github: \n\n\n\n\ngit clone https://github.com/esp8266vn/esp8266-nonos-sdk-boilerplate.git\n\n\n\n\nC\u1ea5u tr\u00fac d\u1ef1 \u00e1n\n#\n\n\nesp8266-nonos-sdk-boilerplate\n    |--- Makefile\n    |--- modules\n    |   |--- moduleA\n    |   |   |-- Makefile\n    |   |   |-- include\n    |   |   |   `-- modulea.h \n    |   |   `-- modulea.c\n    |--- include\n    |   `-- user_config.h\n    |--- user\n        |-- Makefile\n        |-- user_main.c \n        `-- rfinit.c\n\n\n\n\n\nTrong \u0111\u00f3: \n\n\n\n\nTh\u01b0 m\u1ee5c \nmodules\n ch\u1ee9a c\u00e1c module li\u00ean quan, m\u1ed7i module c\u00f3 \u0111\u1ecbnh ngh\u0129a prototype \u0111\u1eb7t trong th\u01b0 m\u1ee5c \ninclude\n\n\n\n\nL\u01b0u \u00fd\n#\n\n\n\n\n\u0110\u01b0\u1eddng d\u1eabn m\u1eb7c \u0111\u1ecbnh c\u1ee7a project trong makefile\n\n\n\n\n# base directory of the ESP8266 SDK package, absolute\nSDK_BASE    ?= /tools/esp8266/sdk/ESP8266_NONOS_SDK\n\n#Esptool.py path and port\nESPTOOL     ?= /tools/esp8266/esptool/esptool.py\n\n\n\n\n\n\n\nThay \u0111\u1ed5i c\u1ed5ng COM\n\n\n\n\nESPPORT     ?= /dev/tty.SLAB_USBtoUART\n\n\n\n\nV\u1edbi ubuntu/linux s\u1ebd c\u00f3 d\u1ea1ng \nESPPORT        ?= /dev/ttyUSB0\n\n- T\u1ed1c \u0111\u1ed9 baud n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 460800\n\n\nESPBAUD     ?= 460800\n\n\n\n\n\n\nTh\u1ef1c hi\u1ec7n build th\u1eed project esp8266-nonos-sdk-boilerplate, n\u1ebfu th\u00e0nh c\u00f4ng s\u1ebd xu\u1ea5t hi\u1ec7n th\u01b0 m\u1ee5c firmware ch\u1ee9a firmware \u0111\u1ec3 n\u1ea1p xu\u1ed1ng.\n\n\n\n\nC\u1ea5u tr\u00fac d\u1ef1 \u00e1n sau khi build th\u00e0nh c\u00f4ng\n#\n\n\nesp8266-nonos-sdk-boilerplate\n.\n\u251c\u2500\u2500 build\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.a\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.out\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 rfinit.o\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 user_main.o\n\u251c\u2500\u2500 firmware\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app0x00000.bin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 esp8266-nonos-app0x10000.bin\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user_config.h\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 SublimeAStyleFormatter.sublime-settings\n\u2514\u2500\u2500 user\n    \u251c\u2500\u2500 Makefile\n    \u251c\u2500\u2500 rfinit.c\n    \u2514\u2500\u2500 user_main.c\n\n5 directories, 13 files\n\n\n\n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\nesp8266-nonos-sdk-boilerplate/user_main.c\n#include \"osapi.h\"\n#include \"user_interface.h\"\n\nvoid ICACHE_FLASH_ATTR print_info()\n{\n  uart_div_modify(0, UART_CLK_FREQ / 115200);\n  os_printf(\"\\r\\n\\r\\n[INFO] BOOTUP...\\r\\n\");\n  os_printf(\"[INFO] SDK: %s\\r\\n\", system_get_sdk_version());\n  os_printf(\"[INFO] Chip ID: %08X\\r\\n\", system_get_chip_id());\n  os_printf(\"[INFO] Memory info:\\r\\n\");\n  system_print_meminfo();\n\n  os_printf(\"[INFO] -------------------------------------------\\n\");\n  os_printf(\"[INFO] Build time: %s\\n\", BUID_TIME);\n  os_printf(\"[INFO] -------------------------------------------\\n\");\n\n}\n\n\nvoid ICACHE_FLASH_ATTR app_init()\n{\n\n\n  print_info();\n\n\n  wifi_set_opmode_current(STATION_MODE);\n\n}\n\nvoid ICACHE_FLASH_ATTR user_init(void)\n{\n  system_init_done_cb(app_init);\n\n}\n\n\n\n\n\nCh\u01b0\u01a1ng tr\u00ecnh s\u1ebd in ra m\u00e0n h\u00ecnh m\u1ed9t s\u1ed1 th\u00f4ng tin v\u1ec1 SDK, ID chip v\u00e0 th\u00f4ng tin v\u1ec1 Memory, th\u1eddi gian build,..\n\n\nL\u01b0u \u00fd\n#\n\n\n\n\nT\u1ed1c \u0111\u1ed9 baud hi\u1ec3n th\u1ecb th\u00f4ng tin ra terminal l\u00e0 115200\n\n\n\n\nK\u1ebft qu\u1ea3\n#\n\n\nSau khi build v\u00e0 n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh xu\u1ed1ng s\u1ebd hi\u1ec7n th\u00f4ng b\u00e1o nh\u01b0 sau\n\n\n[INFO] BOOTUP...\n[INFO] SDK: 2.0.0(656edbf)\n[INFO] Chip ID: 00135C7D\n[INFO] Memory info:\ndata  : 0x3ffe8000 ~ 0x3ffe836c, len: 876\nrodata: 0x3ffe8370 ~ 0x3ffe8574, len: 516\nbss   : 0x3ffe8578 ~ 0x3ffee808, len: 25232\nheap  : 0x3ffee808 ~ 0x3fffc000, len: 55288\n[INFO] -------------------------------------------\n[INFO] Build time: 2016-Th10-31_00:02:21_ICT\n[INFO] -------------------------------------------\nbcn 0\ndel if1\nusl\nmode : sta(5c:cf:7f:13:5c:7d)\nadd if0",
            "title": "Makefile cho d\u1ef1 \u00e1n ph\u1ee9c t\u1ea1p"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#su-dung-su-an-co-makefile-phuc-tap",
            "text": "\u0110\u1ec3 bi\u00ean d\u1ecbch s\u1ef1 \u00e1n c\u00f3 nhi\u1ec1u file h\u01a1n n\u1eefa th\u00ec vi\u1ec7c s\u1eed d\u1ee5ng Makefile nh\u01b0 c\u00e1c v\u00ed d\u1ee5 tr\u00ean kh\u00e1 phi\u1ec1n ph\u1ee9c, ph\u1ea3i thay \u0111\u1ed5i nhi\u1ec1u ch\u1ed7. M\u1ee5c \u0111\u00edch c\u1ee7a Makefile \u0111\u01a1n gi\u1ea3n l\u00e0 gi\u00fap ch\u00fang ta hi\u1ec3u \u0111\u01b0\u1ee3c nguy\u00ean l\u00fd ho\u1ea1t \u0111\u1ed9ng c\u1ee7a compiler v\u00e0 c\u00e1ch th\u1ee9c bi\u00ean d\u1ecbch \u1ee9ng d\u1ee5ng v\u1edbi Nonos-sdk. \n\u0110\u1ec3 ti\u1ec7n l\u1ee3i, k\u1ec3 t\u1eeb m\u1ee5c n\u00e0y tr\u1edf \u0111i, ch\u00fang ta s\u1eed d\u1ee5ng Makefile trong d\u1ef1 \u00e1n m\u1eabu v\u00e0 ph\u00e2n b\u1ed5 d\u1ef1 \u00e1n theo c\u1ea5u tr\u00fac nh\u01b0 b\u00ean d\u01b0\u1edbi. D\u1ef1 \u00e1n \u0111\u00e3 vi\u1ebft s\u1eb5n Makefile t\u1ef1 \u0111\u1ed9ng t\u00ecm v\u00e0 bi\u00ean d\u1ecbch c\u00e1c file  .c",
            "title": "S\u1eed d\u1ee5ng s\u1ef1 \u00e1n c\u00f3 Makefile ph\u1ee9c t\u1ea1p"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#du-an-mau",
            "text": "https://github.com/esp8266vn/esp8266-nonos-sdk-boilerplate  Ho\u1eb7c l\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github:    git clone https://github.com/esp8266vn/esp8266-nonos-sdk-boilerplate.git",
            "title": "D\u1ef1 \u00e1n m\u1eabu"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#cau-truc-du-an",
            "text": "esp8266-nonos-sdk-boilerplate\n    |--- Makefile\n    |--- modules\n    |   |--- moduleA\n    |   |   |-- Makefile\n    |   |   |-- include\n    |   |   |   `-- modulea.h \n    |   |   `-- modulea.c\n    |--- include\n    |   `-- user_config.h\n    |--- user\n        |-- Makefile\n        |-- user_main.c \n        `-- rfinit.c  Trong \u0111\u00f3:    Th\u01b0 m\u1ee5c  modules  ch\u1ee9a c\u00e1c module li\u00ean quan, m\u1ed7i module c\u00f3 \u0111\u1ecbnh ngh\u0129a prototype \u0111\u1eb7t trong th\u01b0 m\u1ee5c  include",
            "title": "C\u1ea5u tr\u00fac d\u1ef1 \u00e1n"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#luu-y",
            "text": "\u0110\u01b0\u1eddng d\u1eabn m\u1eb7c \u0111\u1ecbnh c\u1ee7a project trong makefile   # base directory of the ESP8266 SDK package, absolute\nSDK_BASE    ?= /tools/esp8266/sdk/ESP8266_NONOS_SDK\n\n#Esptool.py path and port\nESPTOOL     ?= /tools/esp8266/esptool/esptool.py   Thay \u0111\u1ed5i c\u1ed5ng COM   ESPPORT     ?= /dev/tty.SLAB_USBtoUART  V\u1edbi ubuntu/linux s\u1ebd c\u00f3 d\u1ea1ng  ESPPORT        ?= /dev/ttyUSB0 \n- T\u1ed1c \u0111\u1ed9 baud n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 460800  ESPBAUD     ?= 460800   Th\u1ef1c hi\u1ec7n build th\u1eed project esp8266-nonos-sdk-boilerplate, n\u1ebfu th\u00e0nh c\u00f4ng s\u1ebd xu\u1ea5t hi\u1ec7n th\u01b0 m\u1ee5c firmware ch\u1ee9a firmware \u0111\u1ec3 n\u1ea1p xu\u1ed1ng.",
            "title": "L\u01b0u \u00fd"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#cau-truc-du-an-sau-khi-build-thanh-cong",
            "text": "esp8266-nonos-sdk-boilerplate\n.\n\u251c\u2500\u2500 build\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.a\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.out\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 rfinit.o\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 user_main.o\n\u251c\u2500\u2500 firmware\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app0x00000.bin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 esp8266-nonos-app0x10000.bin\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user_config.h\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 SublimeAStyleFormatter.sublime-settings\n\u2514\u2500\u2500 user\n    \u251c\u2500\u2500 Makefile\n    \u251c\u2500\u2500 rfinit.c\n    \u2514\u2500\u2500 user_main.c\n\n5 directories, 13 files",
            "title": "C\u1ea5u tr\u00fac d\u1ef1 \u00e1n sau khi build th\u00e0nh c\u00f4ng"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#ma-nguon",
            "text": "esp8266-nonos-sdk-boilerplate/user_main.c\n#include \"osapi.h\"\n#include \"user_interface.h\"\n\nvoid ICACHE_FLASH_ATTR print_info()\n{\n  uart_div_modify(0, UART_CLK_FREQ / 115200);\n  os_printf(\"\\r\\n\\r\\n[INFO] BOOTUP...\\r\\n\");\n  os_printf(\"[INFO] SDK: %s\\r\\n\", system_get_sdk_version());\n  os_printf(\"[INFO] Chip ID: %08X\\r\\n\", system_get_chip_id());\n  os_printf(\"[INFO] Memory info:\\r\\n\");\n  system_print_meminfo();\n\n  os_printf(\"[INFO] -------------------------------------------\\n\");\n  os_printf(\"[INFO] Build time: %s\\n\", BUID_TIME);\n  os_printf(\"[INFO] -------------------------------------------\\n\");\n\n}\n\n\nvoid ICACHE_FLASH_ATTR app_init()\n{\n\n\n  print_info();\n\n\n  wifi_set_opmode_current(STATION_MODE);\n\n}\n\nvoid ICACHE_FLASH_ATTR user_init(void)\n{\n  system_init_done_cb(app_init);\n\n}  Ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd in ra m\u00e0n h\u00ecnh m\u1ed9t s\u1ed1 th\u00f4ng tin v\u1ec1 SDK, ID chip v\u00e0 th\u00f4ng tin v\u1ec1 Memory, th\u1eddi gian build,..",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#luu-y_1",
            "text": "T\u1ed1c \u0111\u1ed9 baud hi\u1ec3n th\u1ecb th\u00f4ng tin ra terminal l\u00e0 115200",
            "title": "L\u01b0u \u00fd"
        },
        {
            "location": "/nonos-sdk/basic/complex-makefile/#ket-qua",
            "text": "Sau khi build v\u00e0 n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh xu\u1ed1ng s\u1ebd hi\u1ec7n th\u00f4ng b\u00e1o nh\u01b0 sau  [INFO] BOOTUP...\n[INFO] SDK: 2.0.0(656edbf)\n[INFO] Chip ID: 00135C7D\n[INFO] Memory info:\ndata  : 0x3ffe8000 ~ 0x3ffe836c, len: 876\nrodata: 0x3ffe8370 ~ 0x3ffe8574, len: 516\nbss   : 0x3ffe8578 ~ 0x3ffee808, len: 25232\nheap  : 0x3ffee808 ~ 0x3fffc000, len: 55288\n[INFO] -------------------------------------------\n[INFO] Build time: 2016-Th10-31_00:02:21_ICT\n[INFO] -------------------------------------------\nbcn 0\ndel if1\nusl\nmode : sta(5c:cf:7f:13:5c:7d)\nadd if0",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/basic/task/",
            "text": "Task\n#",
            "title": "Task"
        },
        {
            "location": "/nonos-sdk/basic/task/#task",
            "text": "",
            "title": "Task"
        },
        {
            "location": "/nonos-sdk/basic/wifi/",
            "text": "K\u1ebft n\u1ed1i ESP8266 v\u1edbi router Wifi\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n\n\nS\u01a1 \u0111\u1ed3 file\n\n\nM\u00e3 ngu\u1ed3n\n\n\nK\u1ebft qu\u1ea3\n\n\nG\u1ee3i \u00fd\n\n\nReferences\n\n\n\n\n\n\n\n\n\n\nK\u1ebft n\u1ed1i ESP8266 v\u1edbi router Wifi\n#\n\n\nT\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i \nBi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n, to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file, \nMakefile, user_config.h, rf_init.c\n gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file \nmain.c\n.\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n#\n\n\ngit clone https://github.com/esp8266vn/eps-iot-wifi.git\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\nesp-iot-led-blink\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h\n\n\n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\n\n#include \"osapi.h\"\n#include \"user_interface.h\"\n#define PASSWORD    \"yourpassword\"\n#define SSID        \"yourssid\"\nLOCAL os_timer_t test_timer;\n\n/******************************************************************************\n    * FunctionName : user_esp_platform_check_ip\n    * Description    : check whether get ip addr or not\n    * Parameters         : none\n    * Returns        : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_esp_platform_check_ip(void)\n{\n    struct ip_info ipconfig;\n\n    //disarm timer first\n    os_timer_disarm(&test_timer);\n\n    //get ip info of ESP8266 station\n    wifi_get_ip_info(STATION_IF, &ipconfig);\n\n    if (wifi_station_get_connect_status() == STATION_GOT_IP && ipconfig.ip.addr != 0) {\n\n            os_printf(\"got ip !!! \\r\\n\");\n\n    } else {\n\n        if ((wifi_station_get_connect_status() == STATION_WRONG_PASSWORD ||\n                wifi_station_get_connect_status() == STATION_NO_AP_FOUND ||\n                wifi_station_get_connect_status() == STATION_CONNECT_FAIL)) {\n\n            os_printf(\"connect fail !!! \\r\\n\");\n\n        } else {\n\n            //re-arm timer to check ip\n            os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n            os_timer_arm(&test_timer, 100, 0);\n        }\n    }\n}\n\n\n/******************************************************************************\n    * FunctionName : user_set_station_config\n    * Description    : set the router info which ESP8266 station will connect to\n    * Parameters         : none\n    * Returns        : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_set_station_config(void)\n{\n    // Wifi configuration\n    char ssid[32] = SSID;\n    char password[64] = PASSWORD;\n    struct station_config stationConf;\n\n    os_memset(stationConf.ssid, 0, 32);\n    os_memset(stationConf.password, 0, 64);\n    //need not mac address\n    stationConf.bssid_set = 0;\n\n    //Set ap settings\n    os_memcpy(&stationConf.ssid, ssid, 32);\n    os_memcpy(&stationConf.password, password, 64);\n    wifi_station_set_config(&stationConf);\n\n    //set a timer to check whether got ip from router succeed or not.\n    os_timer_disarm(&test_timer);\n    os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n    os_timer_arm(&test_timer, 100, 0);\n}\n\n/******************************************************************************\n    * FunctionName : user_init\n    * Description    : entry of user application, init user function here\n    * Parameters         : none\n    * Returns        : none\n*******************************************************************************/\nvoid user_init(void)\n{\n    uart_div_modify(0, UART_CLK_FREQ / 115200);\n    os_printf(\"SDK version:%s\\n\", system_get_sdk_version());\n    //Set softAP + station mode\n    wifi_set_opmode(STATION_MODE);\n    // ESP8266 connect to router.\n    user_set_station_config();\n}\n\n\n\n\n\nK\u1ebft qu\u1ea3\n#\n\n\nSau khi n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh th\u00e0nh c\u00f4ng\n\n\nS\u1eed d\u1ee5ng Terminal quan s\u00e1t s\u1ebd th\u1ea5y\n\n\nconnected with yourssid, channel 1\ndhcp client start...\nip:192.168.1.46,mask:255.255.255.0,gw:192.168.1.1\ngot ip !!!\n\n\n\n\nG\u1ee3i \u00fd\n#\n\n\n\u0110\u1ec3 truy c\u1eadp \u0111\u01b0\u1ee3c v\u00e0o router b\u1ea1n c\u1ea7n ph\u1ea3i s\u1eeda c\u00e1c define PASSWORD v\u00e0 SSID cho \u0111\u00fang v\u1edbi router m\u00e0 b\u1ea1n mu\u1ed1n truy c\u1eadp\n\n\n#define PASSWORD    \"yourpassword\"\n#define SSID        \"yourssid\"\n\n\n\n\nSau khi k\u1ebft n\u1ed1i gi\u00e1 tr\u1ecb c\u1ee7a SSID v\u00e0 PASSWORD s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u v\u00e0o flash v\u00e0 \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 n\u1ebfu l\u1ea7n sau  b\u1ea1n kh\u00f4ng thay \u0111\u1ed5i gi\u00e1 tr\u1ecb th\u00ec nh\u1eefng gi\u00e1 tr\u1ecb trong flash s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 truy c\u1eadp v\u00e0o router. \u0110i\u1ec1u n\u00e0y \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1eb1ng \u0111o\u1ea1n code sau.\n\n\n    // Wifi configuration\n    char ssid[32] = SSID;\n    char password[64] = PASSWORD;\n    struct station_config stationConf;\n\n    os_memset(stationConf.ssid, 0, 32);\n    os_memset(stationConf.password, 0, 64);\n    //need not mac address\n    stationConf.bssid_set = 0;\n\n    //Set ap settings\n    os_memcpy(&stationConf.ssid, ssid, 32);\n    os_memcpy(&stationConf.password, password, 64);\n    wifi_station_set_config(&stationConf);\n\n\n\n\nN\u1ebfu \u0111\u1ec3 \u00fd th\u00ec c\u00f3 th\u1ec3 th\u1ea5y trong code c\u00f3 1 \u0111o\u1ea1n ki\u1ec3m tra xem module \u0111\u00e3 k\u1ebft n\u1ed1i v\u1edbi router th\u00e0nh c\u00f4ng hay ch\u01b0a\n\n\n    os_timer_disarm(&test_timer);\n    os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n    os_timer_arm(&test_timer, 100, 0);\n\n\n\n\n\u0110o\u1ea1n n\u00e0y c\u00f3 ngh\u0129a l\u00e0 set cho software timer \u0111\u1ee3i sau 100 ms th\u00ec s\u1ebd g\u1ecdi h\u00e0m call back user_esp_platform_check_ip\n\u0111\u1ec3 check xem esp8266 \u0111\u00e3 l\u1ea5y \u0111\u01b0\u1ee3c ip hay ch\u01b0a.\nCh\u00fa \u00fd l\u00e0 h\u00e0m\n\n\n    os_timer_arm(&test_timer, 100, 0);\n\n\n\n\nC\u00f3 tham s\u1ed1 th\u1ee9 3 l\u00e0 0 c\u00f3 ngh\u0129a l\u00e0 timer ch\u1ec9 th\u1ef1c hi\u1ec7n \u0111\u1ebfm 100 ms 1 l\u1ea7n n\u1ebfu tham s\u1ed1 n\u00e0y \u0111\u01b0\u1ee3c set th\u00e0nh 1 th\u00ec c\u1ee9 sau 100 ms h\u00e0m user_esp_platform_check_ip() s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n.\nB\u1ea1n c\u00f3 th\u1ec3 xem th\u00eam v\u1ec1 c\u00e1ch s\u1eed d\u1ee5ng timer trong t\u00e0i li\u1ec7u ESP8266 Non-OS SDK API Reference\n\n\n\n\nC\u1ea9n th\u1eadn\n\n\nNh\u1eefng h\u00e0m sau \u0111\u00e2y khi c\u1ea5u h\u00ecnh s\u1ebd ghi d\u1eef li\u1ec7u v\u00e0o v\u00f9ng nh\u1edb l\u01b0u tr\u1eef Flash, vi\u1ec7c ghi c\u1ea5u h\u00ecnh nh\u01b0 v\u1eady qu\u00e1 th\u01b0\u1eddng xuy\u00ean s\u1ebd g\u00e2y h\u1ecfng b\u1ed9 nh\u1edb: \n\n- \nwifi_set_opmode\n\n- \nwifi_station_set_config\n\n- \nwifi_station_set_auto_connect\n\nSDK cung c\u1ea5p cho ta c\u00e1c h\u00e0m t\u01b0\u01a1ng \u0111\u1ec3 ki\u1ec3m tra xem c\u1ea5u h\u00ecnh \u0111\u00f3 \u0111\u00e3 t\u1ed3n t\u1ea1i ch\u01b0a v\u00e0 th\u1ef1c thi vi\u1ec7c ghi n\u1ebfu ch\u01b0a:\n\n- \nwifi_get_opmode\n\n- \nwifi_station_get_config\n\n- \nwifi_station_get_auto_connect\n\nV\u00e0 c\u00e1c h\u00e0m ch\u1ec9 ghi d\u1eef li\u1ec7u l\u00ean RAM v\u00e0 th\u1ef1c thi \n- \nwifi_set_opmode_current\n\n- \nwifi_station_set_config_current\n\nC\u00f3 th\u1ec3 xem th\u00eam t\u1ea1i \n$SDK/include/user_interface.h\n\n\n\n\nReferences\n#\n\n\n\n\nhttps://espressif.com/sites/default/files/documentation/2c-esp8266_non_os_sdk_api_reference_en.pdf\n\n\nhttps://espressif.com/en/products/hardware/esp8266ex/resources",
            "title": "Wifi"
        },
        {
            "location": "/nonos-sdk/basic/wifi/#ket-noi-esp8266-voi-router-wifi",
            "text": "T\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i  Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean , to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file,  Makefile, user_config.h, rf_init.c  gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file  main.c .",
            "title": "K\u1ebft n\u1ed1i ESP8266 v\u1edbi router Wifi"
        },
        {
            "location": "/nonos-sdk/basic/wifi/#lay-du-an-ve-tu-github",
            "text": "git clone https://github.com/esp8266vn/eps-iot-wifi.git",
            "title": "L\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github"
        },
        {
            "location": "/nonos-sdk/basic/wifi/#so-o-file",
            "text": "esp-iot-led-blink\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/basic/wifi/#ma-nguon",
            "text": "#include \"osapi.h\"\n#include \"user_interface.h\"\n#define PASSWORD    \"yourpassword\"\n#define SSID        \"yourssid\"\nLOCAL os_timer_t test_timer;\n\n/******************************************************************************\n    * FunctionName : user_esp_platform_check_ip\n    * Description    : check whether get ip addr or not\n    * Parameters         : none\n    * Returns        : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_esp_platform_check_ip(void)\n{\n    struct ip_info ipconfig;\n\n    //disarm timer first\n    os_timer_disarm(&test_timer);\n\n    //get ip info of ESP8266 station\n    wifi_get_ip_info(STATION_IF, &ipconfig);\n\n    if (wifi_station_get_connect_status() == STATION_GOT_IP && ipconfig.ip.addr != 0) {\n\n            os_printf(\"got ip !!! \\r\\n\");\n\n    } else {\n\n        if ((wifi_station_get_connect_status() == STATION_WRONG_PASSWORD ||\n                wifi_station_get_connect_status() == STATION_NO_AP_FOUND ||\n                wifi_station_get_connect_status() == STATION_CONNECT_FAIL)) {\n\n            os_printf(\"connect fail !!! \\r\\n\");\n\n        } else {\n\n            //re-arm timer to check ip\n            os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n            os_timer_arm(&test_timer, 100, 0);\n        }\n    }\n}\n\n\n/******************************************************************************\n    * FunctionName : user_set_station_config\n    * Description    : set the router info which ESP8266 station will connect to\n    * Parameters         : none\n    * Returns        : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_set_station_config(void)\n{\n    // Wifi configuration\n    char ssid[32] = SSID;\n    char password[64] = PASSWORD;\n    struct station_config stationConf;\n\n    os_memset(stationConf.ssid, 0, 32);\n    os_memset(stationConf.password, 0, 64);\n    //need not mac address\n    stationConf.bssid_set = 0;\n\n    //Set ap settings\n    os_memcpy(&stationConf.ssid, ssid, 32);\n    os_memcpy(&stationConf.password, password, 64);\n    wifi_station_set_config(&stationConf);\n\n    //set a timer to check whether got ip from router succeed or not.\n    os_timer_disarm(&test_timer);\n    os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n    os_timer_arm(&test_timer, 100, 0);\n}\n\n/******************************************************************************\n    * FunctionName : user_init\n    * Description    : entry of user application, init user function here\n    * Parameters         : none\n    * Returns        : none\n*******************************************************************************/\nvoid user_init(void)\n{\n    uart_div_modify(0, UART_CLK_FREQ / 115200);\n    os_printf(\"SDK version:%s\\n\", system_get_sdk_version());\n    //Set softAP + station mode\n    wifi_set_opmode(STATION_MODE);\n    // ESP8266 connect to router.\n    user_set_station_config();\n}",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/basic/wifi/#ket-qua",
            "text": "Sau khi n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh th\u00e0nh c\u00f4ng  S\u1eed d\u1ee5ng Terminal quan s\u00e1t s\u1ebd th\u1ea5y  connected with yourssid, channel 1\ndhcp client start...\nip:192.168.1.46,mask:255.255.255.0,gw:192.168.1.1\ngot ip !!!",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/basic/wifi/#goi-y",
            "text": "\u0110\u1ec3 truy c\u1eadp \u0111\u01b0\u1ee3c v\u00e0o router b\u1ea1n c\u1ea7n ph\u1ea3i s\u1eeda c\u00e1c define PASSWORD v\u00e0 SSID cho \u0111\u00fang v\u1edbi router m\u00e0 b\u1ea1n mu\u1ed1n truy c\u1eadp  #define PASSWORD    \"yourpassword\"\n#define SSID        \"yourssid\"  Sau khi k\u1ebft n\u1ed1i gi\u00e1 tr\u1ecb c\u1ee7a SSID v\u00e0 PASSWORD s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u v\u00e0o flash v\u00e0 \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 n\u1ebfu l\u1ea7n sau  b\u1ea1n kh\u00f4ng thay \u0111\u1ed5i gi\u00e1 tr\u1ecb th\u00ec nh\u1eefng gi\u00e1 tr\u1ecb trong flash s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 truy c\u1eadp v\u00e0o router. \u0110i\u1ec1u n\u00e0y \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1eb1ng \u0111o\u1ea1n code sau.      // Wifi configuration\n    char ssid[32] = SSID;\n    char password[64] = PASSWORD;\n    struct station_config stationConf;\n\n    os_memset(stationConf.ssid, 0, 32);\n    os_memset(stationConf.password, 0, 64);\n    //need not mac address\n    stationConf.bssid_set = 0;\n\n    //Set ap settings\n    os_memcpy(&stationConf.ssid, ssid, 32);\n    os_memcpy(&stationConf.password, password, 64);\n    wifi_station_set_config(&stationConf);  N\u1ebfu \u0111\u1ec3 \u00fd th\u00ec c\u00f3 th\u1ec3 th\u1ea5y trong code c\u00f3 1 \u0111o\u1ea1n ki\u1ec3m tra xem module \u0111\u00e3 k\u1ebft n\u1ed1i v\u1edbi router th\u00e0nh c\u00f4ng hay ch\u01b0a      os_timer_disarm(&test_timer);\n    os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n    os_timer_arm(&test_timer, 100, 0);  \u0110o\u1ea1n n\u00e0y c\u00f3 ngh\u0129a l\u00e0 set cho software timer \u0111\u1ee3i sau 100 ms th\u00ec s\u1ebd g\u1ecdi h\u00e0m call back user_esp_platform_check_ip\n\u0111\u1ec3 check xem esp8266 \u0111\u00e3 l\u1ea5y \u0111\u01b0\u1ee3c ip hay ch\u01b0a.\nCh\u00fa \u00fd l\u00e0 h\u00e0m      os_timer_arm(&test_timer, 100, 0);  C\u00f3 tham s\u1ed1 th\u1ee9 3 l\u00e0 0 c\u00f3 ngh\u0129a l\u00e0 timer ch\u1ec9 th\u1ef1c hi\u1ec7n \u0111\u1ebfm 100 ms 1 l\u1ea7n n\u1ebfu tham s\u1ed1 n\u00e0y \u0111\u01b0\u1ee3c set th\u00e0nh 1 th\u00ec c\u1ee9 sau 100 ms h\u00e0m user_esp_platform_check_ip() s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n.\nB\u1ea1n c\u00f3 th\u1ec3 xem th\u00eam v\u1ec1 c\u00e1ch s\u1eed d\u1ee5ng timer trong t\u00e0i li\u1ec7u ESP8266 Non-OS SDK API Reference   C\u1ea9n th\u1eadn  Nh\u1eefng h\u00e0m sau \u0111\u00e2y khi c\u1ea5u h\u00ecnh s\u1ebd ghi d\u1eef li\u1ec7u v\u00e0o v\u00f9ng nh\u1edb l\u01b0u tr\u1eef Flash, vi\u1ec7c ghi c\u1ea5u h\u00ecnh nh\u01b0 v\u1eady qu\u00e1 th\u01b0\u1eddng xuy\u00ean s\u1ebd g\u00e2y h\u1ecfng b\u1ed9 nh\u1edb:  \n-  wifi_set_opmode \n-  wifi_station_set_config \n-  wifi_station_set_auto_connect \nSDK cung c\u1ea5p cho ta c\u00e1c h\u00e0m t\u01b0\u01a1ng \u0111\u1ec3 ki\u1ec3m tra xem c\u1ea5u h\u00ecnh \u0111\u00f3 \u0111\u00e3 t\u1ed3n t\u1ea1i ch\u01b0a v\u00e0 th\u1ef1c thi vi\u1ec7c ghi n\u1ebfu ch\u01b0a: \n-  wifi_get_opmode \n-  wifi_station_get_config \n-  wifi_station_get_auto_connect \nV\u00e0 c\u00e1c h\u00e0m ch\u1ec9 ghi d\u1eef li\u1ec7u l\u00ean RAM v\u00e0 th\u1ef1c thi \n-  wifi_set_opmode_current \n-  wifi_station_set_config_current \nC\u00f3 th\u1ec3 xem th\u00eam t\u1ea1i  $SDK/include/user_interface.h",
            "title": "G\u1ee3i \u00fd"
        },
        {
            "location": "/nonos-sdk/basic/wifi/#references",
            "text": "https://espressif.com/sites/default/files/documentation/2c-esp8266_non_os_sdk_api_reference_en.pdf  https://espressif.com/en/products/hardware/esp8266ex/resources",
            "title": "References"
        },
        {
            "location": "/nonos-sdk/basic/espconn/",
            "text": "",
            "title": "ESPCONN"
        },
        {
            "location": "/nonos-sdk/basic/mdns/",
            "text": "",
            "title": "MDNS"
        },
        {
            "location": "/nonos-sdk/basic/ntp/",
            "text": "",
            "title": "NTP"
        },
        {
            "location": "/nonos-sdk/basic/save-to-flash/",
            "text": "",
            "title": "L\u01b0u d\u1eef li\u1ec7u v\u00e0o Flash"
        },
        {
            "location": "/nonos-sdk/smartconfig/smartconfig/",
            "text": "ESP8266 Smart config\n#\n\n\nSmartconfig l\u00e0 m\u1ed9t kh\u00e1i ni\u1ec7m \u0111\u01b0\u1ee3c nh\u1eafc \u0111\u1ebfn khi khi mu\u1ed1n c\u1ea5u h\u00ecnh th\u00f4ng tin cho thi\u1ebft b\u1ecb WiFi k\u1ebft n\u1ed1i nhanh ch\u00f3ng \u0111\u1ebfn Internet nh\u1ea5t t\u1eeb ng\u01b0\u1eddi d\u00f9ng b\u1eb1ng ch\u00ednh thi\u1ebft b\u1ecb (\u0111i\u1ec7n tho\u1ea1i) c\u1ee7a h\u1ecd.\n\n\n\n\n\u0110\u1ec3 hi\u1ec3u m\u1ed9t c\u00e1ch \u0111\u01a1n gi\u1ea3n th\u00ec Smart config ngh\u0129a l\u00e0 ch\u00fang ta g\u1eedi th\u00f4ng tin m\u1ea1ng wifi (bao g\u1ed3m t\u00ean wifi v\u00e0 password wifi) cho ESP th\u00f4ng qua smartphone thay cho c\u00e1ch th\u00f4ng th\u01b0\u1eddng l\u00e0 ph\u1ea3i khai b\u00e1o th\u00f4ng tin n\u00e0y trong ch\u01b0\u01a1ng tr\u00ecnh v\u00e0 n\u1ea1p firmware xu\u1ed1ng.",
            "title": "ESP8266 Smartconfig"
        },
        {
            "location": "/nonos-sdk/smartconfig/smartconfig/#esp8266-smart-config",
            "text": "Smartconfig l\u00e0 m\u1ed9t kh\u00e1i ni\u1ec7m \u0111\u01b0\u1ee3c nh\u1eafc \u0111\u1ebfn khi khi mu\u1ed1n c\u1ea5u h\u00ecnh th\u00f4ng tin cho thi\u1ebft b\u1ecb WiFi k\u1ebft n\u1ed1i nhanh ch\u00f3ng \u0111\u1ebfn Internet nh\u1ea5t t\u1eeb ng\u01b0\u1eddi d\u00f9ng b\u1eb1ng ch\u00ednh thi\u1ebft b\u1ecb (\u0111i\u1ec7n tho\u1ea1i) c\u1ee7a h\u1ecd.   \u0110\u1ec3 hi\u1ec3u m\u1ed9t c\u00e1ch \u0111\u01a1n gi\u1ea3n th\u00ec Smart config ngh\u0129a l\u00e0 ch\u00fang ta g\u1eedi th\u00f4ng tin m\u1ea1ng wifi (bao g\u1ed3m t\u00ean wifi v\u00e0 password wifi) cho ESP th\u00f4ng qua smartphone thay cho c\u00e1ch th\u00f4ng th\u01b0\u1eddng l\u00e0 ph\u1ea3i khai b\u00e1o th\u00f4ng tin n\u00e0y trong ch\u01b0\u01a1ng tr\u00ecnh v\u00e0 n\u1ea1p firmware xu\u1ed1ng.",
            "title": "ESP8266 Smart config"
        },
        {
            "location": "/nonos-sdk/smartconfig/why-smartconfig/",
            "text": "T\u1ea1i sao c\u1ea7n Smartconfig\n#\n\n\n\n\nD\u1ec5 d\u00e0ng c\u1ea5u h\u00ecnh wifi cho ESP8266 th\u00f4ng qua smartphone.\n\n\nKh\u00f4ng c\u1ea7n ph\u1ea3i n\u1ea1p l\u1ea1i code \u0111\u1ec3 c\u1ea5u h\u00ecnh\n\n\nC\u00f3 th\u1ec3 d\u00f9ng Smartconfig \u0111\u1ec3 c\u1ea5u h\u00ecnh nhi\u1ec1u thi\u1ebft b\u1ecb m\u1ed9t l\u00fac",
            "title": "T\u1ea1i sao c\u1ea7n Smartconfig"
        },
        {
            "location": "/nonos-sdk/smartconfig/why-smartconfig/#tai-sao-can-smartconfig",
            "text": "D\u1ec5 d\u00e0ng c\u1ea5u h\u00ecnh wifi cho ESP8266 th\u00f4ng qua smartphone.  Kh\u00f4ng c\u1ea7n ph\u1ea3i n\u1ea1p l\u1ea1i code \u0111\u1ec3 c\u1ea5u h\u00ecnh  C\u00f3 th\u1ec3 d\u00f9ng Smartconfig \u0111\u1ec3 c\u1ea5u h\u00ecnh nhi\u1ec1u thi\u1ebft b\u1ecb m\u1ed9t l\u00fac",
            "title": "T\u1ea1i sao c\u1ea7n Smartconfig"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/",
            "text": "T\u1ed5ng quan\n#\n\n\nESP Touch l\u00e0 protocol \u0111\u01b0\u1ee3c d\u00f9ng trong Smart Config \u0111\u1ec3 ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i t\u1edbi c\u00e1c phi\u00ean b\u1ea3n modul ESP8266 th\u00f4ng qua c\u1ea5u h\u00ecnh \u0111\u01a1n gi\u1ea3n tr\u00ean Smartphone.\nBan \u0111\u1ea7u kh\u00f4ng th\u1ec3 k\u1ebft n\u1ed1i v\u1edbi ESP8266, nh\u01b0ng th\u00f4ng qua giao th\u1ee9c ESP-TOUCH th\u00ec Smartphone s\u1ebd g\u1eedi g\u00f3i UDP t\u1edbi Access Point(AP) \u1edf \u0111\u00e2y l\u00e0 ESP8266, m\u00e3 h\u00f3a SSID v\u00e0 m\u1eadt kh\u1ea9u th\u00e0nh tr\u01b0\u1eddng Length trong g\u00f3i UDP, \u0111\u1ec3 ESP8266 c\u00f3 th\u1ec3 hi\u1ec3u v\u00e0 gi\u1ea3i m\u00e3 \u0111\u01b0\u1ee3c th\u00f4ng tin.\n\n\nC\u1ea5u tr\u00fac g\u00f3i tin s\u1ebd c\u00f3 d\u1ea1ng\n\n\n\n\n\n\n\n\n6\n\n\n6\n\n\n2\n\n\n3\n\n\n5\n\n\nVariable\n\n\n4\n\n\n\n\n\n\n\n\n\n\nDA\n\n\nSA\n\n\nLength\n\n\nLLC\n\n\nSNAP\n\n\nDATA\n\n\nFCS\n\n\n\n\n\n\n\n\nLength bao g\u1ed3m SSID v\u00e0 th\u00f4ng tin key cho ESP8266\n\n\nCh\u01b0\u01a1ng tr\u00ecnh\n#\n\n\nT\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i \nMakefile cho c\u00e1c d\u1ef1 \u00e1n ph\u1ee9c t\u1ea1p\n, to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file, \nMakefile, user_config.h, rf_init.c\n gi\u1eef nguy\u00ean, thay \u0111\u1ed5i n\u1ed9i dung file \nmain.c\n v\u00e0 th\u00eam m\u1ed9t s\u1ed1 th\u01b0 m\u1ee5c c\u1ea7n thi\u1ebft. \n\n\n\n\nN\u1ed9i dung\n\n\nSmartconfig cho ESP8266 th\u00f4ng qua Smartphone\n\n\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n#\n\n\nhttps://github.com/esp8266vn/esp8266-nonos-smart-config.git\ncd sp8266-nonos-smart-config && make\nmake flash\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\n\u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 fota-flow.png\n\u251c\u2500\u2500 build\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 driver\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 key.o\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 led.o\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 uart.o\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.a\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.out\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 rfinit.o\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 sc.o\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 user_main.o\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 wps.o\n\u251c\u2500\u2500 driver\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 key.c\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 led.c\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Makefile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 uart.c\n\u251c\u2500\u2500 firmware\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app0x00000.bin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 esp8266-nonos-app0x10000.bin\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 driver\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 key.h\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 led.h\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 uart.h\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 uart_register.h\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user_config.h\n\u251c\u2500\u2500 ld\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 eagle.rom.addr.v6.ld\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 with-espboot-flash-at-0x2000-size-1M.ld\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 without-bootloader.ld\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 SublimeAStyleFormatter.sublime-settings\n\u2514\u2500\u2500 user\n    \u251c\u2500\u2500 Makefile\n    \u251c\u2500\u2500 rfinit.c\n    \u251c\u2500\u2500 sc.c\n    \u251c\u2500\u2500 sc.h\n    \u251c\u2500\u2500 user_main.c\n    \u251c\u2500\u2500 wps.c\n    \u2514\u2500\u2500 wps.h\n\n10 directories, 41 files\n\n\n\n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\nCh\u01b0\u01a1ng tr\u00ecnh ch\u00ednh s\u1ebd g\u1ecdi ph\u1ea7n c\u1ea5u h\u00ecnh cho Smartconfig sau khi n\u00fat nh\u1ea5n FLASH tr\u00ean NodeMCU \u0111\u01b0\u1ee3c nh\u1ea5n th\u00f4ng qua h\u00e0m \nsc_start\n (n\u1eb1m \u1edf 2 file l\u00e0 \nsc.c\n v\u00e0 \nsc.h\n)\n\n\n#include \"osapi.h\"\n#include \"user_interface.h\"\n\n#include \"driver/key.h\"\n#include \"driver/uart.h\"\n#include \"driver/led.h\"\n#include \"wps.h\"\n#include \"sc.h\"\n\n#define KEY_NUM        1\n\n#define KEY_IO_MUX     PERIPHS_IO_MUX_MTCK_U\n#define KEY_IO_NUM     0\n#define KEY_IO_FUNC    FUNC_GPIO0\n\n\nLOCAL struct keys_param keys;\nLOCAL struct single_key_param *single_key;\n\nLOCAL void ICACHE_FLASH_ATTR\nshort_press(void)\n{\n  INFO(\"[KEY] Short press, run smartconfig\\r\\n\");\n  led_blink(1, 1);\n  sc_start();\n}\n\nLOCAL void ICACHE_FLASH_ATTR\nlong_press(void)\n{\n  INFO(\"[KEY] Long press, run wps\\r\\n\");\n  led_blink(5, 5);\n}\n\n\nvoid ICACHE_FLASH_ATTR print_info()\n{\n  INFO(\"\\r\\n\\r\\n[INFO] BOOTUP...\\r\\n\");\n  INFO(\"[INFO] SDK: %s\\r\\n\", system_get_sdk_version());\n  INFO(\"[INFO] Chip ID: %08X\\r\\n\", system_get_chip_id());\n  INFO(\"[INFO] Memory info:\\r\\n\");\n  system_print_meminfo();\n\n  INFO(\"[INFO] -------------------------------------------\\n\");\n  INFO(\"[INFO] Build time: %s\\n\", BUID_TIME);\n  INFO(\"[INFO] -------------------------------------------\\n\");\n\n}\n\n\nvoid ICACHE_FLASH_ATTR app_init()\n{\n  // const fota_info fota_conenction = {\n  //   .host = \"test.vidieukhien.net\",\n  //   .port = \"80\",\n  //   .security = 0,\n  //   .device_id = \"device_id\",\n  //   .access_key = \"access_key\",\n  //   .version = \"version\",\n  //   .path = \"/fota.json?dev={device_id|%X}&token={access_key|%s}&version={version:%s}\"\n  // };\n\n  uart_init(BIT_RATE_115200, BIT_RATE_115200);\n\n  print_info();\n\n  single_key = key_init_single(KEY_IO_NUM, KEY_IO_MUX, KEY_IO_FUNC,\n                                        long_press, short_press);\n\n  keys.key_num = KEY_NUM;\n  keys.single_key = &single_key;\n\n  key_init(&keys);\n  led_init();\n  led_blink(10, 10); //1 second on, 1 second off\n\n  wifi_set_opmode_current(STATION_MODE);\n\n}\n\nvoid ICACHE_FLASH_ATTR user_init(void)\n{\n  system_init_done_cb(app_init);\n\n}\n\n\n\n\n\nC\u00e1c h\u00e0m/ c\u1ea5u tr\u00fac d\u00f9ng trong SmartConfig\n#\n\n\nH\u00e0m smartconfig_start\n#\n\n\nH\u00e0m d\u00f9ng \u0111\u1ec3 c\u1ea5u h\u00ecnh thi\u1ebft b\u1ecb v\u00e0 k\u1ebft n\u1ed1i n\u00f3 t\u1edbi AP\n\n\n\n\nL\u01b0u \u00fd\n\n\n\n\nH\u00e0m ch\u1ec9 \u0111\u01b0\u1ee3c g\u1ecdi trong mode Station\n\n\nG\u1ecdi h\u00e0m \nsmartconfig_stop\n \u0111\u1ec3 k\u1ebft th\u00fac qu\u00e1 tr\u00ecnh SmartConfig tr\u01b0\u1edbc khi g\u1ecdi c\u00e1c h\u00e0m kh\u00e1c\n\n\n\n\n\n\n\u0110\u1ecbnh ngh\u0129a\n\n\nbool smartconfig_start(sc_callback_t cb, uint8 log)\n\n\n\n\nTh\u00f4ng s\u1ed1\n\n\nGi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1\n\n\n\n\n\n\n\n\nTRUE\n\n\nTh\u00e0nh c\u00f4ng\n\n\n\n\n\n\n\n\n\n\nFALSE\n\n\nTh\u1ea5t b\u1ea1i\n\n\n\n\n\n\n\n\nH\u00e0m smartconfig_stop\n#\n\n\nH\u00e0m d\u00f9ng \u0111\u1ec3 d\u1eebng qu\u00e1 tr\u00ecnh Smart Config v\u00e0 gi\u1ea3i ph\u00f3ng b\u1ed9 nh\u1edb \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1edfi h\u00e0m  \nsmartconfig_start\n\n\n\n\nL\u01b0u \u00fd\n\n\nSau khi k\u1ebft n\u1ed1i \u0111\u01b0\u1ee3c thi\u1ebft l\u1eadp th\u00ec ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 g\u1ecdi h\u00e0m gi\u1ea3i ph\u00f3ng b\u1ed9 nh\u1edb\n\n\n\n\n\u0110\u1ecbnh ngh\u0129a\n\n\nbool smartconfig_set_type(sc_type type)\n\n\n\n\nTh\u00f4ng s\u1ed1 \n\n\ntypedef enum {\n SC_TYPE_ESPTOUCH = 0,\n SC_TYPE_AIRKISS,\n SC_TYPE_ESPTOUCH_AIRKISS,\n } sc_type; \n\n\n\n\nGi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1\n\n\n\n\n\n\n\n\nTRUE\n\n\nTh\u00e0nh c\u00f4ng\n\n\n\n\n\n\n\n\n\n\nFALSE\n\n\nTh\u1ea5t b\u1ea1i\n\n\n\n\n\n\n\n\nH\u00e0m smartconfig_set_type\n#\n\n\nH\u00e0m d\u00f9ng \u0111\u1ec3 thi\u1ebft l\u1eadp ki\u1ec3u protocol c\u1ee7a \nsmartconfig_start\n\n\n\n\nL\u01b0u \u00fd\n\n\nPh\u1ea3i g\u1ecdi h\u00e0m n\u00e0y tr\u01b0\u1edbc h\u00e0m \nsmartconfig_start\n\n\n\n\n\u0110\u1ecbnh ngh\u0129a\n\n\nbool smartconfig_stop(void)\n\n\n\n\nTh\u00f4ng s\u1ed1 \nNULL\n\n\nGi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1\n\n\n\n\n\n\n\n\nTRUE\n\n\nTh\u00e0nh c\u00f4ng\n\n\n\n\n\n\n\n\n\n\nFALSE\n\n\nTh\u1ea5t b\u1ea1i\n\n\n\n\n\n\n\n\nC\u1ea5u tr\u00fac\n#\n\n\nC\u00f3 2 ki\u1ec3u c\u1ea5u tr\u00fac cho sc_status v\u00e0 sc_type\n\n\ntypedef enum {\nSC_STATUS_WAIT = 0,\nSC_STATUS_FIND_CHANNEL = 0,\nSC_STATUS_GETTING_SSID_PSWD,\nSC_STATUS_LINK,\nSC_STATUS_LINK_OVER,\n} sc_status; \n\n\n\n\ntypedef enum {\nSC_TYPE_ESPTOUCH = 0,\nSC_TYPE_AIRKISS,\nSC_TYPE_ESPTOUCH_AIRKISS,\n} sc_type;\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nSC_STATUS_FIND_CHANNEL \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 hi\u1ec3n th\u1ecb tr\u1ea1ng th\u00e1i khi t\u00ecm channel\n\n\n\n\nPh\u1ea7n m\u1ec1m cho android v\u00e0 iOS\n#\n\n\nC\u00f3 th\u1ec3 t\u1ea3i file apk d\u00e0nh cho android t\u1ea1i \n\nESP-Touch Android\n\n\nHo\u1eb7c t\u1ea3i tr\u1ef1c ti\u1ebfp t\u1eeb Playstore\n\nESP8266 SmartConfig\n\n\nV\u00e0 file cho iOS\n\nESP-Touch iOS\n\n\nHo\u1ea1t \u0111\u1ed9ng\n#\n\n\n\n\nK\u00edch ho\u1ea1t ch\u1ee9c n\u0103ng Smart Config b\u1eb1ng c\u00e1ch l\u1eadp tr\u00ecnh v\u00e0 n\u1ea1p firmware cho ESP\n\n\nK\u1ebft n\u1ed1i smartphone v\u1edbi router (k\u1ebft n\u1ed1i smartphone v\u1edbi m\u1ea1ng wifi hi\u1ec7n c\u00f3)\n\n\nM\u1edf ESP-TOUCH App \u0111\u00e3 c\u00e0i \u0111\u1eb7t tr\u00ean smartphone\n\n\nKi\u1ec3m tra SSID (t\u01b0\u01a1ng \u1ee9ng v\u1edbi t\u00ean Wifi) v\u00e0 m\u1eadt kh\u1ea9u (\u1edf \u0111\u00e2y l\u00e0 m\u1eadt kh\u1ea9u wifi c\u1ee7a b\u1ea1n) \u0111\u1ec3 k\u1ebft n\u1ed1i t\u1edbi thi\u1ebft b\u1ecb.\n\n\nTh\u1ef1c hi\u1ec7n \u1ea5n n\u00fat trong th\u1eddi gian ng\u1eafn tr\u00ean NodeMCU sau \u0111\u00f3 th\u1ea3 ra s\u1ebd c\u00f3 th\u00f4ng b\u00e1o\n\n\n\n\n[INFO] BOOTUP...\n[INFO] SDK: 2.0.0(656edbf)\n[INFO] Chip ID: 000A8B7A\n[INFO] Memory info:\ndata  : 0x3ffe8000 ~ 0x3ffe880c, len: 2060\nrodata: 0x3ffe8810 ~ 0x3ffe9ff0, len: 6112\nbss   : 0x3ffe9ff0 ~ 0x3fff0858, len: 26728\nheap  : 0x3fff0858 ~ 0x3fffc000, len: 47016\n[INFO] -------------------------------------------\n[INFO] Build time: 2016-Th11-18_16:55:45_ICT\n[INFO] -------------------------------------------\nbcn 0\ndel if1\nusl\nmode : sta(60:01:94:0a:8b:7a)\nadd if0\n\n\n\n\n\n\nM\u1edf ph\u1ea7n m\u1ec1m IOT_Espressift_EspTouch tr\u00ean \u0111i\u1ec7n tho\u1ea1i \u0111\u00e3 k\u1ebft n\u1ed1i wifi, nh\u1eadp m\u1eadt kh\u1ea9u t\u1ea1i Password sau \u0111\u00f3 \u1ea5n confirm\n\n\n\n\n\n\n\n\nTi\u1ebfp t\u1ee5c \u1ea5n n\u00fat Flash tr\u00ean NodeMCU sau \u0111\u00f3 \u1ea5n n\u00fat Confirm tr\u00ean SmartPhone.\n\n\n\n\n\n\nK\u1ebft qu\u1ea3\n#\n\n\n\n\nN\u1ebfu th\u00e0nh c\u00f4ng s\u1ebd c\u00f3 th\u00f4ng b\u00e1o tr\u00ean smartphone v\u1ec1 \u0111\u1ecba ch\u1ec9 IP c\u1ee7a ESP8266 nh\u01b0 sau\n\n\n\n\nEsptouch success, bssid = xxxx, InnetAddress = 192.168.xx.xx\n\n\n\n\n\n\nNg\u01b0\u1ee3c l\u1ea1i s\u1ebd c\u00f3 th\u00f4ng b\u00e1o Esptouch fail.\n\n\nK\u1ebft qu\u1ea3 logfile s\u1ebd \u0111\u01b0\u1ee3c ghi l\u1ea1i tr\u00ean m\u00e1y t\u00ednh nh\u01b0 sau\n\n\n\n\n[INFO] BOOTUP...\n[INFO] SDK: 2.0.0(656edbf)\n[INFO] Chip ID: 000A8B7A\n[INFO] Memory info:\ndata  : 0x3ffe8000 ~ 0x3ffe880c, len: 2060\nrodata: 0x3ffe8810 ~ 0x3ffe9ff0, len: 6112\nbss   : 0x3ffe9ff0 ~ 0x3fff0858, len: 26728\nheap  : 0x3fff0858 ~ 0x3fffc000, len: 47016\n[INFO] -------------------------------------------\n[INFO] Build time: 2016-Th11-18_16:55:45_ICT\n[INFO] -------------------------------------------\nbcn 0\ndel if1\nusl\nmode : sta(60:01:94:0a:8b:7a)\nadd if0\n[KEY] Short press, run smartconfig\nSC version: V2.5.4\n[SC] Started\nscandone\nscandone\n[SC] SC_STATUS_FIND_CHANNEL\n00:16:01:04:6d:d2: 599\n00:16:01:04:6d:d2: 598\n00:16:01:04:6d:d2: 597\n00:16:01:04:6d:d2: 596\nT|once 1 84\n00:16:01:04:6d:d2: 599\n00:16:01:04:6d:d2: 598\n00:16:01:04:6d:d2: 597\n00:16:01:04:6d:d2: 596\nT|once 2 84\niBssid 00:16:01:04:6d:\nbuf 00:16:01:04:6d:\nsave, rssi:-81 00:16:01:04:6d:d2:\niCh lock\n00:16:01:04:6d:d2: 598\n00:16:01:04:6d:d2: 597\nrigtt,rssi:-81 00:16:01:04:6d:d2:\n\nTYPE: ESPTOUCH\nT|sniffer on ch:2\nT|AP MAC: 00 16 01 04 6d d2\nT|Head Len : 84\n[SC] SC_STATUS_GETTING_SSID_PSWD\n[SC] SC_TYPE:SC_TYPE_ESPTOUCH\nT|SYNC STATUS\nxxxxx\nT|pswd: mat_khau_wifi\nT|ssid: ten_wifi\nT|bssid: 00 16 01 04 6d d2 \n[SC] SC_STATUS_LINK\nscandone\nxxxxx\nconnected with ten_wifi, channel 2\ndhcp client start...\npm open,type:2 0\nip:192.168.1.xx,mask:255.255.255.0,gw:192.168.1.1\n[SC] SC_STATUS_LINK_OVER\n[SC] Phone ip: 192.168.1.xx\nfree heap:39984",
            "title": "ESPTOUCH & AIRKISS"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#tong-quan",
            "text": "ESP Touch l\u00e0 protocol \u0111\u01b0\u1ee3c d\u00f9ng trong Smart Config \u0111\u1ec3 ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i t\u1edbi c\u00e1c phi\u00ean b\u1ea3n modul ESP8266 th\u00f4ng qua c\u1ea5u h\u00ecnh \u0111\u01a1n gi\u1ea3n tr\u00ean Smartphone.\nBan \u0111\u1ea7u kh\u00f4ng th\u1ec3 k\u1ebft n\u1ed1i v\u1edbi ESP8266, nh\u01b0ng th\u00f4ng qua giao th\u1ee9c ESP-TOUCH th\u00ec Smartphone s\u1ebd g\u1eedi g\u00f3i UDP t\u1edbi Access Point(AP) \u1edf \u0111\u00e2y l\u00e0 ESP8266, m\u00e3 h\u00f3a SSID v\u00e0 m\u1eadt kh\u1ea9u th\u00e0nh tr\u01b0\u1eddng Length trong g\u00f3i UDP, \u0111\u1ec3 ESP8266 c\u00f3 th\u1ec3 hi\u1ec3u v\u00e0 gi\u1ea3i m\u00e3 \u0111\u01b0\u1ee3c th\u00f4ng tin.  C\u1ea5u tr\u00fac g\u00f3i tin s\u1ebd c\u00f3 d\u1ea1ng     6  6  2  3  5  Variable  4      DA  SA  Length  LLC  SNAP  DATA  FCS     Length bao g\u1ed3m SSID v\u00e0 th\u00f4ng tin key cho ESP8266",
            "title": "T\u1ed5ng quan"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#chuong-trinh",
            "text": "T\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i  Makefile cho c\u00e1c d\u1ef1 \u00e1n ph\u1ee9c t\u1ea1p , to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file,  Makefile, user_config.h, rf_init.c  gi\u1eef nguy\u00ean, thay \u0111\u1ed5i n\u1ed9i dung file  main.c  v\u00e0 th\u00eam m\u1ed9t s\u1ed1 th\u01b0 m\u1ee5c c\u1ea7n thi\u1ebft.    N\u1ed9i dung  Smartconfig cho ESP8266 th\u00f4ng qua Smartphone",
            "title": "Ch\u01b0\u01a1ng tr\u00ecnh"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#lay-du-an-ve-tu-github",
            "text": "https://github.com/esp8266vn/esp8266-nonos-smart-config.git\ncd sp8266-nonos-smart-config && make\nmake flash",
            "title": "L\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#so-o-file",
            "text": "\u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 fota-flow.png\n\u251c\u2500\u2500 build\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 driver\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 key.o\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 led.o\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 uart.o\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.a\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app.out\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 rfinit.o\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 sc.o\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 user_main.o\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 wps.o\n\u251c\u2500\u2500 driver\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 key.c\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 led.c\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Makefile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 uart.c\n\u251c\u2500\u2500 firmware\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 esp8266-nonos-app0x00000.bin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 esp8266-nonos-app0x10000.bin\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 driver\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 key.h\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 led.h\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 uart.h\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 uart_register.h\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user_config.h\n\u251c\u2500\u2500 ld\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 eagle.rom.addr.v6.ld\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 with-espboot-flash-at-0x2000-size-1M.ld\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 without-bootloader.ld\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 SublimeAStyleFormatter.sublime-settings\n\u2514\u2500\u2500 user\n    \u251c\u2500\u2500 Makefile\n    \u251c\u2500\u2500 rfinit.c\n    \u251c\u2500\u2500 sc.c\n    \u251c\u2500\u2500 sc.h\n    \u251c\u2500\u2500 user_main.c\n    \u251c\u2500\u2500 wps.c\n    \u2514\u2500\u2500 wps.h\n\n10 directories, 41 files",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#ma-nguon",
            "text": "Ch\u01b0\u01a1ng tr\u00ecnh ch\u00ednh s\u1ebd g\u1ecdi ph\u1ea7n c\u1ea5u h\u00ecnh cho Smartconfig sau khi n\u00fat nh\u1ea5n FLASH tr\u00ean NodeMCU \u0111\u01b0\u1ee3c nh\u1ea5n th\u00f4ng qua h\u00e0m  sc_start  (n\u1eb1m \u1edf 2 file l\u00e0  sc.c  v\u00e0  sc.h )  #include \"osapi.h\"\n#include \"user_interface.h\"\n\n#include \"driver/key.h\"\n#include \"driver/uart.h\"\n#include \"driver/led.h\"\n#include \"wps.h\"\n#include \"sc.h\"\n\n#define KEY_NUM        1\n\n#define KEY_IO_MUX     PERIPHS_IO_MUX_MTCK_U\n#define KEY_IO_NUM     0\n#define KEY_IO_FUNC    FUNC_GPIO0\n\n\nLOCAL struct keys_param keys;\nLOCAL struct single_key_param *single_key;\n\nLOCAL void ICACHE_FLASH_ATTR\nshort_press(void)\n{\n  INFO(\"[KEY] Short press, run smartconfig\\r\\n\");\n  led_blink(1, 1);\n  sc_start();\n}\n\nLOCAL void ICACHE_FLASH_ATTR\nlong_press(void)\n{\n  INFO(\"[KEY] Long press, run wps\\r\\n\");\n  led_blink(5, 5);\n}\n\n\nvoid ICACHE_FLASH_ATTR print_info()\n{\n  INFO(\"\\r\\n\\r\\n[INFO] BOOTUP...\\r\\n\");\n  INFO(\"[INFO] SDK: %s\\r\\n\", system_get_sdk_version());\n  INFO(\"[INFO] Chip ID: %08X\\r\\n\", system_get_chip_id());\n  INFO(\"[INFO] Memory info:\\r\\n\");\n  system_print_meminfo();\n\n  INFO(\"[INFO] -------------------------------------------\\n\");\n  INFO(\"[INFO] Build time: %s\\n\", BUID_TIME);\n  INFO(\"[INFO] -------------------------------------------\\n\");\n\n}\n\n\nvoid ICACHE_FLASH_ATTR app_init()\n{\n  // const fota_info fota_conenction = {\n  //   .host = \"test.vidieukhien.net\",\n  //   .port = \"80\",\n  //   .security = 0,\n  //   .device_id = \"device_id\",\n  //   .access_key = \"access_key\",\n  //   .version = \"version\",\n  //   .path = \"/fota.json?dev={device_id|%X}&token={access_key|%s}&version={version:%s}\"\n  // };\n\n  uart_init(BIT_RATE_115200, BIT_RATE_115200);\n\n  print_info();\n\n  single_key = key_init_single(KEY_IO_NUM, KEY_IO_MUX, KEY_IO_FUNC,\n                                        long_press, short_press);\n\n  keys.key_num = KEY_NUM;\n  keys.single_key = &single_key;\n\n  key_init(&keys);\n  led_init();\n  led_blink(10, 10); //1 second on, 1 second off\n\n  wifi_set_opmode_current(STATION_MODE);\n\n}\n\nvoid ICACHE_FLASH_ATTR user_init(void)\n{\n  system_init_done_cb(app_init);\n\n}",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#cac-ham-cau-truc-dung-trong-smartconfig",
            "text": "",
            "title": "C\u00e1c h\u00e0m/ c\u1ea5u tr\u00fac d\u00f9ng trong SmartConfig"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#ham-smartconfig_start",
            "text": "H\u00e0m d\u00f9ng \u0111\u1ec3 c\u1ea5u h\u00ecnh thi\u1ebft b\u1ecb v\u00e0 k\u1ebft n\u1ed1i n\u00f3 t\u1edbi AP   L\u01b0u \u00fd   H\u00e0m ch\u1ec9 \u0111\u01b0\u1ee3c g\u1ecdi trong mode Station  G\u1ecdi h\u00e0m  smartconfig_stop  \u0111\u1ec3 k\u1ebft th\u00fac qu\u00e1 tr\u00ecnh SmartConfig tr\u01b0\u1edbc khi g\u1ecdi c\u00e1c h\u00e0m kh\u00e1c    \u0110\u1ecbnh ngh\u0129a  bool smartconfig_start(sc_callback_t cb, uint8 log)  Th\u00f4ng s\u1ed1  Gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1     TRUE  Th\u00e0nh c\u00f4ng      FALSE  Th\u1ea5t b\u1ea1i",
            "title": "H\u00e0m smartconfig_start"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#ham-smartconfig_stop",
            "text": "H\u00e0m d\u00f9ng \u0111\u1ec3 d\u1eebng qu\u00e1 tr\u00ecnh Smart Config v\u00e0 gi\u1ea3i ph\u00f3ng b\u1ed9 nh\u1edb \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1edfi h\u00e0m   smartconfig_start   L\u01b0u \u00fd  Sau khi k\u1ebft n\u1ed1i \u0111\u01b0\u1ee3c thi\u1ebft l\u1eadp th\u00ec ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 g\u1ecdi h\u00e0m gi\u1ea3i ph\u00f3ng b\u1ed9 nh\u1edb   \u0110\u1ecbnh ngh\u0129a  bool smartconfig_set_type(sc_type type)  Th\u00f4ng s\u1ed1   typedef enum {\n SC_TYPE_ESPTOUCH = 0,\n SC_TYPE_AIRKISS,\n SC_TYPE_ESPTOUCH_AIRKISS,\n } sc_type;   Gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1     TRUE  Th\u00e0nh c\u00f4ng      FALSE  Th\u1ea5t b\u1ea1i",
            "title": "H\u00e0m smartconfig_stop"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#ham-smartconfig_set_type",
            "text": "H\u00e0m d\u00f9ng \u0111\u1ec3 thi\u1ebft l\u1eadp ki\u1ec3u protocol c\u1ee7a  smartconfig_start   L\u01b0u \u00fd  Ph\u1ea3i g\u1ecdi h\u00e0m n\u00e0y tr\u01b0\u1edbc h\u00e0m  smartconfig_start   \u0110\u1ecbnh ngh\u0129a  bool smartconfig_stop(void)  Th\u00f4ng s\u1ed1 \nNULL  Gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1     TRUE  Th\u00e0nh c\u00f4ng      FALSE  Th\u1ea5t b\u1ea1i",
            "title": "H\u00e0m smartconfig_set_type"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#cau-truc",
            "text": "C\u00f3 2 ki\u1ec3u c\u1ea5u tr\u00fac cho sc_status v\u00e0 sc_type  typedef enum {\nSC_STATUS_WAIT = 0,\nSC_STATUS_FIND_CHANNEL = 0,\nSC_STATUS_GETTING_SSID_PSWD,\nSC_STATUS_LINK,\nSC_STATUS_LINK_OVER,\n} sc_status;   typedef enum {\nSC_TYPE_ESPTOUCH = 0,\nSC_TYPE_AIRKISS,\nSC_TYPE_ESPTOUCH_AIRKISS,\n} sc_type;   L\u01b0u \u00fd  SC_STATUS_FIND_CHANNEL \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 hi\u1ec3n th\u1ecb tr\u1ea1ng th\u00e1i khi t\u00ecm channel",
            "title": "C\u1ea5u tr\u00fac"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#phan-mem-cho-android-va-ios",
            "text": "C\u00f3 th\u1ec3 t\u1ea3i file apk d\u00e0nh cho android t\u1ea1i  ESP-Touch Android  Ho\u1eb7c t\u1ea3i tr\u1ef1c ti\u1ebfp t\u1eeb Playstore ESP8266 SmartConfig  V\u00e0 file cho iOS ESP-Touch iOS",
            "title": "Ph\u1ea7n m\u1ec1m cho android v\u00e0 iOS"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#hoat-ong",
            "text": "K\u00edch ho\u1ea1t ch\u1ee9c n\u0103ng Smart Config b\u1eb1ng c\u00e1ch l\u1eadp tr\u00ecnh v\u00e0 n\u1ea1p firmware cho ESP  K\u1ebft n\u1ed1i smartphone v\u1edbi router (k\u1ebft n\u1ed1i smartphone v\u1edbi m\u1ea1ng wifi hi\u1ec7n c\u00f3)  M\u1edf ESP-TOUCH App \u0111\u00e3 c\u00e0i \u0111\u1eb7t tr\u00ean smartphone  Ki\u1ec3m tra SSID (t\u01b0\u01a1ng \u1ee9ng v\u1edbi t\u00ean Wifi) v\u00e0 m\u1eadt kh\u1ea9u (\u1edf \u0111\u00e2y l\u00e0 m\u1eadt kh\u1ea9u wifi c\u1ee7a b\u1ea1n) \u0111\u1ec3 k\u1ebft n\u1ed1i t\u1edbi thi\u1ebft b\u1ecb.  Th\u1ef1c hi\u1ec7n \u1ea5n n\u00fat trong th\u1eddi gian ng\u1eafn tr\u00ean NodeMCU sau \u0111\u00f3 th\u1ea3 ra s\u1ebd c\u00f3 th\u00f4ng b\u00e1o   [INFO] BOOTUP...\n[INFO] SDK: 2.0.0(656edbf)\n[INFO] Chip ID: 000A8B7A\n[INFO] Memory info:\ndata  : 0x3ffe8000 ~ 0x3ffe880c, len: 2060\nrodata: 0x3ffe8810 ~ 0x3ffe9ff0, len: 6112\nbss   : 0x3ffe9ff0 ~ 0x3fff0858, len: 26728\nheap  : 0x3fff0858 ~ 0x3fffc000, len: 47016\n[INFO] -------------------------------------------\n[INFO] Build time: 2016-Th11-18_16:55:45_ICT\n[INFO] -------------------------------------------\nbcn 0\ndel if1\nusl\nmode : sta(60:01:94:0a:8b:7a)\nadd if0   M\u1edf ph\u1ea7n m\u1ec1m IOT_Espressift_EspTouch tr\u00ean \u0111i\u1ec7n tho\u1ea1i \u0111\u00e3 k\u1ebft n\u1ed1i wifi, nh\u1eadp m\u1eadt kh\u1ea9u t\u1ea1i Password sau \u0111\u00f3 \u1ea5n confirm     Ti\u1ebfp t\u1ee5c \u1ea5n n\u00fat Flash tr\u00ean NodeMCU sau \u0111\u00f3 \u1ea5n n\u00fat Confirm tr\u00ean SmartPhone.",
            "title": "Ho\u1ea1t \u0111\u1ed9ng"
        },
        {
            "location": "/nonos-sdk/smartconfig/esptouch/#ket-qua",
            "text": "N\u1ebfu th\u00e0nh c\u00f4ng s\u1ebd c\u00f3 th\u00f4ng b\u00e1o tr\u00ean smartphone v\u1ec1 \u0111\u1ecba ch\u1ec9 IP c\u1ee7a ESP8266 nh\u01b0 sau   Esptouch success, bssid = xxxx, InnetAddress = 192.168.xx.xx   Ng\u01b0\u1ee3c l\u1ea1i s\u1ebd c\u00f3 th\u00f4ng b\u00e1o Esptouch fail.  K\u1ebft qu\u1ea3 logfile s\u1ebd \u0111\u01b0\u1ee3c ghi l\u1ea1i tr\u00ean m\u00e1y t\u00ednh nh\u01b0 sau   [INFO] BOOTUP...\n[INFO] SDK: 2.0.0(656edbf)\n[INFO] Chip ID: 000A8B7A\n[INFO] Memory info:\ndata  : 0x3ffe8000 ~ 0x3ffe880c, len: 2060\nrodata: 0x3ffe8810 ~ 0x3ffe9ff0, len: 6112\nbss   : 0x3ffe9ff0 ~ 0x3fff0858, len: 26728\nheap  : 0x3fff0858 ~ 0x3fffc000, len: 47016\n[INFO] -------------------------------------------\n[INFO] Build time: 2016-Th11-18_16:55:45_ICT\n[INFO] -------------------------------------------\nbcn 0\ndel if1\nusl\nmode : sta(60:01:94:0a:8b:7a)\nadd if0\n[KEY] Short press, run smartconfig\nSC version: V2.5.4\n[SC] Started\nscandone\nscandone\n[SC] SC_STATUS_FIND_CHANNEL\n00:16:01:04:6d:d2: 599\n00:16:01:04:6d:d2: 598\n00:16:01:04:6d:d2: 597\n00:16:01:04:6d:d2: 596\nT|once 1 84\n00:16:01:04:6d:d2: 599\n00:16:01:04:6d:d2: 598\n00:16:01:04:6d:d2: 597\n00:16:01:04:6d:d2: 596\nT|once 2 84\niBssid 00:16:01:04:6d:\nbuf 00:16:01:04:6d:\nsave, rssi:-81 00:16:01:04:6d:d2:\niCh lock\n00:16:01:04:6d:d2: 598\n00:16:01:04:6d:d2: 597\nrigtt,rssi:-81 00:16:01:04:6d:d2:\n\nTYPE: ESPTOUCH\nT|sniffer on ch:2\nT|AP MAC: 00 16 01 04 6d d2\nT|Head Len : 84\n[SC] SC_STATUS_GETTING_SSID_PSWD\n[SC] SC_TYPE:SC_TYPE_ESPTOUCH\nT|SYNC STATUS\nxxxxx\nT|pswd: mat_khau_wifi\nT|ssid: ten_wifi\nT|bssid: 00 16 01 04 6d d2 \n[SC] SC_STATUS_LINK\nscandone\nxxxxx\nconnected with ten_wifi, channel 2\ndhcp client start...\npm open,type:2 0\nip:192.168.1.xx,mask:255.255.255.0,gw:192.168.1.1\n[SC] SC_STATUS_LINK_OVER\n[SC] Phone ip: 192.168.1.xx\nfree heap:39984",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/smartconfig/wps/",
            "text": "",
            "title": "WPS"
        },
        {
            "location": "/nonos-sdk/mqtt/what-is-mqtt/",
            "text": "MQTT l\u00e0 g\u00ec\n\n\nPublish, subscribe\n\n\nQoS\n\n\nRetain\n\n\nLWT\n\n\nReference:\n\n\n\n\n\n\n\n\n\n\nMQTT l\u00e0 g\u00ec\n#\n\n\n\n\nMQTT\n (Message Queuing Telemetry Transport) l\u00e0 m\u1ed9t giao th\u1ee9c g\u1edfi d\u1ea1ng publish/subscribe s\u1eed d\u1ee5ng cho c\u00e1c thi\u1ebft b\u1ecb \nInternet of Things\n v\u1edbi b\u0103ng th\u00f4ng th\u1ea5p, \u0111\u1ed9 tin c\u1eady cao v\u00e0 kh\u1ea3 n\u0103ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong m\u1ea1ng l\u01b0\u1edbi kh\u00f4ng \u1ed5n \u0111\u1ecbnh.\n\n\nB\u1edfi v\u00ec giao th\u1ee9c n\u00e0y s\u1eed d\u1ee5ng b\u0103ng th\u00f4ng th\u1ea5p trong m\u00f4i tr\u01b0\u1eddng c\u00f3 \u0111\u1ed9 tr\u1ec5 cao n\u00ean n\u00f3 l\u00e0 m\u1ed9t giao th\u1ee9c l\u00fd t\u01b0\u1edfng cho c\u00e1c \u1ee9ng d\u1ee5ng \nM2M\n\n\nMQTT c\u0169ng l\u00e0 giao th\u1ee9c s\u1eed d\u1ee5ng trong \nFacebook Messager\n\n\nV\u00e0 MQTT l\u00e0 g\u00ec? \u0110\u1ec3 c\u00f3 m\u1ed9t c\u00e1i nh\u00ecn to\u00e0n di\u1ec7n ho\u1eb7c \u0111\u1ecbnh ngh\u0129a chi ti\u1ebft, ch\u1ec9 c\u1ea7n google \u201cwhat is mqtt\u201d, \u201cmqtt slides\u201d \u2026 Trong b\u00e0i vi\u1ebft n\u00e0y ch\u00fang ta ch\u1ec9 n\u00f3i ng\u1eafn g\u1ecdn th\u00f4i, \u0111\u1ee7 \u0111\u1ec3 hi\u1ec3u giao th\u1ee9c MQTT, bao g\u1ed3m c\u00e1c \u0111\u1ecbnh ngh\u0129a \n\u201csubscribe\u201d, \u201cpublish\u201d, \u201cqos\u201d, \u201cretain\u201d, \u201clast will and testament (lwt)\u201d\n - V\u00e0 ch\u1ec9 d\u00e0nh cho nh\u1eefng ai \u0111ang mu\u1ed1n t\u00ecm hi\u1ec3u v\u1ec1 MQTT, kh\u00f4ng th\u00ec \u0111\u1ecdc to\u00e0n ch\u1eef th\u00f4i, m\u1ecfi m\u1eaft l\u1eafm.\n\n\nPublish, subscribe\n#\n\n\nTrong m\u1ed9t h\u1ec7 th\u1ed1ng s\u1eed d\u1ee5ng giao th\u1ee9c MQTT, nhi\u1ec1u node tr\u1ea1m (g\u1ecdi l\u00e0 mqtt client - g\u1ecdi t\u1eaft l\u00e0 client) k\u1ebft n\u1ed1i t\u1edbi m\u1ed9t MQTT server (g\u1ecdi l\u00e0 broker). M\u1ed7i client s\u1ebd \u0111\u0103ng k\u00fd m\u1ed9t v\u00e0i k\u00eanh (topic), v\u00ed d\u1ee5 nh\u01b0 \u201c/client1/channel1\u201d, \u201c/client1/channel2\u201d. Qu\u00e1 tr\u00ecnh \u0111\u0103ng k\u00fd n\u00e0y g\u1ecdi l\u00e0 \n\u201csubscribe\u201d\n, gi\u1ed1ng nh\u01b0 ch\u00fang ta \u0111\u0103ng k\u00fd nh\u1eadn tin tr\u00ean m\u1ed9t k\u00eanh Youtube v\u1eady. M\u1ed7i client s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u khi b\u1ea5t k\u1ef3 tr\u1ea1m n\u00e0o kh\u00e1c g\u1edfi d\u1eef li\u1ec7u v\u00e0 k\u00eanh \u0111\u00e3 \u0111\u0103ng k\u00fd. Khi m\u1ed9t client g\u1edfi d\u1eef li\u1ec7u t\u1edbi k\u00eanh \u0111\u00f3, g\u1ecdi l\u00e0 \n\u201cpublish\u201d\n.\n\n\nQoS\n#\n\n\n\u1ede \u0111\u00e2y c\u00f3 3 tu\u1ef3 ch\u1ecdn \nQoS (Qualities of service) \n khi \u201cpublish\u201d v\u00e0 \u201csubscribe\u201d:\n\n\n\n\nQoS0\n Broker/client s\u1ebd g\u1edfi d\u1eef li\u1ec7u \u0111\u00fang 1 l\u1ea7n, qu\u00e1 tr\u00ecnh g\u1edfi \u0111\u01b0\u1ee3c x\u00e1c nh\u1eadn b\u1edfi ch\u1ec9 giao th\u1ee9c TCP/IP, gi\u1ed1ng ki\u1ec3u \u0111em con b\u1ecf ch\u1ee3.\n\n\nQoS1\n Broker/client s\u1ebd g\u1edfi d\u1eef li\u1ec7u v\u1edbi \u00edt nh\u1ea5t 1 l\u1ea7n x\u00e1c nh\u1eadn t\u1eeb \u0111\u1ea7u kia, ngh\u0129a l\u00e0 c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u h\u01a1n 1 l\u1ea7n x\u00e1c nh\u1eadn \u0111\u00e3 nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u.\n\n\nQoS2\n Broker/client \u0111\u1ea3m b\u1ea3m khi g\u1edfi d\u1eef li\u1ec7u th\u00ec ph\u00eda nh\u1eadn ch\u1ec9 nh\u1eadn \u0111\u01b0\u1ee3c \u0111\u00fang 1 l\u1ea7n, qu\u00e1 tr\u00ecnh n\u00e0y ph\u1ea3i tr\u1ea3i qua 4 b\u01b0\u1edbc b\u1eaft tay.\n\n\n\n\nXem th\u00eam QoS\n: https://code.google.com/p/mqtt4erl/wiki/QualityOfServiceUseCases\n\n\nM\u1ed9t g\u00f3i tin c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u1edfi \u1edf b\u1ea5t k\u1ef3 QoS n\u00e0o, v\u00e0 c\u00e1c client c\u0169ng c\u00f3 th\u1ec3 subscribe v\u1edbi b\u1ea5t k\u1ef3 y\u00eau c\u1ea7u QoS n\u00e0o. C\u00f3 ngh\u0129a l\u00e0 client s\u1ebd l\u1ef1a ch\u1ecdn QoS t\u1ed1i \u0111a m\u00e0 n\u00f3 c\u00f3 \u0111\u1ec3 nh\u1eadn tin. V\u00ed d\u1ee5, n\u1ebfu 1 g\u00f3i d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c publish v\u1edbi QoS2, v\u00e0 client subscribe v\u1edbi QoS0, th\u00ec g\u00f3i d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c nh\u1eadn v\u1ec1 client n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c broker g\u1edfi v\u1edbi QoS0, v\u00e0 1 client kh\u00e1c \u0111\u0103ng k\u00fd c\u00f9ng k\u00eanh n\u00e0y v\u1edbi QoS 2, th\u00ec n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c Broker g\u1edfi d\u1eef li\u1ec7u v\u1edbi QoS2.\n\n\nM\u1ed9t v\u00ed d\u1ee5 kh\u00e1c, n\u1ebfu 1 client subscribe v\u1edbi QoS2 v\u00e0 g\u00f3i d\u1eef li\u1ec7u g\u1edfi v\u00e0o k\u00eanh \u0111\u00f3 publish v\u1edbi QoS0 th\u00ec client \u0111\u00f3 s\u1ebd \u0111\u01b0\u1ee3c Broker g\u1edfi d\u1eef li\u1ec7u v\u1edbi QoS0. QoS c\u00e0ng cao th\u00ec c\u00e0ng \u0111\u00e1ng tin c\u1eady, \u0111\u1ed3ng th\u1eddi \u0111\u1ed9 tr\u1ec5 v\u00e0 b\u0103ng th\u00f4ng \u0111\u00f2i h\u1ecfi c\u0169ng cao h\u01a1n.\n\n\nRetain\n#\n\n\nN\u1ebfu RETAIN \u0111\u01b0\u1ee3c set b\u1eb1ng 1, khi g\u00f3i tin \u0111\u01b0\u1ee3c publish t\u1eeb Client, Broker \nPH\u1ea2I\n l\u01b0u tr\u1eef l\u1ea1i g\u00f3i tin v\u1edbi QoS, v\u00e0 n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c g\u1edfi \u0111\u1ebfn b\u1ea5t k\u1ef3 Client n\u00e0o subscribe c\u00f9ng k\u00eanh trong t\u01b0\u01a1ng lai. Khi m\u1ed9t Client k\u1ebft n\u1ed1i t\u1edbi Broker v\u00e0 subscribe, n\u00f3 s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i tin cu\u1ed1i c\u00f9ng c\u00f3 RETAIN = 1 v\u1edbi b\u1ea5t k\u1ef3 topic n\u00e0o m\u00e0 n\u00f3 \u0111\u0103ng k\u00fd tr\u00f9ng. Tuy nhi\u00ean, n\u1ebfu Broker nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i tin m\u00e0 c\u00f3 QoS = 0 v\u00e0 RETAIN = 1, n\u00f3 s\u1ebd hu\u1ef7 t\u1ea5t c\u1ea3 c\u00e1c g\u00f3i tin c\u00f3 RETAIN = 1 tr\u01b0\u1edbc \u0111\u00f3. V\u00e0 ph\u1ea3i l\u01b0u g\u00f3i tin n\u00e0y l\u1ea1i, nh\u01b0ng ho\u00e0n to\u00e0n c\u00f3 th\u1ec3 hu\u1ef7 b\u1ea5t k\u1ef3 l\u00fac n\u00e0o.\n\n\nKhi publish m\u1ed9t g\u00f3i d\u1eef li\u1ec7u \u0111\u1ebfn Client, Broker ph\u1ea3i se RETAIN = 1 n\u1ebfu g\u00f3i \u0111\u01b0\u1ee3c g\u1edfi nh\u01b0 l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c subscribe m\u1edbi c\u1ee7a Client (gi\u1ed1ng nh\u01b0 tin nh\u1eafn ACK b\u00e1o subscribe th\u00e0nh c\u00f4ng). RETAIN ph\u1ea3i b\u1eb1ng 0 n\u1ebfu kh\u00f4ng quan t\u00e2m t\u1edbi k\u1ebft qu\u1ea3 c\u1ee7a vi\u1eb9c subscribe.\n\n\nLWT\n#\n\n\nG\u00f3i tin LWT (last will and testament) kh\u00f4ng th\u1ef1c s\u1ef1 bi\u1ebft \u0111\u01b0\u1ee3c Client c\u00f3 tr\u1ef1c tuy\u1ebfn hay kh\u00f4ng, c\u00e1i n\u00e0y do g\u00f3i tin KeepAlive \u0111\u1ea3m nh\u1eadn. Tuy nhi\u00ean g\u00f3i tin LWT nh\u01b0 l\u00e0 th\u00f4ng tin \u0111i\u1ec1u g\u00ec s\u1ebd x\u1ea3y \u0111\u1ebfn sau khi thi\u1ebft b\u1ecb ngo\u1ea1i tuy\u1ebfn.\n\n\nM\u1ed9t v\u00ed d\u1ee5\n\n\nT\u00f4i c\u00f3 1 c\u1ea3m bi\u1ebfn, n\u00f3 g\u1edfi nh\u1eefng d\u1eef li\u1ec7u quan tr\u1ecdng v\u00e0 r\u1ea5t kh\u00f4ng th\u01b0\u1eddng xuy\u00ean. N\u00f3 c\u00f3 \u0111\u0103ng k\u00fd tr\u01b0\u1edbc v\u1edbi Broker m\u1ed9t tin nh\u1eafn lwt \u1edf topic \n/node/gone-offline\n v\u1edbi tin nh\u1eafn \nid\n c\u1ee7a n\u00f3. V\u00e0 t\u00f4i c\u0169ng \u0111\u0103ng k\u00fd theo d\u00f5i topic \n/node/gone-offline\n, s\u1ebd g\u1edfi SMS t\u1edbi \u0111i\u1ec7n tho\u1ea1i th\u00f4i m\u1ed7i khi nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn n\u00e0o \u1edf k\u00eanh m\u00e0 t\u00f4i theo d\u00f5i.\nTrong qu\u00e1 tr\u00ecnh ho\u1ea1t \u0111\u1ed9ng, c\u1ea3m bi\u1ebfn lu\u00f4n gi\u1eef k\u1ebft n\u1ed1i v\u1edbi Broker b\u1edfi vi\u1ec7c lu\u00f4n g\u1edfi g\u00f3i tin keepAlive. Nh\u01b0ng n\u1ebfu v\u00ec l\u00fd do g\u00ec \u0111\u00f3, c\u1ea3m bi\u1ebfn n\u00e0y chuy\u1ec3n sang ngo\u1ea1i tuy\u1ebfn, k\u1ebft n\u1ed1i t\u1edbi Broker timeout do Broker kh\u00f4ng c\u00f2n nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i keepAlive.\nL\u00fac n\u00e0y, do c\u1ea3m bi\u1ebfn c\u1ee7a t\u00f4i \u0111\u00e3 \u0111\u0103ng k\u00fd LWT, do v\u1eady broker s\u1ebd \u0111\u00f3ng k\u1ebft n\u1ed1i c\u1ee7a C\u1ea3m bi\u1ebfn, \u0111\u1ed3ng th\u1eddi s\u1ebd publish m\u1ed9t g\u00f3i tin l\u00e0 Id c\u1ee7a c\u1ea3m bi\u1ebfn v\u00e0o k\u00eanh \n/node/gone-offline\n, d\u0129 nhi\u00ean l\u00e0 t\u00f4i c\u0169ng s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn b\u00e1o c\u00e1i C\u1ea3m bi\u1ebfn y\u00eau qu\u00fd c\u1ee7a m\u00ecnh  \u0111\u00e3 ngo\u1ea1i tuy\u1ebfn.\n\n\nNg\u1eafn g\u1ecdn\n\n\nNgo\u00e0i vi\u1ec7c \u0111\u00f3ng k\u1ebft n\u1ed1i c\u1ee7a Client \u0111\u00e3 ngo\u1ea1i tuy\u1ebfn, g\u00f3i tin LWT c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc v\u00e0 \u0111\u01b0\u1ee3c g\u1edfi b\u1edfi Broker t\u1edbi k\u00eanh n\u00e0o \u0111\u00f3 khi thi\u1ebft b\u1ecb \u0111\u0103ng k\u00fd LWT ngo\u1ea1i tuy\u1ebfn.\n\n\nReference:\n#\n\n\n\n\nhttp://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html\n\n\nhttp://bb-smartsensing.com/basics-of-mqtt/\n\n\nhttp://stackoverflow.com/questions/17270863/\n\n\nhttp://tuanpmt.github.io/what-is-mqtt/",
            "title": "Giao th\u1ee9c MQTT"
        },
        {
            "location": "/nonos-sdk/mqtt/what-is-mqtt/#mqtt-la-gi",
            "text": "MQTT  (Message Queuing Telemetry Transport) l\u00e0 m\u1ed9t giao th\u1ee9c g\u1edfi d\u1ea1ng publish/subscribe s\u1eed d\u1ee5ng cho c\u00e1c thi\u1ebft b\u1ecb  Internet of Things  v\u1edbi b\u0103ng th\u00f4ng th\u1ea5p, \u0111\u1ed9 tin c\u1eady cao v\u00e0 kh\u1ea3 n\u0103ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong m\u1ea1ng l\u01b0\u1edbi kh\u00f4ng \u1ed5n \u0111\u1ecbnh.  B\u1edfi v\u00ec giao th\u1ee9c n\u00e0y s\u1eed d\u1ee5ng b\u0103ng th\u00f4ng th\u1ea5p trong m\u00f4i tr\u01b0\u1eddng c\u00f3 \u0111\u1ed9 tr\u1ec5 cao n\u00ean n\u00f3 l\u00e0 m\u1ed9t giao th\u1ee9c l\u00fd t\u01b0\u1edfng cho c\u00e1c \u1ee9ng d\u1ee5ng  M2M  MQTT c\u0169ng l\u00e0 giao th\u1ee9c s\u1eed d\u1ee5ng trong  Facebook Messager  V\u00e0 MQTT l\u00e0 g\u00ec? \u0110\u1ec3 c\u00f3 m\u1ed9t c\u00e1i nh\u00ecn to\u00e0n di\u1ec7n ho\u1eb7c \u0111\u1ecbnh ngh\u0129a chi ti\u1ebft, ch\u1ec9 c\u1ea7n google \u201cwhat is mqtt\u201d, \u201cmqtt slides\u201d \u2026 Trong b\u00e0i vi\u1ebft n\u00e0y ch\u00fang ta ch\u1ec9 n\u00f3i ng\u1eafn g\u1ecdn th\u00f4i, \u0111\u1ee7 \u0111\u1ec3 hi\u1ec3u giao th\u1ee9c MQTT, bao g\u1ed3m c\u00e1c \u0111\u1ecbnh ngh\u0129a  \u201csubscribe\u201d, \u201cpublish\u201d, \u201cqos\u201d, \u201cretain\u201d, \u201clast will and testament (lwt)\u201d  - V\u00e0 ch\u1ec9 d\u00e0nh cho nh\u1eefng ai \u0111ang mu\u1ed1n t\u00ecm hi\u1ec3u v\u1ec1 MQTT, kh\u00f4ng th\u00ec \u0111\u1ecdc to\u00e0n ch\u1eef th\u00f4i, m\u1ecfi m\u1eaft l\u1eafm.",
            "title": "MQTT l\u00e0 g\u00ec"
        },
        {
            "location": "/nonos-sdk/mqtt/what-is-mqtt/#publish-subscribe",
            "text": "Trong m\u1ed9t h\u1ec7 th\u1ed1ng s\u1eed d\u1ee5ng giao th\u1ee9c MQTT, nhi\u1ec1u node tr\u1ea1m (g\u1ecdi l\u00e0 mqtt client - g\u1ecdi t\u1eaft l\u00e0 client) k\u1ebft n\u1ed1i t\u1edbi m\u1ed9t MQTT server (g\u1ecdi l\u00e0 broker). M\u1ed7i client s\u1ebd \u0111\u0103ng k\u00fd m\u1ed9t v\u00e0i k\u00eanh (topic), v\u00ed d\u1ee5 nh\u01b0 \u201c/client1/channel1\u201d, \u201c/client1/channel2\u201d. Qu\u00e1 tr\u00ecnh \u0111\u0103ng k\u00fd n\u00e0y g\u1ecdi l\u00e0  \u201csubscribe\u201d , gi\u1ed1ng nh\u01b0 ch\u00fang ta \u0111\u0103ng k\u00fd nh\u1eadn tin tr\u00ean m\u1ed9t k\u00eanh Youtube v\u1eady. M\u1ed7i client s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u khi b\u1ea5t k\u1ef3 tr\u1ea1m n\u00e0o kh\u00e1c g\u1edfi d\u1eef li\u1ec7u v\u00e0 k\u00eanh \u0111\u00e3 \u0111\u0103ng k\u00fd. Khi m\u1ed9t client g\u1edfi d\u1eef li\u1ec7u t\u1edbi k\u00eanh \u0111\u00f3, g\u1ecdi l\u00e0  \u201cpublish\u201d .",
            "title": "Publish, subscribe"
        },
        {
            "location": "/nonos-sdk/mqtt/what-is-mqtt/#qos",
            "text": "\u1ede \u0111\u00e2y c\u00f3 3 tu\u1ef3 ch\u1ecdn  QoS (Qualities of service)   khi \u201cpublish\u201d v\u00e0 \u201csubscribe\u201d:   QoS0  Broker/client s\u1ebd g\u1edfi d\u1eef li\u1ec7u \u0111\u00fang 1 l\u1ea7n, qu\u00e1 tr\u00ecnh g\u1edfi \u0111\u01b0\u1ee3c x\u00e1c nh\u1eadn b\u1edfi ch\u1ec9 giao th\u1ee9c TCP/IP, gi\u1ed1ng ki\u1ec3u \u0111em con b\u1ecf ch\u1ee3.  QoS1  Broker/client s\u1ebd g\u1edfi d\u1eef li\u1ec7u v\u1edbi \u00edt nh\u1ea5t 1 l\u1ea7n x\u00e1c nh\u1eadn t\u1eeb \u0111\u1ea7u kia, ngh\u0129a l\u00e0 c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u h\u01a1n 1 l\u1ea7n x\u00e1c nh\u1eadn \u0111\u00e3 nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u.  QoS2  Broker/client \u0111\u1ea3m b\u1ea3m khi g\u1edfi d\u1eef li\u1ec7u th\u00ec ph\u00eda nh\u1eadn ch\u1ec9 nh\u1eadn \u0111\u01b0\u1ee3c \u0111\u00fang 1 l\u1ea7n, qu\u00e1 tr\u00ecnh n\u00e0y ph\u1ea3i tr\u1ea3i qua 4 b\u01b0\u1edbc b\u1eaft tay.   Xem th\u00eam QoS : https://code.google.com/p/mqtt4erl/wiki/QualityOfServiceUseCases  M\u1ed9t g\u00f3i tin c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u1edfi \u1edf b\u1ea5t k\u1ef3 QoS n\u00e0o, v\u00e0 c\u00e1c client c\u0169ng c\u00f3 th\u1ec3 subscribe v\u1edbi b\u1ea5t k\u1ef3 y\u00eau c\u1ea7u QoS n\u00e0o. C\u00f3 ngh\u0129a l\u00e0 client s\u1ebd l\u1ef1a ch\u1ecdn QoS t\u1ed1i \u0111a m\u00e0 n\u00f3 c\u00f3 \u0111\u1ec3 nh\u1eadn tin. V\u00ed d\u1ee5, n\u1ebfu 1 g\u00f3i d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c publish v\u1edbi QoS2, v\u00e0 client subscribe v\u1edbi QoS0, th\u00ec g\u00f3i d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c nh\u1eadn v\u1ec1 client n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c broker g\u1edfi v\u1edbi QoS0, v\u00e0 1 client kh\u00e1c \u0111\u0103ng k\u00fd c\u00f9ng k\u00eanh n\u00e0y v\u1edbi QoS 2, th\u00ec n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c Broker g\u1edfi d\u1eef li\u1ec7u v\u1edbi QoS2.  M\u1ed9t v\u00ed d\u1ee5 kh\u00e1c, n\u1ebfu 1 client subscribe v\u1edbi QoS2 v\u00e0 g\u00f3i d\u1eef li\u1ec7u g\u1edfi v\u00e0o k\u00eanh \u0111\u00f3 publish v\u1edbi QoS0 th\u00ec client \u0111\u00f3 s\u1ebd \u0111\u01b0\u1ee3c Broker g\u1edfi d\u1eef li\u1ec7u v\u1edbi QoS0. QoS c\u00e0ng cao th\u00ec c\u00e0ng \u0111\u00e1ng tin c\u1eady, \u0111\u1ed3ng th\u1eddi \u0111\u1ed9 tr\u1ec5 v\u00e0 b\u0103ng th\u00f4ng \u0111\u00f2i h\u1ecfi c\u0169ng cao h\u01a1n.",
            "title": "QoS"
        },
        {
            "location": "/nonos-sdk/mqtt/what-is-mqtt/#retain",
            "text": "N\u1ebfu RETAIN \u0111\u01b0\u1ee3c set b\u1eb1ng 1, khi g\u00f3i tin \u0111\u01b0\u1ee3c publish t\u1eeb Client, Broker  PH\u1ea2I  l\u01b0u tr\u1eef l\u1ea1i g\u00f3i tin v\u1edbi QoS, v\u00e0 n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c g\u1edfi \u0111\u1ebfn b\u1ea5t k\u1ef3 Client n\u00e0o subscribe c\u00f9ng k\u00eanh trong t\u01b0\u01a1ng lai. Khi m\u1ed9t Client k\u1ebft n\u1ed1i t\u1edbi Broker v\u00e0 subscribe, n\u00f3 s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i tin cu\u1ed1i c\u00f9ng c\u00f3 RETAIN = 1 v\u1edbi b\u1ea5t k\u1ef3 topic n\u00e0o m\u00e0 n\u00f3 \u0111\u0103ng k\u00fd tr\u00f9ng. Tuy nhi\u00ean, n\u1ebfu Broker nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i tin m\u00e0 c\u00f3 QoS = 0 v\u00e0 RETAIN = 1, n\u00f3 s\u1ebd hu\u1ef7 t\u1ea5t c\u1ea3 c\u00e1c g\u00f3i tin c\u00f3 RETAIN = 1 tr\u01b0\u1edbc \u0111\u00f3. V\u00e0 ph\u1ea3i l\u01b0u g\u00f3i tin n\u00e0y l\u1ea1i, nh\u01b0ng ho\u00e0n to\u00e0n c\u00f3 th\u1ec3 hu\u1ef7 b\u1ea5t k\u1ef3 l\u00fac n\u00e0o.  Khi publish m\u1ed9t g\u00f3i d\u1eef li\u1ec7u \u0111\u1ebfn Client, Broker ph\u1ea3i se RETAIN = 1 n\u1ebfu g\u00f3i \u0111\u01b0\u1ee3c g\u1edfi nh\u01b0 l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c subscribe m\u1edbi c\u1ee7a Client (gi\u1ed1ng nh\u01b0 tin nh\u1eafn ACK b\u00e1o subscribe th\u00e0nh c\u00f4ng). RETAIN ph\u1ea3i b\u1eb1ng 0 n\u1ebfu kh\u00f4ng quan t\u00e2m t\u1edbi k\u1ebft qu\u1ea3 c\u1ee7a vi\u1eb9c subscribe.",
            "title": "Retain"
        },
        {
            "location": "/nonos-sdk/mqtt/what-is-mqtt/#lwt",
            "text": "G\u00f3i tin LWT (last will and testament) kh\u00f4ng th\u1ef1c s\u1ef1 bi\u1ebft \u0111\u01b0\u1ee3c Client c\u00f3 tr\u1ef1c tuy\u1ebfn hay kh\u00f4ng, c\u00e1i n\u00e0y do g\u00f3i tin KeepAlive \u0111\u1ea3m nh\u1eadn. Tuy nhi\u00ean g\u00f3i tin LWT nh\u01b0 l\u00e0 th\u00f4ng tin \u0111i\u1ec1u g\u00ec s\u1ebd x\u1ea3y \u0111\u1ebfn sau khi thi\u1ebft b\u1ecb ngo\u1ea1i tuy\u1ebfn.  M\u1ed9t v\u00ed d\u1ee5  T\u00f4i c\u00f3 1 c\u1ea3m bi\u1ebfn, n\u00f3 g\u1edfi nh\u1eefng d\u1eef li\u1ec7u quan tr\u1ecdng v\u00e0 r\u1ea5t kh\u00f4ng th\u01b0\u1eddng xuy\u00ean. N\u00f3 c\u00f3 \u0111\u0103ng k\u00fd tr\u01b0\u1edbc v\u1edbi Broker m\u1ed9t tin nh\u1eafn lwt \u1edf topic  /node/gone-offline  v\u1edbi tin nh\u1eafn  id  c\u1ee7a n\u00f3. V\u00e0 t\u00f4i c\u0169ng \u0111\u0103ng k\u00fd theo d\u00f5i topic  /node/gone-offline , s\u1ebd g\u1edfi SMS t\u1edbi \u0111i\u1ec7n tho\u1ea1i th\u00f4i m\u1ed7i khi nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn n\u00e0o \u1edf k\u00eanh m\u00e0 t\u00f4i theo d\u00f5i.\nTrong qu\u00e1 tr\u00ecnh ho\u1ea1t \u0111\u1ed9ng, c\u1ea3m bi\u1ebfn lu\u00f4n gi\u1eef k\u1ebft n\u1ed1i v\u1edbi Broker b\u1edfi vi\u1ec7c lu\u00f4n g\u1edfi g\u00f3i tin keepAlive. Nh\u01b0ng n\u1ebfu v\u00ec l\u00fd do g\u00ec \u0111\u00f3, c\u1ea3m bi\u1ebfn n\u00e0y chuy\u1ec3n sang ngo\u1ea1i tuy\u1ebfn, k\u1ebft n\u1ed1i t\u1edbi Broker timeout do Broker kh\u00f4ng c\u00f2n nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i keepAlive.\nL\u00fac n\u00e0y, do c\u1ea3m bi\u1ebfn c\u1ee7a t\u00f4i \u0111\u00e3 \u0111\u0103ng k\u00fd LWT, do v\u1eady broker s\u1ebd \u0111\u00f3ng k\u1ebft n\u1ed1i c\u1ee7a C\u1ea3m bi\u1ebfn, \u0111\u1ed3ng th\u1eddi s\u1ebd publish m\u1ed9t g\u00f3i tin l\u00e0 Id c\u1ee7a c\u1ea3m bi\u1ebfn v\u00e0o k\u00eanh  /node/gone-offline , d\u0129 nhi\u00ean l\u00e0 t\u00f4i c\u0169ng s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn b\u00e1o c\u00e1i C\u1ea3m bi\u1ebfn y\u00eau qu\u00fd c\u1ee7a m\u00ecnh  \u0111\u00e3 ngo\u1ea1i tuy\u1ebfn.  Ng\u1eafn g\u1ecdn  Ngo\u00e0i vi\u1ec7c \u0111\u00f3ng k\u1ebft n\u1ed1i c\u1ee7a Client \u0111\u00e3 ngo\u1ea1i tuy\u1ebfn, g\u00f3i tin LWT c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc v\u00e0 \u0111\u01b0\u1ee3c g\u1edfi b\u1edfi Broker t\u1edbi k\u00eanh n\u00e0o \u0111\u00f3 khi thi\u1ebft b\u1ecb \u0111\u0103ng k\u00fd LWT ngo\u1ea1i tuy\u1ebfn.",
            "title": "LWT"
        },
        {
            "location": "/nonos-sdk/mqtt/what-is-mqtt/#reference",
            "text": "http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html  http://bb-smartsensing.com/basics-of-mqtt/  http://stackoverflow.com/questions/17270863/  http://tuanpmt.github.io/what-is-mqtt/",
            "title": "Reference:"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/",
            "text": "S\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n MQTT v\u1edbi ESP8266\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n\n\nS\u01a1 \u0111\u1ed3 file\n\n\nM\u00e3 ngu\u1ed3n\n\n\nPublish v\u00e0 subcribe tin nh\u1eafn\n\n\nK\u1ebft qu\u1ea3\n\n\nTham kh\u1ea3o\n\n\n\n\n\n\n\n\n\n\nS\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n MQTT v\u1edbi ESP8266\n#\n\n\nT\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i \nBi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n, to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file, \nMakefile, user_config.h, rf_init.c\n gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file \nmain.c\n. \n\n\n\n\nN\u1ed9i dung\n\n\nS\u1eed d\u1ee5ng MQTT cho ESP8266\n\n\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n#\n\n\ngit clone https://github.com/tuanpmt/esp_mqtt.git\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\n\n\n\n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\nPublish v\u00e0 subcribe tin nh\u1eafn\n#\n\n\n/* TRUE if success */\nBOOL MQTT_Subscribe(MQTT_Client *client, char* topic, uint8_t qos);\n\nBOOL MQTT_Publish(MQTT_Client *client, const char* topic, const char* data, int data_length, int qos, int retain);\n\n\n\n\nK\u1ebft qu\u1ea3\n#\n\n\nTham kh\u1ea3o\n#\n\n\nMQTT LCD\n\n\nMQTT Broker for test\n\n\nMQTT Client for test",
            "title": "ESP8266 MQTT Client"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/#su-dung-thu-vien-mqtt-voi-esp8266",
            "text": "T\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i  Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean , to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file,  Makefile, user_config.h, rf_init.c  gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file  main.c .    N\u1ed9i dung  S\u1eed d\u1ee5ng MQTT cho ESP8266",
            "title": "S\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n MQTT v\u1edbi ESP8266"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/#lay-du-an-ve-tu-github",
            "text": "git clone https://github.com/tuanpmt/esp_mqtt.git",
            "title": "L\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/#so-o-file",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/#ma-nguon",
            "text": "",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/#publish-va-subcribe-tin-nhan",
            "text": "/* TRUE if success */\nBOOL MQTT_Subscribe(MQTT_Client *client, char* topic, uint8_t qos);\n\nBOOL MQTT_Publish(MQTT_Client *client, const char* topic, const char* data, int data_length, int qos, int retain);",
            "title": "Publish v\u00e0 subcribe tin nh\u1eafn"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/#ket-qua",
            "text": "",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/mqtt/mqtt-client/#tham-khao",
            "text": "MQTT LCD  MQTT Broker for test  MQTT Client for test",
            "title": "Tham kh\u1ea3o"
        },
        {
            "location": "/nonos-sdk/http-client/http-client/",
            "text": "",
            "title": "ESP8266 HTTP Client"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/",
            "text": "\u0110i\u1ec1u khi\u1ec3n LED qua webserver\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n\n\nS\u01a1 \u0111\u1ed3 file\n\n\nM\u00e3 ngu\u1ed3n\n\n\nK\u1ebft qu\u1ea3\n\n\nG\u1ee3i \u00fd\n\n\nReferences\n\n\n\n\n\n\n\n\n\n\n\u0110i\u1ec1u khi\u1ec3n LED qua webserver\n#\n\n\nT\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i \nBi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean\n, to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file, \nMakefile, user_config.h, rf_init.c\n gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file \nmain.c\n. \n\n\n\n\nN\u1ed9i dung\n\n\nT\u1ea1o m\u1ed9t webserver cho ph\u00e9p ng\u01b0\u1eddi d\u00f9ng b\u1eadt t\u1eaft LED t\u1eeb xa\n\n\n\n\nL\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github\n#\n\n\ngit clone https://github.com/esp8266vn/esp-iot-http-server.git\ncd esp-iot-http-server && make\n\n\n\n\nS\u01a1 \u0111\u1ed3 file\n#\n\n\nesp-iot-led-blink\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h\n\n\n\n\nM\u00e3 ngu\u1ed3n\n#\n\n\n#include \"ets_sys.h\"\n#include \"osapi.h\"\n#include \"user_interface.h\"\n#include \"espconn.h\"\n#include \"mem.h\"\n\nLOCAL struct espconn esp_conn;\nLOCAL esp_tcp esptcp;\n\n#define SERVER_LOCAL_PORT         8000\n\nchar *index_html =\n\"<!DOCTYPE html>\\r\\n\"\n\"<html>\\r\\n\"\n\"<body>\\r\\n\"\n\"\\r\\n\"\n\"<h1>ESP8266 HTTP server demo </h1>\\r\\n\"\n\"<button type='button' onclick='led_on()'>ON</button><br>\\r\\n\"\n\"<br>\\r\\n\"\n\"<button type='button' onclick='led_off()'>OFF</button><br>\\r\\n\"\n\" \\r\\n\"\n\"<script>\\r\\n\"\n\n\"function led_on() {\\r\\n\"\n\"  var xhttp;\\r\\n\"\n\"  if (window.XMLHttpRequest) {\\r\\n\"\n\"    // code for modern browsers\\r\\n\"\n\"    xhttp = new XMLHttpRequest();\\r\\n\"\n\"    } else {\\r\\n\"\n\"    // code for IE6, IE5\\r\\n\"\n\"    xhttp = new ActiveXObject(\\\"Microsoft.XMLHTTP\\\");\\r\\n\"\n\"  }\\r\\n\"\n\"  xhttp.open(\\\"GET\\\", 'led_on', true);\\r\\n\"\n\"  xhttp.send();\\r\\n\"\n\"}\\r\\n\"\n\n\"function led_off() {\\r\\n\"\n\"  var xhttp;\\r\\n\"\n\"  if (window.XMLHttpRequest) {\\r\\n\"\n\"    // code for modern browsers\\r\\n\"\n\"    xhttp = new XMLHttpRequest();\\r\\n\"\n\"    } else {\\r\\n\"\n\"    // code for IE6, IE5\\r\\n\"\n\"    xhttp = new ActiveXObject(\\\"Microsoft.XMLHTTP\\\");\\r\\n\"\n\"  }\\r\\n\"\n\"  xhttp.open(\\\"GET\\\", 'led_off', true);\\r\\n\"\n\"  xhttp.send();\\r\\n\"\n\"}\\r\\n\"\n\n\"</script>\\r\\n\"\n\"\\r\\n\"\n\"</body>\\r\\n\"\n\"</html>\\r\\n\";\n\n/******************************************************************************\n    * FunctionName : led_init\n    * Description     : led initialization.\n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nled_init(void)\n{\n    WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc) | (uint32_t)0x1);  \n    WRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe) | (uint32_t)0x0);\n    WRITE_PERI_REG(RTC_GPIO_ENABLE, (READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe) | (uint32_t)0x1);\n}\n\n/******************************************************************************\n    * FunctionName : led_set\n    * Description     : set led state according to led_value value.\n    * Parameters         : led_value - led state to be set\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nled_set(uint8_t led_value)\n{\n    WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe)| (uint32_t)(led_value & 1));\n}\n\n/******************************************************************************\n    * FunctionName : http_response\n    * Description     : send the html body with the html header.\n    * Parameters         :  pespconn - espconn of the http server\n    *                       error - status code\n    *                       html_txt - the buffer which contents the html file\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\nhttp_response(struct espconn *pespconn, int error, char *html_txt)\n{\n    char *buffer = NULL;\n    int html_length = 0;\n    buffer = (char *)os_malloc(256 * sizeof(char));\n    if(buffer != NULL)\n    {\n        if(html_txt != NULL)\n        {\n            html_length = os_strlen(html_txt);\n        }\n        else\n        {\n            html_length = 0;\n        }\n\n        os_sprintf(buffer, \"HTTP/1.1 %d OK\\r\\n\"\n                            \"Content-Length: %d\\r\\n\"\n                            \"Content-Type: text/html\\r\\n\"\n                            \"Connection: Closed\\r\\n\"\n                            \"\\r\\n\"\n        ,error, html_length);\n\n        if(html_length > 0)\n        {\n            buffer = (char *)os_realloc(buffer, (256 + html_length) *sizeof(char));\n            os_strcat(buffer, html_txt);\n        }\n\n        espconn_sent(pespconn, buffer, strlen(buffer));\n        os_free(buffer);\n    }\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_sent_cb\n    * Description     : data sent callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_sent_cb(void *arg)\n{\n    //data sent successfully\n\n    os_printf(\"tcp sent cb \\r\\n\");\n}\n\n\n/******************************************************************************\n    * FunctionName : tcp_server_recv_cb\n    * Description     : receive callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_recv_cb(void *arg, char *pusrdata, unsigned short length)\n{\n    char *ptr = 0;\n    //received some data from tcp connection\n\n    struct espconn *pespconn = arg;\n    // os_printf(\"tcp recv : %s \\r\\n\", pusrdata);\n    ptr = (char *)os_strstr(pusrdata, \"\\r\\n\");\n    ptr[0] = '\\0';\n    if (os_strcmp(pusrdata, \"GET / HTTP/1.1\") == 0)\n    {\n        http_response(pespconn, 200, index_html);\n    }\n    else if (os_strcmp(pusrdata, \"GET /led_on HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_on\\r\\n\");\n        led_set(0);\n        http_response(pespconn, 200, NULL);\n    } \n    else if (os_strcmp(pusrdata, \"GET /led_off HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_off\\r\\n\");\n        led_set(1);\n        http_response(pespconn, 200, NULL);\n    }\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_discon_cb\n    * Description     : disconnect callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_discon_cb(void *arg)\n{\n    //tcp disconnect successfully\n\n    os_printf(\"tcp disconnect succeed !!! \\r\\n\");\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_recon_cb\n    * Description     : reconnect callback, error occured in TCP connection.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_recon_cb(void *arg, sint8 err)\n{\n    //error occured , tcp connection broke. \n\n    os_printf(\"reconnect callback, error code %d !!! \\r\\n\",err);\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_listen\n    * Description     : TCP server listened a connection successfully\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_listen(void *arg)\n{\n    struct espconn *pesp_conn = arg;\n    os_printf(\"tcp_server_listen !!! \\r\\n\");\n\n    espconn_regist_recvcb(pesp_conn, tcp_server_recv_cb);\n    espconn_regist_reconcb(pesp_conn, tcp_server_recon_cb);\n    espconn_regist_disconcb(pesp_conn, tcp_server_discon_cb);\n\n    espconn_regist_sentcb(pesp_conn, tcp_server_sent_cb);\n}\n\n/******************************************************************************\n    * FunctionName : user_tcpserver_init\n    * Description     : parameter initialize as a TCP server\n    * Parameters         : port -- server port\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_tcpserver_init(uint32 port)\n{\n    esp_conn.type = ESPCONN_TCP;\n    esp_conn.state = ESPCONN_NONE;\n    esp_conn.proto.tcp = &esptcp;\n    esp_conn.proto.tcp->local_port = port;\n    espconn_regist_connectcb(&esp_conn, tcp_server_listen);\n\n    sint8 ret = espconn_accept(&esp_conn);\n\n    os_printf(\"espconn_accept [%d] !!! \\r\\n\", ret);\n\n}\nLOCAL os_timer_t test_timer;\n\n/******************************************************************************\n    * FunctionName : user_esp_platform_check_ip\n    * Description     : check whether get ip addr or not\n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_esp_platform_check_ip(void)\n{\n    struct ip_info ipconfig;\n\n    //disarm timer first\n    os_timer_disarm(&test_timer);\n\n    //get ip info of ESP8266 station\n    wifi_get_ip_info(STATION_IF, &ipconfig);\n\n    if (wifi_station_get_connect_status() == STATION_GOT_IP && ipconfig.ip.addr != 0) {\n\n            os_printf(\"got ip !!! \\r\\n\");\n            user_tcpserver_init(SERVER_LOCAL_PORT);\n\n    } else {\n\n        if ((wifi_station_get_connect_status() == STATION_WRONG_PASSWORD ||\n                wifi_station_get_connect_status() == STATION_NO_AP_FOUND ||\n                wifi_station_get_connect_status() == STATION_CONNECT_FAIL)) {\n\n            os_printf(\"connect fail !!! \\r\\n\");\n\n        } else {\n\n            //re-arm timer to check ip\n            os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n            os_timer_arm(&test_timer, 100, 0);\n        }\n    }\n}\n\n/******************************************************************************\n    * FunctionName : user_set_station_config\n    * Description     : set the router info which ESP8266 station will connect to \n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_set_station_config(void)\n{\n    // Wifi configuration\n    char ssid[32] = \"yourssid\";\n    char password[64] = \"yourpassword\";\n    struct station_config stationConf;\n\n    os_memset(stationConf.ssid, 0, 32);\n    os_memset(stationConf.password, 0, 64);\n    //need not mac address\n    stationConf.bssid_set = 0;\n\n    //Set ap settings\n    os_memcpy(&stationConf.ssid, ssid, 32);\n    os_memcpy(&stationConf.password, password, 64);\n    wifi_station_set_config(&stationConf);\n\n    //set a timer to check whether got ip from router succeed or not.\n    os_timer_disarm(&test_timer);\n    os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n    os_timer_arm(&test_timer, 100, 0);\n}\n\n/******************************************************************************\n    * FunctionName : user_init\n    * Description     : entry of user application, init user function here\n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_init(void)\n{\n    led_init();\n    led_set(1);\n    uart_div_modify(0, UART_CLK_FREQ / 115200);\n    os_printf(\"SDK version:%s\\n\", system_get_sdk_version());\n\n    //Set the module to station mode\n    wifi_set_opmode(STATION_MODE);\n\n    // ESP8266 connect to router.\n    user_set_station_config();\n}\n\n\n\n\n\n\nK\u1ebft qu\u1ea3\n#\n\n\nKhi ch\u01b0\u01a1ng tr\u00ecnh b\u1eaft \u0111\u1ea7u ch\u1ea1y tr\u00ean terminal s\u1ebd in ra \u0111\u1ecba ch\u1ec9 IP c\u1ee7a esp8266 nh\u01b0 sau\n\n\nconnected with yourssid, channel 13\ndhcp client start...\nip:192.168.1.21,mask:255.255.255.0,gw:192.168.1.1\n\n\n\n\nNh\u01b0 v\u1eady \u0111\u1ecba ch\u1ec9 IP m\u00e0 esp8266 \u0111\u01b0\u1ee3c c\u1ea5p l\u00e0 \n192.168.1.21\n\nL\u00fac n\u00e0y b\u1ea1n m\u1edf tr\u00ecnh duy\u1ec7t web l\u00ean v\u00e0 truy c\u1eadp v\u00e0o \u0111\u1ecba ch\u1ec9 \n192.168.1.21:8000\n th\u00ec s\u1ebd truy c\u1eadp \u0111\u01b0\u1ee3c v\u00e0o 1 webserver nh\u01b0 sau\n\n\n\n\nkhi click v\u00e0o n\u00fat on th\u00ec LED tr\u00ean board s\u1ebd s\u00e1ng, khi click v\u00e0o n\u00fat off th\u00ec LED s\u1ebd t\u1eaft\n\n\nG\u1ee3i \u00fd\n#\n\n\n\u0110\u1ec3 c\u00f3 th\u1ec3 hi\u1ec3u c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a \u0111o\u1ea1n ch\u01b0\u01a1ng tr\u00ecnh tr\u00ean m\u00ecnh xin \u0111\u1ec1 ngh\u1ecb c\u00e1c b\u1ea1n \u0111\u1ecdc qua v\u1ec1 c\u00e1c kh\u00e1i ni\u1ec7m http protocol, http request, http response nh\u1eefng th\u00f4ng tin n\u00e0y c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng t\u00ecm th\u1ea5y \u1edf trang https://www.tutorialspoint.com/\nV\u1ec1 c\u01a1 b\u1ea3n th\u00ec http server c\u0169ng ch\u1ec9 l\u00e0 m\u1ed9t \ntcp server\n nh\u01b0ng s\u1ebd giao ti\u1ebfp v\u1edbi client th\u00f4ng qua \nhttp response\n v\u00e0 \nhttp request\n. M\u1ed7i khi client mu\u1ed1n th\u00f4ng b\u00e1o \u0111i\u1ec1u g\u00ec cho server th\u00ec s\u1ebd g\u1eedi m\u1ed9t \nhttp request\n cho server v\u00e0 server s\u1ebd tr\u1ea3 l\u1eddi l\u1ea1i b\u1eb1ng m\u1ed9t \nhttp response\n.\nD\u01b0\u1edbi \u0111\u00e2y l\u00e0 c\u00e1ch m\u00e0 client v\u00e0 server trao \u0111\u1ed5i th\u00f4ng tin\n\n\n\n\nkhi c\u00f3 m\u1ed9t client truy c\u1eadp v\u00e0o \u0111\u1ecba ch\u1ec9 c\u1ee7a webserver th\u00ec browser s\u1ebd g\u1eedi cho server m\u1ed9t http request nh\u01b0 sau\n\n\nGET / HTTP/1.1\n\n\n\n\nNgay khi nh\u1eadn \u0111\u01b0\u1ee3c request n\u00e0y server s\u1ebd g\u1eedi l\u1ea1i m\u1ed9t http response c\u00f3 ch\u1ee9a n\u1ed9i dung l\u00e0 file html c\u1ee7a webserver\n\n\nHTTP/1.1 200 OK\nContent-Length: 200\nContent-Type: text/html\nConnection: Closed\n\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>ESP8266 HTTP server demo </h1>\n<button type='button' onclick='led_on()'>ON</button><br>\n<br>\n<button type='button' onclick='led_off()'>OFF</button><br>\n\n<script>\n\nfunction led_on(){\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_on', true);\n  xhttp.send();\n}\n\nfunction led_off() {\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_off', true);\n  xhttp.send();\n}\n\n</script>\n</body>\n</html>\n\n\n\n\nCh\u00fa \u00fd l\u00e0 http response n\u00e0y g\u1ed3m 3 ph\u1ea7n l\u00e0 \n\nStatus line\n : tr\u1ea3 v\u1ec1 http version, status code\n\n\nHTTP/1.1 200 OK\n\n\n\n\nHeader\n : ch\u1ee9a message length, message type\n\n\nContent-Length: 200\nContent-Type: text/html\nConnection: Closed\n\n\n\n\nMesage body\n: ch\u1ee9a n\u1ed9i dung m\u00e0 server mu\u1ed1n g\u1eedi cho client th\u00f4ng th\u01b0\u1eddng l\u00e0 n\u1ed9i dung file html,js,php\u2026 \u0111\u01b0\u1ee3c request\n\n\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>ESP8266 HTTP server demo </h1>\n<button type='button' onclick='led_on()'>ON</button><br>\n<br>\n<button type='button' onclick='led_off()'>OFF</button><br>\n\n<script>\n\nfunction led_on(){\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_on', true);\n  xhttp.send();\n}\n\nfunction led_off() {\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_off', true);\n  xhttp.send();\n}\n\n</script>\n</body>\n</html>\n\n\n\n\nCh\u00fa \u00fd:\n    Header v\u00e0 message body \u0111\u01b0\u1ee3c ng\u0103n c\u00e1ch b\u1edfi m\u1ed9t empty line ch\u1ec9 g\u1ed3m k\u00ed t\u1ef1 \u201c\\r\\n\u201d n\u1ebfu kh\u00f4ng c\u00f3 d\u00f2ng n\u00e0y th\u00ec n\u1ed9i dung    m\u00e0 client nh\u1eadn \u0111\u01b0\u1ee3c c\u00f3 th\u1ec3 kh\u00f4ng \u0111\u00fang.\n\n\n\u0110\u1ec3 c\u1eadp nh\u1eadt tr\u1ea1ng th\u00e1i c\u1ee7a LED th\u00ec m\u00ecnh d\u00f9ng k\u1ef9 thu\u1eadt \najax\n\nKhi nh\u1ea5n v\u00e0o n\u00fat \non\n s\u1ef1 ki\u1ec7n \nonclick\n \u0111\u01b0\u1ee3c k\u00edch ho\u1ea1t v\u00e0 h\u00e0m \nled_on()\n s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi v\u00e0 g\u1eedi m\u1ed9t \nget request\n c\u00f3 d\u1ea1ng nh\u01b0 sau \nGET /led_on HTTP/1.1\n \u0111\u1ec3 y\u00eau c\u1ea7u server set on LED\n\n\nT\u01b0\u01a1ng t\u1ef1 khi nh\u1ea5n n\u00fat \noff\n h\u00e0m \nled_off()\n s\u1ebd g\u1eedi request \nGET /led_off HTTP/1.1\n \u0111\u1ec3 y\u00eau c\u1ea7u server t\u1eaft LED\n\n\nNh\u01b0 v\u1eady ph\u00eda esp8266 s\u1ebd c\u1ea7n \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh nh\u01b0 1 \ntcp server\n l\u1eafng nghe v\u00e0 x\u1eed l\u00fd c\u00e1c \nhttp request\n\n\n/******************************************************************************\n    * FunctionName : user_tcpserver_init\n    * Description     : parameter initialize as a TCP server\n    * Parameters         : port -- server port\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_tcpserver_init(uint32 port)\n{\n    esp_conn.type = ESPCONN_TCP;\n    esp_conn.state = ESPCONN_NONE;\n    esp_conn.proto.tcp = &esptcp;\n    esp_conn.proto.tcp->local_port = port;\n    espconn_regist_connectcb(&esp_conn, tcp_server_listen);\n\n    sint8 ret = espconn_accept(&esp_conn);\n\n    os_printf(\"espconn_accept [%d] !!! \\r\\n\", ret);\n\n}\n\n\n\n\nCh\u00fa \u00fd :\n\n\nespconn_regist_connectcb(&esp_conn, tcp_server_listen); \n\n\n\n\nC\u00f3 ngh\u0129a l\u00e0 h\u00e0m \ntcp_server_listen\n s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi sau khi \u0111\u00e3 k\u1ebft n\u1ed1i tcp th\u00e0nh c\u00f4ng\n\n\nTrong h\u00e0m \ntcp_server_listen\n l\u1ea1i c\u1ea5u h\u00ecnh ti\u1ebfp 4 h\u00e0m call back\n\n\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_listen(void *arg)\n{\n    struct espconn *pesp_conn = arg;\n    os_printf(\"tcp_server_listen !!! \\r\\n\");\n\n    espconn_regist_recvcb(pesp_conn, tcp_server_recv_cb);\n    espconn_regist_reconcb(pesp_conn, tcp_server_recon_cb);\n    espconn_regist_disconcb(pesp_conn, tcp_server_discon_cb);\n\n    espconn_regist_sentcb(pesp_conn, tcp_server_sent_cb);\n}\n\n\n\n\ntcp_server_recv_cb\n: \u0111\u01b0\u1ee3c g\u1ecdi khi nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u\n\ntcp_server_recon_cb\n:  \u0111\u01b0\u1ee3c g\u1ecdi khi x\u1ea3y ra l\u1ed7i c\u1ea7n reconnect l\u1ea1i \u0111\u01b0\u1eddng truy\u1ec1n tcp\n\ntcp_server_discon_cb\n: \u0111\u01b0\u1ee3c g\u1ecdi khi tcp b\u1ecb disconnect\n\ntcp_server_sent_cb\n: \u0111\u01b0\u1ee3c g\u1ecdi khi d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c g\u1eedi th\u00e0nh c\u00f4ng\n\n\nNh\u01b0 v\u1eady ch\u00fang ta s\u1ebd x\u1ee7 l\u00fd \nhttp request\n trong h\u00e0m \ntcp_server_recv_cb\n nh\u01b0 trong \u0111o\u1ea1n code b\u00ean d\u01b0\u1edbi\n\n\n/******************************************************************************\n    * FunctionName : tcp_server_recv_cb\n    * Description     : receive callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_recv_cb(void *arg, char *pusrdata, unsigned short length)\n{\n    char *ptr = 0;\n    //received some data from tcp connection\n\n    struct espconn *pespconn = arg;\n    // os_printf(\"tcp recv : %s \\r\\n\", pusrdata);\n    ptr = (char *)os_strstr(pusrdata, \"\\r\\n\");\n    ptr[0] = '\\0';\n    if (os_strcmp(pusrdata, \"GET / HTTP/1.1\") == 0)\n    {\n        http_response(pespconn, 200, index_html);\n    }\n    else if (os_strcmp(pusrdata, \"GET /led_on HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_on\\r\\n\");\n        led_set(0);\n        http_response(pespconn, 200, NULL);\n    } \n    else if (os_strcmp(pusrdata, \"GET /led_off HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_off\\r\\n\");\n        led_set(1);\n        http_response(pespconn, 200, NULL);\n    }\n}\n\n\n\n\nReferences\n#\n\n\n\n\nhttp://www.tutorialspoint.com/http/http_requests\n\n\nhttps://www.tutorialspoint.com/http/http_responses.htm\n\n\nhttp://www.w3schools.com/xml/ajax_intro.asp\n\n\nhttps://espressif.com/en/products/hardware/esp8266ex/resources",
            "title": "ESP8266 HTTP Server"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/#ieu-khien-led-qua-webserver",
            "text": "T\u1ed5 ch\u1ee9c file c\u0103n c\u1ee9 theo b\u00e0i  Bi\u00ean d\u1ecbch d\u1ef1 \u00e1n \u0111\u1ea7u ti\u00ean , to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac file,  Makefile, user_config.h, rf_init.c  gi\u1eef nguy\u00ean, ch\u1ec9 thay \u0111\u1ed5i n\u1ed9i dung file  main.c .    N\u1ed9i dung  T\u1ea1o m\u1ed9t webserver cho ph\u00e9p ng\u01b0\u1eddi d\u00f9ng b\u1eadt t\u1eaft LED t\u1eeb xa",
            "title": "\u0110i\u1ec1u khi\u1ec3n LED qua webserver"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/#lay-du-an-ve-tu-github",
            "text": "git clone https://github.com/esp8266vn/esp-iot-http-server.git\ncd esp-iot-http-server && make",
            "title": "L\u1ea5y d\u1ef1 \u00e1n v\u1ec1 t\u1eeb Github"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/#so-o-file",
            "text": "esp-iot-led-blink\n    |-- Makefile\n    |-- main.c\n    |-- rf_init.c\n    `-- user_config.h",
            "title": "S\u01a1 \u0111\u1ed3 file"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/#ma-nguon",
            "text": "#include \"ets_sys.h\"\n#include \"osapi.h\"\n#include \"user_interface.h\"\n#include \"espconn.h\"\n#include \"mem.h\"\n\nLOCAL struct espconn esp_conn;\nLOCAL esp_tcp esptcp;\n\n#define SERVER_LOCAL_PORT         8000\n\nchar *index_html =\n\"<!DOCTYPE html>\\r\\n\"\n\"<html>\\r\\n\"\n\"<body>\\r\\n\"\n\"\\r\\n\"\n\"<h1>ESP8266 HTTP server demo </h1>\\r\\n\"\n\"<button type='button' onclick='led_on()'>ON</button><br>\\r\\n\"\n\"<br>\\r\\n\"\n\"<button type='button' onclick='led_off()'>OFF</button><br>\\r\\n\"\n\" \\r\\n\"\n\"<script>\\r\\n\"\n\n\"function led_on() {\\r\\n\"\n\"  var xhttp;\\r\\n\"\n\"  if (window.XMLHttpRequest) {\\r\\n\"\n\"    // code for modern browsers\\r\\n\"\n\"    xhttp = new XMLHttpRequest();\\r\\n\"\n\"    } else {\\r\\n\"\n\"    // code for IE6, IE5\\r\\n\"\n\"    xhttp = new ActiveXObject(\\\"Microsoft.XMLHTTP\\\");\\r\\n\"\n\"  }\\r\\n\"\n\"  xhttp.open(\\\"GET\\\", 'led_on', true);\\r\\n\"\n\"  xhttp.send();\\r\\n\"\n\"}\\r\\n\"\n\n\"function led_off() {\\r\\n\"\n\"  var xhttp;\\r\\n\"\n\"  if (window.XMLHttpRequest) {\\r\\n\"\n\"    // code for modern browsers\\r\\n\"\n\"    xhttp = new XMLHttpRequest();\\r\\n\"\n\"    } else {\\r\\n\"\n\"    // code for IE6, IE5\\r\\n\"\n\"    xhttp = new ActiveXObject(\\\"Microsoft.XMLHTTP\\\");\\r\\n\"\n\"  }\\r\\n\"\n\"  xhttp.open(\\\"GET\\\", 'led_off', true);\\r\\n\"\n\"  xhttp.send();\\r\\n\"\n\"}\\r\\n\"\n\n\"</script>\\r\\n\"\n\"\\r\\n\"\n\"</body>\\r\\n\"\n\"</html>\\r\\n\";\n\n/******************************************************************************\n    * FunctionName : led_init\n    * Description     : led initialization.\n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nled_init(void)\n{\n    WRITE_PERI_REG(PAD_XPD_DCDC_CONF, (READ_PERI_REG(PAD_XPD_DCDC_CONF) & 0xffffffbc) | (uint32_t)0x1);  \n    WRITE_PERI_REG(RTC_GPIO_CONF, (READ_PERI_REG(RTC_GPIO_CONF) & (uint32_t)0xfffffffe) | (uint32_t)0x0);\n    WRITE_PERI_REG(RTC_GPIO_ENABLE, (READ_PERI_REG(RTC_GPIO_ENABLE) & (uint32_t)0xfffffffe) | (uint32_t)0x1);\n}\n\n/******************************************************************************\n    * FunctionName : led_set\n    * Description     : set led state according to led_value value.\n    * Parameters         : led_value - led state to be set\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nled_set(uint8_t led_value)\n{\n    WRITE_PERI_REG(RTC_GPIO_OUT, (READ_PERI_REG(RTC_GPIO_OUT) & (uint32_t)0xfffffffe)| (uint32_t)(led_value & 1));\n}\n\n/******************************************************************************\n    * FunctionName : http_response\n    * Description     : send the html body with the html header.\n    * Parameters         :  pespconn - espconn of the http server\n    *                       error - status code\n    *                       html_txt - the buffer which contents the html file\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\nhttp_response(struct espconn *pespconn, int error, char *html_txt)\n{\n    char *buffer = NULL;\n    int html_length = 0;\n    buffer = (char *)os_malloc(256 * sizeof(char));\n    if(buffer != NULL)\n    {\n        if(html_txt != NULL)\n        {\n            html_length = os_strlen(html_txt);\n        }\n        else\n        {\n            html_length = 0;\n        }\n\n        os_sprintf(buffer, \"HTTP/1.1 %d OK\\r\\n\"\n                            \"Content-Length: %d\\r\\n\"\n                            \"Content-Type: text/html\\r\\n\"\n                            \"Connection: Closed\\r\\n\"\n                            \"\\r\\n\"\n        ,error, html_length);\n\n        if(html_length > 0)\n        {\n            buffer = (char *)os_realloc(buffer, (256 + html_length) *sizeof(char));\n            os_strcat(buffer, html_txt);\n        }\n\n        espconn_sent(pespconn, buffer, strlen(buffer));\n        os_free(buffer);\n    }\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_sent_cb\n    * Description     : data sent callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_sent_cb(void *arg)\n{\n    //data sent successfully\n\n    os_printf(\"tcp sent cb \\r\\n\");\n}\n\n\n/******************************************************************************\n    * FunctionName : tcp_server_recv_cb\n    * Description     : receive callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_recv_cb(void *arg, char *pusrdata, unsigned short length)\n{\n    char *ptr = 0;\n    //received some data from tcp connection\n\n    struct espconn *pespconn = arg;\n    // os_printf(\"tcp recv : %s \\r\\n\", pusrdata);\n    ptr = (char *)os_strstr(pusrdata, \"\\r\\n\");\n    ptr[0] = '\\0';\n    if (os_strcmp(pusrdata, \"GET / HTTP/1.1\") == 0)\n    {\n        http_response(pespconn, 200, index_html);\n    }\n    else if (os_strcmp(pusrdata, \"GET /led_on HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_on\\r\\n\");\n        led_set(0);\n        http_response(pespconn, 200, NULL);\n    } \n    else if (os_strcmp(pusrdata, \"GET /led_off HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_off\\r\\n\");\n        led_set(1);\n        http_response(pespconn, 200, NULL);\n    }\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_discon_cb\n    * Description     : disconnect callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_discon_cb(void *arg)\n{\n    //tcp disconnect successfully\n\n    os_printf(\"tcp disconnect succeed !!! \\r\\n\");\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_recon_cb\n    * Description     : reconnect callback, error occured in TCP connection.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_recon_cb(void *arg, sint8 err)\n{\n    //error occured , tcp connection broke. \n\n    os_printf(\"reconnect callback, error code %d !!! \\r\\n\",err);\n}\n\n/******************************************************************************\n    * FunctionName : tcp_server_listen\n    * Description     : TCP server listened a connection successfully\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_listen(void *arg)\n{\n    struct espconn *pesp_conn = arg;\n    os_printf(\"tcp_server_listen !!! \\r\\n\");\n\n    espconn_regist_recvcb(pesp_conn, tcp_server_recv_cb);\n    espconn_regist_reconcb(pesp_conn, tcp_server_recon_cb);\n    espconn_regist_disconcb(pesp_conn, tcp_server_discon_cb);\n\n    espconn_regist_sentcb(pesp_conn, tcp_server_sent_cb);\n}\n\n/******************************************************************************\n    * FunctionName : user_tcpserver_init\n    * Description     : parameter initialize as a TCP server\n    * Parameters         : port -- server port\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_tcpserver_init(uint32 port)\n{\n    esp_conn.type = ESPCONN_TCP;\n    esp_conn.state = ESPCONN_NONE;\n    esp_conn.proto.tcp = &esptcp;\n    esp_conn.proto.tcp->local_port = port;\n    espconn_regist_connectcb(&esp_conn, tcp_server_listen);\n\n    sint8 ret = espconn_accept(&esp_conn);\n\n    os_printf(\"espconn_accept [%d] !!! \\r\\n\", ret);\n\n}\nLOCAL os_timer_t test_timer;\n\n/******************************************************************************\n    * FunctionName : user_esp_platform_check_ip\n    * Description     : check whether get ip addr or not\n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_esp_platform_check_ip(void)\n{\n    struct ip_info ipconfig;\n\n    //disarm timer first\n    os_timer_disarm(&test_timer);\n\n    //get ip info of ESP8266 station\n    wifi_get_ip_info(STATION_IF, &ipconfig);\n\n    if (wifi_station_get_connect_status() == STATION_GOT_IP && ipconfig.ip.addr != 0) {\n\n            os_printf(\"got ip !!! \\r\\n\");\n            user_tcpserver_init(SERVER_LOCAL_PORT);\n\n    } else {\n\n        if ((wifi_station_get_connect_status() == STATION_WRONG_PASSWORD ||\n                wifi_station_get_connect_status() == STATION_NO_AP_FOUND ||\n                wifi_station_get_connect_status() == STATION_CONNECT_FAIL)) {\n\n            os_printf(\"connect fail !!! \\r\\n\");\n\n        } else {\n\n            //re-arm timer to check ip\n            os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n            os_timer_arm(&test_timer, 100, 0);\n        }\n    }\n}\n\n/******************************************************************************\n    * FunctionName : user_set_station_config\n    * Description     : set the router info which ESP8266 station will connect to \n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_set_station_config(void)\n{\n    // Wifi configuration\n    char ssid[32] = \"yourssid\";\n    char password[64] = \"yourpassword\";\n    struct station_config stationConf;\n\n    os_memset(stationConf.ssid, 0, 32);\n    os_memset(stationConf.password, 0, 64);\n    //need not mac address\n    stationConf.bssid_set = 0;\n\n    //Set ap settings\n    os_memcpy(&stationConf.ssid, ssid, 32);\n    os_memcpy(&stationConf.password, password, 64);\n    wifi_station_set_config(&stationConf);\n\n    //set a timer to check whether got ip from router succeed or not.\n    os_timer_disarm(&test_timer);\n    os_timer_setfn(&test_timer, (os_timer_func_t *)user_esp_platform_check_ip, NULL);\n    os_timer_arm(&test_timer, 100, 0);\n}\n\n/******************************************************************************\n    * FunctionName : user_init\n    * Description     : entry of user application, init user function here\n    * Parameters         : none\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_init(void)\n{\n    led_init();\n    led_set(1);\n    uart_div_modify(0, UART_CLK_FREQ / 115200);\n    os_printf(\"SDK version:%s\\n\", system_get_sdk_version());\n\n    //Set the module to station mode\n    wifi_set_opmode(STATION_MODE);\n\n    // ESP8266 connect to router.\n    user_set_station_config();\n}",
            "title": "M\u00e3 ngu\u1ed3n"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/#ket-qua",
            "text": "Khi ch\u01b0\u01a1ng tr\u00ecnh b\u1eaft \u0111\u1ea7u ch\u1ea1y tr\u00ean terminal s\u1ebd in ra \u0111\u1ecba ch\u1ec9 IP c\u1ee7a esp8266 nh\u01b0 sau  connected with yourssid, channel 13\ndhcp client start...\nip:192.168.1.21,mask:255.255.255.0,gw:192.168.1.1  Nh\u01b0 v\u1eady \u0111\u1ecba ch\u1ec9 IP m\u00e0 esp8266 \u0111\u01b0\u1ee3c c\u1ea5p l\u00e0  192.168.1.21 \nL\u00fac n\u00e0y b\u1ea1n m\u1edf tr\u00ecnh duy\u1ec7t web l\u00ean v\u00e0 truy c\u1eadp v\u00e0o \u0111\u1ecba ch\u1ec9  192.168.1.21:8000  th\u00ec s\u1ebd truy c\u1eadp \u0111\u01b0\u1ee3c v\u00e0o 1 webserver nh\u01b0 sau   khi click v\u00e0o n\u00fat on th\u00ec LED tr\u00ean board s\u1ebd s\u00e1ng, khi click v\u00e0o n\u00fat off th\u00ec LED s\u1ebd t\u1eaft",
            "title": "K\u1ebft qu\u1ea3"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/#goi-y",
            "text": "\u0110\u1ec3 c\u00f3 th\u1ec3 hi\u1ec3u c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a \u0111o\u1ea1n ch\u01b0\u01a1ng tr\u00ecnh tr\u00ean m\u00ecnh xin \u0111\u1ec1 ngh\u1ecb c\u00e1c b\u1ea1n \u0111\u1ecdc qua v\u1ec1 c\u00e1c kh\u00e1i ni\u1ec7m http protocol, http request, http response nh\u1eefng th\u00f4ng tin n\u00e0y c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng t\u00ecm th\u1ea5y \u1edf trang https://www.tutorialspoint.com/\nV\u1ec1 c\u01a1 b\u1ea3n th\u00ec http server c\u0169ng ch\u1ec9 l\u00e0 m\u1ed9t  tcp server  nh\u01b0ng s\u1ebd giao ti\u1ebfp v\u1edbi client th\u00f4ng qua  http response  v\u00e0  http request . M\u1ed7i khi client mu\u1ed1n th\u00f4ng b\u00e1o \u0111i\u1ec1u g\u00ec cho server th\u00ec s\u1ebd g\u1eedi m\u1ed9t  http request  cho server v\u00e0 server s\u1ebd tr\u1ea3 l\u1eddi l\u1ea1i b\u1eb1ng m\u1ed9t  http response .\nD\u01b0\u1edbi \u0111\u00e2y l\u00e0 c\u00e1ch m\u00e0 client v\u00e0 server trao \u0111\u1ed5i th\u00f4ng tin   khi c\u00f3 m\u1ed9t client truy c\u1eadp v\u00e0o \u0111\u1ecba ch\u1ec9 c\u1ee7a webserver th\u00ec browser s\u1ebd g\u1eedi cho server m\u1ed9t http request nh\u01b0 sau  GET / HTTP/1.1  Ngay khi nh\u1eadn \u0111\u01b0\u1ee3c request n\u00e0y server s\u1ebd g\u1eedi l\u1ea1i m\u1ed9t http response c\u00f3 ch\u1ee9a n\u1ed9i dung l\u00e0 file html c\u1ee7a webserver  HTTP/1.1 200 OK\nContent-Length: 200\nContent-Type: text/html\nConnection: Closed\n\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>ESP8266 HTTP server demo </h1>\n<button type='button' onclick='led_on()'>ON</button><br>\n<br>\n<button type='button' onclick='led_off()'>OFF</button><br>\n\n<script>\n\nfunction led_on(){\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_on', true);\n  xhttp.send();\n}\n\nfunction led_off() {\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_off', true);\n  xhttp.send();\n}\n\n</script>\n</body>\n</html>  Ch\u00fa \u00fd l\u00e0 http response n\u00e0y g\u1ed3m 3 ph\u1ea7n l\u00e0  Status line  : tr\u1ea3 v\u1ec1 http version, status code  HTTP/1.1 200 OK  Header  : ch\u1ee9a message length, message type  Content-Length: 200\nContent-Type: text/html\nConnection: Closed  Mesage body : ch\u1ee9a n\u1ed9i dung m\u00e0 server mu\u1ed1n g\u1eedi cho client th\u00f4ng th\u01b0\u1eddng l\u00e0 n\u1ed9i dung file html,js,php\u2026 \u0111\u01b0\u1ee3c request  <!DOCTYPE html>\n<html>\n<body>\n\n<h1>ESP8266 HTTP server demo </h1>\n<button type='button' onclick='led_on()'>ON</button><br>\n<br>\n<button type='button' onclick='led_off()'>OFF</button><br>\n\n<script>\n\nfunction led_on(){\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_on', true);\n  xhttp.send();\n}\n\nfunction led_off() {\n  var xhttp;\n  if (window.XMLHttpRequest) {\n    // code for modern browsers\n    xhttp = new XMLHttpRequest();\n    } else {\n    // code for IE6, IE5\n    xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  xhttp.open(\"GET\", 'led_off', true);\n  xhttp.send();\n}\n\n</script>\n</body>\n</html>  Ch\u00fa \u00fd:\n    Header v\u00e0 message body \u0111\u01b0\u1ee3c ng\u0103n c\u00e1ch b\u1edfi m\u1ed9t empty line ch\u1ec9 g\u1ed3m k\u00ed t\u1ef1 \u201c\\r\\n\u201d n\u1ebfu kh\u00f4ng c\u00f3 d\u00f2ng n\u00e0y th\u00ec n\u1ed9i dung    m\u00e0 client nh\u1eadn \u0111\u01b0\u1ee3c c\u00f3 th\u1ec3 kh\u00f4ng \u0111\u00fang.  \u0110\u1ec3 c\u1eadp nh\u1eadt tr\u1ea1ng th\u00e1i c\u1ee7a LED th\u00ec m\u00ecnh d\u00f9ng k\u1ef9 thu\u1eadt  ajax \nKhi nh\u1ea5n v\u00e0o n\u00fat  on  s\u1ef1 ki\u1ec7n  onclick  \u0111\u01b0\u1ee3c k\u00edch ho\u1ea1t v\u00e0 h\u00e0m  led_on()  s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi v\u00e0 g\u1eedi m\u1ed9t  get request  c\u00f3 d\u1ea1ng nh\u01b0 sau  GET /led_on HTTP/1.1  \u0111\u1ec3 y\u00eau c\u1ea7u server set on LED  T\u01b0\u01a1ng t\u1ef1 khi nh\u1ea5n n\u00fat  off  h\u00e0m  led_off()  s\u1ebd g\u1eedi request  GET /led_off HTTP/1.1  \u0111\u1ec3 y\u00eau c\u1ea7u server t\u1eaft LED  Nh\u01b0 v\u1eady ph\u00eda esp8266 s\u1ebd c\u1ea7n \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh nh\u01b0 1  tcp server  l\u1eafng nghe v\u00e0 x\u1eed l\u00fd c\u00e1c  http request  /******************************************************************************\n    * FunctionName : user_tcpserver_init\n    * Description     : parameter initialize as a TCP server\n    * Parameters         : port -- server port\n    * Returns         : none\n*******************************************************************************/\nvoid ICACHE_FLASH_ATTR\nuser_tcpserver_init(uint32 port)\n{\n    esp_conn.type = ESPCONN_TCP;\n    esp_conn.state = ESPCONN_NONE;\n    esp_conn.proto.tcp = &esptcp;\n    esp_conn.proto.tcp->local_port = port;\n    espconn_regist_connectcb(&esp_conn, tcp_server_listen);\n\n    sint8 ret = espconn_accept(&esp_conn);\n\n    os_printf(\"espconn_accept [%d] !!! \\r\\n\", ret);\n\n}  Ch\u00fa \u00fd :  espconn_regist_connectcb(&esp_conn, tcp_server_listen);   C\u00f3 ngh\u0129a l\u00e0 h\u00e0m  tcp_server_listen  s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi sau khi \u0111\u00e3 k\u1ebft n\u1ed1i tcp th\u00e0nh c\u00f4ng  Trong h\u00e0m  tcp_server_listen  l\u1ea1i c\u1ea5u h\u00ecnh ti\u1ebfp 4 h\u00e0m call back  LOCAL void ICACHE_FLASH_ATTR\ntcp_server_listen(void *arg)\n{\n    struct espconn *pesp_conn = arg;\n    os_printf(\"tcp_server_listen !!! \\r\\n\");\n\n    espconn_regist_recvcb(pesp_conn, tcp_server_recv_cb);\n    espconn_regist_reconcb(pesp_conn, tcp_server_recon_cb);\n    espconn_regist_disconcb(pesp_conn, tcp_server_discon_cb);\n\n    espconn_regist_sentcb(pesp_conn, tcp_server_sent_cb);\n}  tcp_server_recv_cb : \u0111\u01b0\u1ee3c g\u1ecdi khi nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u tcp_server_recon_cb :  \u0111\u01b0\u1ee3c g\u1ecdi khi x\u1ea3y ra l\u1ed7i c\u1ea7n reconnect l\u1ea1i \u0111\u01b0\u1eddng truy\u1ec1n tcp tcp_server_discon_cb : \u0111\u01b0\u1ee3c g\u1ecdi khi tcp b\u1ecb disconnect tcp_server_sent_cb : \u0111\u01b0\u1ee3c g\u1ecdi khi d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c g\u1eedi th\u00e0nh c\u00f4ng  Nh\u01b0 v\u1eady ch\u00fang ta s\u1ebd x\u1ee7 l\u00fd  http request  trong h\u00e0m  tcp_server_recv_cb  nh\u01b0 trong \u0111o\u1ea1n code b\u00ean d\u01b0\u1edbi  /******************************************************************************\n    * FunctionName : tcp_server_recv_cb\n    * Description     : receive callback.\n    * Parameters         : arg -- Additional argument to pass to the callback function\n    * Returns         : none\n*******************************************************************************/\nLOCAL void ICACHE_FLASH_ATTR\ntcp_server_recv_cb(void *arg, char *pusrdata, unsigned short length)\n{\n    char *ptr = 0;\n    //received some data from tcp connection\n\n    struct espconn *pespconn = arg;\n    // os_printf(\"tcp recv : %s \\r\\n\", pusrdata);\n    ptr = (char *)os_strstr(pusrdata, \"\\r\\n\");\n    ptr[0] = '\\0';\n    if (os_strcmp(pusrdata, \"GET / HTTP/1.1\") == 0)\n    {\n        http_response(pespconn, 200, index_html);\n    }\n    else if (os_strcmp(pusrdata, \"GET /led_on HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_on\\r\\n\");\n        led_set(0);\n        http_response(pespconn, 200, NULL);\n    } \n    else if (os_strcmp(pusrdata, \"GET /led_off HTTP/1.1\") == 0)\n    {\n        os_printf(\"led_off\\r\\n\");\n        led_set(1);\n        http_response(pespconn, 200, NULL);\n    }\n}",
            "title": "G\u1ee3i \u00fd"
        },
        {
            "location": "/nonos-sdk/http-server/http-server/#references",
            "text": "http://www.tutorialspoint.com/http/http_requests  https://www.tutorialspoint.com/http/http_responses.htm  http://www.w3schools.com/xml/ajax_intro.asp  https://espressif.com/en/products/hardware/esp8266ex/resources",
            "title": "References"
        },
        {
            "location": "/nonos-sdk/fota/fota/",
            "text": "Gi\u1edbi thi\u1ec7u\n#\n\n\nFOTA l\u00e0 Firmware Over The Air, v\u1edbi FOTA th\u00ec ch\u00fang ta c\u00f3 th\u1ec3 c\u1eadp nh\u1eadt firmware t\u1eeb xa th\u00f4ng qua m\u1ea1ng cho ESP m\u00e0 kh\u00f4ng c\u1ea7n k\u1ebft n\u1ed1i c\u1ed5ng n\u1ea1p gi\u1eefa ESP v\u00e0 m\u00e1y t\u00ednh.\n\u0110\u1ec3 th\u1ef1c hi\u1ec7n FOTA c\u1ea7n t\u1ea1o 2 file \u0111\u1ec3 n\u1ea1p v\u00e0o flash\n- boot.bin \u0111\u01b0\u1ee3c ghi v\u00e0o \u0111\u1ecba ch\u1ec9 0x00000\n- user1.bin \u0111\u01b0\u1ee3c ghi v\u00e0o \u0111\u1ecba ch\u1ec9 0x01000\n\n\nFlash\n#\n\n\nT\u00f9y theo dung l\u01b0\u1ee3ng flash c\u1ee7a c\u00e1c phi\u00ean b\u1ea3n ESP8266 m\u00e0 c\u00f3 c\u00e1c flash kh\u00e1c nhau\n\n\n512KB Flash\n#\n\n\n\n\n\n\n\n\n\n\nSector\n\n\nM\u00f4 t\u1ea3\n\n\nRegion\n\n\nK\u00edch th\u01b0\u1edbc\n\n\n\n\n\n\n\n\n\n\nBoot\n\n\nL\u01b0u boot.bin\n\n\n0~4KB\n\n\n4KB\n\n\n\n\n\n\nUser APP1\n\n\nL\u01b0u user1.bin(=flash.bin+irom0text.bin)\n\n\n4KB~240KB\n\n\n236KB\n\n\n\n\n\n\nUser param\n\n\nL\u01b0u th\u00f4ng s\u1ed1 do ng\u01b0\u1eddi d\u00f9ng \u0111\u1eb7t(4x4KB)\n\n\n240KB~256KB\n\n\n16KB\n\n\n\n\n\n\nReverse\n\n\nD\u1ef1 ph\u00f2ng, c\u1ea7n ph\u1ea3i \u0111\u01b0a user2 v\u00e0 user1 c\u00f9ng offset(0x01000)\n\n\n256KB~260KB\n\n\n4KB\n\n\n\n\n\n\nUser APP2\n\n\nL\u01b0u user2.bin(flash.bin+irom0text.bin)\n\n\n260KB~496KB\n\n\n236KB\n\n\n\n\n\n\nSysem param\n\n\nL\u01b0u th\u00f4ng s\u1ed1 h\u1ec7 th\u1ed1ng (4x4KB)\n\n\n496KB~512KB\n\n\n16KB\n\n\n\n\n\n\n\n\nUser App1 v\u00e0 User App2 \u0111\u01b0\u1ee3c t\u1ea1o ra trong qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch v\u00e0 n\u1ea1p file user1.bin, user2.bin\nFile flash.bin v\u00e0 irom0text.bin s\u1ebd \u0111\u01b0\u1ee3c k\u1ebft h\u1ee3p v\u1edbi user1.bin(ho\u1eb7c user2.bin) \u0111\u1ec3 c\u1eadp nh\u1eadt. M\u1ed9t file user.bin s\u1ebd \u0111\u01b0\u1ee3c backup l\u1ea1i trong qu\u00e1 tr\u00ecnh c\u1eadp nh\u1eadt fail\nFile bootloader (boot.bin) s\u1ebd ki\u1ec3m tra c\u1edd trong th\u00f4ng s\u1ed1 System \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh l\u00e0 s\u1ebd th\u1ef1c hi\u1ec7n User App1(user1.bin) hay User App2(user2.bin)\n\n\nV\u00ed d\u1ee5:\n\nD\u01b0\u1edbi \u0111\u00e2y l\u00e0 v\u00ed d\u1ee5 minh h\u1ecda v\u1ec1 c\u00e1c b\u01b0\u1edbc c\u1ee7a FOTA\n\n\n\n\n\u0110\u1ea7u ti\u00ean l\u00e0 n\u1ea1p file boot.bin v\u00e0 user1.bin (phi\u00ean b\u1ea3n v1.0.0) xu\u1ed1ng ESP8266. C\u1edd c\u1ee7a v\u00f9ng system param s\u1ebd ch\u1ecdn user1.bin l\u00e0 m\u1eb7c \u0111\u1ecbnh. Sau khi kh\u1edfi \u0111\u1ed9ng h\u1ec7 th\u1ed1ng s\u1ebd t\u1ef1 \u0111\u1ed9ng nh\u1ea3y v\u00e0o user1.bin\n\n\nUpload 2 file user1.bin v\u00e0 user2.bin (phi\u00ean b\u1ea3n 1.0.1) l\u00ean cloud ho\u1eb7c server ri\u00eang\n\n\nServer s\u1ebd g\u1eedi tin nh\u1eafn xu\u1ed1ng ESP l\u00e0 \u0111\u00e3 c\u00f3 update m\u1edbi. N\u1ebfu ESP nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn n\u00e0y s\u1ebd ki\u1ec3m tra c\u1edd \u0111\u1ea7u ti\u00ean, c\u1edd n\u00e0y s\u1ebd \u0111\u1eb7t l\u00e0 user1, sau \u0111\u00f3 t\u1ea3i user2.bin c\u1ee7a v1.0.1 xu\u1ed1ng flash \u1edf v\u00f9ng t\u1eeb 260KB~496KB \u0111\u1ec3 c\u1eadp nh\u1eadt.\n\n\nSau khi t\u1ea3i xong, ng\u01b0\u1eddi d\u00f9ng s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn c\u1ee7a FOTA c\u00f3 cho ph\u00e9p update hay kh\u00f4ng. N\u1ebfu c\u00f3 s\u1ebd \u0111\u1ed5i c\u1edd sang user2 v\u00e0 kh\u1edfi \u0111\u1ed9ng l\u1ea1i ch\u1ea1y v\u1edbi user2.bin. N\u1ebfu kh\u00f4ng th\u00ec kh\u00f4ng c\u00f3 g\u00ec x\u1ea3y ra c\u1ea3\n\n\nL\u1ea7n c\u1eadp nh\u1eadt t\u1edbi, b\u1eaft \u0111\u1ea7u v\u1edbi b\u01b0\u1edbc 2, sau \u0111\u00f3 t\u1ea3i user1.bin c\u1ee7a phi\u00ean b\u1ea3n v1.0.2 v\u00e0 flash v\u00e0o v\u00f9ng 4KB~240KB thay th\u1ebf cho phi\u00ean b\u1ea3n user1.bin c\u1ee7a b\u1ea3n v1.0.0\n\n\n\n\nL\u01b0u \u00fd\n\n- C\u1ea7n t\u1ea1o ra 2 file user1.bin v\u00e0 user2.bin trong qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch v\u00e0 upload c\u1ea3 2 file n\u00e0y l\u00ean server. ESP s\u1ebd t\u1ef1 x\u00e1c \u0111\u1ecbnh file bin n\u00e0o c\u1ea7n download.\n- S\u1ef1 kh\u00e1c nhau c\u1ee7a user1.bin v\u00e0 user2.bin l\u00e0 ph\u00e2n v\u00f9ng \u0111\u1ecba ch\u1ec9 \u0111\u01b0\u1ee3c l\u01b0u trong flash.\n- Th\u00f4ng th\u01b0\u1eddng file user1.bin s\u1ebd \u0111\u01b0\u1ee3c n\u1ea1p v\u00e0o flash tr\u01b0\u1edbc. sau \u0111\u00f3 c\u1eadp nh\u1eadt phi\u00ean b\u1ea3n user2.bin th\u00f4ng qua wifi\n\n\n1024KB Flash v\u00e0 c\u00e1c Flash l\u1edbn h\u01a1n\n#\n\n\nC\u00e1ch l\u00e0m t\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1edbi 512KB Flash nh\u01b0ng c\u00e1ch ph\u00e2n chia c\u00e1c ph\u00e2n v\u00f9ng s\u1ebd kh\u00e1c nhau\n\n\n1024KB Flash\n#\n\n\n\n\n2048KB Flash\n#\n\n\n\n\n\n\n4096KB Flash\n#\n\n\n\n\n\n\nHo\u1ea1t \u0111\u1ed9ng\n#\n\n\n\n\n\n\nKhi ho\u1ea1t \u0111\u1ed9ng th\u00ec ESP s\u1ebd g\u1eedi th\u00f4ng tin v\u1ec1 phi\u00ean b\u1ea3n hi\u1ec7n t\u1ea1i l\u00ean server v\u00e0 server s\u1ebd l\u01b0u th\u00f4ng tin n\u00e0y l\u1ea1i\n\n\nHo\u1ea1t \u0111\u1ed9ng b\u00ecnh th\u01b0\u1eddng\n\n\nKhi c\u00f3 m\u1ed9t firmware m\u1edbi \u0111\u01b0\u1ee3c up l\u00ean server. Server s\u1ebd g\u1eedi th\u00f4ng b\u00e1o t\u1edbi ESP\n\n\nESP s\u1ebd y\u00eau c\u1ea7u firmware th\u00f4ng qua device key v\u00e0 \u0111\u01b0\u1eddng d\u1eabn upload (user1.bin ho\u1eb7c user2.bin)\n\n\nT\u1ea3i firmware v\u1ec1 flash\n\n\nG\u1eedi th\u00f4ng tin t\u1ea3i xong cho server\n\n\nServer g\u1eedi th\u00f4ng b\u00e1o cho APP, APP s\u1ebd hi\u1ec3n th\u1ecb th\u00f4ng tin cho ng\u01b0\u1eddi d\u00f9ng\n\n\nAPP s\u1ebd g\u1eedi th\u00f4ng tin quy\u1ebft \u0111\u1ecbnh c\u1ee7a ng\u01b0\u1eddi d\u00f9ng c\u00f3 c\u1eadp nh\u1eadt kh\u00f4ng t\u1edbi server\n\n\nServer g\u1eedi quy\u1ebft \u0111\u1ecbnh c\u1ee7a ng\u01b0\u1eddi d\u00f9ng t\u1edbi ESP\nTh\u00f4ng tin k\u1ebft n\u1ed1i gi\u1eefa device(ESP8266), c\u00e1c d\u1ecbch v\u1ee5 v\u00e0 APP \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a SSL do \u0111\u00f3 qu\u00e1 tr\u00ecnh \u0111\u01b0\u1ee3c \u0111\u1ea3m b\u1ea3o an to\u00e0n.\n\n\n\n\nTham kh\u1ea3o\n#\n\n\n\n\nESP8266 FOTA",
            "title": "FOTA"
        },
        {
            "location": "/nonos-sdk/fota/fota/#gioi-thieu",
            "text": "FOTA l\u00e0 Firmware Over The Air, v\u1edbi FOTA th\u00ec ch\u00fang ta c\u00f3 th\u1ec3 c\u1eadp nh\u1eadt firmware t\u1eeb xa th\u00f4ng qua m\u1ea1ng cho ESP m\u00e0 kh\u00f4ng c\u1ea7n k\u1ebft n\u1ed1i c\u1ed5ng n\u1ea1p gi\u1eefa ESP v\u00e0 m\u00e1y t\u00ednh.\n\u0110\u1ec3 th\u1ef1c hi\u1ec7n FOTA c\u1ea7n t\u1ea1o 2 file \u0111\u1ec3 n\u1ea1p v\u00e0o flash\n- boot.bin \u0111\u01b0\u1ee3c ghi v\u00e0o \u0111\u1ecba ch\u1ec9 0x00000\n- user1.bin \u0111\u01b0\u1ee3c ghi v\u00e0o \u0111\u1ecba ch\u1ec9 0x01000",
            "title": "Gi\u1edbi thi\u1ec7u"
        },
        {
            "location": "/nonos-sdk/fota/fota/#flash",
            "text": "T\u00f9y theo dung l\u01b0\u1ee3ng flash c\u1ee7a c\u00e1c phi\u00ean b\u1ea3n ESP8266 m\u00e0 c\u00f3 c\u00e1c flash kh\u00e1c nhau",
            "title": "Flash"
        },
        {
            "location": "/nonos-sdk/fota/fota/#512kb-flash",
            "text": "Sector  M\u00f4 t\u1ea3  Region  K\u00edch th\u01b0\u1edbc      Boot  L\u01b0u boot.bin  0~4KB  4KB    User APP1  L\u01b0u user1.bin(=flash.bin+irom0text.bin)  4KB~240KB  236KB    User param  L\u01b0u th\u00f4ng s\u1ed1 do ng\u01b0\u1eddi d\u00f9ng \u0111\u1eb7t(4x4KB)  240KB~256KB  16KB    Reverse  D\u1ef1 ph\u00f2ng, c\u1ea7n ph\u1ea3i \u0111\u01b0a user2 v\u00e0 user1 c\u00f9ng offset(0x01000)  256KB~260KB  4KB    User APP2  L\u01b0u user2.bin(flash.bin+irom0text.bin)  260KB~496KB  236KB    Sysem param  L\u01b0u th\u00f4ng s\u1ed1 h\u1ec7 th\u1ed1ng (4x4KB)  496KB~512KB  16KB     User App1 v\u00e0 User App2 \u0111\u01b0\u1ee3c t\u1ea1o ra trong qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch v\u00e0 n\u1ea1p file user1.bin, user2.bin\nFile flash.bin v\u00e0 irom0text.bin s\u1ebd \u0111\u01b0\u1ee3c k\u1ebft h\u1ee3p v\u1edbi user1.bin(ho\u1eb7c user2.bin) \u0111\u1ec3 c\u1eadp nh\u1eadt. M\u1ed9t file user.bin s\u1ebd \u0111\u01b0\u1ee3c backup l\u1ea1i trong qu\u00e1 tr\u00ecnh c\u1eadp nh\u1eadt fail\nFile bootloader (boot.bin) s\u1ebd ki\u1ec3m tra c\u1edd trong th\u00f4ng s\u1ed1 System \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh l\u00e0 s\u1ebd th\u1ef1c hi\u1ec7n User App1(user1.bin) hay User App2(user2.bin)  V\u00ed d\u1ee5: \nD\u01b0\u1edbi \u0111\u00e2y l\u00e0 v\u00ed d\u1ee5 minh h\u1ecda v\u1ec1 c\u00e1c b\u01b0\u1edbc c\u1ee7a FOTA   \u0110\u1ea7u ti\u00ean l\u00e0 n\u1ea1p file boot.bin v\u00e0 user1.bin (phi\u00ean b\u1ea3n v1.0.0) xu\u1ed1ng ESP8266. C\u1edd c\u1ee7a v\u00f9ng system param s\u1ebd ch\u1ecdn user1.bin l\u00e0 m\u1eb7c \u0111\u1ecbnh. Sau khi kh\u1edfi \u0111\u1ed9ng h\u1ec7 th\u1ed1ng s\u1ebd t\u1ef1 \u0111\u1ed9ng nh\u1ea3y v\u00e0o user1.bin  Upload 2 file user1.bin v\u00e0 user2.bin (phi\u00ean b\u1ea3n 1.0.1) l\u00ean cloud ho\u1eb7c server ri\u00eang  Server s\u1ebd g\u1eedi tin nh\u1eafn xu\u1ed1ng ESP l\u00e0 \u0111\u00e3 c\u00f3 update m\u1edbi. N\u1ebfu ESP nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn n\u00e0y s\u1ebd ki\u1ec3m tra c\u1edd \u0111\u1ea7u ti\u00ean, c\u1edd n\u00e0y s\u1ebd \u0111\u1eb7t l\u00e0 user1, sau \u0111\u00f3 t\u1ea3i user2.bin c\u1ee7a v1.0.1 xu\u1ed1ng flash \u1edf v\u00f9ng t\u1eeb 260KB~496KB \u0111\u1ec3 c\u1eadp nh\u1eadt.  Sau khi t\u1ea3i xong, ng\u01b0\u1eddi d\u00f9ng s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c tin nh\u1eafn c\u1ee7a FOTA c\u00f3 cho ph\u00e9p update hay kh\u00f4ng. N\u1ebfu c\u00f3 s\u1ebd \u0111\u1ed5i c\u1edd sang user2 v\u00e0 kh\u1edfi \u0111\u1ed9ng l\u1ea1i ch\u1ea1y v\u1edbi user2.bin. N\u1ebfu kh\u00f4ng th\u00ec kh\u00f4ng c\u00f3 g\u00ec x\u1ea3y ra c\u1ea3  L\u1ea7n c\u1eadp nh\u1eadt t\u1edbi, b\u1eaft \u0111\u1ea7u v\u1edbi b\u01b0\u1edbc 2, sau \u0111\u00f3 t\u1ea3i user1.bin c\u1ee7a phi\u00ean b\u1ea3n v1.0.2 v\u00e0 flash v\u00e0o v\u00f9ng 4KB~240KB thay th\u1ebf cho phi\u00ean b\u1ea3n user1.bin c\u1ee7a b\u1ea3n v1.0.0   L\u01b0u \u00fd \n- C\u1ea7n t\u1ea1o ra 2 file user1.bin v\u00e0 user2.bin trong qu\u00e1 tr\u00ecnh bi\u00ean d\u1ecbch v\u00e0 upload c\u1ea3 2 file n\u00e0y l\u00ean server. ESP s\u1ebd t\u1ef1 x\u00e1c \u0111\u1ecbnh file bin n\u00e0o c\u1ea7n download.\n- S\u1ef1 kh\u00e1c nhau c\u1ee7a user1.bin v\u00e0 user2.bin l\u00e0 ph\u00e2n v\u00f9ng \u0111\u1ecba ch\u1ec9 \u0111\u01b0\u1ee3c l\u01b0u trong flash.\n- Th\u00f4ng th\u01b0\u1eddng file user1.bin s\u1ebd \u0111\u01b0\u1ee3c n\u1ea1p v\u00e0o flash tr\u01b0\u1edbc. sau \u0111\u00f3 c\u1eadp nh\u1eadt phi\u00ean b\u1ea3n user2.bin th\u00f4ng qua wifi",
            "title": "512KB Flash"
        },
        {
            "location": "/nonos-sdk/fota/fota/#1024kb-flash-va-cac-flash-lon-hon",
            "text": "C\u00e1ch l\u00e0m t\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1edbi 512KB Flash nh\u01b0ng c\u00e1ch ph\u00e2n chia c\u00e1c ph\u00e2n v\u00f9ng s\u1ebd kh\u00e1c nhau",
            "title": "1024KB Flash v\u00e0 c\u00e1c Flash l\u1edbn h\u01a1n"
        },
        {
            "location": "/nonos-sdk/fota/fota/#1024kb-flash",
            "text": "",
            "title": "1024KB Flash"
        },
        {
            "location": "/nonos-sdk/fota/fota/#2048kb-flash",
            "text": "",
            "title": "2048KB Flash"
        },
        {
            "location": "/nonos-sdk/fota/fota/#4096kb-flash",
            "text": "",
            "title": "4096KB Flash"
        },
        {
            "location": "/nonos-sdk/fota/fota/#hoat-ong",
            "text": "Khi ho\u1ea1t \u0111\u1ed9ng th\u00ec ESP s\u1ebd g\u1eedi th\u00f4ng tin v\u1ec1 phi\u00ean b\u1ea3n hi\u1ec7n t\u1ea1i l\u00ean server v\u00e0 server s\u1ebd l\u01b0u th\u00f4ng tin n\u00e0y l\u1ea1i  Ho\u1ea1t \u0111\u1ed9ng b\u00ecnh th\u01b0\u1eddng  Khi c\u00f3 m\u1ed9t firmware m\u1edbi \u0111\u01b0\u1ee3c up l\u00ean server. Server s\u1ebd g\u1eedi th\u00f4ng b\u00e1o t\u1edbi ESP  ESP s\u1ebd y\u00eau c\u1ea7u firmware th\u00f4ng qua device key v\u00e0 \u0111\u01b0\u1eddng d\u1eabn upload (user1.bin ho\u1eb7c user2.bin)  T\u1ea3i firmware v\u1ec1 flash  G\u1eedi th\u00f4ng tin t\u1ea3i xong cho server  Server g\u1eedi th\u00f4ng b\u00e1o cho APP, APP s\u1ebd hi\u1ec3n th\u1ecb th\u00f4ng tin cho ng\u01b0\u1eddi d\u00f9ng  APP s\u1ebd g\u1eedi th\u00f4ng tin quy\u1ebft \u0111\u1ecbnh c\u1ee7a ng\u01b0\u1eddi d\u00f9ng c\u00f3 c\u1eadp nh\u1eadt kh\u00f4ng t\u1edbi server  Server g\u1eedi quy\u1ebft \u0111\u1ecbnh c\u1ee7a ng\u01b0\u1eddi d\u00f9ng t\u1edbi ESP\nTh\u00f4ng tin k\u1ebft n\u1ed1i gi\u1eefa device(ESP8266), c\u00e1c d\u1ecbch v\u1ee5 v\u00e0 APP \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a SSL do \u0111\u00f3 qu\u00e1 tr\u00ecnh \u0111\u01b0\u1ee3c \u0111\u1ea3m b\u1ea3o an to\u00e0n.",
            "title": "Ho\u1ea1t \u0111\u1ed9ng"
        },
        {
            "location": "/nonos-sdk/fota/fota/#tham-khao",
            "text": "ESP8266 FOTA",
            "title": "Tham kh\u1ea3o"
        },
        {
            "location": "/nonos-sdk/esp-now/esp-now/",
            "text": "Gi\u1edbi thi\u1ec7u\n\n\nC\u00e1c ch\u1ee9c n\u0103ng ch\u00ednh\n\n\nM\u00f4 t\u1ea3\n\n\nCh\u01b0\u01a1ng tr\u00ecnh\n\n\nTham kh\u1ea3o\n\n\n\n\n\n\nGi\u1edbi thi\u1ec7u\n#\n\n\n\n\nESP-NOW l\u00e0 m\u1ed9t giao th\u1ee9c \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1edfi Espressif cho ph\u00e9p nhi\u1ec1u thi\u1ebft b\u1ecb c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i v\u1edbi nhau m\u00e0 kh\u00f4ng c\u1ea7n d\u00f9ng Wifi. C\u00e1c thi\u1ebft b\u1ecb sau khi k\u1ebft n\u1ed1i \u0111\u01b0\u1ee3c v\u1edbi nhau s\u1ebd l\u00e0 peer-to-peer, v\u00e0 kh\u00f4ng y\u00eau c\u1ea7u b\u1eaft tay.\n\n\nESP-NOW c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c xem l\u00e0 m\u1ed9t c\u00f4ng ngh\u1ec7 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho ESP8266 \u0111\u1ec3 truy\u1ec1n c\u00e1c g\u00f3i d\u1eef li\u1ec7u v\u1edbi t\u1ed1c \u0111\u1ed9 cao, n\u00f3 \u0111\u01b0\u1ee3c \u1ee9ng d\u1ee5ng trong c\u00e1c thi\u1ebft b\u1ecb chi\u1ebfu s\u00e1ng th\u00f4ng minh, \u0111i\u1ec1u khi\u1ec3n t\u1eeb xa c\u00e1c c\u1ea3m bi\u1ebfn,\u2026\n\n\nTrong ESP-NOW d\u00f9ng chu\u1ea9n IEEE802.11 c\u00f9ng c\u00e1c h\u00e0m IE v\u00e0 m\u00e3 h\u00f3a CCMP \u0111\u1ea3m b\u1ea3o \u0111\u01b0\u1ee3c \u0111\u1ed9 tin c\u1eady.\n\n\n\n\nC\u00e1c ch\u1ee9c n\u0103ng ch\u00ednh\n#\n\n\n\n\nESP-NOW c\u00f3 h\u1ed7 tr\u1ee3 c\u00e1c \u0111\u1eb7c \u0111i\u1ec3m sau:\n\n\nM\u00e3 h\u00f3a v\u00e0 gi\u1ea3i m\u00e3 g\u00f3i tin unicast\n\n\nM\u00e3 h\u00f3a tr\u1ed9n v\u00e0 gi\u1ea3i m\u00e3 v\u1edbi peer devices\n\n\nPlayload c\u00f3 th\u1ec3 l\u00ean t\u1edbi 250 byte\n\n\nC\u00f3 h\u00e0m callback \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh \u0111\u01b0\u1ee3c vi\u1ec7c truy\u1ec1n d\u1eef li\u1ec7u th\u00e0nh c\u00f4ng hay th\u1ea5t b\u1ea1i\n\n\n\n\n\n\nTuy nhi\u00ean c\u0169ng c\u00f3 m\u1ed9t s\u1ed1 h\u1ea1n ch\u1ebf:\n\n\nKh\u00f4ng h\u1ed7 tr\u1ee3 broadcast\n\n\nGi\u1edbi h\u1ea1n c\u00e1c peer \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a. Kho\u1ea3ng 10 peer \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a trong mode Station, 6 peer trong SoftAP ho\u1eb7c SoftAP + mode Station. Peer kh\u00f4ng m\u00e3 h\u00f3a c\u00f3 th\u1ec3 c\u00f3 s\u1ed1 l\u01b0\u1ee3ng nhi\u1ec1u h\u01a1n nh\u01b0ng ph\u1ea3i nh\u1ecf h\u01a1n 20.\n\n\nPlayload b\u1ecb gi\u1edbi h\u1ea1n 250 byte.\n\n\n\n\n\n\n\n\nM\u00f4 t\u1ea3\n#\n\n\nTh\u00f4ng tin s\u1ebd bao g\u1ed3m\n\n\n\n\n\n\nTrong local device\n\n\n\n\nPMW\n\n\nRole\n\n\n\n\n\n\n\n\nTrong peer\n\n\n\n\nKey\n\n\n\u0110\u1ecba ch\u1ec9 MAC\n\n\nRole\n\n\nChannel\n\n\n\n\n\n\n\n\nB\u1ea3ng m\u00f4 t\u1ea3\n\n\n\n\n\n\n\n\n\n\n\n\nDevice\n\n\nTh\u00f4ng tin\n\n\nGi\u00e1 tr\u1ecb/ \u0110\u1ed9 d\u00e0i\n\n\nM\u00f4 t\u1ea3\n\n\nGhi ch\u00fa\n\n\n\n\n\n\n\n\n\n\nLocal device\n\n\nPMK\n\n\n\u0110\u1ed9 d\u00e0i 16 byte\n\n\nPrimary Master Key, v\u00ed d\u1ee5 nh\u01b0 KOK trongAPI, d\u00f9ng \u0111\u1ec3 m\u00e3 h\u00f3a Key c\u1ee7a peer.\n\n\nH\u1ec7 th\u1ed1ng s\u1ebd t\u1ea1o PMK m\u1eb7c \u0111\u1ecbnh, kh\u00f4ng c\u1ea7n ph\u1ea3i config\n\n\n\n\n\n\n\n\nRole\n\n\nIDLE CONTROLLER SLAVE COMBO\n\n\n\u0110\u00e2y l\u00e0 vai tr\u00f2(role) c\u1ee7a device IDLE: ch\u01b0a ph\u00e2n role CONTROLLER:controller SLAVE: slave COMBO: \u0111\u1ea3m nhi\u1ec7m 2 role l\u00e0 controller slave\n\n\nRole c\u1ee7a local device \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a th\u00f4ng qua SoftAP ho\u1eb7c Station c\u1ee7a ESP-NOW IDLE:  vi\u1ec7c truy\u1ec1n nh\u1eadn s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c cho ph\u00e9p CONTROLLER: \u01b0u ti\u00ean cho Sation interface SLAVE: \u01b0u ti\u00ean cho SoftAP interface COMBO: \u01b0u ti\u00ean cho c\u1ea3 SoftAP interface v\u00e0 Station interface\n\n\n\n\n\n\nPeer\n\n\nKey\n\n\n\u0110\u1ed9 d\u00e0i 16 byte\n\n\nS\u1eed d\u1ee5ng \u0111\u1ec3 m\u00e3 h\u00f3a paload key trong qu\u00e1 tr\u00ecnh giao ti\u1ebfp v\u1edbi c\u00e1c peer\n\n\n\n\n\n\n\n\n\n\nMacAddress\n\n\n\u0110\u1ed9 d\u00e0i 6 byte\n\n\n\u0110\u1ecba ch\u1ec9 MAC c\u1ee7a peer\n\n\n\u0110\u1ecba ch\u1ec9 MAC ph\u1ea3i c\u00f9ng v\u1edbi \u0111\u1ecba ch\u1ec9 g\u1eedi. V\u00ed d\u1ee5 nh\u01b0 n\u1ebfu g\u00f3i tin \u0111\u01b0\u1ee3c g\u1eedi t\u1eeb Station interface th\u00ec \u0111\u1ecba ch\u1ec9 MAC ph\u1ea3i gi\u1ed1ng v\u1edbi \u0111\u1ecba ch\u1ec9 c\u1ee7a Station\n\n\n\n\n\n\n\n\nRole\n\n\nIDLE CONTROLLER SLAVE COMBO\n\n\n\u0110\u00e2y l\u00e0 vai tr\u00f2(role) c\u1ee7a device IDLE: ch\u01b0a ph\u00e2n role CONTROLLER:controller SLAVE: slave COMBO: \u0111\u1ea3m nhi\u1ec7m 2 role l\u00e0 controller slave\n\n\n\n\n\n\n\n\n\n\nChannel\n\n\nGi\u00e1 tr\u1ecb t\u1eeb 0 - 255\n\n\nK\u00eanh \u0111\u1ec3 local device v\u00e0 peer k\u1ebft n\u1ed1i v\u1edbi nhau\n\n\n\n\n\n\n\n\n# Ho\u1ea1t \u0111\u1ed9ng\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThi\u1ebft l\u1eadp h\u00e0m sending callback\nVi\u1ec7c s\u1eed d\u1ee5ng h\u00e0m sending callback \u0111\u1ec3 th\u00f4ng b\u00e1o vi\u1ec7c truy\u1ec1n nh\u1eadn l\u00e0 th\u00e0nh c\u00f4ng hay th\u1ea5t b\u1ea1i, c\u1ea7n ph\u1ea3i th\u1ef1c hi\u1ec7n theo c\u00e1c b\u01b0\u1edbc sau n\u1ebfu s\u1eed d\u1ee5ng c\u00e1c h\u00e0m n\u00e0y\n\n\n\n\n\n\nV\u1edbi ki\u1ec3u unicast\n\n\n\n\nN\u1ebfu l\u1edbp application kh\u00f4ng nh\u1ea1n \u0111\u01b0\u1ee3c g\u00f3i tin nh\u01b0ng h\u00e0m callback tr\u1ea3 v\u1ec1 success th\u00ec nguy\u00ean nh\u00e2n c\u00f3 th\u1ec3 do:\n\n\nT\u1ea5n c\u00f4ng t\u1eeb c\u00e1c thi\u1ebft b\u1ecb kh\u00e1c\n\n\nThi\u1ebft l\u1eadp m\u00e3 h\u00f3a Key b\u1ecb l\u1ed7i\n\n\nG\u00f3i tin b\u1ecb m\u1ea5t trong l\u1edbp application\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nVi\u1ec7c b\u1eaft tay \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o t\u0103ng t\u1ec9 l\u1ec7 th\u00e0nh c\u00f4ng c\u1ee7a vi\u1ec7c truy\u1ec1n nh\u1eadn\n\n\n\n\nN\u1ebfu l\u1edbp \u1ee9ng d\u1ee5ng nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i tin nh\u01b0ng h\u00e0m callback tr\u1ea3 v\u1ec1 failure th\u00ec nguy\u00ean nh\u00e2n:\n\n\nChannel \u0111ang b\u1eadn ho\u1eb7c kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c ACK.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nV\u1edbi ki\u1ec3u multicast (bao g\u1ed3m c\u1ea3 broadcast)\n\n\n\n\nN\u1ebfu h\u00e0m callback tr\u1ea3 v\u1ec1 success ngh\u0129a l\u00e0 g\u00f3i tin \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1eedi \u0111i th\u00e0nh c\u00f4ng\n\n\nN\u1ebfu h\u00e0m callback tr\u1ea3 v\u1ec1 failure, ngh\u0129a l\u00e0 g\u00f3i tin ch\u01b0a g\u1eedi \u0111\u01b0\u1ee3c\n\n\n\n\n\n\n\n\nThi\u1ebft l\u1eadp h\u00e0m receiving callback\nH\u00e0m reciecing callback \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 th\u00f4ng b\u00e1o t\u1edbi l\u1edbp \u1ee9ng d\u1ee5ng l\u00e0 g\u00f3i tin g\u1eedi \u0111i \u0111\u00e3 \u0111\u01b0\u1ee3c nh\u1eadn b\u1edfi peer\nH\u00e0m n\u00e0y s\u1ebd tr\u1ea3 l\u1ea1i \u0111\u1ecba ch\u1ec9a MAC c\u1ee7a peer v\u00e0 payload c\u1ee7a g\u00f3i tin\n\n\n\n\n\n\nN\u1ebfu Key \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a th\u00ec API c\u1ea5u h\u00ecnh PMK(KOK) s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi \u0111\u1ec3 c\u1ea5u h\u00ecnh\nN\u1ebfu PMK ch\u01b0a \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh th\u00ec s\u1ebd s\u1eed d\u1ee5ng PMK m\u1eb7c \u0111\u1ecbnh.\n\n\n\n\n\n\nL\u1ef1a ch\u1ecdn giao th\u1ee9c cho device\nTh\u00f4ng th\u01b0\u1eddng Station interface \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t cho CONTROLLER, SoftAP interface cho SLAVE v\u00e0 COMBO.\n\n\n\n\n\n\nL\u1ef1a ch\u1ecdn Key cho device. G\u1ecdi h\u00e0m add peer.\n\n\n\n\n\n\nG\u1ecdi h\u00e0m g\u1eedi \u0111\u1ec3 tr\u1ea3 v\u1ec1 payload. \n\n\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nTham kh\u1ea3o th\u00eam c\u00e1c th\u00f4ng tin v\u1ec1 API c\u1ee7a ESP-NOW t\u1ea1i \nSDK API Guide\n\n\n\n\nCh\u01b0\u01a1ng tr\u00ecnh\n#\n\n\nvoid ICACHE_FLASH_ATTR simple_cb(u8 *macaddr, u8 *data, u8 len)\n{\n    int i;\n    u8 ack_buf[16];\n    u8 recv_buf[17];\n    os_printf(\"now from[\");\n    for (i = 0; i < 6; i++)\n        os_printf(\"%02X, \", macaddr[i]);\n    os_printf(\" len: %d]:\", len);\n    os_bzero(recv_buf, 17);\n    os_memcpy(recv_buf, data, len < 17 ? len : 16);\n    if (os_strncmp(data, \"ACK\", 3) == 0)\n        return;\n    os_sprintf(ack_buf, \"ACK[%08x]\", ack_count++);\n    esp_now_send(macaddr, ack_buf, os_strlen(ack_buf));\n}\nvoid user_init(void)\n{\n    u8 key[16] = {0x33, 0x44, 0x33, 0x44, 0x33, 0x44, 0x33, 0x44,\n                  0x33, 0x44, 0x33, 0x44, 0x33, 0x44, 0x33, 0x44\n                 };\n    u8 da1[6] = {0x18, 0xfe, 0x34, 0x97, 0xd5, 0xb1};\n    u8 da2[6] = {0x1a, 0xfe, 0x34, 0x97, 0xd5, 0xb1};\n    if (esp_now_init() == 0) {\n        os_printf(\"esp_now init ok\\n\");\n        esp_now_register_recv_cb(simple_cb);\n        esp_now_set_self_role(1);\n        esp_now_add_peer(da1, 1, key, 16);\n        esp_now_add_peer(da2, 2, key, 16)\n    } else {\n        os_printf(\"esp_now init failed\\n\");\n    }\n}\nvoid ICACHE_FLASH_ATTR demo_send(u8 *mac_addr, u8 *data, u8 len)\n{\n    esp_now_send(NULL, data, len);/* Vi du nay se gui toi 2 thiet bi duoc them vao boi ham esp_now_add_peer() */\n//esp_now_send(mac_addr, data, len); /* gui toi dia chi mac mac_addr */\n}\n\n\n\n\nTham kh\u1ea3o\n#\n\n\n\n\nC\u00f3 th\u1ec3 xem th\u00eam c\u00e1c t\u00e0i li\u1ec7u m\u00f4 t\u1ea3 v\u1ec1 \nESP-NOW\n c\u1ee7a Espressif",
            "title": "ESP Now"
        },
        {
            "location": "/nonos-sdk/esp-now/esp-now/#gioi-thieu",
            "text": "ESP-NOW l\u00e0 m\u1ed9t giao th\u1ee9c \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1edfi Espressif cho ph\u00e9p nhi\u1ec1u thi\u1ebft b\u1ecb c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i v\u1edbi nhau m\u00e0 kh\u00f4ng c\u1ea7n d\u00f9ng Wifi. C\u00e1c thi\u1ebft b\u1ecb sau khi k\u1ebft n\u1ed1i \u0111\u01b0\u1ee3c v\u1edbi nhau s\u1ebd l\u00e0 peer-to-peer, v\u00e0 kh\u00f4ng y\u00eau c\u1ea7u b\u1eaft tay.  ESP-NOW c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c xem l\u00e0 m\u1ed9t c\u00f4ng ngh\u1ec7 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho ESP8266 \u0111\u1ec3 truy\u1ec1n c\u00e1c g\u00f3i d\u1eef li\u1ec7u v\u1edbi t\u1ed1c \u0111\u1ed9 cao, n\u00f3 \u0111\u01b0\u1ee3c \u1ee9ng d\u1ee5ng trong c\u00e1c thi\u1ebft b\u1ecb chi\u1ebfu s\u00e1ng th\u00f4ng minh, \u0111i\u1ec1u khi\u1ec3n t\u1eeb xa c\u00e1c c\u1ea3m bi\u1ebfn,\u2026  Trong ESP-NOW d\u00f9ng chu\u1ea9n IEEE802.11 c\u00f9ng c\u00e1c h\u00e0m IE v\u00e0 m\u00e3 h\u00f3a CCMP \u0111\u1ea3m b\u1ea3o \u0111\u01b0\u1ee3c \u0111\u1ed9 tin c\u1eady.",
            "title": "Gi\u1edbi thi\u1ec7u"
        },
        {
            "location": "/nonos-sdk/esp-now/esp-now/#cac-chuc-nang-chinh",
            "text": "ESP-NOW c\u00f3 h\u1ed7 tr\u1ee3 c\u00e1c \u0111\u1eb7c \u0111i\u1ec3m sau:  M\u00e3 h\u00f3a v\u00e0 gi\u1ea3i m\u00e3 g\u00f3i tin unicast  M\u00e3 h\u00f3a tr\u1ed9n v\u00e0 gi\u1ea3i m\u00e3 v\u1edbi peer devices  Playload c\u00f3 th\u1ec3 l\u00ean t\u1edbi 250 byte  C\u00f3 h\u00e0m callback \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh \u0111\u01b0\u1ee3c vi\u1ec7c truy\u1ec1n d\u1eef li\u1ec7u th\u00e0nh c\u00f4ng hay th\u1ea5t b\u1ea1i    Tuy nhi\u00ean c\u0169ng c\u00f3 m\u1ed9t s\u1ed1 h\u1ea1n ch\u1ebf:  Kh\u00f4ng h\u1ed7 tr\u1ee3 broadcast  Gi\u1edbi h\u1ea1n c\u00e1c peer \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a. Kho\u1ea3ng 10 peer \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a trong mode Station, 6 peer trong SoftAP ho\u1eb7c SoftAP + mode Station. Peer kh\u00f4ng m\u00e3 h\u00f3a c\u00f3 th\u1ec3 c\u00f3 s\u1ed1 l\u01b0\u1ee3ng nhi\u1ec1u h\u01a1n nh\u01b0ng ph\u1ea3i nh\u1ecf h\u01a1n 20.  Playload b\u1ecb gi\u1edbi h\u1ea1n 250 byte.",
            "title": "C\u00e1c ch\u1ee9c n\u0103ng ch\u00ednh"
        },
        {
            "location": "/nonos-sdk/esp-now/esp-now/#mo-ta",
            "text": "Th\u00f4ng tin s\u1ebd bao g\u1ed3m    Trong local device   PMW  Role     Trong peer   Key  \u0110\u1ecba ch\u1ec9 MAC  Role  Channel     B\u1ea3ng m\u00f4 t\u1ea3       Device  Th\u00f4ng tin  Gi\u00e1 tr\u1ecb/ \u0110\u1ed9 d\u00e0i  M\u00f4 t\u1ea3  Ghi ch\u00fa      Local device  PMK  \u0110\u1ed9 d\u00e0i 16 byte  Primary Master Key, v\u00ed d\u1ee5 nh\u01b0 KOK trongAPI, d\u00f9ng \u0111\u1ec3 m\u00e3 h\u00f3a Key c\u1ee7a peer.  H\u1ec7 th\u1ed1ng s\u1ebd t\u1ea1o PMK m\u1eb7c \u0111\u1ecbnh, kh\u00f4ng c\u1ea7n ph\u1ea3i config     Role  IDLE CONTROLLER SLAVE COMBO  \u0110\u00e2y l\u00e0 vai tr\u00f2(role) c\u1ee7a device IDLE: ch\u01b0a ph\u00e2n role CONTROLLER:controller SLAVE: slave COMBO: \u0111\u1ea3m nhi\u1ec7m 2 role l\u00e0 controller slave  Role c\u1ee7a local device \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a th\u00f4ng qua SoftAP ho\u1eb7c Station c\u1ee7a ESP-NOW IDLE:  vi\u1ec7c truy\u1ec1n nh\u1eadn s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c cho ph\u00e9p CONTROLLER: \u01b0u ti\u00ean cho Sation interface SLAVE: \u01b0u ti\u00ean cho SoftAP interface COMBO: \u01b0u ti\u00ean cho c\u1ea3 SoftAP interface v\u00e0 Station interface    Peer  Key  \u0110\u1ed9 d\u00e0i 16 byte  S\u1eed d\u1ee5ng \u0111\u1ec3 m\u00e3 h\u00f3a paload key trong qu\u00e1 tr\u00ecnh giao ti\u1ebfp v\u1edbi c\u00e1c peer      MacAddress  \u0110\u1ed9 d\u00e0i 6 byte  \u0110\u1ecba ch\u1ec9 MAC c\u1ee7a peer  \u0110\u1ecba ch\u1ec9 MAC ph\u1ea3i c\u00f9ng v\u1edbi \u0111\u1ecba ch\u1ec9 g\u1eedi. V\u00ed d\u1ee5 nh\u01b0 n\u1ebfu g\u00f3i tin \u0111\u01b0\u1ee3c g\u1eedi t\u1eeb Station interface th\u00ec \u0111\u1ecba ch\u1ec9 MAC ph\u1ea3i gi\u1ed1ng v\u1edbi \u0111\u1ecba ch\u1ec9 c\u1ee7a Station     Role  IDLE CONTROLLER SLAVE COMBO  \u0110\u00e2y l\u00e0 vai tr\u00f2(role) c\u1ee7a device IDLE: ch\u01b0a ph\u00e2n role CONTROLLER:controller SLAVE: slave COMBO: \u0111\u1ea3m nhi\u1ec7m 2 role l\u00e0 controller slave      Channel  Gi\u00e1 tr\u1ecb t\u1eeb 0 - 255  K\u00eanh \u0111\u1ec3 local device v\u00e0 peer k\u1ebft n\u1ed1i v\u1edbi nhau     # Ho\u1ea1t \u0111\u1ed9ng           Thi\u1ebft l\u1eadp h\u00e0m sending callback\nVi\u1ec7c s\u1eed d\u1ee5ng h\u00e0m sending callback \u0111\u1ec3 th\u00f4ng b\u00e1o vi\u1ec7c truy\u1ec1n nh\u1eadn l\u00e0 th\u00e0nh c\u00f4ng hay th\u1ea5t b\u1ea1i, c\u1ea7n ph\u1ea3i th\u1ef1c hi\u1ec7n theo c\u00e1c b\u01b0\u1edbc sau n\u1ebfu s\u1eed d\u1ee5ng c\u00e1c h\u00e0m n\u00e0y    V\u1edbi ki\u1ec3u unicast   N\u1ebfu l\u1edbp application kh\u00f4ng nh\u1ea1n \u0111\u01b0\u1ee3c g\u00f3i tin nh\u01b0ng h\u00e0m callback tr\u1ea3 v\u1ec1 success th\u00ec nguy\u00ean nh\u00e2n c\u00f3 th\u1ec3 do:  T\u1ea5n c\u00f4ng t\u1eeb c\u00e1c thi\u1ebft b\u1ecb kh\u00e1c  Thi\u1ebft l\u1eadp m\u00e3 h\u00f3a Key b\u1ecb l\u1ed7i  G\u00f3i tin b\u1ecb m\u1ea5t trong l\u1edbp application        L\u01b0u \u00fd  Vi\u1ec7c b\u1eaft tay \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o t\u0103ng t\u1ec9 l\u1ec7 th\u00e0nh c\u00f4ng c\u1ee7a vi\u1ec7c truy\u1ec1n nh\u1eadn   N\u1ebfu l\u1edbp \u1ee9ng d\u1ee5ng nh\u1eadn \u0111\u01b0\u1ee3c g\u00f3i tin nh\u01b0ng h\u00e0m callback tr\u1ea3 v\u1ec1 failure th\u00ec nguy\u00ean nh\u00e2n:  Channel \u0111ang b\u1eadn ho\u1eb7c kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c ACK.        V\u1edbi ki\u1ec3u multicast (bao g\u1ed3m c\u1ea3 broadcast)   N\u1ebfu h\u00e0m callback tr\u1ea3 v\u1ec1 success ngh\u0129a l\u00e0 g\u00f3i tin \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1eedi \u0111i th\u00e0nh c\u00f4ng  N\u1ebfu h\u00e0m callback tr\u1ea3 v\u1ec1 failure, ngh\u0129a l\u00e0 g\u00f3i tin ch\u01b0a g\u1eedi \u0111\u01b0\u1ee3c     Thi\u1ebft l\u1eadp h\u00e0m receiving callback\nH\u00e0m reciecing callback \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 th\u00f4ng b\u00e1o t\u1edbi l\u1edbp \u1ee9ng d\u1ee5ng l\u00e0 g\u00f3i tin g\u1eedi \u0111i \u0111\u00e3 \u0111\u01b0\u1ee3c nh\u1eadn b\u1edfi peer\nH\u00e0m n\u00e0y s\u1ebd tr\u1ea3 l\u1ea1i \u0111\u1ecba ch\u1ec9a MAC c\u1ee7a peer v\u00e0 payload c\u1ee7a g\u00f3i tin    N\u1ebfu Key \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a th\u00ec API c\u1ea5u h\u00ecnh PMK(KOK) s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi \u0111\u1ec3 c\u1ea5u h\u00ecnh\nN\u1ebfu PMK ch\u01b0a \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh th\u00ec s\u1ebd s\u1eed d\u1ee5ng PMK m\u1eb7c \u0111\u1ecbnh.    L\u1ef1a ch\u1ecdn giao th\u1ee9c cho device\nTh\u00f4ng th\u01b0\u1eddng Station interface \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t cho CONTROLLER, SoftAP interface cho SLAVE v\u00e0 COMBO.    L\u1ef1a ch\u1ecdn Key cho device. G\u1ecdi h\u00e0m add peer.    G\u1ecdi h\u00e0m g\u1eedi \u0111\u1ec3 tr\u1ea3 v\u1ec1 payload.      L\u01b0u \u00fd  Tham kh\u1ea3o th\u00eam c\u00e1c th\u00f4ng tin v\u1ec1 API c\u1ee7a ESP-NOW t\u1ea1i  SDK API Guide",
            "title": "M\u00f4 t\u1ea3"
        },
        {
            "location": "/nonos-sdk/esp-now/esp-now/#chuong-trinh",
            "text": "void ICACHE_FLASH_ATTR simple_cb(u8 *macaddr, u8 *data, u8 len)\n{\n    int i;\n    u8 ack_buf[16];\n    u8 recv_buf[17];\n    os_printf(\"now from[\");\n    for (i = 0; i < 6; i++)\n        os_printf(\"%02X, \", macaddr[i]);\n    os_printf(\" len: %d]:\", len);\n    os_bzero(recv_buf, 17);\n    os_memcpy(recv_buf, data, len < 17 ? len : 16);\n    if (os_strncmp(data, \"ACK\", 3) == 0)\n        return;\n    os_sprintf(ack_buf, \"ACK[%08x]\", ack_count++);\n    esp_now_send(macaddr, ack_buf, os_strlen(ack_buf));\n}\nvoid user_init(void)\n{\n    u8 key[16] = {0x33, 0x44, 0x33, 0x44, 0x33, 0x44, 0x33, 0x44,\n                  0x33, 0x44, 0x33, 0x44, 0x33, 0x44, 0x33, 0x44\n                 };\n    u8 da1[6] = {0x18, 0xfe, 0x34, 0x97, 0xd5, 0xb1};\n    u8 da2[6] = {0x1a, 0xfe, 0x34, 0x97, 0xd5, 0xb1};\n    if (esp_now_init() == 0) {\n        os_printf(\"esp_now init ok\\n\");\n        esp_now_register_recv_cb(simple_cb);\n        esp_now_set_self_role(1);\n        esp_now_add_peer(da1, 1, key, 16);\n        esp_now_add_peer(da2, 2, key, 16)\n    } else {\n        os_printf(\"esp_now init failed\\n\");\n    }\n}\nvoid ICACHE_FLASH_ATTR demo_send(u8 *mac_addr, u8 *data, u8 len)\n{\n    esp_now_send(NULL, data, len);/* Vi du nay se gui toi 2 thiet bi duoc them vao boi ham esp_now_add_peer() */\n//esp_now_send(mac_addr, data, len); /* gui toi dia chi mac mac_addr */\n}",
            "title": "Ch\u01b0\u01a1ng tr\u00ecnh"
        },
        {
            "location": "/nonos-sdk/esp-now/esp-now/#tham-khao",
            "text": "C\u00f3 th\u1ec3 xem th\u00eam c\u00e1c t\u00e0i li\u1ec7u m\u00f4 t\u1ea3 v\u1ec1  ESP-NOW  c\u1ee7a Espressif",
            "title": "Tham kh\u1ea3o"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/",
            "text": "Gi\u1edbi thi\u1ec7u\n\n\nM\u1ed9t s\u1ed1 \u0111\u1ecbnh ngh\u0129a\n\n\nC\u1ea5u tr\u00fac m\u1ea1ng\n\n\nS\u01a1 \u0111\u1ed3 m\u1ea1ng mesh\n\n\nC\u00e1c node trong m\u1ea1ng\n\n\n\n\n\n\nC\u00e1c header trong Mesh\n\n\nC\u1ea5u tr\u00fac g\u00f3i tin\n\n\nV\u00ed d\u1ee5 g\u00f3i tin g\u1eedi/ nh\u1eadn\n\n\nG\u00f3i tin request\n\n\n\n\n\n\nG\u00f3i tin response\n\n\nC\u1ea5u tr\u00fac d\u1eef li\u1ec7u\n\n\nCh\u01b0\u01a1ng tr\u00ecnh\n\n\nDevice\n\n\nMobile ho\u1eb7c Server\n\n\n\n\n\n\nL\u1ea5y topology\n\n\nPh\u00e2n t\u00edch ph\u1ea3n h\u1ed3i t\u1eeb topology\n\n\nTham kh\u1ea3o\n\n\n\n\n\n\nGi\u1edbi thi\u1ec7u\n#\n\n\n\nTrong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n IoT th\u01b0\u1eddng \u0111\u00f2i h\u1ecfi vi\u1ec7c t\u0103ng s\u1ed1 l\u01b0\u1ee3ng node k\u1ebft n\u1ed1i v\u1edbi Internet.Nh\u01b0\u1ee3c \u0111i\u1ec3m l\u1edbn nh\u1ea5t l\u00e0 s\u1ed1 l\u01b0\u1ee3ng node c\u00f3 th\u1ec3 tr\u1ef1c ti\u1ebfp k\u1ebft n\u1ed1i t\u1edbi router b\u1ecb gi\u1edbi h\u1ea1n nh\u1ecf h\u01a1n 32 node. \u0110\u1ec3 kh\u1eafc ph\u1ee5c \u0111i\u1ec3m n\u00e0y th\u00ec Espressif \u0111\u00e3 ph\u00e1t tri\u1ec3n giao th\u1ee9c ESP-MESH. Trong giao th\u1ee9c n\u00e0y node c\u00f3 th\u1ec3 t\u1ea1o ra m\u1ea1ng \u0111\u1ec3 chuy\u1ec3n ti\u1ebfp g\u00f3i tin, nh\u1edd \u0111\u00f3 m\u00e0 m\u1ed9t s\u1ed1 l\u01b0\u1ee3ng l\u1edbn node c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i Internet m\u00e0 kh\u00f4ng c\u1ea7n ph\u1ea3i c\u1ea3i ti\u1ebfn, n\u00e2ng c\u1ea5p router.\n\n\nM\u1ed9t s\u1ed1 \u0111\u1ecbnh ngh\u0129a\n#\n\n\n\n\nIOT Espressif App: \u1ee9ng d\u1ee5ng c\u1ee7a Espressif d\u00f9ng \u0111\u1ec3 \u0111i\u1ec1u khi\u1ec3n t\u1eeb xa c\u00e1c thi\u1ebft b\u1ecb Wifi\n\n\nESP-Touch: c\u00f4ng ngh\u1ec7 \u0111\u1ec3 k\u1ebft n\u1ed1i Wifi device v\u1edbi router\n\n\nSmart Config Mode cho ESP-Touch: c\u1ea5u h\u00ecnh cho Wifi device d\u00f9ng ESP-Touch th\u00f4ng qua Mode Smart Config.\n\n\n\n\nLocal Device: thi\u1ebft b\u1ecb \u0111\u01b0\u1ee3c ng\u01b0\u1eddi d\u00f9ng c\u1ea5u h\u00ecnh k\u1ebft n\u1ed1i v\u1edbi router th\u00f4ng qua ESP-Touch m\u00e0 kh\u00f4ng k\u00edch ho\u1ea1t tr\u00ean server, ch\u1ec9 c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n th\u00f4ng qua m\u1ea1ng c\u1ee5c b\u1ed9\n\n\n\n\n\n\n\nCloud Device: gi\u1ed1ng nh\u01b0 Local Device nh\u01b0ng \u0111\u01b0\u1ee3c k\u00edch ho\u1ea1t tr\u00ean server, c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n \u1edf m\u1ecdi n\u01a1i c\u00f3 m\u1ea1ng internet.\n\n\n\n\n\n\n\nC\u1ea5u tr\u00fac m\u1ea1ng\n#\n\n\nM\u1ea1ng Mesh h\u1ed7 tr\u1ee3 ch\u1ee9c n\u0103ng auto-networking. Khi ng\u01b0\u1eddi d\u00f9ng thi\u1ebft l\u1eadp m\u1ea1ng mesh th\u00f4ng qua ESP-Touch th\u00ec thi\u1ebft b\u1ecb s\u1ebd t\u1ef1 \u0111\u1ed9ng t\u00ecm c\u00e1c Wifi AP g\u1ea7n k\u1ec1.\n\n\nS\u01a1 \u0111\u1ed3 m\u1ea1ng mesh\n#\n\n\n\n\n\n\nC\u00e1c node s\u1ebd k\u1ebft n\u1ed1i tr\u1ef1c ti\u1ebfp t\u1edbi router \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 root node, c\u00e1c node kh\u00e1c th\u00ec \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 non-root node.\n\n\nOnline-Mesh: Khi router k\u1ebft n\u1ed1i v\u1edbi internet th\u00ec ta c\u00f3 th\u1ec3 d\u00f9ng IOT App \u0111\u1ec3 \u0111i\u1ec1u khi\u1ec3n t\u1eeb xa \u1edf b\u1ea5t k\u1ef3 \u0111\u00e2u\n\n\nLocal-Mesh: B\u1ea1n ch\u1ec9 c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n Local Device trong m\u1ea1ng th\u00f4ng qua router.\n\n\n\n\nC\u00e1c node trong m\u1ea1ng\n#\n\n\n\n\nRoot Node\n\n\nNh\u1eadn v\u00e0 g\u1eedi g\u00f3i tin\n\n\nChuy\u1ec3n ti\u1ebfp g\u00f3i tin t\u1eeb server, \u1ee9ng d\u1ee5ng mobile v\u00e0 c\u00e1c node con c\u1ee7a n\u00f3\n\n\n\n\n\n\nNone-root Node\n\n\nNon-leaf node: Nh\u1eadn v\u00e0 g\u1eedi g\u00f3i tin, chuy\u1ec3n ti\u1ebfp g\u00f3i tin t\u1eeb node cha v\u00e0 c\u00e1c node con kh\u00e1c\n\n\nLeaf node: Ch\u1ec9 \u0111\u01b0\u1ee3c nh\u1eadn v\u00e0 g\u1eedi g\u00f3i tin, kh\u00f4ng c\u00f3 ch\u1ee9c n\u0103ng chuy\u1ec3n ti\u1ebfp.\n\n\n\n\n\n\n\n\nC\u00e1c header trong Mesh\n#\n\n\n\n\nM\u00f4 t\u1ea3\n\n\n\n\n\n\n\n\nT\u00ean tr\u01b0\u1eddng\n\n\n\u0110\u1ed9 d\u00e0i\n\n\nM\u00f4 t\u1ea3\n\n\n\n\n\n\n\n\n\n\nver\n\n\n2 bit\n\n\nTh\u00f4ng tin Mesh\n\n\n\n\n\n\no\n\n\n1 bit\n\n\nT\u00f9y ch\u1ecdn flag\n\n\n\n\n\n\nflags\n\n\n5 bit\n\n\nFP\n\n\n\n\n\n\n\n\nFP\n\n\nCho ph\u00e9p Piggyback flow trong g\u00f3i tin\n\n\n\n\n\n\n\n\nFR\n\n\nY\u00eau c\u1ea7u,Piggyback flow trong g\u00f3i tin\n\n\n\n\n\n\n\n\nresv\n\n\nD\u1ef1 ph\u00f2ng\n\n\n\n\n\n\n\n\n8 bit\n\n\nD\n\n\n\n\n\n\n\n\nD\n\n\nChi\u1ec1u c\u1ee7a g\u00f3i tin: 0: xu\u1ed1ng (downward) 1: l\u00ean (upward)\n\n\n\n\n\n\n\n\nP2P\n\n\nG\u00f3i tin t\u1eeb Node t\u1edbi Node\n\n\n\n\n\n\n\n\nprotocol\n\n\nGiao th\u1ee9c g\u1eedi d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c quy \u0111\u1ecbnh b\u1edfi ng\u01b0\u1eddi d\u00f9ng(6bit)\n\n\n\n\n\n\nlen\n\n\n2 byte\n\n\nChi\u1ec1u d\u00e0i c\u1ee7a g\u00f3i tin (bao g\u1ed3m c\u1ea3 mesh header)\n\n\n\n\n\n\ndst_addr\n\n\n6 bytes\n\n\n\u0110\u1ecba ch\u1ec9 \u0111\u00edch\n\n\n\n\n\n\nsrc_addr\n\n\n6 bytes\n\n\n\u0110\u1ecba ch\u1ec9 ngu\u1ed3n\n\n\n\n\n\n\not_len\n\n\n\n\n\u0110\u1ed9 d\u00e0i c\u1ee7a option (g\u1ed3m c\u1ea3 ch\u00ednh n\u00f3)\n\n\n\n\n\n\noption_list\n\n\n\n\nDanh s\u00e1ch c\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a c\u00e1c option\n\n\n\n\n\n\notype\n\n\n1 byte\n\n\nKi\u1ec3u option\n\n\n\n\n\n\nolen\n\n\n1 byte\n\n\nChi\u1ec1u d\u00e0i c\u1ee7a option hi\u1ec7n t\u1ecba\n\n\n\n\n\n\novalue\n\n\nNg\u01b0\u1eddi d\u00f9ng \u0111\u1ecbnh ngh\u0129a\n\n\nGi\u00e1 tr\u1ecb option hi\u1ec7n t\u1ea1i\n\n\n\n\n\n\n\n\nC\u1ea5u tr\u00fac g\u00f3i tin\n#\n\n\nM\u1ea1ng mesh \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1edfi c\u1ea5u tr\u00fac trong mesh_option_type\n\n\n    enum mesh_option_type {\n    M_O_FLOW_REQ = 0,   //flow request option\n    M_O_FLOW_RESP,      //flow response option\n    M_O_ROUTER_SPREAD,  //router information spread option\n    M_O_ROUTE_ADD,      //route table update (node joins mesh) option\n    M_O_ROUTE_DEL,      //route table update (node exits mesh) option\n    M_O_TOPO_REQ,       //topology request option\n    M_O_TOPO_RESP,      //topology response option\n    M_O_MCAST_GRP,      //group list of mcast\n    M_O_MESH_FRAG,      //mesh management fragmentation option\n    M_O_USR_FRAG,       //user data fragmentation\n    M_O_USR_OPTION,     //user option\n    };\n\n\n\n\n\n\n\n\n\n\nT\u00ean tr\u01b0\u1eddng\n\n\n\u0110\u1ed9 d\u00e0i\n\n\nM\u00f4 t\u1ea3\n\n\n\u0110\u1ecbnh d\u1ea1ng\n\n\n\n\n\n\n\n\n\n\nM_O_FLOW_REQ\n\n\n2 Bytes\n\n\nD\u00f9ng cho flow request\n\n\notype\n\n\n\n\n\n\nM_O_FLOW_RESP\n\n\n6 Bytes\n\n\nD\u00f9ng cho ph\u1ea3n h\u1ed3i t\u1edbi flow\n\n\notype\n\n\n\n\n\n\nM_O_ROUTER_SPREAD\n\n\n106 Bytes\n\n\nD\u00f9ng spread th\u00f4ng tin t\u1eeb router\n\n\notype\n\n\n\n\n\n\nM_O_ROUTE_ADD\n\n\n6*n+2Bytes\n\n\nD\u00f9ng \u0111\u1ec3 c\u1eadp nh\u1eadt b\u1ea3ng \u0111\u1ecbnh tuy\u1ebfn khi c\u00f3 node m\u1edbi tham gia v\u00e0o m\u1ea1ng\n\n\notype\n\n\n\n\n\n\nM_O_ROUTE_DEL\n\n\n6*n+2Bytes\n\n\nD\u00f9ng \u0111\u1ec3 c\u1eadp nh\u1eadt b\u1ea3ng \u0111\u1ecbnh tuy\u1ebfn khi c\u00f3 node r\u1eddi m\u1ea1ng\n\n\notype\n\n\n\n\n\n\nM_O_TOPO_REQ\n\n\n8 Bytes\n\n\nS\u1eed d\u1ee5ng \u0111\u1ec3 l\u1ea5y topo c\u1ee7a m\u1ea1ng mesh\n\n\notype\n\n\n\n\n\n\nM_O_TOPO_RESP\n\n\n6*n+2Bytes\n\n\nS\u1eed d\u1ee5ng \u0111\u1ec3 nh\u1eadn ph\u1ea3n h\u1ed3i topo c\u1ee7a m\u1ea1ng mesh\n\n\notype\n\n\n\n\n\n\n\n\nV\u00ed d\u1ee5 g\u00f3i tin g\u1eedi/ nh\u1eadn\n#\n\n\nG\u00f3i tin request\n#\n\n\n\n\n\n\n\n\n\n\n0\n\n\n1\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\n6\n\n\n7\n\n\n8\n\n\n9\n\n\na\n\n\nb\n\n\nc\n\n\nd\n\n\ne\n\n\nf\n\n\n\n\n\n\n\n\n\n\n00000000h\n\n\n04\n\n\n01\n\n\n14\n\n\n00\n\n\n18\n\n\nFE\n\n\n34\n\n\nA5\n\n\n3B\n\n\nAD\n\n\n18\n\n\nFE\n\n\n34\n\n\nA2\n\n\nC7\n\n\n76\n\n\n\n\n\n\n00000010h\n\n\n04\n\n\n00\n\n\n00\n\n\n02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\u00f4 t\u1ea3\n\n\n\n\n\n\n\n\nT\u00ean tr\u01b0\u1eddng\n\n\nGi\u00e1 tr\u1ecb\n\n\nM\u00f4 t\u1ea3\n\n\n\n\n\n\n\n\n\n\nhead.ver\n\n\n00\n\n\nPhi\u00ean b\u1ea3n hi\u1ec7n t\u1ea1i c\u1ee7a mesh l\u00e0 00\n\n\n\n\n\n\nhead.O\n\n\n1\n\n\nC\u00f3 option trong g\u00f3i tin\n\n\n\n\n\n\nhead.flags.FP\n\n\n0\n\n\nKh\u00f4ng c\u00f3 piggyback flow permit\n\n\n\n\n\n\nhead.flags.FR\n\n\n0\n\n\nKh\u00f4ng c\u00f3 piggyback flow request\n\n\n\n\n\n\nhead.flags.resv\n\n\n000\n\n\nD\u1ef1 ph\u00f2ng\n\n\n\n\n\n\nhead.proto.D\n\n\n1\n\n\nUpwards\n\n\n\n\n\n\nhead.proto.P2P\n\n\n0\n\n\nKh\u00f4ng c\u00f3 g\u00f3i t\u1eeb node t\u1edbi node\n\n\n\n\n\n\nhead.proto.protocol\n\n\n000000\n\n\nG\u00f3i tin qu\u1ea3n l\u00fd mesh\n\n\n\n\n\n\nhead.len\n\n\n0x0014\n\n\nChi\u1ec1u d\u00e0i c\u1ee7a g\u00f3i tin l\u00e0 20 byte\n\n\n\n\n\n\nhead.dst_addr\n\n\n18 FE 34 A5 3B AD\n\n\n\u0110\u1ecba ch\u1ec9 MAC c\u1ee7a destination device\n\n\n\n\n\n\nhead.src_addr\n\n\n18 FE 34 A2 C7 76\n\n\n\u0110\u1ecba ch\u1ec9 MAC c\u1ee7a source device\n\n\n\n\n\n\nhead.ot_len\n\n\n0x0004\n\n\nChi\u1ec1u d\u00e0i c\u1ee7a option l\u00e0 0x0004\n\n\n\n\n\n\nhead.option_list[0].otype\n\n\n0x00\n\n\nM_FLOW_REQ\n\n\n\n\n\n\nhead.option_list[0].olen\n\n\n0x02\n\n\nOption length l\u00e0 0x02\n\n\n\n\n\n\n\n\nG\u00f3i tin response\n#\n\n\n\n\n\n\n\n\n\n\n0\n\n\n1\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\n6\n\n\n7\n\n\n8\n\n\n9\n\n\na\n\n\nb\n\n\nc\n\n\nd\n\n\ne\n\n\nf\n\n\n\n\n\n\n\n\n\n\n00000000h\n\n\n04\n\n\n00\n\n\n18\n\n\n00\n\n\n18\n\n\nFE\n\n\n34\n\n\nA2\n\n\nC7\n\n\n76\n\n\n18\n\n\nFE\n\n\n34\n\n\nA5\n\n\n3B\n\n\nAD\n\n\n\n\n\n\n00000010h\n\n\n08\n\n\n00\n\n\n01\n\n\n06\n\n\n01\n\n\n00\n\n\n00\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\u00f4 t\u1ea3\n\n\n\n\n\n\n\n\nT\u00ean tr\u01b0\u1eddng\n\n\nGi\u00e1 tr\u1ecb\n\n\nM\u00f4 t\u1ea3\n\n\n\n\n\n\n\n\n\n\nhead.ver\n\n\n00\n\n\nPhi\u00ean b\u1ea3n hi\u1ec7n t\u1ea1i c\u1ee7a mesh l\u00e0 00\n\n\n\n\n\n\nhead.O\n\n\n1\n\n\nC\u00f3 option trong g\u00f3i tin\n\n\n\n\n\n\nhead.flags.FP\n\n\n0\n\n\nKh\u00f4ng c\u00f3 piggyback flow permit\n\n\n\n\n\n\nhead.flags.FR\n\n\n0\n\n\nKh\u00f4ng c\u00f3 piggyback flow request\n\n\n\n\n\n\nhead.flags.resv\n\n\n000\n\n\nD\u1ef1 ph\u00f2ng\n\n\n\n\n\n\nhead.proto.D\n\n\n0\n\n\nDownwards.\n\n\n\n\n\n\nhead.proto.P2P\n\n\n0\n\n\nKh\u00f4ng c\u00f3 g\u00f3i t\u1eeb node t\u1edbi node\n\n\n\n\n\n\nhead.proto.protocol\n\n\n000000\n\n\nG\u00f3i tin qu\u1ea3n l\u00fd mesh\n\n\n\n\n\n\nhead.len\n\n\n0x0015\n\n\nChi\u1ec1u d\u00e0i c\u1ee7a g\u00f3i tin l\u00e0 21 byte\n\n\n\n\n\n\nhead.dst_addr\n\n\n18 FE 34 A2 C7 76\n\n\n\u0110\u1ecba ch\u1ec9 MAC c\u1ee7a destination device\n\n\n\n\n\n\nhead.src_addr\n\n\n18 FE 34 A5 3B AD\n\n\n\u0110\u1ecba ch\u1ec9 MAC c\u1ee7a source device\n\n\n\n\n\n\nhead.ot_len\n\n\n0x0008\n\n\nChi\u1ec1u d\u00e0i c\u1ee7a option l\u00e0 0x0008\n\n\n\n\n\n\nhead.option_list[0].otype\n\n\n0x01\n\n\nM_FLOW_RESP\n\n\n\n\n\n\nhead.option_list[0].olen\n\n\n0x06\n\n\nOption length l\u00e0 0x06\n\n\n\n\n\n\nhead.option_list[0].ovalue\n\n\n0x01\n\n\nOption value l\u00e0 0x00000001, flow capacity l\u00e0 0x00000001.\n\n\n\n\n\n\n\n\nC\u1ea5u tr\u00fac d\u1eef li\u1ec7u\n#\n\n\n\n\n\u0110\u1ecbnh d\u1ea1ng mesh header \n\n\n\n\nstruct mesh_header_format {\n    uint8_t ver: 2; // version of mesh\n    uint8_t oe: 1; // option flag\n    uint8_t fp: 1; // piggyback flow permit in packet\n    uint8_t fr: 1; // piggyback flow request in packet\n    uint8_t rsv: 3; // reserved\n    struct {\n        uint8_t d: 1; // direction, 1:upwards, 0:downwards\n        uint8_t p2p: 1; // node to node packet\n        uint8_t protocol: 6; // protocol used by user data\n    } proto;\n    uint16_t len; // packet total length\n    (mesh header included)\n    uint8_t dst_addr[ESP_MESH_ADDR_LEN]; // destination address\n    uint8_t src_addr[ESP_MESH_ADDR_LEN]; // source address\n    struct mesh_header_option_header_type option[0]; // mesh option\n} __packed;\n\n\n\n\n\n\n\u0110\u1ecbnh d\u1ea1ng mesh Option header \n\n\n\n\nstruct mesh_header_option_header_type {\n    uint16_t ot_len; // option total length\n    struct mesh_header_option_format olist[0]; // option list\n} __packed;\n\n\n\n\n\n\n\u0110\u1ecbnh d\u1ea1ng mesh Option \n\n\n\n\nstruct mesh_header_option_format {\n    uint8_t otype; // option type\n    uint8_t olen; // current option length\n    uint8_t ovalue[0]; // option value\n} __packed;\n\n\n\n\n\n\n\u0110\u1ecbnh d\u1ea1ng mesh Option Fragmentation\n\n\n\n\nstruct mesh_header_option_frag_format {\n    uint16_t id; // identity of fragmentation\n    struct {\n        uint16_t resv: 1; // reserved\n        uint16_t mf: 1; // more fragmentation\n        uint16_t idx: 14; // fragmentation offset\n    } offset;\n} __packed;\n\n\n\n\n\n\n\u0110\u1ecbnh d\u1ea1ng Mesh Callback\n\n\n\n\ntypedef void (* espconn_mesh_callback)(int8_t result);\n\n\n\n\n\n\n\u0110\u1ecbnh d\u1ea1ng Mesh Scan Callback\n\n\n\n\ntypedef void (* espconn_mesh_scan_callback)(void *arg, int8_t\nstatus);\n\n\n\n\n\n\n\u0110\u1ecbnh d\u1ea1ng Mesh Scan User Callback\n\n\n\n\ntypedef void (* espconn_mesh_usr_callback)(void *arg);\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nC\u00e1c API c\u1ee7a packet c\u00f3 th\u1ec3 tham kh\u1ea3o t\u1ea1i \nAPI\n\n\n\n\nCh\u01b0\u01a1ng tr\u00ecnh\n#\n\n\nDevice\n#\n\n\nMobile ho\u1eb7c Server\n#\n\n\nvoid controller_entrance(Parameter list)\n{\n    /*Add your codes to check status*/\n    /*Add your codes to build control packet*/\n    uint8_t json_control_data[] = {/*Add your codes*/};\n    uint16_t control_data_len = sizeof(json_control_data)\n                                struct mesh_header_format * mesh_header = NULL;\n    /* src_addr should be the combination of IP and port of\n    Mobile or Server. You can set the address to zero, then the\n    root device will fill in the section. If you fill in the\n    section by yourself, please make sure the value is right.*/\n    uint8_t src_addr[] = {0, 0, 0, 0, 0, 0},\n                         dst_addr[] = {xx, xx, xx, xx, xx, xx};\n    mesh_header = (struct mesh_header_format\n                   *)espconn_mesh_create_packet(dst_addr, src_addr, false, true,\n                           M_PROTO_JSON, control_data_len,\n                           false, 0, false, 0, false, 0, 0);\n    if (!mesh_header)\n    {\n        printf(\u201calloc resp packet fail\\n\u201d);\n        return;\n    }\n    if (espconn_mesh_set_usr_data(mesh_header,\n                                  resp_json_packet_body, resp_data_len))\n    {\n        printf(\u201cset user data fail\\n\u201d);\n        free(mesh_header);\n        return;\n    }\n// sent control packet\n    espconn_mesh_sent(esp, mesh_header, mesh_header->len);\n    free(mesh_header);\n}\n\n\n\n\nL\u1ea5y topology\n#\n\n\nvoid topology_entrance(Parameter list)\n{\n    /*Add your codes to check status*/\n    /*Add your codes to build getting topology packet*/\n    bool res;\n    struct mesh_header_format *mesh_header = NULL;\n    struct mesh_header_option_format *topo_option = NULL;\n    uint8_t src_addr[] = {0, 0, 0, 0, 0, 0};\n    uint8_t dst_addr[] = {xx, xx, xx, xx, xx, xx}; // MAC address of root\n    device\n    uint8_t dev_mac[6] = {xx, xx, xx, xx, xx, xx}; // zero represents\n    topology of all devices\n    uint16_t ot_len = sizeof(*topo_option) + sizeof(struct\n                      mesh_header_option_header_type) + sizeof(dev_mac);\n    mesh_header = (struct mesh_header_format\n                   *)espconn_mesh_create_packet(\n                      dst_addr, src_addr, false, true, M_PROTO_NONE, 0,\n                      true, ot_len, false, 0, false, 0, 0);\n    if (!mesh_header) {\n        printf(\u201calloc resp packet fail\\n\u201d);\n        return;\n    }\n    topo_option = (struct mesh_header_option_format\n                   *)espconn_mesh_create_option(\n                      M_O_TOPO_REQ, dev_mac, sizeof(dev_mac));\n    if (!topo_option) {\n        printf(\u201calloc topo option fail\\n\u201d);\n        free(mesh_header);\n        return;\n    }\n    res = espconn_mesh_add_option(mesh_header, topo_option);\n    free(topo_option);\n    if (res) {\n        printf(\u201cadd topo option fail\\n\u201d);\n        free(mesh_header);\n        return;\n    }\n// send packet of getting topology\n    espconn_mesh_sent(esp, mesh_header, mesh_header->len);\n    free(mesh_header);\n}\n\n\n\n\nPh\u00e2n t\u00edch ph\u1ea3n h\u1ed3i t\u1eeb topology\n#\n\n\nvoid topology_parser_entrance(uint8_t *topo_resp, uint16_t len)\n{\n    /*Add your codes to check parameter*/\n    uint16_t oidx = 1;\n    struct mesh_header_format *mesh_header = NULL;\n    struct mesh_header_option_format *topo_option = NULL;\n    mesh_header = (struct mesh_header_format *)topo_resp;\n    if (!mesh_header->oe) {\n        printf(\u201cno option exist\\n\u201d);\n        return;\n    }\n    /* you need parse all the options one by one in the packet header\n    */\n    while (espconn_mesh_get_option(mesh_header, M_O_TOPO_RESP,\n                                   oidx++, &topo_option)) {\n        uint16_t dev_count = topo_option->olen / 6;\n        process_dev_list(topo_option->ovalue, dev_count);\n    }\n}\n\n\n\n\nTham kh\u1ea3o\n#\n\n\n\n\nESP-MESH",
            "title": "ESP Mesh"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#gioi-thieu",
            "text": "Trong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n IoT th\u01b0\u1eddng \u0111\u00f2i h\u1ecfi vi\u1ec7c t\u0103ng s\u1ed1 l\u01b0\u1ee3ng node k\u1ebft n\u1ed1i v\u1edbi Internet.Nh\u01b0\u1ee3c \u0111i\u1ec3m l\u1edbn nh\u1ea5t l\u00e0 s\u1ed1 l\u01b0\u1ee3ng node c\u00f3 th\u1ec3 tr\u1ef1c ti\u1ebfp k\u1ebft n\u1ed1i t\u1edbi router b\u1ecb gi\u1edbi h\u1ea1n nh\u1ecf h\u01a1n 32 node. \u0110\u1ec3 kh\u1eafc ph\u1ee5c \u0111i\u1ec3m n\u00e0y th\u00ec Espressif \u0111\u00e3 ph\u00e1t tri\u1ec3n giao th\u1ee9c ESP-MESH. Trong giao th\u1ee9c n\u00e0y node c\u00f3 th\u1ec3 t\u1ea1o ra m\u1ea1ng \u0111\u1ec3 chuy\u1ec3n ti\u1ebfp g\u00f3i tin, nh\u1edd \u0111\u00f3 m\u00e0 m\u1ed9t s\u1ed1 l\u01b0\u1ee3ng l\u1edbn node c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i Internet m\u00e0 kh\u00f4ng c\u1ea7n ph\u1ea3i c\u1ea3i ti\u1ebfn, n\u00e2ng c\u1ea5p router.",
            "title": "Gi\u1edbi thi\u1ec7u"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#mot-so-inh-nghia",
            "text": "IOT Espressif App: \u1ee9ng d\u1ee5ng c\u1ee7a Espressif d\u00f9ng \u0111\u1ec3 \u0111i\u1ec1u khi\u1ec3n t\u1eeb xa c\u00e1c thi\u1ebft b\u1ecb Wifi  ESP-Touch: c\u00f4ng ngh\u1ec7 \u0111\u1ec3 k\u1ebft n\u1ed1i Wifi device v\u1edbi router  Smart Config Mode cho ESP-Touch: c\u1ea5u h\u00ecnh cho Wifi device d\u00f9ng ESP-Touch th\u00f4ng qua Mode Smart Config.   Local Device: thi\u1ebft b\u1ecb \u0111\u01b0\u1ee3c ng\u01b0\u1eddi d\u00f9ng c\u1ea5u h\u00ecnh k\u1ebft n\u1ed1i v\u1edbi router th\u00f4ng qua ESP-Touch m\u00e0 kh\u00f4ng k\u00edch ho\u1ea1t tr\u00ean server, ch\u1ec9 c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n th\u00f4ng qua m\u1ea1ng c\u1ee5c b\u1ed9    Cloud Device: gi\u1ed1ng nh\u01b0 Local Device nh\u01b0ng \u0111\u01b0\u1ee3c k\u00edch ho\u1ea1t tr\u00ean server, c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n \u1edf m\u1ecdi n\u01a1i c\u00f3 m\u1ea1ng internet.",
            "title": "M\u1ed9t s\u1ed1 \u0111\u1ecbnh ngh\u0129a"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#cau-truc-mang",
            "text": "M\u1ea1ng Mesh h\u1ed7 tr\u1ee3 ch\u1ee9c n\u0103ng auto-networking. Khi ng\u01b0\u1eddi d\u00f9ng thi\u1ebft l\u1eadp m\u1ea1ng mesh th\u00f4ng qua ESP-Touch th\u00ec thi\u1ebft b\u1ecb s\u1ebd t\u1ef1 \u0111\u1ed9ng t\u00ecm c\u00e1c Wifi AP g\u1ea7n k\u1ec1.",
            "title": "C\u1ea5u tr\u00fac m\u1ea1ng"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#so-o-mang-mesh",
            "text": "C\u00e1c node s\u1ebd k\u1ebft n\u1ed1i tr\u1ef1c ti\u1ebfp t\u1edbi router \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 root node, c\u00e1c node kh\u00e1c th\u00ec \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 non-root node.  Online-Mesh: Khi router k\u1ebft n\u1ed1i v\u1edbi internet th\u00ec ta c\u00f3 th\u1ec3 d\u00f9ng IOT App \u0111\u1ec3 \u0111i\u1ec1u khi\u1ec3n t\u1eeb xa \u1edf b\u1ea5t k\u1ef3 \u0111\u00e2u  Local-Mesh: B\u1ea1n ch\u1ec9 c\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n Local Device trong m\u1ea1ng th\u00f4ng qua router.",
            "title": "S\u01a1 \u0111\u1ed3 m\u1ea1ng mesh"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#cac-node-trong-mang",
            "text": "Root Node  Nh\u1eadn v\u00e0 g\u1eedi g\u00f3i tin  Chuy\u1ec3n ti\u1ebfp g\u00f3i tin t\u1eeb server, \u1ee9ng d\u1ee5ng mobile v\u00e0 c\u00e1c node con c\u1ee7a n\u00f3    None-root Node  Non-leaf node: Nh\u1eadn v\u00e0 g\u1eedi g\u00f3i tin, chuy\u1ec3n ti\u1ebfp g\u00f3i tin t\u1eeb node cha v\u00e0 c\u00e1c node con kh\u00e1c  Leaf node: Ch\u1ec9 \u0111\u01b0\u1ee3c nh\u1eadn v\u00e0 g\u1eedi g\u00f3i tin, kh\u00f4ng c\u00f3 ch\u1ee9c n\u0103ng chuy\u1ec3n ti\u1ebfp.",
            "title": "C\u00e1c node trong m\u1ea1ng"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#cac-header-trong-mesh",
            "text": "M\u00f4 t\u1ea3     T\u00ean tr\u01b0\u1eddng  \u0110\u1ed9 d\u00e0i  M\u00f4 t\u1ea3      ver  2 bit  Th\u00f4ng tin Mesh    o  1 bit  T\u00f9y ch\u1ecdn flag    flags  5 bit  FP     FP  Cho ph\u00e9p Piggyback flow trong g\u00f3i tin     FR  Y\u00eau c\u1ea7u,Piggyback flow trong g\u00f3i tin     resv  D\u1ef1 ph\u00f2ng     8 bit  D     D  Chi\u1ec1u c\u1ee7a g\u00f3i tin: 0: xu\u1ed1ng (downward) 1: l\u00ean (upward)     P2P  G\u00f3i tin t\u1eeb Node t\u1edbi Node     protocol  Giao th\u1ee9c g\u1eedi d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c quy \u0111\u1ecbnh b\u1edfi ng\u01b0\u1eddi d\u00f9ng(6bit)    len  2 byte  Chi\u1ec1u d\u00e0i c\u1ee7a g\u00f3i tin (bao g\u1ed3m c\u1ea3 mesh header)    dst_addr  6 bytes  \u0110\u1ecba ch\u1ec9 \u0111\u00edch    src_addr  6 bytes  \u0110\u1ecba ch\u1ec9 ngu\u1ed3n    ot_len   \u0110\u1ed9 d\u00e0i c\u1ee7a option (g\u1ed3m c\u1ea3 ch\u00ednh n\u00f3)    option_list   Danh s\u00e1ch c\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a c\u00e1c option    otype  1 byte  Ki\u1ec3u option    olen  1 byte  Chi\u1ec1u d\u00e0i c\u1ee7a option hi\u1ec7n t\u1ecba    ovalue  Ng\u01b0\u1eddi d\u00f9ng \u0111\u1ecbnh ngh\u0129a  Gi\u00e1 tr\u1ecb option hi\u1ec7n t\u1ea1i",
            "title": "C\u00e1c header trong Mesh"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#cau-truc-goi-tin",
            "text": "M\u1ea1ng mesh \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1edfi c\u1ea5u tr\u00fac trong mesh_option_type      enum mesh_option_type {\n    M_O_FLOW_REQ = 0,   //flow request option\n    M_O_FLOW_RESP,      //flow response option\n    M_O_ROUTER_SPREAD,  //router information spread option\n    M_O_ROUTE_ADD,      //route table update (node joins mesh) option\n    M_O_ROUTE_DEL,      //route table update (node exits mesh) option\n    M_O_TOPO_REQ,       //topology request option\n    M_O_TOPO_RESP,      //topology response option\n    M_O_MCAST_GRP,      //group list of mcast\n    M_O_MESH_FRAG,      //mesh management fragmentation option\n    M_O_USR_FRAG,       //user data fragmentation\n    M_O_USR_OPTION,     //user option\n    };     T\u00ean tr\u01b0\u1eddng  \u0110\u1ed9 d\u00e0i  M\u00f4 t\u1ea3  \u0110\u1ecbnh d\u1ea1ng      M_O_FLOW_REQ  2 Bytes  D\u00f9ng cho flow request  otype    M_O_FLOW_RESP  6 Bytes  D\u00f9ng cho ph\u1ea3n h\u1ed3i t\u1edbi flow  otype    M_O_ROUTER_SPREAD  106 Bytes  D\u00f9ng spread th\u00f4ng tin t\u1eeb router  otype    M_O_ROUTE_ADD  6*n+2Bytes  D\u00f9ng \u0111\u1ec3 c\u1eadp nh\u1eadt b\u1ea3ng \u0111\u1ecbnh tuy\u1ebfn khi c\u00f3 node m\u1edbi tham gia v\u00e0o m\u1ea1ng  otype    M_O_ROUTE_DEL  6*n+2Bytes  D\u00f9ng \u0111\u1ec3 c\u1eadp nh\u1eadt b\u1ea3ng \u0111\u1ecbnh tuy\u1ebfn khi c\u00f3 node r\u1eddi m\u1ea1ng  otype    M_O_TOPO_REQ  8 Bytes  S\u1eed d\u1ee5ng \u0111\u1ec3 l\u1ea5y topo c\u1ee7a m\u1ea1ng mesh  otype    M_O_TOPO_RESP  6*n+2Bytes  S\u1eed d\u1ee5ng \u0111\u1ec3 nh\u1eadn ph\u1ea3n h\u1ed3i topo c\u1ee7a m\u1ea1ng mesh  otype",
            "title": "C\u1ea5u tr\u00fac g\u00f3i tin"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#vi-du-goi-tin-gui-nhan",
            "text": "",
            "title": "V\u00ed d\u1ee5 g\u00f3i tin g\u1eedi/ nh\u1eadn"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#goi-tin-request",
            "text": "0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f      00000000h  04  01  14  00  18  FE  34  A5  3B  AD  18  FE  34  A2  C7  76    00000010h  04  00  00  02                 M\u00f4 t\u1ea3     T\u00ean tr\u01b0\u1eddng  Gi\u00e1 tr\u1ecb  M\u00f4 t\u1ea3      head.ver  00  Phi\u00ean b\u1ea3n hi\u1ec7n t\u1ea1i c\u1ee7a mesh l\u00e0 00    head.O  1  C\u00f3 option trong g\u00f3i tin    head.flags.FP  0  Kh\u00f4ng c\u00f3 piggyback flow permit    head.flags.FR  0  Kh\u00f4ng c\u00f3 piggyback flow request    head.flags.resv  000  D\u1ef1 ph\u00f2ng    head.proto.D  1  Upwards    head.proto.P2P  0  Kh\u00f4ng c\u00f3 g\u00f3i t\u1eeb node t\u1edbi node    head.proto.protocol  000000  G\u00f3i tin qu\u1ea3n l\u00fd mesh    head.len  0x0014  Chi\u1ec1u d\u00e0i c\u1ee7a g\u00f3i tin l\u00e0 20 byte    head.dst_addr  18 FE 34 A5 3B AD  \u0110\u1ecba ch\u1ec9 MAC c\u1ee7a destination device    head.src_addr  18 FE 34 A2 C7 76  \u0110\u1ecba ch\u1ec9 MAC c\u1ee7a source device    head.ot_len  0x0004  Chi\u1ec1u d\u00e0i c\u1ee7a option l\u00e0 0x0004    head.option_list[0].otype  0x00  M_FLOW_REQ    head.option_list[0].olen  0x02  Option length l\u00e0 0x02",
            "title": "G\u00f3i tin request"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#goi-tin-response",
            "text": "0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f      00000000h  04  00  18  00  18  FE  34  A2  C7  76  18  FE  34  A5  3B  AD    00000010h  08  00  01  06  01  00  00  00             M\u00f4 t\u1ea3     T\u00ean tr\u01b0\u1eddng  Gi\u00e1 tr\u1ecb  M\u00f4 t\u1ea3      head.ver  00  Phi\u00ean b\u1ea3n hi\u1ec7n t\u1ea1i c\u1ee7a mesh l\u00e0 00    head.O  1  C\u00f3 option trong g\u00f3i tin    head.flags.FP  0  Kh\u00f4ng c\u00f3 piggyback flow permit    head.flags.FR  0  Kh\u00f4ng c\u00f3 piggyback flow request    head.flags.resv  000  D\u1ef1 ph\u00f2ng    head.proto.D  0  Downwards.    head.proto.P2P  0  Kh\u00f4ng c\u00f3 g\u00f3i t\u1eeb node t\u1edbi node    head.proto.protocol  000000  G\u00f3i tin qu\u1ea3n l\u00fd mesh    head.len  0x0015  Chi\u1ec1u d\u00e0i c\u1ee7a g\u00f3i tin l\u00e0 21 byte    head.dst_addr  18 FE 34 A2 C7 76  \u0110\u1ecba ch\u1ec9 MAC c\u1ee7a destination device    head.src_addr  18 FE 34 A5 3B AD  \u0110\u1ecba ch\u1ec9 MAC c\u1ee7a source device    head.ot_len  0x0008  Chi\u1ec1u d\u00e0i c\u1ee7a option l\u00e0 0x0008    head.option_list[0].otype  0x01  M_FLOW_RESP    head.option_list[0].olen  0x06  Option length l\u00e0 0x06    head.option_list[0].ovalue  0x01  Option value l\u00e0 0x00000001, flow capacity l\u00e0 0x00000001.",
            "title": "G\u00f3i tin response"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#cau-truc-du-lieu",
            "text": "\u0110\u1ecbnh d\u1ea1ng mesh header    struct mesh_header_format {\n    uint8_t ver: 2; // version of mesh\n    uint8_t oe: 1; // option flag\n    uint8_t fp: 1; // piggyback flow permit in packet\n    uint8_t fr: 1; // piggyback flow request in packet\n    uint8_t rsv: 3; // reserved\n    struct {\n        uint8_t d: 1; // direction, 1:upwards, 0:downwards\n        uint8_t p2p: 1; // node to node packet\n        uint8_t protocol: 6; // protocol used by user data\n    } proto;\n    uint16_t len; // packet total length\n    (mesh header included)\n    uint8_t dst_addr[ESP_MESH_ADDR_LEN]; // destination address\n    uint8_t src_addr[ESP_MESH_ADDR_LEN]; // source address\n    struct mesh_header_option_header_type option[0]; // mesh option\n} __packed;   \u0110\u1ecbnh d\u1ea1ng mesh Option header    struct mesh_header_option_header_type {\n    uint16_t ot_len; // option total length\n    struct mesh_header_option_format olist[0]; // option list\n} __packed;   \u0110\u1ecbnh d\u1ea1ng mesh Option    struct mesh_header_option_format {\n    uint8_t otype; // option type\n    uint8_t olen; // current option length\n    uint8_t ovalue[0]; // option value\n} __packed;   \u0110\u1ecbnh d\u1ea1ng mesh Option Fragmentation   struct mesh_header_option_frag_format {\n    uint16_t id; // identity of fragmentation\n    struct {\n        uint16_t resv: 1; // reserved\n        uint16_t mf: 1; // more fragmentation\n        uint16_t idx: 14; // fragmentation offset\n    } offset;\n} __packed;   \u0110\u1ecbnh d\u1ea1ng Mesh Callback   typedef void (* espconn_mesh_callback)(int8_t result);   \u0110\u1ecbnh d\u1ea1ng Mesh Scan Callback   typedef void (* espconn_mesh_scan_callback)(void *arg, int8_t\nstatus);   \u0110\u1ecbnh d\u1ea1ng Mesh Scan User Callback   typedef void (* espconn_mesh_usr_callback)(void *arg);   L\u01b0u \u00fd  C\u00e1c API c\u1ee7a packet c\u00f3 th\u1ec3 tham kh\u1ea3o t\u1ea1i  API",
            "title": "C\u1ea5u tr\u00fac d\u1eef li\u1ec7u"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#chuong-trinh",
            "text": "",
            "title": "Ch\u01b0\u01a1ng tr\u00ecnh"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#device",
            "text": "",
            "title": "Device"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#mobile-hoac-server",
            "text": "void controller_entrance(Parameter list)\n{\n    /*Add your codes to check status*/\n    /*Add your codes to build control packet*/\n    uint8_t json_control_data[] = {/*Add your codes*/};\n    uint16_t control_data_len = sizeof(json_control_data)\n                                struct mesh_header_format * mesh_header = NULL;\n    /* src_addr should be the combination of IP and port of\n    Mobile or Server. You can set the address to zero, then the\n    root device will fill in the section. If you fill in the\n    section by yourself, please make sure the value is right.*/\n    uint8_t src_addr[] = {0, 0, 0, 0, 0, 0},\n                         dst_addr[] = {xx, xx, xx, xx, xx, xx};\n    mesh_header = (struct mesh_header_format\n                   *)espconn_mesh_create_packet(dst_addr, src_addr, false, true,\n                           M_PROTO_JSON, control_data_len,\n                           false, 0, false, 0, false, 0, 0);\n    if (!mesh_header)\n    {\n        printf(\u201calloc resp packet fail\\n\u201d);\n        return;\n    }\n    if (espconn_mesh_set_usr_data(mesh_header,\n                                  resp_json_packet_body, resp_data_len))\n    {\n        printf(\u201cset user data fail\\n\u201d);\n        free(mesh_header);\n        return;\n    }\n// sent control packet\n    espconn_mesh_sent(esp, mesh_header, mesh_header->len);\n    free(mesh_header);\n}",
            "title": "Mobile ho\u1eb7c Server"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#lay-topology",
            "text": "void topology_entrance(Parameter list)\n{\n    /*Add your codes to check status*/\n    /*Add your codes to build getting topology packet*/\n    bool res;\n    struct mesh_header_format *mesh_header = NULL;\n    struct mesh_header_option_format *topo_option = NULL;\n    uint8_t src_addr[] = {0, 0, 0, 0, 0, 0};\n    uint8_t dst_addr[] = {xx, xx, xx, xx, xx, xx}; // MAC address of root\n    device\n    uint8_t dev_mac[6] = {xx, xx, xx, xx, xx, xx}; // zero represents\n    topology of all devices\n    uint16_t ot_len = sizeof(*topo_option) + sizeof(struct\n                      mesh_header_option_header_type) + sizeof(dev_mac);\n    mesh_header = (struct mesh_header_format\n                   *)espconn_mesh_create_packet(\n                      dst_addr, src_addr, false, true, M_PROTO_NONE, 0,\n                      true, ot_len, false, 0, false, 0, 0);\n    if (!mesh_header) {\n        printf(\u201calloc resp packet fail\\n\u201d);\n        return;\n    }\n    topo_option = (struct mesh_header_option_format\n                   *)espconn_mesh_create_option(\n                      M_O_TOPO_REQ, dev_mac, sizeof(dev_mac));\n    if (!topo_option) {\n        printf(\u201calloc topo option fail\\n\u201d);\n        free(mesh_header);\n        return;\n    }\n    res = espconn_mesh_add_option(mesh_header, topo_option);\n    free(topo_option);\n    if (res) {\n        printf(\u201cadd topo option fail\\n\u201d);\n        free(mesh_header);\n        return;\n    }\n// send packet of getting topology\n    espconn_mesh_sent(esp, mesh_header, mesh_header->len);\n    free(mesh_header);\n}",
            "title": "L\u1ea5y topology"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#phan-tich-phan-hoi-tu-topology",
            "text": "void topology_parser_entrance(uint8_t *topo_resp, uint16_t len)\n{\n    /*Add your codes to check parameter*/\n    uint16_t oidx = 1;\n    struct mesh_header_format *mesh_header = NULL;\n    struct mesh_header_option_format *topo_option = NULL;\n    mesh_header = (struct mesh_header_format *)topo_resp;\n    if (!mesh_header->oe) {\n        printf(\u201cno option exist\\n\u201d);\n        return;\n    }\n    /* you need parse all the options one by one in the packet header\n    */\n    while (espconn_mesh_get_option(mesh_header, M_O_TOPO_RESP,\n                                   oidx++, &topo_option)) {\n        uint16_t dev_count = topo_option->olen / 6;\n        process_dev_list(topo_option->ovalue, dev_count);\n    }\n}",
            "title": "Ph\u00e2n t\u00edch ph\u1ea3n h\u1ed3i t\u1eeb topology"
        },
        {
            "location": "/nonos-sdk/esp-mesh/esp-mesh/#tham-khao",
            "text": "ESP-MESH",
            "title": "Tham kh\u1ea3o"
        },
        {
            "location": "/nonos-sdk/projects/list/",
            "text": "Danh s\u00e1ch c\u00e1c d\u1ef1 \u00e1n m\u1eabu s\u1eed d\u1ee5ng NONOS-SDK\n#",
            "title": "Danh s\u00e1ch"
        },
        {
            "location": "/nonos-sdk/projects/list/#danh-sach-cac-du-an-mau-su-dung-nonos-sdk",
            "text": "",
            "title": "Danh s\u00e1ch c\u00e1c d\u1ef1 \u00e1n m\u1eabu s\u1eed d\u1ee5ng NONOS-SDK"
        },
        {
            "location": "/freertos-sdk/freertos-sdk/",
            "text": "Gi\u1edbi thi\u1ec7u RTOS SDK c\u1ee7a ESP8266\n#\n\n\n\u0110\u00e2y l\u00e0 b\u1ea3n SDK s\u1eed d\u1ee5ng h\u1ec7 \u0111i\u1ec1u h\u00e0nh th\u1eddi gian th\u1ef1c (Real Time Operation System) \nport\n t\u1eeb FreeRTOS cho ESP8266.\n\n\nFreeRTOS l\u00e0 RTOS mi\u1ec5n ph\u00ed v\u1ed1n \u0111\u01b0\u1ee3c \nport\n cho r\u1ea5t nhi\u1ec1u MCU kh\u00e1c nhau (ARM7, Cortex M\u2026)\n\n\n\n\nTham kh\u1ea3o chi ti\u1ebft v\u1ec1 FreeRTOS\n\n\nDownload FreeRTOS source code (kh\u00f4ng ph\u1ea3i RTOS-SDK cho ESP8266!!!)\n\n\nTham kh\u1ea3o FreeRTOS API\n\n\nEbook: \nStudy of an operating system: FreeRTOS\n, Nicolas Melot.\n\n\nEbook: \nUsing the FreeRTOS\u2122 Real Time Kernel\n, NXP LPC17xx Edition, Richard Barry.\n\n\n\n\nL\u01b0u \u00fd\n#\n\n\nKhi s\u1eed d\u1ee5ng ESP8266_RTOS_SDK c\u1ea7n l\u01b0u \u00fd:\n\n\n\n\nB\u1ea3n \nESP8266_RTOS_SDK\n v\u00e0 \nESP8266_NONOS_SDK\n s\u1eed d\u1ee5ng chung API.\n\n\nS\u1eed d\u1ee5ng freeRTOS timer hay \nos_timer\n kh\u00f4ng \u0111\u01b0\u1ee3c d\u00f9ng \nwhile(1)\n ho\u1eb7c c\u00e1c h\u00e0m c\u00f3 t\u00e1c d\u1ee5ng t\u01b0\u01a1ng t\u1ef1 v\u00ec n\u00f3 s\u1ebd \nblock\n lu\u1ed3ng th\u1ef1c thi l\u1ec7nh (task/thread)\n\n\nVi\u1ec7c th\u1ef1c thi l\u1ec7nh trong h\u00e0m callback c\u1ee7a timer kh\u00f4ng \u0111\u01b0\u1ee3c k\u00e9o d\u00e0i qu\u00e1 \n15ms\n\n\nKh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a bi\u1ebfn ki\u1ec3u \nos_timer_t\n l\u00e0 c\u1ee5c b\u1ed9 (local) m\u00e0 ph\u1ea3i \u0111\u1ecbnh ngh\u0129a l\u00e0 bi\u1ebfn to\u00e0n c\u1ee5c (global), bi\u1ebfn t\u0129nh (static) ho\u1eb7c bi\u1ebfn trong v\u00f9ng nh\u1edb c\u1ea5p ph\u00e1t b\u1eb1ng \nos_malloc\n\n\nK\u1ec3 t\u1eeb phi\u00ean b\u1ea3n ESP8266_RTOS_SDK_v1.2.0, h\u00e0m m\u1eb7c \u0111\u1ecbnh \u0111\u01b0\u1ee3c l\u01b0u trong v\u00f9ng \nCACHE\n n\u00ean kh\u00f4ng c\u1ea7n ph\u1ea3i khai b\u00e1o h\u00e0m v\u1edbi \n_ICACHE_FLASH_ATTR_\n n\u1eefa. K\u1ec3 c\u1ea3 h\u00e0m th\u1ef1c thi ng\u1eaft c\u0169ng v\u1eady. N\u1ebfu c\u1ea7n ph\u00e2n b\u1ed5 h\u00e0m trong RAM (\u0111\u1ec3 g\u1ecdi nhi\u1ec1u l\u1ea7n) th\u00ec khai b\u00e1o h\u00e0m v\u1edbi \nIRAM_ATTR\n\n\nNetwork programming use socket, please do not bind to the same port\n ???\n\n\nTask \u01b0u ti\u00ean cao nh\u1ea5t c\u1ee7a RTOS SDK l\u00e0 14. \nxTaskCreate\n l\u00e0 h\u00e0m d\u00f9ng t\u1ea1o task trong FreeRTOS, tham kh\u1ea3o \nAPI c\u1ee7a FreeRTOS\n\n\nK\u00edch th\u01b0\u1edbc stack (ng\u0103n x\u1ebfp) cho task cho ph\u00e9p trong kho\u1ea3ng t\u1eeb 176 -> 512 bytes\n\n\nN\u1ebfu trong task c\u00f3 bi\u1ebfn m\u1ea3ng local n\u00e0o \u0111\u00f3 v\u01b0\u1ee3t qu\u00e1 60 bytes th\u00ec khuy\u1ebfn c\u00e1o n\u00ean d\u00f9ng \nos_malloc\n v\u00e0 \nos_free\n, v\u00ec k\u00edch th\u01b0\u1edbc bi\u1ebfn c\u1ee5c b\u1ed9 qu\u00e1 l\u1edbn c\u00f3 th\u1ec3 g\u00e2y r\u00f2 r\u1ec9 \u0111\u1ebfn stack c\u1ee7a task,\n\n\nM\u1ed9t s\u1ed1 m\u1ee9c \u01b0u ti\u00ean trong RTOS SDK: c\u1ee7a pp task l\u00e0 13, c\u1ee7a precise timer (ms) l\u00e0 12, c\u1ee7a TCP/IP task l\u00e0 10, c\u1ee7a freeRTOS timer l\u00e0 2 v\u00e0 task idle (r\u1ed7i) l\u00e0 0. \n\n\nNg\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 d\u00f9ng m\u1ee9c \u01b0u ti\u00ean t\u1eeb 1 -> 9\n\n\n\u0110i\u1ec1u quan tr\u1ecdng cu\u1ed1i c\u00f9ng: l\u00e0 kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a/thay \u0111\u1ed5i file \nFreeRTOSConfig.h\n v\u00ec n\u00f3 s\u1ebd \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn th\u01b0 vi\u1ec7n RTOS b\u00ean trong SDK (ch\u1ec9 \u0111\u01b0\u1ee3c nh\u00e0 s\u1ea3n xu\u1ea5t c\u00f3 quy\u1ec1n thay \u0111\u1ed5i)",
            "title": "Gi\u1edbi thi\u1ec7u"
        },
        {
            "location": "/freertos-sdk/freertos-sdk/#gioi-thieu-rtos-sdk-cua-esp8266",
            "text": "\u0110\u00e2y l\u00e0 b\u1ea3n SDK s\u1eed d\u1ee5ng h\u1ec7 \u0111i\u1ec1u h\u00e0nh th\u1eddi gian th\u1ef1c (Real Time Operation System)  port  t\u1eeb FreeRTOS cho ESP8266.  FreeRTOS l\u00e0 RTOS mi\u1ec5n ph\u00ed v\u1ed1n \u0111\u01b0\u1ee3c  port  cho r\u1ea5t nhi\u1ec1u MCU kh\u00e1c nhau (ARM7, Cortex M\u2026)   Tham kh\u1ea3o chi ti\u1ebft v\u1ec1 FreeRTOS  Download FreeRTOS source code (kh\u00f4ng ph\u1ea3i RTOS-SDK cho ESP8266!!!)  Tham kh\u1ea3o FreeRTOS API  Ebook:  Study of an operating system: FreeRTOS , Nicolas Melot.  Ebook:  Using the FreeRTOS\u2122 Real Time Kernel , NXP LPC17xx Edition, Richard Barry.",
            "title": "Gi\u1edbi thi\u1ec7u RTOS SDK c\u1ee7a ESP8266"
        },
        {
            "location": "/freertos-sdk/freertos-sdk/#luu-y",
            "text": "Khi s\u1eed d\u1ee5ng ESP8266_RTOS_SDK c\u1ea7n l\u01b0u \u00fd:   B\u1ea3n  ESP8266_RTOS_SDK  v\u00e0  ESP8266_NONOS_SDK  s\u1eed d\u1ee5ng chung API.  S\u1eed d\u1ee5ng freeRTOS timer hay  os_timer  kh\u00f4ng \u0111\u01b0\u1ee3c d\u00f9ng  while(1)  ho\u1eb7c c\u00e1c h\u00e0m c\u00f3 t\u00e1c d\u1ee5ng t\u01b0\u01a1ng t\u1ef1 v\u00ec n\u00f3 s\u1ebd  block  lu\u1ed3ng th\u1ef1c thi l\u1ec7nh (task/thread)  Vi\u1ec7c th\u1ef1c thi l\u1ec7nh trong h\u00e0m callback c\u1ee7a timer kh\u00f4ng \u0111\u01b0\u1ee3c k\u00e9o d\u00e0i qu\u00e1  15ms  Kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a bi\u1ebfn ki\u1ec3u  os_timer_t  l\u00e0 c\u1ee5c b\u1ed9 (local) m\u00e0 ph\u1ea3i \u0111\u1ecbnh ngh\u0129a l\u00e0 bi\u1ebfn to\u00e0n c\u1ee5c (global), bi\u1ebfn t\u0129nh (static) ho\u1eb7c bi\u1ebfn trong v\u00f9ng nh\u1edb c\u1ea5p ph\u00e1t b\u1eb1ng  os_malloc  K\u1ec3 t\u1eeb phi\u00ean b\u1ea3n ESP8266_RTOS_SDK_v1.2.0, h\u00e0m m\u1eb7c \u0111\u1ecbnh \u0111\u01b0\u1ee3c l\u01b0u trong v\u00f9ng  CACHE  n\u00ean kh\u00f4ng c\u1ea7n ph\u1ea3i khai b\u00e1o h\u00e0m v\u1edbi  _ICACHE_FLASH_ATTR_  n\u1eefa. K\u1ec3 c\u1ea3 h\u00e0m th\u1ef1c thi ng\u1eaft c\u0169ng v\u1eady. N\u1ebfu c\u1ea7n ph\u00e2n b\u1ed5 h\u00e0m trong RAM (\u0111\u1ec3 g\u1ecdi nhi\u1ec1u l\u1ea7n) th\u00ec khai b\u00e1o h\u00e0m v\u1edbi  IRAM_ATTR  Network programming use socket, please do not bind to the same port  ???  Task \u01b0u ti\u00ean cao nh\u1ea5t c\u1ee7a RTOS SDK l\u00e0 14.  xTaskCreate  l\u00e0 h\u00e0m d\u00f9ng t\u1ea1o task trong FreeRTOS, tham kh\u1ea3o  API c\u1ee7a FreeRTOS  K\u00edch th\u01b0\u1edbc stack (ng\u0103n x\u1ebfp) cho task cho ph\u00e9p trong kho\u1ea3ng t\u1eeb 176 -> 512 bytes  N\u1ebfu trong task c\u00f3 bi\u1ebfn m\u1ea3ng local n\u00e0o \u0111\u00f3 v\u01b0\u1ee3t qu\u00e1 60 bytes th\u00ec khuy\u1ebfn c\u00e1o n\u00ean d\u00f9ng  os_malloc  v\u00e0  os_free , v\u00ec k\u00edch th\u01b0\u1edbc bi\u1ebfn c\u1ee5c b\u1ed9 qu\u00e1 l\u1edbn c\u00f3 th\u1ec3 g\u00e2y r\u00f2 r\u1ec9 \u0111\u1ebfn stack c\u1ee7a task,  M\u1ed9t s\u1ed1 m\u1ee9c \u01b0u ti\u00ean trong RTOS SDK: c\u1ee7a pp task l\u00e0 13, c\u1ee7a precise timer (ms) l\u00e0 12, c\u1ee7a TCP/IP task l\u00e0 10, c\u1ee7a freeRTOS timer l\u00e0 2 v\u00e0 task idle (r\u1ed7i) l\u00e0 0.   Ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 d\u00f9ng m\u1ee9c \u01b0u ti\u00ean t\u1eeb 1 -> 9  \u0110i\u1ec1u quan tr\u1ecdng cu\u1ed1i c\u00f9ng: l\u00e0 kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a/thay \u0111\u1ed5i file  FreeRTOSConfig.h  v\u00ec n\u00f3 s\u1ebd \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn th\u01b0 vi\u1ec7n RTOS b\u00ean trong SDK (ch\u1ec9 \u0111\u01b0\u1ee3c nh\u00e0 s\u1ea3n xu\u1ea5t c\u00f3 quy\u1ec1n thay \u0111\u1ed5i)",
            "title": "L\u01b0u \u00fd"
        },
        {
            "location": "/freertos-sdk/basic/introduction/",
            "text": "C\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 c\u1ea7n thi\u1ebft\n#\n\n\nT\u01b0\u01a1ng t\u1ef1 ph\u1ea7n c\u00e0i \u0111\u1eb7t cho ESP8266 NONOS-SDK, tham kh\u1ea3o \nt\u1ea1i \u0111\u00e2y\n\n\nT\u1ea3i RTOS SDK cho ESP8266\n#\n\n\n\n\nT\u1ea3i v\u1ec1 m\u00e1y & gi\u1ea3i n\u00e9n \nt\u1eeb \u0111\u00e2y\n\n\nHo\u1eb7c git clone t\u1eeb:\n\n\n\n\ngit clone https://github.com/espressif/ESP8266_RTOS_SDK.git\ncd ESP8266_RTOS_SDK\n# Nh\u00e1nh 1.4.x \u0111\u00e3 bao g\u1ed3m ph\u1ea7n v\u00e1 l\u1ed7i (patch) cho b\u1ea3n v1.4.0 (nh\u00e1nh master)\ngit checkout 1.4.x\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nV\u1edbi ng\u01b0\u1eddi d\u00f9ng Windows \u0111\u00e3 c\u00e0i \u0111\u1eb7t b\u1ed9 \nUnofficial Dev Kit\n th\u00ec RTOS SDK \u0111\u00e3 bao g\u1ed3m trong \nC:/Espressif/ESP8266_RTOS_SDK\n (m\u1eb7c \u0111\u1ecbnh) n\u00ean kh\u00f4ng c\u1ea7n t\u1ea3i b\u1ed9 RTOS SDK nh\u01b0 tr\u00ean n\u1eefa.\n\n\n\n\n\n\nThay \u0111\u1ed5i \nSDK_BASE\n trong Makefile c\u1ee7a m\u1ed7i d\u1ef1 \u00e1n tr\u1ecf t\u1edbi folder v\u1eeba gi\u1ea3i n\u00e9n/clone:\n\n\n\n\n# V\u00ed d\u1ee5 v\u1edbi ng\u01b0\u1eddi d\u00f9ng windows v\u00e0 unofficial dev kit\nSDK_BASE    ?= C:/Espressif/ESP8266_RTOS_SDK",
            "title": "C\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 c\u1ea7n thi\u1ebft"
        },
        {
            "location": "/freertos-sdk/basic/introduction/#cai-at-cong-cu-can-thiet",
            "text": "T\u01b0\u01a1ng t\u1ef1 ph\u1ea7n c\u00e0i \u0111\u1eb7t cho ESP8266 NONOS-SDK, tham kh\u1ea3o  t\u1ea1i \u0111\u00e2y",
            "title": "C\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 c\u1ea7n thi\u1ebft"
        },
        {
            "location": "/freertos-sdk/basic/introduction/#tai-rtos-sdk-cho-esp8266",
            "text": "T\u1ea3i v\u1ec1 m\u00e1y & gi\u1ea3i n\u00e9n  t\u1eeb \u0111\u00e2y  Ho\u1eb7c git clone t\u1eeb:   git clone https://github.com/espressif/ESP8266_RTOS_SDK.git\ncd ESP8266_RTOS_SDK\n# Nh\u00e1nh 1.4.x \u0111\u00e3 bao g\u1ed3m ph\u1ea7n v\u00e1 l\u1ed7i (patch) cho b\u1ea3n v1.4.0 (nh\u00e1nh master)\ngit checkout 1.4.x   L\u01b0u \u00fd  V\u1edbi ng\u01b0\u1eddi d\u00f9ng Windows \u0111\u00e3 c\u00e0i \u0111\u1eb7t b\u1ed9  Unofficial Dev Kit  th\u00ec RTOS SDK \u0111\u00e3 bao g\u1ed3m trong  C:/Espressif/ESP8266_RTOS_SDK  (m\u1eb7c \u0111\u1ecbnh) n\u00ean kh\u00f4ng c\u1ea7n t\u1ea3i b\u1ed9 RTOS SDK nh\u01b0 tr\u00ean n\u1eefa.    Thay \u0111\u1ed5i  SDK_BASE  trong Makefile c\u1ee7a m\u1ed7i d\u1ef1 \u00e1n tr\u1ecf t\u1edbi folder v\u1eeba gi\u1ea3i n\u00e9n/clone:   # V\u00ed d\u1ee5 v\u1edbi ng\u01b0\u1eddi d\u00f9ng windows v\u00e0 unofficial dev kit\nSDK_BASE    ?= C:/Espressif/ESP8266_RTOS_SDK",
            "title": "T\u1ea3i RTOS SDK cho ESP8266"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/",
            "text": "M\u00e3 ngu\u1ed3n v\u00ed d\u1ee5\n\n\nMakefile\n\n\nC\u1ea5u tr\u00fac ch\u01b0\u01a1ng tr\u00ecnh user_main.c\n\n\nBi\u00ean d\u1ecbch v\u00e0 ch\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh\n\n\nN\u00e2ng cao m\u1ed9t ch\u00fat\n\n\nGi\u1edbi thi\u1ec7u v\u1ec1 t\u00e1c v\u1ee5 (task) trong FreeRTOS\n\n\nC\u00e1c tr\u1ea1ng th\u00e1i (states) c\u1ee7a task\n\n\nC\u00e1c m\u1ee9c \u01b0u ti\u00ean (priorities) c\u1ee7a task\n\n\n\n\n\n\n\n\n\n\nM\u00e3 ngu\u1ed3n v\u00ed d\u1ee5\n#\n\n\ngit clone https://github.com/esp8266vn/esp-rtos-basic-task.git\n\n\n\n\nMakefile\n#\n\n\nC\u1ea5u tr\u00fac c\u1ee7a Makefile trong v\u00ed d\u1ee5 n\u00e0y c\u0169ng t\u01b0\u01a1ng t\u1ef1 \nMakefile cho d\u1ef1 \u00e1n ph\u1ee9c t\u1ea1p s\u1eed d\u1ee5ng NONOS-SDK\n.\nTuy nhi\u00ean, \u0111\u1ec3 s\u1eed d\u1ee5ng cho RTOS SDK th\u00ec m\u1ed9t s\u1ed1 bi\u1ebfn trong Makefile c\u1ea7n thay \u0111\u1ed5i nh\u01b0 sau:\n\n\n# \u0110\u01b0\u1eddng d\u1eabn t\u1edbi RTOS-SDK\nSDK_BASE    ?= C:/Espressif/ESP8266_RTOS_SDK\n...\n# Th\u01b0 vi\u1ec7n s\u1eed d\u1ee5ng \nSDK_LIBS = gcc hal phy pp net80211 wpa crypto main freertos lwip minic smartconfig\n...\n# Th\u01b0 m\u1ee5c \u0111\u01b0a v\u00e0o include\nSDK_INC = extra_include include include/espressif include/json include/udhcp include/lwip include/lwip/lwip include/lwip/ipv4 include/lwip/ipv6\n...\n# C\u1edd khi bi\u00ean d\u1ecbch C\nCFLAGS = -g -save-temps -std=gnu90 -Os -Wpointer-arith -Wundef -Werror \\\n         -Wl,-EL -fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals \\\n         -mno-serialize-volatile -D__ets__ -DICACHE_FLASH -DBUID_TIME=\\\"$(DATETIME)\\\" \n...\n# Comment-out d\u00f2ng n\u00e0y:\n# ifeq (\"$(USE_OPENSDK)\",\"yes\")\n# CFLAGS        += -DUSE_OPENSDK\n# else\n# CFLAGS        += -D_STDINT_H\n# endif\n\n\n\n\nC\u1ea5u tr\u00fac ch\u01b0\u01a1ng tr\u00ecnh \nuser_main.c\n#\n\n\nCh\u01b0\u01a1ng tr\u00ecnh c\u00f3 nhi\u1ec7m v\u1ee5 t\u1ea1o ra 2 task ri\u00eang bi\u1ec7t, m\u1ed9t d\u00f9ng \u0111\u1ec3 nh\u00e1y LED c\u00f3 chu k\u1ef3 200 \nticks\n, task c\u00f2n l\u1ea1i \u0111\u1ec3 in th\u00f4ng tin ra UART0 v\u1edbi chu k\u1ef3 1000 \nticks\n.\n\n\nMu\u1ed1n v\u1eady, tr\u01b0\u1edbc h\u1ebft ph\u1ea3i t\u1ea1o ra 2 h\u00e0m con, tu\u00e2n theo ti\u1ec1n khai b\u00e1o ki\u1ec3u \nTaskFunction_t\n c\u00f3 d\u1ea1ng \nvoid vTaskCode( void * pvParameters )\n cho task LED v\u00e0 UART:\n\n\nvoid task_led(void *pvParameters)\n{\n    for(;;){\n        vTaskDelay(100);\n        GPIO_OUTPUT_SET(LED_GPIO, led_state);\n        led_state ^=1;\n    }\n}\n\nvoid task_printf(void *pvParameters)\n{\n    for(;;){\n        printf(\"task_printf\\n\");\n        vTaskDelay(500);\n    }\n}\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\n\n\nB\u00ean trong h\u00e0m con ph\u1ea3i th\u1ef1c hi\u1ec7n v\u00f2ng l\u1eb7p v\u00f4 t\u1eadn (\ninfinite loop\n), kh\u00f4ng \u0111\u01b0\u1ee3c \nreturn\n.\n\n\nNgo\u00e0i ra, task c\u00f3 th\u1ec3 t\u1ef1 \nh\u1ee7y\n (delete) ch\u00ednh n\u00f3 khi c\u1ea7n (b\u1eb1ng h\u00e0m \nvTaskDelete( TaskHandle_t xTask )\n - xem v\u00ed d\u1ee5 b\u00ean d\u01b0\u1edbi)\n\n\n\n\n\n\n\n\nTick\n\n\n\n\nTick\n l\u00e0 h\u00e0nh \u0111\u1ed9ng khi timer ng\u1eaft \u0111\u1ecbnh k\u1ef3 d\u00f9ng trong nh\u00e2n FreeRTOS \u0111\u1ec3 MCU th\u1ef1c hi\u1ec7n chuy\u1ec3n \nng\u1eef c\u1ea3nh\n (\ncontext\n) khi chuy\u1ec3n qua l\u1ea1i gi\u1eefa c\u00e1c task v\u1edbi nhau, kh\u00e1i ni\u1ec7m \nth\u1ef1c hi\u1ec7n t\u00e1c v\u1ee5 song song, \u0111\u1ed3ng th\u1eddi, c\u00f9ng l\u00fac\n ch\u1ec9 mang t\u00ednh t\u01b0\u01a1ng \u0111\u1ed1i, v\u00ec RTOS th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\u00e0y 1 c\u00e1ch tu\u1ea7n t\u1ef1.\n\n\nGi\u00e1 tr\u1ecb c\u1ee7a \ntick\n kh\u00f4ng ph\u1ea3i l\u00fac n\u00e0o c\u0169ng l\u00e0 1ms, t\u00f9y thu\u1ed9c v\u00e0o c\u1ea5u h\u00ecnh khi \nport\n FreeRTOS l\u00ean t\u1eebng MCU kh\u00e1c nhau (trong tr\u01b0\u1eddng h\u1ee3p, \nconfigTICK_RATE_HZ\n c\u1ee7a RTOS-SDK c\u00f3 gi\u00e1 tr\u1ecb l\u00e0 100). C\u00f3 th\u1ec3 ki\u1ec3m tra ch\u00ednh x\u00e1c chu k\u1ef3 ms c\u1ee7a \ntick\n b\u1eb1ng macro \nportTICK_RATE_MS\n \u2013> \u0110\u1ec3 delay ch\u00ednh x\u00e1c \nt(ms)\n th\u00ec tham s\u1ed1 truy\u1ec1n cho \nvTaskDelay\n l\u00e0 \nt/portTICK_RATE_MS\n\n\n\n\n\n\nTrong h\u00e0m \nuser_init()\n c\u1ee7a ESP8266, sau khi kh\u1edfi t\u1ea1o c\u00e1c gi\u00e1 tr\u1ecb c\u1ea7n thi\u1ebft cho UART v\u00e0 ch\u00e2n GPIO Ouput \u0111\u1ec3 nh\u00e1y LED, s\u1eed d\u1ee5ng h\u00e0m \nxTaskCreate\n trong FreeRTOS \u0111\u1ec3 t\u1ea1o task th\u1ef1c thi 2 h\u00e0m con n\u00e0y, c\u00fa ph\u00e1p \nxTaskCreate\n:\n\n\nBaseType_t xTaskCreate(    TaskFunction_t pvTaskCode,\n                            const char * const pcName,\n                            unsigned short usStackDepth,\n                            void *pvParameters,\n                            UBaseType_t uxPriority,\n                            TaskHandle_t *pxCreatedTask\n                          );\n\n\n\n\nTrong \u0111\u00f3:\n\n\n\n\npvTaskCode\n: tr\u1ecf \u0111\u1ebfn h\u00e0m con c\u1ea7n th\u1ef1c hi\u1ec7n khi t\u1ea1o task\n\n\npcName\n: chu\u1ed7i m\u00f4 t\u1ea3 t\u00ean c\u1ee7a task n\u00e0y\n\n\nusStackDepth\n: \u0111\u1ed9 l\u1edbn c\u1ee7a con tr\u1ecf ng\u0103n x\u1ebfp, ch\u1ecdn sao cho l\u1edbn h\u01a1n \u0111\u1ed9 l\u1edbn c\u1ee7a con tr\u1ecf ng\u0103n x\u1ebfp khi th\u1ef1c hi\u1ec7n h\u00e0m con, v\u00ed d\u1ee5 nh\u01b0 khi h\u00e0m con g\u1ecdi c\u00e0ng nhi\u1ec1u h\u00e0m kh\u00e1c b\u00ean trong l\u1ed3ng nhau, khi \u0111\u00f3 \u0111\u1ed9 l\u1edbn n\u00e0y c\u00e0ng t\u0103ng.\n\n\npvParameters\n: tr\u1ecf \u0111\u1ebfn tham s\u1ed1 c\u1ea7n truy\u1ec1n v\u00e0o h\u00e0m con khi task kh\u1edfi t\u1ea1o.\n\n\nuxPriority\n: m\u1ee9c \u0111\u1ed9 \u01b0u ti\u00ean c\u1ee7a task.\n\n\npxCreatedTask\n: tr\u1ecf \u0111\u1ebfn bi\u1ebfn ki\u1ec3u \nTaskHandle_t\n, bi\u1ebfn s\u1ebd \u0111\u01b0\u1ee3c g\u00e1n sau khi g\u1ecdi \nxTaskCreate\n th\u00e0nh c\u00f4ng, xem nh\u01b0 \nID\n \u0111\u1ec3 ph\u00e2n bi\u1ec7t c\u00e1c task v\u1edbi nhau, v\u00e0 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho nhi\u1ec1u m\u1ee5c \u0111\u00edch, v\u00ed d\u1ee5 nh\u01b0 x\u00f3a task (d\u00f9ng h\u00e0m \nvTaskDelete( TaskHandle_t xTask )\n)\nS\u1eed d\u1ee5ng \nxTaskCreate\n \u0111\u1ec3 t\u1ea1o task LED v\u00e0 UART nh\u01b0 sau:\n\n\n\n\nxTaskCreate(task_led, \"task_led\", 256, NULL, 2, NULL);\nxTaskCreate(task_printf, \"task_printf\", 256, NULL, 2, NULL);\n\n\n\n\nBi\u00ean d\u1ecbch v\u00e0 ch\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh\n#\n\n\nmake clean\nmake\nmake flash\n\n\n\n\nN\u00e2ng cao m\u1ed9t ch\u00fat\n#\n\n\n\n\nIn v\u00e0i th\u00f4ng tin c\u01a1 b\u1ea3n v\u1ec1 \nportTICK_RATE_MS\n v\u00e0 \nconfigMAX_PRIORITIES\n\n\nV\u00ed d\u1ee5 v\u1ec1 \nvTaskDelete()\n cho \ntask_printf\n\n\n\n\ngit checkout task_delete\nmake clean\nmake\nmake flash\n\n\n\n\nGi\u1edbi thi\u1ec7u v\u1ec1 t\u00e1c v\u1ee5 (task) trong FreeRTOS\n#\n\n\nC\u00e1c tr\u1ea1ng th\u00e1i (states) c\u1ee7a task\n#\n\n\nC\u00f3 4 tr\u1ea1ng th\u00e1i: Running, Ready, Blocked v\u00e0 Suspended\n\n\n\n\nRunning: l\u00e0 tr\u1ea1ng th\u00e1i task \u0111ang \u0111\u01b0\u1ee3c MCU th\u1ef1c thi th\u1ef1c s\u1ef1, v\u00ec th\u1ebf trong m\u1ed9t th\u1eddi \u0111i\u1ec3m ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t task \u1edf tr\u1ea1ng th\u00e1i running.\n\n\nReady: l\u00e0 tr\u1ea1ng th\u00e1i task \u0111\u00e3 s\u1eb5n s\u00e0ng \u0111\u1ec3 th\u1ef1c thi (kh\u00f4ng b\u1ecb \nblocked\n ho\u1eb7c \nsuspended\n) nh\u01b0ng \u0111ang kh\u00f4ng \u0111\u01b0\u1ee3c MCU th\u1ef1c thi b\u1edfi v\u00ec MCU \u0111ang th\u1ef1c thi m\u1ed9t task kh\u00e1c.\n\n\nBlocked: task \u0111ang b\u1ecb \nblocked\n n\u1ebfu n\u00f3 \u0111ang \u0111\u1ee3i s\u1ef1 ki\u1ec7n (\nevent\n) b\u00ean ngo\u00e0i ho\u1eb7c s\u1ef1 ki\u1ec7n th\u1eddi gian. V\u00ed d\u1ee5: khi task g\u1ecdi h\u00e0m \nvTaskDelay()\n th\u00ec n\u00f3 s\u1ebd b\u1ecb \nblocked\n cho \u0111\u1ebfn khi h\u1ebft th\u1eddi gian delay (s\u1ef1 ki\u1ec7n th\u1eddi gian). Ho\u1eb7c task c\u00f3 th\u1ec3 b\u1ecb \nblocked\n \u0111\u1ec3 \u0111\u1ee3i m\u1ed9t h\u00e0ng \u0111\u1ee3i (queue), semaphore, notification\u2026 n\u00e0o \u0111\u00f3. Th\u00f4ng th\u01b0\u1eddng, task b\u1ecb \nblocked\n trong kho\u1ea3ng th\u00f2i gian qu\u00e1 h\u1ea1n \ntimeout\n cho tr\u01b0\u1edbc, v\u00ec th\u1ebf task s\u1ebd lu\u00f4n \u0111\u01b0\u1ee3c \nunblocked\n (n\u1ebfu c\u00f3 s\u1ef1 ki\u1ec7n b\u00ean ngo\u00e0i) ho\u1eb7c \ntimeout\n n\u1ebfu h\u1ebft th\u1eddi gian ch\u1edd.\n\n\nSuspended: C\u0169ng gi\u1ed1ng nh\u01b0 tr\u1ea1ng th\u00e1i \nblocked\n nh\u01b0ng kh\u00f4ng c\u00f3 th\u1eddi gian \ntimeout\n, v\u00ec v\u1eady ch\u1ec9 c\u00f3 th\u1ec3 \nenter\n ho\u1eb7c \nexit\n kh\u1ecfi tr\u1ea1ng th\u00e1i \nsuspended\n b\u1edfi h\u00e0m g\u1ecdi t\u1eeb b\u00ean ngo\u00e0i t\u01b0\u01a1ng \u1ee9ng l\u00e0  \nvTaskSuspend()\n v\u00e0 \nxTaskResume()\n \n\n\n\n\n\n\nC\u00e1c m\u1ee9c \u01b0u ti\u00ean (priorities) c\u1ee7a task\n#\n\n\nM\u1ed7i task \u0111\u01b0\u1ee3c t\u1ea1o ra v\u1edbi m\u1ee9c \u01b0u ti\u00ean \u0111\u01b0\u1ee3c g\u00e1n t\u1eeb 0 \u0111\u1ebfn gi\u00e1 tr\u1ecb \n(configMAX_PRIORITIES - 1)\n, v\u1edbi \nconfigMAX_PRIORITIES\n l\u00e0 gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong \nFreeRTOSConfig.h\n (v\u1edbi b\u1ea3n RTOS-SDK v1.4 \u0111ang s\u1eed d\u1ee5ng, \nconfigMAX_PRIORITIES\n l\u00e0 15)\n\n\nTask \u0111ang \u1edf tr\u1ea1ng th\u00e1i \nready\n c\u00f3 \u01b0u ti\u00ean cao h\u01a1n s\u1ebd \u0111\u01b0\u1ee3c ch\u1ecdn \u0111\u1ec3 th\u1ef1c thi (chuy\u1ec3n sang \nrunning\n) trong m\u1ed7i l\u1ea7n \ntick\n\n\nN\u1ebfu c\u00e1c task c\u00f3 c\u00f9ng m\u1ee9c \u01b0u ti\u00ean? Trong tr\u01b0\u1eddng h\u1ee3p RTOS s\u1ebd chia \u0111\u1ec1u ra x\u1eed l\u00fd (do gi\u00e1 tr\u1ecb \nconfigUSE_TIME_SLICING\n \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\u00e0 1 trong b\u1ea3n RTOS-SDK n\u00e0y)",
            "title": "Task c\u01a1 b\u1ea3n"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#ma-nguon-vi-du",
            "text": "git clone https://github.com/esp8266vn/esp-rtos-basic-task.git",
            "title": "M\u00e3 ngu\u1ed3n v\u00ed d\u1ee5"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#makefile",
            "text": "C\u1ea5u tr\u00fac c\u1ee7a Makefile trong v\u00ed d\u1ee5 n\u00e0y c\u0169ng t\u01b0\u01a1ng t\u1ef1  Makefile cho d\u1ef1 \u00e1n ph\u1ee9c t\u1ea1p s\u1eed d\u1ee5ng NONOS-SDK .\nTuy nhi\u00ean, \u0111\u1ec3 s\u1eed d\u1ee5ng cho RTOS SDK th\u00ec m\u1ed9t s\u1ed1 bi\u1ebfn trong Makefile c\u1ea7n thay \u0111\u1ed5i nh\u01b0 sau:  # \u0110\u01b0\u1eddng d\u1eabn t\u1edbi RTOS-SDK\nSDK_BASE    ?= C:/Espressif/ESP8266_RTOS_SDK\n...\n# Th\u01b0 vi\u1ec7n s\u1eed d\u1ee5ng \nSDK_LIBS = gcc hal phy pp net80211 wpa crypto main freertos lwip minic smartconfig\n...\n# Th\u01b0 m\u1ee5c \u0111\u01b0a v\u00e0o include\nSDK_INC = extra_include include include/espressif include/json include/udhcp include/lwip include/lwip/lwip include/lwip/ipv4 include/lwip/ipv6\n...\n# C\u1edd khi bi\u00ean d\u1ecbch C\nCFLAGS = -g -save-temps -std=gnu90 -Os -Wpointer-arith -Wundef -Werror \\\n         -Wl,-EL -fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals \\\n         -mno-serialize-volatile -D__ets__ -DICACHE_FLASH -DBUID_TIME=\\\"$(DATETIME)\\\" \n...\n# Comment-out d\u00f2ng n\u00e0y:\n# ifeq (\"$(USE_OPENSDK)\",\"yes\")\n# CFLAGS        += -DUSE_OPENSDK\n# else\n# CFLAGS        += -D_STDINT_H\n# endif",
            "title": "Makefile"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#cau-truc-chuong-trinh-user_mainc",
            "text": "Ch\u01b0\u01a1ng tr\u00ecnh c\u00f3 nhi\u1ec7m v\u1ee5 t\u1ea1o ra 2 task ri\u00eang bi\u1ec7t, m\u1ed9t d\u00f9ng \u0111\u1ec3 nh\u00e1y LED c\u00f3 chu k\u1ef3 200  ticks , task c\u00f2n l\u1ea1i \u0111\u1ec3 in th\u00f4ng tin ra UART0 v\u1edbi chu k\u1ef3 1000  ticks .  Mu\u1ed1n v\u1eady, tr\u01b0\u1edbc h\u1ebft ph\u1ea3i t\u1ea1o ra 2 h\u00e0m con, tu\u00e2n theo ti\u1ec1n khai b\u00e1o ki\u1ec3u  TaskFunction_t  c\u00f3 d\u1ea1ng  void vTaskCode( void * pvParameters )  cho task LED v\u00e0 UART:  void task_led(void *pvParameters)\n{\n    for(;;){\n        vTaskDelay(100);\n        GPIO_OUTPUT_SET(LED_GPIO, led_state);\n        led_state ^=1;\n    }\n}\n\nvoid task_printf(void *pvParameters)\n{\n    for(;;){\n        printf(\"task_printf\\n\");\n        vTaskDelay(500);\n    }\n}   L\u01b0u \u00fd   B\u00ean trong h\u00e0m con ph\u1ea3i th\u1ef1c hi\u1ec7n v\u00f2ng l\u1eb7p v\u00f4 t\u1eadn ( infinite loop ), kh\u00f4ng \u0111\u01b0\u1ee3c  return .  Ngo\u00e0i ra, task c\u00f3 th\u1ec3 t\u1ef1  h\u1ee7y  (delete) ch\u00ednh n\u00f3 khi c\u1ea7n (b\u1eb1ng h\u00e0m  vTaskDelete( TaskHandle_t xTask )  - xem v\u00ed d\u1ee5 b\u00ean d\u01b0\u1edbi)     Tick   Tick  l\u00e0 h\u00e0nh \u0111\u1ed9ng khi timer ng\u1eaft \u0111\u1ecbnh k\u1ef3 d\u00f9ng trong nh\u00e2n FreeRTOS \u0111\u1ec3 MCU th\u1ef1c hi\u1ec7n chuy\u1ec3n  ng\u1eef c\u1ea3nh  ( context ) khi chuy\u1ec3n qua l\u1ea1i gi\u1eefa c\u00e1c task v\u1edbi nhau, kh\u00e1i ni\u1ec7m  th\u1ef1c hi\u1ec7n t\u00e1c v\u1ee5 song song, \u0111\u1ed3ng th\u1eddi, c\u00f9ng l\u00fac  ch\u1ec9 mang t\u00ednh t\u01b0\u01a1ng \u0111\u1ed1i, v\u00ec RTOS th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\u00e0y 1 c\u00e1ch tu\u1ea7n t\u1ef1.  Gi\u00e1 tr\u1ecb c\u1ee7a  tick  kh\u00f4ng ph\u1ea3i l\u00fac n\u00e0o c\u0169ng l\u00e0 1ms, t\u00f9y thu\u1ed9c v\u00e0o c\u1ea5u h\u00ecnh khi  port  FreeRTOS l\u00ean t\u1eebng MCU kh\u00e1c nhau (trong tr\u01b0\u1eddng h\u1ee3p,  configTICK_RATE_HZ  c\u1ee7a RTOS-SDK c\u00f3 gi\u00e1 tr\u1ecb l\u00e0 100). C\u00f3 th\u1ec3 ki\u1ec3m tra ch\u00ednh x\u00e1c chu k\u1ef3 ms c\u1ee7a  tick  b\u1eb1ng macro  portTICK_RATE_MS  \u2013> \u0110\u1ec3 delay ch\u00ednh x\u00e1c  t(ms)  th\u00ec tham s\u1ed1 truy\u1ec1n cho  vTaskDelay  l\u00e0  t/portTICK_RATE_MS    Trong h\u00e0m  user_init()  c\u1ee7a ESP8266, sau khi kh\u1edfi t\u1ea1o c\u00e1c gi\u00e1 tr\u1ecb c\u1ea7n thi\u1ebft cho UART v\u00e0 ch\u00e2n GPIO Ouput \u0111\u1ec3 nh\u00e1y LED, s\u1eed d\u1ee5ng h\u00e0m  xTaskCreate  trong FreeRTOS \u0111\u1ec3 t\u1ea1o task th\u1ef1c thi 2 h\u00e0m con n\u00e0y, c\u00fa ph\u00e1p  xTaskCreate :  BaseType_t xTaskCreate(    TaskFunction_t pvTaskCode,\n                            const char * const pcName,\n                            unsigned short usStackDepth,\n                            void *pvParameters,\n                            UBaseType_t uxPriority,\n                            TaskHandle_t *pxCreatedTask\n                          );  Trong \u0111\u00f3:   pvTaskCode : tr\u1ecf \u0111\u1ebfn h\u00e0m con c\u1ea7n th\u1ef1c hi\u1ec7n khi t\u1ea1o task  pcName : chu\u1ed7i m\u00f4 t\u1ea3 t\u00ean c\u1ee7a task n\u00e0y  usStackDepth : \u0111\u1ed9 l\u1edbn c\u1ee7a con tr\u1ecf ng\u0103n x\u1ebfp, ch\u1ecdn sao cho l\u1edbn h\u01a1n \u0111\u1ed9 l\u1edbn c\u1ee7a con tr\u1ecf ng\u0103n x\u1ebfp khi th\u1ef1c hi\u1ec7n h\u00e0m con, v\u00ed d\u1ee5 nh\u01b0 khi h\u00e0m con g\u1ecdi c\u00e0ng nhi\u1ec1u h\u00e0m kh\u00e1c b\u00ean trong l\u1ed3ng nhau, khi \u0111\u00f3 \u0111\u1ed9 l\u1edbn n\u00e0y c\u00e0ng t\u0103ng.  pvParameters : tr\u1ecf \u0111\u1ebfn tham s\u1ed1 c\u1ea7n truy\u1ec1n v\u00e0o h\u00e0m con khi task kh\u1edfi t\u1ea1o.  uxPriority : m\u1ee9c \u0111\u1ed9 \u01b0u ti\u00ean c\u1ee7a task.  pxCreatedTask : tr\u1ecf \u0111\u1ebfn bi\u1ebfn ki\u1ec3u  TaskHandle_t , bi\u1ebfn s\u1ebd \u0111\u01b0\u1ee3c g\u00e1n sau khi g\u1ecdi  xTaskCreate  th\u00e0nh c\u00f4ng, xem nh\u01b0  ID  \u0111\u1ec3 ph\u00e2n bi\u1ec7t c\u00e1c task v\u1edbi nhau, v\u00e0 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho nhi\u1ec1u m\u1ee5c \u0111\u00edch, v\u00ed d\u1ee5 nh\u01b0 x\u00f3a task (d\u00f9ng h\u00e0m  vTaskDelete( TaskHandle_t xTask ) )\nS\u1eed d\u1ee5ng  xTaskCreate  \u0111\u1ec3 t\u1ea1o task LED v\u00e0 UART nh\u01b0 sau:   xTaskCreate(task_led, \"task_led\", 256, NULL, 2, NULL);\nxTaskCreate(task_printf, \"task_printf\", 256, NULL, 2, NULL);",
            "title": "C\u1ea5u tr\u00fac ch\u01b0\u01a1ng tr\u00ecnh user_main.c"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#bien-dich-va-chay-chuong-trinh",
            "text": "make clean\nmake\nmake flash",
            "title": "Bi\u00ean d\u1ecbch v\u00e0 ch\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#nang-cao-mot-chut",
            "text": "In v\u00e0i th\u00f4ng tin c\u01a1 b\u1ea3n v\u1ec1  portTICK_RATE_MS  v\u00e0  configMAX_PRIORITIES  V\u00ed d\u1ee5 v\u1ec1  vTaskDelete()  cho  task_printf   git checkout task_delete\nmake clean\nmake\nmake flash",
            "title": "N\u00e2ng cao m\u1ed9t ch\u00fat"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#gioi-thieu-ve-tac-vu-task-trong-freertos",
            "text": "",
            "title": "Gi\u1edbi thi\u1ec7u v\u1ec1 t\u00e1c v\u1ee5 (task) trong FreeRTOS"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#cac-trang-thai-states-cua-task",
            "text": "C\u00f3 4 tr\u1ea1ng th\u00e1i: Running, Ready, Blocked v\u00e0 Suspended   Running: l\u00e0 tr\u1ea1ng th\u00e1i task \u0111ang \u0111\u01b0\u1ee3c MCU th\u1ef1c thi th\u1ef1c s\u1ef1, v\u00ec th\u1ebf trong m\u1ed9t th\u1eddi \u0111i\u1ec3m ch\u1ec9 c\u00f3 duy nh\u1ea5t m\u1ed9t task \u1edf tr\u1ea1ng th\u00e1i running.  Ready: l\u00e0 tr\u1ea1ng th\u00e1i task \u0111\u00e3 s\u1eb5n s\u00e0ng \u0111\u1ec3 th\u1ef1c thi (kh\u00f4ng b\u1ecb  blocked  ho\u1eb7c  suspended ) nh\u01b0ng \u0111ang kh\u00f4ng \u0111\u01b0\u1ee3c MCU th\u1ef1c thi b\u1edfi v\u00ec MCU \u0111ang th\u1ef1c thi m\u1ed9t task kh\u00e1c.  Blocked: task \u0111ang b\u1ecb  blocked  n\u1ebfu n\u00f3 \u0111ang \u0111\u1ee3i s\u1ef1 ki\u1ec7n ( event ) b\u00ean ngo\u00e0i ho\u1eb7c s\u1ef1 ki\u1ec7n th\u1eddi gian. V\u00ed d\u1ee5: khi task g\u1ecdi h\u00e0m  vTaskDelay()  th\u00ec n\u00f3 s\u1ebd b\u1ecb  blocked  cho \u0111\u1ebfn khi h\u1ebft th\u1eddi gian delay (s\u1ef1 ki\u1ec7n th\u1eddi gian). Ho\u1eb7c task c\u00f3 th\u1ec3 b\u1ecb  blocked  \u0111\u1ec3 \u0111\u1ee3i m\u1ed9t h\u00e0ng \u0111\u1ee3i (queue), semaphore, notification\u2026 n\u00e0o \u0111\u00f3. Th\u00f4ng th\u01b0\u1eddng, task b\u1ecb  blocked  trong kho\u1ea3ng th\u00f2i gian qu\u00e1 h\u1ea1n  timeout  cho tr\u01b0\u1edbc, v\u00ec th\u1ebf task s\u1ebd lu\u00f4n \u0111\u01b0\u1ee3c  unblocked  (n\u1ebfu c\u00f3 s\u1ef1 ki\u1ec7n b\u00ean ngo\u00e0i) ho\u1eb7c  timeout  n\u1ebfu h\u1ebft th\u1eddi gian ch\u1edd.  Suspended: C\u0169ng gi\u1ed1ng nh\u01b0 tr\u1ea1ng th\u00e1i  blocked  nh\u01b0ng kh\u00f4ng c\u00f3 th\u1eddi gian  timeout , v\u00ec v\u1eady ch\u1ec9 c\u00f3 th\u1ec3  enter  ho\u1eb7c  exit  kh\u1ecfi tr\u1ea1ng th\u00e1i  suspended  b\u1edfi h\u00e0m g\u1ecdi t\u1eeb b\u00ean ngo\u00e0i t\u01b0\u01a1ng \u1ee9ng l\u00e0   vTaskSuspend()  v\u00e0  xTaskResume()",
            "title": "C\u00e1c tr\u1ea1ng th\u00e1i (states) c\u1ee7a task"
        },
        {
            "location": "/freertos-sdk/basic/basic-task/#cac-muc-uu-tien-priorities-cua-task",
            "text": "M\u1ed7i task \u0111\u01b0\u1ee3c t\u1ea1o ra v\u1edbi m\u1ee9c \u01b0u ti\u00ean \u0111\u01b0\u1ee3c g\u00e1n t\u1eeb 0 \u0111\u1ebfn gi\u00e1 tr\u1ecb  (configMAX_PRIORITIES - 1) , v\u1edbi  configMAX_PRIORITIES  l\u00e0 gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong  FreeRTOSConfig.h  (v\u1edbi b\u1ea3n RTOS-SDK v1.4 \u0111ang s\u1eed d\u1ee5ng,  configMAX_PRIORITIES  l\u00e0 15)  Task \u0111ang \u1edf tr\u1ea1ng th\u00e1i  ready  c\u00f3 \u01b0u ti\u00ean cao h\u01a1n s\u1ebd \u0111\u01b0\u1ee3c ch\u1ecdn \u0111\u1ec3 th\u1ef1c thi (chuy\u1ec3n sang  running ) trong m\u1ed7i l\u1ea7n  tick  N\u1ebfu c\u00e1c task c\u00f3 c\u00f9ng m\u1ee9c \u01b0u ti\u00ean? Trong tr\u01b0\u1eddng h\u1ee3p RTOS s\u1ebd chia \u0111\u1ec1u ra x\u1eed l\u00fd (do gi\u00e1 tr\u1ecb  configUSE_TIME_SLICING  \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\u00e0 1 trong b\u1ea3n RTOS-SDK n\u00e0y)",
            "title": "C\u00e1c m\u1ee9c \u01b0u ti\u00ean (priorities) c\u1ee7a task"
        },
        {
            "location": "/freertos-sdk/basic/software-timer/",
            "text": "Software Timer trong FreeRTOS\n#",
            "title": "Software Timer"
        },
        {
            "location": "/freertos-sdk/basic/software-timer/#software-timer-trong-freertos",
            "text": "",
            "title": "Software Timer trong FreeRTOS"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/",
            "text": "V\u1ea5n \u0111\u1ec1 \u0111\u1ed3ng b\u1ed9 / trao \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa c\u00e1c task\n\n\nH\u00e0ng \u0111\u1ee3i (queue)\n\n\nV\u00ed d\u1ee5\n\n\nT\u1ea1o queue\n\n\nG\u1eedi th\u00f4ng \u0111i\u1ec7p l\u00ean queue\n\n\nNh\u1eadn th\u00f4ng \u0111i\u1ec7p t\u1eeb queue\n\n\nCh\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh\n\n\n\n\n\n\nSemaphore\n\n\nMutex\n\n\n\n\n\n\nV\u1ea5n \u0111\u1ec1 \u0111\u1ed3ng b\u1ed9 / trao \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa c\u00e1c task\n#\n\n\nM\u1ed7i task th\u1ef1c hi\u1ec7n t\u00e1c v\u1ee5 ri\u00eang c\u1ee7a m\u00ecnh, ch\u00fang c\u00f3 kh\u00f4ng gian b\u1ed9 nh\u1edb ri\u00eang v\u00e0 ho\u00e0n to\u00e0n \u0111\u1ed9c l\u1eadp v\u1edbi nhau. \n\n\n\n\nV\u1eady l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 ph\u1ed1i h\u1ee3p ch\u00fang trong m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh l\u1edbn h\u01a1n, n\u1ebfu x\u00e9t m\u1ed7i task nh\u01b0 l\u00e0 m\u1ed9t module?\n\n\nN\u1ebfu task n\u00e0y mu\u1ed1n giao ti\u1ebfp/trao \u0111\u1ed5i th\u00f4ng tin v\u1edbi task kia th\u00ec l\u00e0m th\u1ebf n\u00e0o?\n\n\nN\u1ebfu 2 task c\u00f9ng m\u1ee9c \u01b0u ti\u00ean, c\u00f9ng ch\u1ea1y song song v\u00e0 c\u00f9ng mu\u1ed1n truy c\u1eadp \u0111\u1ebfn m\u1ed9t t\u00e0i nguy\u00ean chung th\u00ec l\u00e0m sao \u0111\u1ec3 tr\u00e1nh xung \u0111\u1ed9t?\n\n\n\n\nT\u1ea5t c\u1ea3 ch\u1ec9 g\u00f3i g\u1ecdn trong h\u00e0ng \u0111\u1ee3i (queue), semaphore v\u00e0 mutex\n\n\nH\u00e0ng \u0111\u1ee3i (queue)\n#\n\n\nHo\u1ea1t \u0111\u1ed9ng theo c\u01a1 ch\u1ebf FIFO (First In - First Out) d\u00f9ng trong FreeRTOS \u0111\u1ec3 trao \u0111\u1ed5i th\u00f4ng \u0111i\u1ec7p (message) gi\u1eefa c\u00e1c task v\u1edbi nhau.\n\n\n\n\nV\u00ed d\u1ee5\n#\n\n\nS\u1eed d\u1ee5ng l\u1ea1i v\u00ed d\u1ee5 \nesp-rtos-basic-task\n, nh\u01b0ng 2 task s\u1eeda l\u1ea1i theo m\u1ee5c \u0111\u00edch sau:\n\n\n\n\ntask_led\n: nh\u00e1y led, \u0111\u1ebfm bi\u1ebfn \ncounter\n, \u0111\u1ebfm xong th\u00ec g\u1eedi gi\u00e1 tr\u1ecb bi\u1ebfn \u0111\u1ebfm n\u00e0y qua queue cho \ntask_printf\n in ra gi\u00e1 tr\u1ecb.\n\n\ntask_printf\n: ch\u1ec9 ch\u1edd  c\u00f3 th\u00f4ng \u0111i\u1ec7p m\u1edbi tr\u00ean queue th\u00ec l\u1ea5y th\u00f4ng \u0111i\u1ec7p n\u00e0y ra kh\u1ecfi queue v\u00e0 in gi\u00e1 tr\u1ecb n\u00e0y!\n\n\n\n\nM\u00e3 ngu\u1ed3n ch\u01b0\u01a1ng tr\u00ecnh:\n\n\ngit clone https://github.com/esp8266vn/esp-rtos-basic-queue-sem-mutex.git\ncd esp-rtos-basic-queue-sem-mutex\n\n\n\n\n\u0110\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c queue ph\u1ea3i \n#include \"freertos/queue.h\"\n\n\nT\u1ea1o queue\n#\n\n\nC\u00fa ph\u00e1p:\n\n\n xQueueHandle xQueueCreate( UBaseType_t uxQueueLength,\n                             UBaseType_t uxItemSize );\n\n\n\n\n\n\nuxQueueLength\n: k\u00edch th\u01b0\u1edbc/s\u1ed1 ph\u1ea7n t\u1eed t\u1ed1i \u0111a tr\u00ean queue\n\n\nuxItemSize\n: k\u00edch th\u01b0\u1edbc c\u1ee7a m\u1ed7i ph\u1ea7n t\u1eed, t\u00f9y thu\u1ed9c v\u00e0o \nki\u1ec3u\n d\u1eef li\u1ec7u c\u1ee7a ph\u1ea7n t\u1eed tr\u00ean queue.\n\n\n\n\nTr\u01b0\u1eddng h\u1ee3p n\u00e0y, bi\u1ebfn \ncounter\n l\u00e0 \nuint32_t\n.\nGi\u1ea3 s\u1eed c\u1ea7n t\u1ed1i \u0111a 10 ph\u1ea7n t\u1eed tr\u00ean queue.\nKhai b\u00e1o v\u00e0 t\u1ea1o nh\u01b0 sau:\n\n\nxQueueHandle xCounterQueue;\n// ...\nxCounterQueue = xQueueCreate( 10, sizeof(uint32_t));\n\n\n\n\nG\u1eedi th\u00f4ng \u0111i\u1ec7p l\u00ean queue\n#\n\n\nTheo c\u00fa ph\u00e1p:\n\n\nBaseType_t xQueueSend(\n                            QueueHandle_t xQueue,\n                            const void * pvItemToQueue,\n                            TickType_t xTicksToWait\n                         );\n\n\n\n\n\n\nxQueue\n: queue handle (\nxCounterQueue\n)\n\n\npvItemToQueue\n: tr\u1ecf \u0111\u1ebfn ph\u1ea7n t\u1eed/th\u00f4ng \u0111i\u1ec7p c\u1ea7n g\u1eedi l\u00ean queue (\n&counter\n)\n\n\nxTicksToWait\n: th\u1eddi gian ch\u1edd t\u1ed1i \u0111a (\ntimeout\n - t\u00ednh b\u1eb1ng \ntick\n) trong tr\u01b0\u1eddng h\u1ee3p queue b\u1ecb \u0111\u1ea7y kh\u00f4ng g\u1eedi th\u00eam v\u00e0o \u0111\u01b0\u1ee3c.\n\n\n\n\ntask_led\n s\u1ebd l\u00e0m nhi\u1ec7m v\u1ee5 n\u00e0y:\n\n\nvoid task_led(void *pvParameters)\n{\n    uint32_t counter = 0;\n    for(;;){\n        vTaskDelay(100);\n        GPIO_OUTPUT_SET(LED_GPIO, led_state);\n        led_state ^=1;\n        counter++;\n        if( xQueueSend( xCounterQueue,( void * ) &counter, 10 ) != pdPASS )\n        {\n            // Failed to send msg to queue, TODO handle\n        }\n    }\n}\n\n\n\n\nNh\u1eadn th\u00f4ng \u0111i\u1ec7p t\u1eeb queue\n#\n\n\nTheo c\u00fa ph\u00e1p:\n\n\nBaseType_t xQueueReceive(\n                               QueueHandle_t xQueue,\n                               void *pvBuffer,\n                               TickType_t xTicksToWait\n                            );\n\n\n\n\n\n\nxQueue\n: queue handle (\nxCounterQueue\n)\n\n\npvBuffer\n: tr\u1ecf \u0111\u1ebfn n\u01a1i s\u1ebd ch\u1ee9a th\u00f4ng \u0111i\u1ec7p l\u1ea5y t\u1eeb queue xu\u1ed1ng.\n\n\nxTicksToWait\n: timeout trong tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eeb n\u00e0o tr\u00ean queue (\u0111ang tr\u1ed1ng)\n\n\n\n\ntask_printf\n s\u1ebd th\u1ef1c hi\u1ec7n nhi\u1ec7m v\u1ee5 n\u00e0y:\n\n\nvoid task_printf(void *pvParameters)\n{\n    uint32_t receiveCounter;\n\n    printf(\"task_printf started\\n\");\n\n    for(;;){\n        if( xQueueReceive( xCounterQueue, &( receiveCounter ), 100 ) )\n        {\n           printf(\"task_printf, received counter = %u\\n\", receiveCounter);\n        }\n    }\n}\n\n\n\n\nCh\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh\n#\n\n\nmake clean\nmake\nmake flash\n\n\n\n\nSemaphore\n#\n\n\nMutex\n#",
            "title": "\u0110\u1ed3ng b\u1ed9 / trao \u0111\u1ed5i d\u1eef li\u1ec7u"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#van-e-ong-bo-trao-oi-du-lieu-giua-cac-task",
            "text": "M\u1ed7i task th\u1ef1c hi\u1ec7n t\u00e1c v\u1ee5 ri\u00eang c\u1ee7a m\u00ecnh, ch\u00fang c\u00f3 kh\u00f4ng gian b\u1ed9 nh\u1edb ri\u00eang v\u00e0 ho\u00e0n to\u00e0n \u0111\u1ed9c l\u1eadp v\u1edbi nhau.    V\u1eady l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 ph\u1ed1i h\u1ee3p ch\u00fang trong m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh l\u1edbn h\u01a1n, n\u1ebfu x\u00e9t m\u1ed7i task nh\u01b0 l\u00e0 m\u1ed9t module?  N\u1ebfu task n\u00e0y mu\u1ed1n giao ti\u1ebfp/trao \u0111\u1ed5i th\u00f4ng tin v\u1edbi task kia th\u00ec l\u00e0m th\u1ebf n\u00e0o?  N\u1ebfu 2 task c\u00f9ng m\u1ee9c \u01b0u ti\u00ean, c\u00f9ng ch\u1ea1y song song v\u00e0 c\u00f9ng mu\u1ed1n truy c\u1eadp \u0111\u1ebfn m\u1ed9t t\u00e0i nguy\u00ean chung th\u00ec l\u00e0m sao \u0111\u1ec3 tr\u00e1nh xung \u0111\u1ed9t?   T\u1ea5t c\u1ea3 ch\u1ec9 g\u00f3i g\u1ecdn trong h\u00e0ng \u0111\u1ee3i (queue), semaphore v\u00e0 mutex",
            "title": "V\u1ea5n \u0111\u1ec1 \u0111\u1ed3ng b\u1ed9 / trao \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa c\u00e1c task"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#hang-oi-queue",
            "text": "Ho\u1ea1t \u0111\u1ed9ng theo c\u01a1 ch\u1ebf FIFO (First In - First Out) d\u00f9ng trong FreeRTOS \u0111\u1ec3 trao \u0111\u1ed5i th\u00f4ng \u0111i\u1ec7p (message) gi\u1eefa c\u00e1c task v\u1edbi nhau.",
            "title": "H\u00e0ng \u0111\u1ee3i (queue)"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#vi-du",
            "text": "S\u1eed d\u1ee5ng l\u1ea1i v\u00ed d\u1ee5  esp-rtos-basic-task , nh\u01b0ng 2 task s\u1eeda l\u1ea1i theo m\u1ee5c \u0111\u00edch sau:   task_led : nh\u00e1y led, \u0111\u1ebfm bi\u1ebfn  counter , \u0111\u1ebfm xong th\u00ec g\u1eedi gi\u00e1 tr\u1ecb bi\u1ebfn \u0111\u1ebfm n\u00e0y qua queue cho  task_printf  in ra gi\u00e1 tr\u1ecb.  task_printf : ch\u1ec9 ch\u1edd  c\u00f3 th\u00f4ng \u0111i\u1ec7p m\u1edbi tr\u00ean queue th\u00ec l\u1ea5y th\u00f4ng \u0111i\u1ec7p n\u00e0y ra kh\u1ecfi queue v\u00e0 in gi\u00e1 tr\u1ecb n\u00e0y!   M\u00e3 ngu\u1ed3n ch\u01b0\u01a1ng tr\u00ecnh:  git clone https://github.com/esp8266vn/esp-rtos-basic-queue-sem-mutex.git\ncd esp-rtos-basic-queue-sem-mutex  \u0110\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c queue ph\u1ea3i  #include \"freertos/queue.h\"",
            "title": "V\u00ed d\u1ee5"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#tao-queue",
            "text": "C\u00fa ph\u00e1p:   xQueueHandle xQueueCreate( UBaseType_t uxQueueLength,\n                             UBaseType_t uxItemSize );   uxQueueLength : k\u00edch th\u01b0\u1edbc/s\u1ed1 ph\u1ea7n t\u1eed t\u1ed1i \u0111a tr\u00ean queue  uxItemSize : k\u00edch th\u01b0\u1edbc c\u1ee7a m\u1ed7i ph\u1ea7n t\u1eed, t\u00f9y thu\u1ed9c v\u00e0o  ki\u1ec3u  d\u1eef li\u1ec7u c\u1ee7a ph\u1ea7n t\u1eed tr\u00ean queue.   Tr\u01b0\u1eddng h\u1ee3p n\u00e0y, bi\u1ebfn  counter  l\u00e0  uint32_t .\nGi\u1ea3 s\u1eed c\u1ea7n t\u1ed1i \u0111a 10 ph\u1ea7n t\u1eed tr\u00ean queue.\nKhai b\u00e1o v\u00e0 t\u1ea1o nh\u01b0 sau:  xQueueHandle xCounterQueue;\n// ...\nxCounterQueue = xQueueCreate( 10, sizeof(uint32_t));",
            "title": "T\u1ea1o queue"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#gui-thong-iep-len-queue",
            "text": "Theo c\u00fa ph\u00e1p:  BaseType_t xQueueSend(\n                            QueueHandle_t xQueue,\n                            const void * pvItemToQueue,\n                            TickType_t xTicksToWait\n                         );   xQueue : queue handle ( xCounterQueue )  pvItemToQueue : tr\u1ecf \u0111\u1ebfn ph\u1ea7n t\u1eed/th\u00f4ng \u0111i\u1ec7p c\u1ea7n g\u1eedi l\u00ean queue ( &counter )  xTicksToWait : th\u1eddi gian ch\u1edd t\u1ed1i \u0111a ( timeout  - t\u00ednh b\u1eb1ng  tick ) trong tr\u01b0\u1eddng h\u1ee3p queue b\u1ecb \u0111\u1ea7y kh\u00f4ng g\u1eedi th\u00eam v\u00e0o \u0111\u01b0\u1ee3c.   task_led  s\u1ebd l\u00e0m nhi\u1ec7m v\u1ee5 n\u00e0y:  void task_led(void *pvParameters)\n{\n    uint32_t counter = 0;\n    for(;;){\n        vTaskDelay(100);\n        GPIO_OUTPUT_SET(LED_GPIO, led_state);\n        led_state ^=1;\n        counter++;\n        if( xQueueSend( xCounterQueue,( void * ) &counter, 10 ) != pdPASS )\n        {\n            // Failed to send msg to queue, TODO handle\n        }\n    }\n}",
            "title": "G\u1eedi th\u00f4ng \u0111i\u1ec7p l\u00ean queue"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#nhan-thong-iep-tu-queue",
            "text": "Theo c\u00fa ph\u00e1p:  BaseType_t xQueueReceive(\n                               QueueHandle_t xQueue,\n                               void *pvBuffer,\n                               TickType_t xTicksToWait\n                            );   xQueue : queue handle ( xCounterQueue )  pvBuffer : tr\u1ecf \u0111\u1ebfn n\u01a1i s\u1ebd ch\u1ee9a th\u00f4ng \u0111i\u1ec7p l\u1ea5y t\u1eeb queue xu\u1ed1ng.  xTicksToWait : timeout trong tr\u01b0\u1eddng h\u1ee3p kh\u00f4ng c\u00f3 ph\u1ea7n t\u1eeb n\u00e0o tr\u00ean queue (\u0111ang tr\u1ed1ng)   task_printf  s\u1ebd th\u1ef1c hi\u1ec7n nhi\u1ec7m v\u1ee5 n\u00e0y:  void task_printf(void *pvParameters)\n{\n    uint32_t receiveCounter;\n\n    printf(\"task_printf started\\n\");\n\n    for(;;){\n        if( xQueueReceive( xCounterQueue, &( receiveCounter ), 100 ) )\n        {\n           printf(\"task_printf, received counter = %u\\n\", receiveCounter);\n        }\n    }\n}",
            "title": "Nh\u1eadn th\u00f4ng \u0111i\u1ec7p t\u1eeb queue"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#chay-chuong-trinh",
            "text": "make clean\nmake\nmake flash",
            "title": "Ch\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#semaphore",
            "text": "",
            "title": "Semaphore"
        },
        {
            "location": "/freertos-sdk/basic/queue-semaphore-mutex/#mutex",
            "text": "",
            "title": "Mutex"
        },
        {
            "location": "/freertos-sdk/basic/task-notification/",
            "text": "Task notification\n#",
            "title": "Task notification"
        },
        {
            "location": "/freertos-sdk/basic/task-notification/#task-notification",
            "text": "",
            "title": "Task notification"
        },
        {
            "location": "/arduino/arduino/",
            "text": "Arduino core cho ESP8266 WiFi chip\n\n\n\u0110\u01b0\u1eddng d\u1eabn:\n\n\n\n\n\n\n\n\n\n\nArduino core cho ESP8266 WiFi chip\n#\n\n\n\u0110\u00e2y l\u00e0 m\u1ed9t d\u1ef1 \u00e1n m\u00e3 ngu\u1ed3n m\u1edf gi\u00fap h\u1ed7 tr\u1ee3 m\u00f4i tr\u01b0\u1eddng ph\u00e1t tri\u1ec3n Arduino cho ESP8266. Gi\u00fap b\u1ea1n c\u00f3 th\u1ec3 vi\u1ebft 1 Sketches s\u1eed d\u1ee5ng c\u00e1c th\u01b0 vi\u1ec7n v\u00e0 h\u00e0m t\u01b0\u01a1ng t\u1ef1 c\u1ee7a Arduino, c\u00f3 th\u1ec3 ch\u1ea1y tr\u1ef1c ti\u1ebfp tr\u00ean ESP8266 m\u00e0 kh\u00f4ng c\u1ea7n b\u1ea5t k\u1ef3 Vi \u0111i\u1ec1u khi\u1ec3n n\u00e0o kh\u00e1c.\n\n\nESP8266 Arduino core \u0111i k\u00e8m v\u1edbi th\u01b0 vi\u1ec7n k\u1ebft n\u1ed1i WiFi h\u1ed7 tr\u1ee3 TCP, UDP v\u00e0 c\u00e1c \u1ee9ng d\u1ee5ng HTTP, mDNS, SSDP, DNS Servers. Ngo\u00e0i ra c\u00f2n c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n c\u1eadp nh\u1eadt OTA, s\u1eed d\u1ee5ng Filesystem d\u00f9ng b\u1ed9 nh\u1edb Flash hay th\u1ebb SD, \u0111i\u1ec1u khi\u1ec3n servos, ngo\u1ea1i vi SPI, I2C.\n\n\n\n\n\u0110\u01b0\u1eddng d\u1eabn:\n#\n\n\n\n\nhttp://www.arduino.cc/en/main/software\n\n\nhttp://arduino.esp8266.com/\n\n\nhttp://esp8266.github.io/Arduino/versions/2.3.0/\n\n\nhttp://esp8266.github.io/Arduino/versions/2.3.0-rc2/",
            "title": "Gi\u1edbi thi\u1ec7u"
        },
        {
            "location": "/arduino/arduino/#arduino-core-cho-esp8266-wifi-chip",
            "text": "\u0110\u00e2y l\u00e0 m\u1ed9t d\u1ef1 \u00e1n m\u00e3 ngu\u1ed3n m\u1edf gi\u00fap h\u1ed7 tr\u1ee3 m\u00f4i tr\u01b0\u1eddng ph\u00e1t tri\u1ec3n Arduino cho ESP8266. Gi\u00fap b\u1ea1n c\u00f3 th\u1ec3 vi\u1ebft 1 Sketches s\u1eed d\u1ee5ng c\u00e1c th\u01b0 vi\u1ec7n v\u00e0 h\u00e0m t\u01b0\u01a1ng t\u1ef1 c\u1ee7a Arduino, c\u00f3 th\u1ec3 ch\u1ea1y tr\u1ef1c ti\u1ebfp tr\u00ean ESP8266 m\u00e0 kh\u00f4ng c\u1ea7n b\u1ea5t k\u1ef3 Vi \u0111i\u1ec1u khi\u1ec3n n\u00e0o kh\u00e1c.  ESP8266 Arduino core \u0111i k\u00e8m v\u1edbi th\u01b0 vi\u1ec7n k\u1ebft n\u1ed1i WiFi h\u1ed7 tr\u1ee3 TCP, UDP v\u00e0 c\u00e1c \u1ee9ng d\u1ee5ng HTTP, mDNS, SSDP, DNS Servers. Ngo\u00e0i ra c\u00f2n c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n c\u1eadp nh\u1eadt OTA, s\u1eed d\u1ee5ng Filesystem d\u00f9ng b\u1ed9 nh\u1edb Flash hay th\u1ebb SD, \u0111i\u1ec1u khi\u1ec3n servos, ngo\u1ea1i vi SPI, I2C.",
            "title": "Arduino core cho ESP8266 WiFi chip"
        },
        {
            "location": "/arduino/arduino/#uong-dan",
            "text": "http://www.arduino.cc/en/main/software  http://arduino.esp8266.com/  http://esp8266.github.io/Arduino/versions/2.3.0/  http://esp8266.github.io/Arduino/versions/2.3.0-rc2/",
            "title": "\u0110\u01b0\u1eddng d\u1eabn:"
        },
        {
            "location": "/arduino/esp8266-hardware/",
            "text": "Ph\u1ea7n c\u1ee9ng h\u1ed7 tr\u1ee3\n#\n\n\n\n\n\n\nPh\u1ea7n c\u1ee9ng h\u1ed7 tr\u1ee3\n\n\nAdafruit HUZZAH ESP8266 (ESP-12)\n\n\nESPresso Lite 1.0\n\n\nESPresso Lite 2.0\n\n\nPhoenix 1.0\n\n\nPhoenix 2.0\n\n\nNodeMCU 0.9\n\n\nPin mapping\n\n\n\n\n\n\nNodeMCU 1.0\n\n\nOlimex MOD-WIFI-ESP8266-DEV\n\n\nOlimex MOD-WIFI-ESP8266\n\n\nOlimex ESP8266-EVB\n\n\nSparkFun ESP8266 Thing\n\n\nSweetPea ESP-210\n\n\nESPino\n\n\nWifInfo\n\n\nGeneric ESP8266 modules\n\n\nSerial Adapter\n\n\nMinimal Hardware Setup for Bootloading and Usage\n\n\nESP to Serial\n\n\nMinimal Hardware Setup for Bootloading only\n\n\nMinimal Hardware Setup for Running only\n\n\n\n\n\n\nMinimal\n\n\nImproved Stability\n\n\nBoot Messages and Modes\n\n\nrst cause\n\n\nboot mode\n\n\n\n\n\n\nGeneric ESP8285 modules\n\n\nWeMos D1\n\n\nWeMos D1 mini\n\n\nESPino (WROOM-02 Module) by ThaiEasyElec\n\n\n\n\n\n\n\n\n\n\nAdafruit HUZZAH ESP8266 (ESP-12)\n#\n\n\nTODO: add notes\n\n\nESPresso Lite 1.0\n#\n\n\nESPresso Lite 1.0 (beta version) is an Arduino-compatible Wi-Fi development board powered by Espressif System\u2019s own ESP8266 WROOM-02 module. It has breadboard-friendly breakout pins with in-built LED, two reset/flash buttons and a user programmable button . The operating voltage is 3.3VDC, regulated with 800mA maximum current. Special distinctive features include on-board I2C pads that allow direct connection to OLED LCD and sensor boards.\n\n\nESPresso Lite 2.0\n#\n\n\nESPresso Lite 2.0 is an Arduino-compatible Wi-Fi development board based on an earlier V1 (beta version). Re-designed together with Cytron Technologies, the newly-revised ESPresso Lite V2.0 features the auto-load/auto-program function, eliminating the previous need to reset the board manually before flashing a new program. It also feature two user programmable side buttons and a reset button. The special distinctive features of on-board pads for I2C sensor and actuator is retained.\n\n\nPhoenix 1.0\n#\n\n\nProduct page: http://www.espert.co\n\n\nPhoenix 2.0\n#\n\n\nProduct page: http://www.espert.co\n\n\nNodeMCU 0.9\n#\n\n\nPin mapping\n#\n\n\nPin numbers written on the board itself do not correspond to ESP8266 GPIO pin numbers. Constants are defined to make using this board easier:\n\n\nstatic const uint8_t D0   = 16;\nstatic const uint8_t D1   = 5;\nstatic const uint8_t D2   = 4;\nstatic const uint8_t D3   = 0;\nstatic const uint8_t D4   = 2;\nstatic const uint8_t D5   = 14;\nstatic const uint8_t D6   = 12;\nstatic const uint8_t D7   = 13;\nstatic const uint8_t D8   = 15;\nstatic const uint8_t D9   = 3;\nstatic const uint8_t D10  = 1;\n\n\n\n\nIf you want to use NodeMCU pin 5, use D5 for pin number, and it will be translated to \u2018real\u2019 GPIO pin 14.\n\n\nNodeMCU 1.0\n#\n\n\nThis module is sold under many names for around $6.50 on AliExpress and it\u2019s one of the cheapest, fully integrated ESP8266 solutions.\n\n\nIt\u2019s an open hardware design with an ESP-12E core and 4 MB of SPI flash.\n\n\nAcording to the manufacturer, \u201cwith a micro USB cable, you can connect NodeMCU devkit to your laptop and flash it without any trouble\u201d. This is more or less true: the board comes with a CP2102 onboard USB to serial adapter which just works, well, the majority of the time. Sometimes flashing fails and you have to reset the board by holding down FLASH + RST, then releasing FLASH, then releasing RST. This forces the CP2102 device to power cycle and to be re-numbered by Linux.\n\n\nThe board also features a NCP1117 voltage regulator, a blue LED on GPIO16 and a 220k/100k Ohm voltage divider on the ADC input pin.\n\n\nFull pinout and PDF schematics can be found \nhere\n\n\nOlimex MOD-WIFI-ESP8266-DEV\n#\n\n\nThis board comes with 2 MB of SPI flash and optional accessories (e.g. evaluation board ESP8266-EVB or BAT-BOX for batteries).\n\n\nThe basic module has three solder jumpers that allow you to switch the operating mode between SDIO, UART and FLASH.\n\n\nThe board is shipped for FLASH operation mode, with jumpers TD0JP=0, IO0JP=1, IO2JP=1.\n\n\nSince jumper IO0JP is tied to GPIO0, which is PIN 21, you\u2019ll have to ground it before programming with a USB to serial adapter and reset the board by power cycling it.\n\n\nUART pins for programming and serial I/O are GPIO1 (TXD, pin 3) and GPIO3 (RXD, pin 4).\n\n\nYou can find the board schematics \nhere\n\n\nOlimex MOD-WIFI-ESP8266\n#\n\n\nThis is a stripped down version of the above. Behaves identically in terms of jumpers but has less pins readily available for I/O. Still 2 MB of SPI flash.\n\n\nOlimex ESP8266-EVB\n#\n\n\nIt\u2019s a Olimex MOD-WIFI-ESP8266-DEV module installed on the headers of a development board which features some breakout connectors, a button (GPIO0) and a relay (GPIO5).\n\n\nProgramming is pretty straightforward: the board is supported in the Arduino IDE after \ninstalling it via the Board Manager\n. To download a program you just have to connect GND/RX/TX from a serial/USB adapter to the UEXT connector and press the only button before applying power to enter UART mode.\n\n\nDon\u2019t connect 5V from the serial/USB adapter to the board or you won\u2019t be able to power cycle it for UART mode.\n\n\nYou can find the board schematics \nhere\n.\n\n\nThis guide\n is also useful for the first setup, since it contains the UEXT connector pinout.\n\n\nBoard variants include:\n * ESP8266-EVB-BAT: comes with built-in LiPo charger and step-up converter\n * ESP8266-EVB-BAT-BOX: as above, but enclosd in a plastic box (non-weatherproof)\n\n\nSparkFun ESP8266 Thing\n#\n\n\nProduct page: https://www.sparkfun.com/products/13231\n\n\nTODO: add notes\n\n\nSweetPea ESP-210\n#\n\n\nTODO: add notes\n\n\nESPino\n#\n\n\nESPino integrates the ESP-12 module with a 3.3v regulator, CP2104 USB-Serial bridge and a micro USB connector for easy programming. It is designed for fitting in a breadboard and has an RGB Led and two buttons for easy prototyping.\n\n\nFor more information about the hardware, pinout diagram and programming procedures, please see the \ndatasheet\n.\n\n\nProduct page: http://www.espino.io/en\n\n\nWifInfo\n#\n\n\nWifInfo integrates the ESP-12 or ESP-07+Ext antenna module with a 3.3v regulator and the hardware to be able to measure French telemetry issue from ERDF powering meter serial output. It has a USB connector for powering, an RGB WS2812 Led, 4 pins I2C connector to fit OLED or sensor, and two buttons + FTDI connector and auto reset feature.\n\n\nFor more information, please see WifInfo related \nblog\n entries, \ngithub\n and \ncommunity\n forum.\n\n\nGeneric ESP8266 modules\n#\n\n\nThese modules come in different form factors and pinouts. See the page at ESP8266 community wiki for more info:\n\nESP8266 Module Family\n.\n\n\nUsually these modules have no bootstapping resistors on board, insufficient decoupling capacitors, no voltage regulator, no reset circuit, and no USB-serial adapter. This makes using them somewhat tricky, compared to development boards which add these features.\n\n\nIn order to use these modules, make sure to observe the following:\n\n\n\n\n\n\nProvide sufficient power to the module.\n For stable use of the ESP8266 a power supply with 3.3V and >= 250mA is required. Using the power available from USB to Serial adapter is not recommended, these adapters typically do not supply enough current to run ESP8266 reliably in every situation. An external supply or regulator along with filtering capacitors is preferred.\n\n\n\n\n\n\nConnect bootstapping resistors\n to GPIO0, GPIO2, GPIO15 according to the schematics below.\n\n\n\n\n\n\nPut ESP8266 into bootloader mode\n before uploading code.\n\n\n\n\n\n\nSerial Adapter\n#\n\n\nThere are many different USB to Serial adapters / boards.\nTo be able to put ESP8266 into bootloader mode using serial handshaking lines, you need the adapter which breaks out RTS and DTR outputs. CTS and DSR are not useful for upload (they are inputs). Make sure the adapter can work with 3.3V IO voltage: it should have a jumper or a switch to select between 5V and 3.3V, or be marked as 3.3V only.\n\n\nAdapters based around the following ICs should work:\n\n\n\n\nFT232RL\n\n\nCP2102\n\n\nCH340G\n\n\n\n\nPL2303-based adapters are known not to work on Mac OS X. See https://github.com/igrr/esptool-ck/issues/9 for more info.\n\n\nMinimal Hardware Setup for Bootloading and Usage\n#\n\n\n\n\n\n\n\n\nPIN\n\n\nResistor\n\n\nSerial Adapter\n\n\n\n\n\n\n\n\n\n\nVCC\n\n\n\n\nVCC (3.3V)\n\n\n\n\n\n\nGND\n\n\n\n\nGND\n\n\n\n\n\n\nTX or GPIO2*\n\n\n\n\nRX\n\n\n\n\n\n\nRX\n\n\n\n\nTX\n\n\n\n\n\n\nGPIO0\n\n\nPullUp\n\n\nDTR\n\n\n\n\n\n\nReset*\n\n\nPullUp\n\n\nRTS\n\n\n\n\n\n\nGPIO15*\n\n\nPullDown\n\n\n\n\n\n\n\n\nCH_PD\n\n\nPullUp\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nGPIO15 is also named MTDO\n\n\nReset is also named RSBT or REST (adding PullUp improves the stability of the module)\n\n\nGPIO2 is alternative TX for the boot loader mode\n\n\nDirectly connecting a pin to VCC or GND is not a substitute for a PullUp or PullDown resistor, doing this can break upload management and the serial console, instability has also been noted in some cases.\n\n\n\n\nESP to Serial\n#\n\n\n\n\nMinimal Hardware Setup for Bootloading only\n#\n\n\nESPxx Hardware\n\n\n\n\n\n\n\n\nPIN\n\n\nResistor\n\n\nSerial Adapter\n\n\n\n\n\n\n\n\n\n\nVCC\n\n\n\n\nVCC (3.3V)\n\n\n\n\n\n\nGND\n\n\n\n\nGND\n\n\n\n\n\n\nTX or GPIO2\n\n\n\n\nRX\n\n\n\n\n\n\nRX\n\n\n\n\nTX\n\n\n\n\n\n\nGPIO0\n\n\n\n\nGND\n\n\n\n\n\n\nReset\n\n\n\n\nRTS*\n\n\n\n\n\n\nGPIO15\n\n\nPullDown\n\n\n\n\n\n\n\n\nCH_PD\n\n\nPullUp\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nif no RTS is used a manual power toggle is needed\n\n\n\n\nMinimal Hardware Setup for Running only\n#\n\n\nESPxx Hardware\n\n\n\n\n\n\n\n\nPIN\n\n\nResistor\n\n\nPower supply\n\n\n\n\n\n\n\n\n\n\nVCC\n\n\n\n\nVCC (3.3V)\n\n\n\n\n\n\nGND\n\n\n\n\nGND\n\n\n\n\n\n\nGPIO0\n\n\nPullUp\n\n\n\n\n\n\n\n\nGPIO15\n\n\nPullDown\n\n\n\n\n\n\n\n\nCH_PD\n\n\nPullUp\n\n\n\n\n\n\n\n\n\n\nMinimal\n#\n\n\n\n\nImproved Stability\n#\n\n\n\n\nBoot Messages and Modes\n#\n\n\nThe ESP module checks at every boot the Pins 0, 2 and 15.\nbased on them its boots in different modes:\n\n\n\n\n\n\n\n\nGPIO15\n\n\nGPIO0\n\n\nGPIO2\n\n\nMode\n\n\n\n\n\n\n\n\n\n\n0V\n\n\n0V\n\n\n3.3V\n\n\nUart Bootloader\n\n\n\n\n\n\n0V\n\n\n3.3V\n\n\n3.3V\n\n\nBoot sketch (SPI flash)\n\n\n\n\n\n\n3.3V\n\n\nx\n\n\nx\n\n\nSDIO mode (not used for Arduino)\n\n\n\n\n\n\n\n\nat startup the ESP prints out the current boot mode example:\n\n\nrst cause:2, boot mode:(3,6)\n\n\n\n\nnote:\n - GPIO2 is used as TX output and the internal Pullup is enabled on boot.\n\n\nrst cause\n#\n\n\n\n\n\n\n\n\nNumber\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nunknown\n\n\n\n\n\n\n1\n\n\nnormal boot\n\n\n\n\n\n\n2\n\n\nreset pin\n\n\n\n\n\n\n3\n\n\nsoftware reset\n\n\n\n\n\n\n4\n\n\nwatchdog reset\n\n\n\n\n\n\n\n\nboot mode\n#\n\n\nthe first value respects the pin setup of the Pins 0, 2 and 15.\n\n\n\n\n\n\n\n\nNumber\n\n\nGPIO15\n\n\nGPIO0\n\n\nGPIO2\n\n\nMode\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0V\n\n\n0V\n\n\n0V\n\n\nNot valid\n\n\n\n\n\n\n1\n\n\n0V\n\n\n0V\n\n\n3.3V\n\n\nUart\n\n\n\n\n\n\n2\n\n\n0V\n\n\n3.3V\n\n\n0V\n\n\nNot valid\n\n\n\n\n\n\n3\n\n\n0V\n\n\n3.3V\n\n\n3.3V\n\n\nFlash\n\n\n\n\n\n\n4\n\n\n3.3V\n\n\n0V\n\n\n0V\n\n\nSDIO\n\n\n\n\n\n\n5\n\n\n3.3V\n\n\n0V\n\n\n3.3V\n\n\nSDIO\n\n\n\n\n\n\n6\n\n\n3.3V\n\n\n3.3V\n\n\n0V\n\n\nSDIO\n\n\n\n\n\n\n7\n\n\n3.3V\n\n\n3.3V\n\n\n3.3V\n\n\nSDIO\n\n\n\n\n\n\n\n\nnote:\n - number = ((GPIO15 << 2) | (GPIO0 << 1) | GPIO2);\n\n\nGeneric ESP8285 modules\n#\n\n\nESP8285 (\ndatasheet\n) is a multi-chip package which contains ESP8266 and 1MB flash.\nAll points related to bootstrapping resistors and recommended circuits listed above apply to ESP8285 as well.\n\n\nNote that since ESP8285 has SPI flash memory internally connected in DOUT mode, pins 9 and 10 may be used as GPIO / I2C / PWM pins.\n\n\nWeMos D1\n#\n\n\nProduct page: \nhttp://wemos.cc\n\n\nWeMos D1 mini\n#\n\n\nProduct page: \nhttp://wemos.cc\n\n\nESPino (WROOM-02 Module) by ThaiEasyElec\n#\n\n\nESPino by ThaiEasyElec using WROOM-02 module from Espressif Systems with 4 MB Flash.\n\n\nWe will update an English description soon.\n\n\n\n\nProduct page: \nhttp://thaieasyelec.com/products/wireless-modules/wifi-modules/espino-wifi-development-board-detail.html\n\n\nSchematics: \nwww.thaieasyelec.com/downloads/ETEE052/ETEE052_ESPino_Schematic.pdf\n\n\nDimensions: \nhttp://thaieasyelec.com/downloads/ETEE052/ETEE052_ESPino_Dimension.pdf\n\n\nPinouts: \nhttp://thaieasyelec.com/downloads/ETEE052/ETEE052_ESPino_User_Manual_TH_v1_0_20160204.pdf\n (Please see pg. 8)",
            "title": "Ph\u1ea7n c\u1ee9ng ESP8266 Arduino"
        },
        {
            "location": "/arduino/esp8266-hardware/#phan-cung-ho-tro",
            "text": "Ph\u1ea7n c\u1ee9ng h\u1ed7 tr\u1ee3  Adafruit HUZZAH ESP8266 (ESP-12)  ESPresso Lite 1.0  ESPresso Lite 2.0  Phoenix 1.0  Phoenix 2.0  NodeMCU 0.9  Pin mapping    NodeMCU 1.0  Olimex MOD-WIFI-ESP8266-DEV  Olimex MOD-WIFI-ESP8266  Olimex ESP8266-EVB  SparkFun ESP8266 Thing  SweetPea ESP-210  ESPino  WifInfo  Generic ESP8266 modules  Serial Adapter  Minimal Hardware Setup for Bootloading and Usage  ESP to Serial  Minimal Hardware Setup for Bootloading only  Minimal Hardware Setup for Running only    Minimal  Improved Stability  Boot Messages and Modes  rst cause  boot mode    Generic ESP8285 modules  WeMos D1  WeMos D1 mini  ESPino (WROOM-02 Module) by ThaiEasyElec",
            "title": "Ph\u1ea7n c\u1ee9ng h\u1ed7 tr\u1ee3"
        },
        {
            "location": "/arduino/esp8266-hardware/#adafruit-huzzah-esp8266-esp-12",
            "text": "TODO: add notes",
            "title": "Adafruit HUZZAH ESP8266 (ESP-12)"
        },
        {
            "location": "/arduino/esp8266-hardware/#espresso-lite-10",
            "text": "ESPresso Lite 1.0 (beta version) is an Arduino-compatible Wi-Fi development board powered by Espressif System\u2019s own ESP8266 WROOM-02 module. It has breadboard-friendly breakout pins with in-built LED, two reset/flash buttons and a user programmable button . The operating voltage is 3.3VDC, regulated with 800mA maximum current. Special distinctive features include on-board I2C pads that allow direct connection to OLED LCD and sensor boards.",
            "title": "ESPresso Lite 1.0"
        },
        {
            "location": "/arduino/esp8266-hardware/#espresso-lite-20",
            "text": "ESPresso Lite 2.0 is an Arduino-compatible Wi-Fi development board based on an earlier V1 (beta version). Re-designed together with Cytron Technologies, the newly-revised ESPresso Lite V2.0 features the auto-load/auto-program function, eliminating the previous need to reset the board manually before flashing a new program. It also feature two user programmable side buttons and a reset button. The special distinctive features of on-board pads for I2C sensor and actuator is retained.",
            "title": "ESPresso Lite 2.0"
        },
        {
            "location": "/arduino/esp8266-hardware/#phoenix-10",
            "text": "Product page: http://www.espert.co",
            "title": "Phoenix 1.0"
        },
        {
            "location": "/arduino/esp8266-hardware/#phoenix-20",
            "text": "Product page: http://www.espert.co",
            "title": "Phoenix 2.0"
        },
        {
            "location": "/arduino/esp8266-hardware/#nodemcu-09",
            "text": "",
            "title": "NodeMCU 0.9"
        },
        {
            "location": "/arduino/esp8266-hardware/#pin-mapping",
            "text": "Pin numbers written on the board itself do not correspond to ESP8266 GPIO pin numbers. Constants are defined to make using this board easier:  static const uint8_t D0   = 16;\nstatic const uint8_t D1   = 5;\nstatic const uint8_t D2   = 4;\nstatic const uint8_t D3   = 0;\nstatic const uint8_t D4   = 2;\nstatic const uint8_t D5   = 14;\nstatic const uint8_t D6   = 12;\nstatic const uint8_t D7   = 13;\nstatic const uint8_t D8   = 15;\nstatic const uint8_t D9   = 3;\nstatic const uint8_t D10  = 1;  If you want to use NodeMCU pin 5, use D5 for pin number, and it will be translated to \u2018real\u2019 GPIO pin 14.",
            "title": "Pin mapping"
        },
        {
            "location": "/arduino/esp8266-hardware/#nodemcu-10",
            "text": "This module is sold under many names for around $6.50 on AliExpress and it\u2019s one of the cheapest, fully integrated ESP8266 solutions.  It\u2019s an open hardware design with an ESP-12E core and 4 MB of SPI flash.  Acording to the manufacturer, \u201cwith a micro USB cable, you can connect NodeMCU devkit to your laptop and flash it without any trouble\u201d. This is more or less true: the board comes with a CP2102 onboard USB to serial adapter which just works, well, the majority of the time. Sometimes flashing fails and you have to reset the board by holding down FLASH + RST, then releasing FLASH, then releasing RST. This forces the CP2102 device to power cycle and to be re-numbered by Linux.  The board also features a NCP1117 voltage regulator, a blue LED on GPIO16 and a 220k/100k Ohm voltage divider on the ADC input pin.  Full pinout and PDF schematics can be found  here",
            "title": "NodeMCU 1.0"
        },
        {
            "location": "/arduino/esp8266-hardware/#olimex-mod-wifi-esp8266-dev",
            "text": "This board comes with 2 MB of SPI flash and optional accessories (e.g. evaluation board ESP8266-EVB or BAT-BOX for batteries).  The basic module has three solder jumpers that allow you to switch the operating mode between SDIO, UART and FLASH.  The board is shipped for FLASH operation mode, with jumpers TD0JP=0, IO0JP=1, IO2JP=1.  Since jumper IO0JP is tied to GPIO0, which is PIN 21, you\u2019ll have to ground it before programming with a USB to serial adapter and reset the board by power cycling it.  UART pins for programming and serial I/O are GPIO1 (TXD, pin 3) and GPIO3 (RXD, pin 4).  You can find the board schematics  here",
            "title": "Olimex MOD-WIFI-ESP8266-DEV"
        },
        {
            "location": "/arduino/esp8266-hardware/#olimex-mod-wifi-esp8266",
            "text": "This is a stripped down version of the above. Behaves identically in terms of jumpers but has less pins readily available for I/O. Still 2 MB of SPI flash.",
            "title": "Olimex MOD-WIFI-ESP8266"
        },
        {
            "location": "/arduino/esp8266-hardware/#olimex-esp8266-evb",
            "text": "It\u2019s a Olimex MOD-WIFI-ESP8266-DEV module installed on the headers of a development board which features some breakout connectors, a button (GPIO0) and a relay (GPIO5).  Programming is pretty straightforward: the board is supported in the Arduino IDE after  installing it via the Board Manager . To download a program you just have to connect GND/RX/TX from a serial/USB adapter to the UEXT connector and press the only button before applying power to enter UART mode.  Don\u2019t connect 5V from the serial/USB adapter to the board or you won\u2019t be able to power cycle it for UART mode.  You can find the board schematics  here .  This guide  is also useful for the first setup, since it contains the UEXT connector pinout.  Board variants include:\n * ESP8266-EVB-BAT: comes with built-in LiPo charger and step-up converter\n * ESP8266-EVB-BAT-BOX: as above, but enclosd in a plastic box (non-weatherproof)",
            "title": "Olimex ESP8266-EVB"
        },
        {
            "location": "/arduino/esp8266-hardware/#sparkfun-esp8266-thing",
            "text": "Product page: https://www.sparkfun.com/products/13231  TODO: add notes",
            "title": "SparkFun ESP8266 Thing"
        },
        {
            "location": "/arduino/esp8266-hardware/#sweetpea-esp-210",
            "text": "TODO: add notes",
            "title": "SweetPea ESP-210"
        },
        {
            "location": "/arduino/esp8266-hardware/#espino",
            "text": "ESPino integrates the ESP-12 module with a 3.3v regulator, CP2104 USB-Serial bridge and a micro USB connector for easy programming. It is designed for fitting in a breadboard and has an RGB Led and two buttons for easy prototyping.  For more information about the hardware, pinout diagram and programming procedures, please see the  datasheet .  Product page: http://www.espino.io/en",
            "title": "ESPino"
        },
        {
            "location": "/arduino/esp8266-hardware/#wifinfo",
            "text": "WifInfo integrates the ESP-12 or ESP-07+Ext antenna module with a 3.3v regulator and the hardware to be able to measure French telemetry issue from ERDF powering meter serial output. It has a USB connector for powering, an RGB WS2812 Led, 4 pins I2C connector to fit OLED or sensor, and two buttons + FTDI connector and auto reset feature.  For more information, please see WifInfo related  blog  entries,  github  and  community  forum.",
            "title": "WifInfo"
        },
        {
            "location": "/arduino/esp8266-hardware/#generic-esp8266-modules",
            "text": "These modules come in different form factors and pinouts. See the page at ESP8266 community wiki for more info: ESP8266 Module Family .  Usually these modules have no bootstapping resistors on board, insufficient decoupling capacitors, no voltage regulator, no reset circuit, and no USB-serial adapter. This makes using them somewhat tricky, compared to development boards which add these features.  In order to use these modules, make sure to observe the following:    Provide sufficient power to the module.  For stable use of the ESP8266 a power supply with 3.3V and >= 250mA is required. Using the power available from USB to Serial adapter is not recommended, these adapters typically do not supply enough current to run ESP8266 reliably in every situation. An external supply or regulator along with filtering capacitors is preferred.    Connect bootstapping resistors  to GPIO0, GPIO2, GPIO15 according to the schematics below.    Put ESP8266 into bootloader mode  before uploading code.",
            "title": "Generic ESP8266 modules"
        },
        {
            "location": "/arduino/esp8266-hardware/#serial-adapter",
            "text": "There are many different USB to Serial adapters / boards.\nTo be able to put ESP8266 into bootloader mode using serial handshaking lines, you need the adapter which breaks out RTS and DTR outputs. CTS and DSR are not useful for upload (they are inputs). Make sure the adapter can work with 3.3V IO voltage: it should have a jumper or a switch to select between 5V and 3.3V, or be marked as 3.3V only.  Adapters based around the following ICs should work:   FT232RL  CP2102  CH340G   PL2303-based adapters are known not to work on Mac OS X. See https://github.com/igrr/esptool-ck/issues/9 for more info.",
            "title": "Serial Adapter"
        },
        {
            "location": "/arduino/esp8266-hardware/#minimal-hardware-setup-for-bootloading-and-usage",
            "text": "PIN  Resistor  Serial Adapter      VCC   VCC (3.3V)    GND   GND    TX or GPIO2*   RX    RX   TX    GPIO0  PullUp  DTR    Reset*  PullUp  RTS    GPIO15*  PullDown     CH_PD  PullUp       Note  GPIO15 is also named MTDO  Reset is also named RSBT or REST (adding PullUp improves the stability of the module)  GPIO2 is alternative TX for the boot loader mode  Directly connecting a pin to VCC or GND is not a substitute for a PullUp or PullDown resistor, doing this can break upload management and the serial console, instability has also been noted in some cases.",
            "title": "Minimal Hardware Setup for Bootloading and Usage"
        },
        {
            "location": "/arduino/esp8266-hardware/#esp-to-serial",
            "text": "",
            "title": "ESP to Serial"
        },
        {
            "location": "/arduino/esp8266-hardware/#minimal-hardware-setup-for-bootloading-only",
            "text": "ESPxx Hardware     PIN  Resistor  Serial Adapter      VCC   VCC (3.3V)    GND   GND    TX or GPIO2   RX    RX   TX    GPIO0   GND    Reset   RTS*    GPIO15  PullDown     CH_PD  PullUp       Note  if no RTS is used a manual power toggle is needed",
            "title": "Minimal Hardware Setup for Bootloading only"
        },
        {
            "location": "/arduino/esp8266-hardware/#minimal-hardware-setup-for-running-only",
            "text": "ESPxx Hardware     PIN  Resistor  Power supply      VCC   VCC (3.3V)    GND   GND    GPIO0  PullUp     GPIO15  PullDown     CH_PD  PullUp",
            "title": "Minimal Hardware Setup for Running only"
        },
        {
            "location": "/arduino/esp8266-hardware/#minimal",
            "text": "",
            "title": "Minimal"
        },
        {
            "location": "/arduino/esp8266-hardware/#improved-stability",
            "text": "",
            "title": "Improved Stability"
        },
        {
            "location": "/arduino/esp8266-hardware/#boot-messages-and-modes",
            "text": "The ESP module checks at every boot the Pins 0, 2 and 15.\nbased on them its boots in different modes:     GPIO15  GPIO0  GPIO2  Mode      0V  0V  3.3V  Uart Bootloader    0V  3.3V  3.3V  Boot sketch (SPI flash)    3.3V  x  x  SDIO mode (not used for Arduino)     at startup the ESP prints out the current boot mode example:  rst cause:2, boot mode:(3,6)  note:\n - GPIO2 is used as TX output and the internal Pullup is enabled on boot.",
            "title": "Boot Messages and Modes"
        },
        {
            "location": "/arduino/esp8266-hardware/#rst-cause",
            "text": "Number  Description      0  unknown    1  normal boot    2  reset pin    3  software reset    4  watchdog reset",
            "title": "rst cause"
        },
        {
            "location": "/arduino/esp8266-hardware/#boot-mode",
            "text": "the first value respects the pin setup of the Pins 0, 2 and 15.     Number  GPIO15  GPIO0  GPIO2  Mode      0  0V  0V  0V  Not valid    1  0V  0V  3.3V  Uart    2  0V  3.3V  0V  Not valid    3  0V  3.3V  3.3V  Flash    4  3.3V  0V  0V  SDIO    5  3.3V  0V  3.3V  SDIO    6  3.3V  3.3V  0V  SDIO    7  3.3V  3.3V  3.3V  SDIO     note:\n - number = ((GPIO15 << 2) | (GPIO0 << 1) | GPIO2);",
            "title": "boot mode"
        },
        {
            "location": "/arduino/esp8266-hardware/#generic-esp8285-modules",
            "text": "ESP8285 ( datasheet ) is a multi-chip package which contains ESP8266 and 1MB flash.\nAll points related to bootstrapping resistors and recommended circuits listed above apply to ESP8285 as well.  Note that since ESP8285 has SPI flash memory internally connected in DOUT mode, pins 9 and 10 may be used as GPIO / I2C / PWM pins.",
            "title": "Generic ESP8285 modules"
        },
        {
            "location": "/arduino/esp8266-hardware/#wemos-d1",
            "text": "Product page:  http://wemos.cc",
            "title": "WeMos D1"
        },
        {
            "location": "/arduino/esp8266-hardware/#wemos-d1-mini",
            "text": "Product page:  http://wemos.cc",
            "title": "WeMos D1 mini"
        },
        {
            "location": "/arduino/esp8266-hardware/#espino-wroom-02-module-by-thaieasyelec",
            "text": "ESPino by ThaiEasyElec using WROOM-02 module from Espressif Systems with 4 MB Flash.  We will update an English description soon.   Product page:  http://thaieasyelec.com/products/wireless-modules/wifi-modules/espino-wifi-development-board-detail.html  Schematics:  www.thaieasyelec.com/downloads/ETEE052/ETEE052_ESPino_Schematic.pdf  Dimensions:  http://thaieasyelec.com/downloads/ETEE052/ETEE052_ESPino_Dimension.pdf  Pinouts:  http://thaieasyelec.com/downloads/ETEE052/ETEE052_ESPino_User_Manual_TH_v1_0_20160204.pdf  (Please see pg. 8)",
            "title": "ESPino (WROOM-02 Module) by ThaiEasyElec"
        },
        {
            "location": "/arduino/basic/install/",
            "text": "Arduino c\u01a1 b\u1ea3n\n\n\nC\u00e0i \u0111\u1eb7t v\u1edbi Boards Manager\n\n\nChu\u1ea9n b\u1ecb\n\n\nH\u01b0\u1edbng d\u1eabn\n\n\n\n\n\n\nS\u1eed d\u1ee5ng git version\n\n\nChu\u1ea9n b\u1ecb\n\n\nH\u01b0\u1edbng d\u1eabn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArduino c\u01a1 b\u1ea3n\n#\n\n\nC\u00f3 th\u1ec3 t\u00ecm th\u1ea5y h\u01b0\u1edbng d\u1eabn c\u00e0i \u0111\u1eb7t Ti\u1ebfng Anh v\u00e0 \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt t\u1ea1i \nhttps://github.com/esp8266/Arduino\n\n\nC\u00e0i \u0111\u1eb7t v\u1edbi Boards Manager\n#\n\n\nPh\u01b0\u01a1ng \u00e1n khuy\u00ean d\u00f9ng cho ng\u01b0\u1eddi d\u00f9ng kh\u00f4ng chuy\u00ean \n\n\nChu\u1ea9n b\u1ecb\n#\n\n\n\n\nArduino 1.6.8, t\u1ea3i t\u1eeb \nArduino website\n.\n\n\nK\u1ebft n\u1ed1i Internet\n\n\n\n\nH\u01b0\u1edbng d\u1eabn\n#\n\n\n\n\nM\u1edf ch\u01b0\u01a1ng tr\u00ecnh Arduino v\u00e0 c\u1eeda s\u1ed5 Preferences.\n\n\nEnter \nhttp://arduino.esp8266.com/stable/package_esp8266com_index.json\n v\u00e0o \nAdditional Board Manager URLs\n. B\u1ea1n c\u00f3 th\u1ec3 th\u00eam nhi\u1ec1u URL, c\u00e1ch nhau b\u1eb1ng d\u1ea5u ph\u1ea9y.\n\n\nM\u1edf Boards Manager t\u1eeb Tools > Board menu v\u00e0 t\u00ecm \nesp8266\n platform.\n\n\nCh\u1ecdn phi\u00ean b\u1ea3n b\u1ea1n c\u1ea7n t\u1eeb c\u1eeda s\u1ed5 Drop-down.\n\n\nClick n\u00fat \ninstall\n.\n\n\n\u0110\u1eebng qu\u00ean ch\u1ecdn lo\u1ea1i ESP8266 board t\u1eeb Tools > Board menu sau khi c\u00e0i \u0111\u1eb7t.\n\n\n\n\nB\u1ea1n c\u00f3 1 l\u1ef1a ch\u1ecdn kh\u00e1c c\u00e0i \u0111\u1eb7t b\u1ea3n \nstaging\n boards manager t\u1eeb link:\n\nhttp://arduino.esp8266.com/staging/package_esp8266com_index.json\n. Phi\u00ean b\u1ea3n n\u00e0y c\u00f3 nh\u1eefng t\u00ednh n\u0103ng m\u1edbi h\u01a1n, tuy nhi\u00ean ch\u01b0a th\u1eadt s\u1ef1 \u0111\u01b0\u1ee3c ki\u1ec3m tra k\u1ef9.\n\n\nS\u1eed d\u1ee5ng git version\n#\n\n\nPh\u01b0\u01a1ng \u00e1n c\u00e0i \u0111\u1eb7t n\u00e0y khuy\u00ean d\u00f9ng cho nh\u1eefng ng\u01b0\u1eddi c\u00f3 th\u1ec3 \u0111\u00f3ng g\u00f3p v\u00e0o d\u1ef1 \u00e1n Arduino cho ESP8266 v\u00e0 developers.\n\n\nChu\u1ea9n b\u1ecb\n#\n\n\n\n\nArduino 1.6.8 (hay m\u1edbi h\u01a1n, n\u1ebfu b\u1ea1n bi\u1ebft b\u1ea1n \u0111ang l\u00e0m g\u00ec)\n\n\ngit\n\n\npython 2.7\n\n\nterminal, console, or command prompt (ph\u1ee5 thu\u1ed9c h\u1ec7 \u0111i\u1ec1u h\u00e0nh c\u1ee7a b\u1ea1n)\n\n\nK\u1ebft n\u1ed1i Internet\n\n\n\n\nH\u01b0\u1edbng d\u1eabn\n#\n\n\n\n\nM\u1edf \nconsole\n v\u00e0 cd \u0111\u1ebfn th\u01b0 m\u1ee5c Arduino. N\u00f3 c\u00f3 th\u1ec3 l\u00e0 th\u01b0 m\u1ee5c \nsketchbook\n (th\u01b0\u1eddng l\u00e0 \n<Documents>/Arduino\n), hay th\u01b0 m\u1ee5c c\u1ee7a \u1ee8ng d\u1ee5ng Arduino, t\u00f9y b\u1ea1n ch\u1ecdn.\n\n\nClone repository n\u00e0y \u0111\u1ebfn th\u01b0 m\u1ee5c \nhardware/esp8266com/esp8266\n. Ho\u1eb7c b\u1ea1n c\u00f3 th\u1ec3 clone v\u00e0o n\u01a1i n\u00e0o \u0111\u00f3 v\u00e0 t\u1ea1o symlink b\u1eb1ng \nln -s\n, n\u1ebfu H\u1ec7 \u0111i\u1ec1u h\u00e0nh h\u1ed7 tr\u1ee3.\n\n\n\n\ncd hardware\nmkdir esp8266com\ncd esp8266com\ngit clone https://github.com/esp8266/Arduino.git esp8266\n\n\n\n\nC\u1ea5u tr\u00fac d\u1ef1 \u00e1n sau khi b\u1ea1n th\u1ef1c hi\u1ec7n xong:\n\n\nArduino\n    |- hardware\n    |- esp8266com\n        |- esp8266\n            |- bootloaders\n            |- cores\n            |- doc\n            |- libraries\n            |- package\n            |- tests\n            |- tools\n            |- variants\n            |- platform.txt\n            |- programmers.txt\n            |- README.md\n            |- boards.txt\n            `- LICENSE\n\n\n\n\n\n\nT\u1ea3i binary tools\n\n\n\n\ncd esp8266/tools\npython get.py\n\n\n\n\n\n\nKh\u1edfi \u0111\u1ed9ng l\u1ea1i Arduino",
            "title": "C\u00e0i \u0111\u1eb7t"
        },
        {
            "location": "/arduino/basic/install/#arduino-co-ban",
            "text": "C\u00f3 th\u1ec3 t\u00ecm th\u1ea5y h\u01b0\u1edbng d\u1eabn c\u00e0i \u0111\u1eb7t Ti\u1ebfng Anh v\u00e0 \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt t\u1ea1i  https://github.com/esp8266/Arduino",
            "title": "Arduino c\u01a1 b\u1ea3n"
        },
        {
            "location": "/arduino/basic/install/#cai-at-voi-boards-manager",
            "text": "Ph\u01b0\u01a1ng \u00e1n khuy\u00ean d\u00f9ng cho ng\u01b0\u1eddi d\u00f9ng kh\u00f4ng chuy\u00ean",
            "title": "C\u00e0i \u0111\u1eb7t v\u1edbi Boards Manager"
        },
        {
            "location": "/arduino/basic/install/#chuan-bi",
            "text": "Arduino 1.6.8, t\u1ea3i t\u1eeb  Arduino website .  K\u1ebft n\u1ed1i Internet",
            "title": "Chu\u1ea9n b\u1ecb"
        },
        {
            "location": "/arduino/basic/install/#huong-dan",
            "text": "M\u1edf ch\u01b0\u01a1ng tr\u00ecnh Arduino v\u00e0 c\u1eeda s\u1ed5 Preferences.  Enter  http://arduino.esp8266.com/stable/package_esp8266com_index.json  v\u00e0o  Additional Board Manager URLs . B\u1ea1n c\u00f3 th\u1ec3 th\u00eam nhi\u1ec1u URL, c\u00e1ch nhau b\u1eb1ng d\u1ea5u ph\u1ea9y.  M\u1edf Boards Manager t\u1eeb Tools > Board menu v\u00e0 t\u00ecm  esp8266  platform.  Ch\u1ecdn phi\u00ean b\u1ea3n b\u1ea1n c\u1ea7n t\u1eeb c\u1eeda s\u1ed5 Drop-down.  Click n\u00fat  install .  \u0110\u1eebng qu\u00ean ch\u1ecdn lo\u1ea1i ESP8266 board t\u1eeb Tools > Board menu sau khi c\u00e0i \u0111\u1eb7t.   B\u1ea1n c\u00f3 1 l\u1ef1a ch\u1ecdn kh\u00e1c c\u00e0i \u0111\u1eb7t b\u1ea3n  staging  boards manager t\u1eeb link: http://arduino.esp8266.com/staging/package_esp8266com_index.json . Phi\u00ean b\u1ea3n n\u00e0y c\u00f3 nh\u1eefng t\u00ednh n\u0103ng m\u1edbi h\u01a1n, tuy nhi\u00ean ch\u01b0a th\u1eadt s\u1ef1 \u0111\u01b0\u1ee3c ki\u1ec3m tra k\u1ef9.",
            "title": "H\u01b0\u1edbng d\u1eabn"
        },
        {
            "location": "/arduino/basic/install/#su-dung-git-version",
            "text": "Ph\u01b0\u01a1ng \u00e1n c\u00e0i \u0111\u1eb7t n\u00e0y khuy\u00ean d\u00f9ng cho nh\u1eefng ng\u01b0\u1eddi c\u00f3 th\u1ec3 \u0111\u00f3ng g\u00f3p v\u00e0o d\u1ef1 \u00e1n Arduino cho ESP8266 v\u00e0 developers.",
            "title": "S\u1eed d\u1ee5ng git version"
        },
        {
            "location": "/arduino/basic/install/#chuan-bi_1",
            "text": "Arduino 1.6.8 (hay m\u1edbi h\u01a1n, n\u1ebfu b\u1ea1n bi\u1ebft b\u1ea1n \u0111ang l\u00e0m g\u00ec)  git  python 2.7  terminal, console, or command prompt (ph\u1ee5 thu\u1ed9c h\u1ec7 \u0111i\u1ec1u h\u00e0nh c\u1ee7a b\u1ea1n)  K\u1ebft n\u1ed1i Internet",
            "title": "Chu\u1ea9n b\u1ecb"
        },
        {
            "location": "/arduino/basic/install/#huong-dan_1",
            "text": "M\u1edf  console  v\u00e0 cd \u0111\u1ebfn th\u01b0 m\u1ee5c Arduino. N\u00f3 c\u00f3 th\u1ec3 l\u00e0 th\u01b0 m\u1ee5c  sketchbook  (th\u01b0\u1eddng l\u00e0  <Documents>/Arduino ), hay th\u01b0 m\u1ee5c c\u1ee7a \u1ee8ng d\u1ee5ng Arduino, t\u00f9y b\u1ea1n ch\u1ecdn.  Clone repository n\u00e0y \u0111\u1ebfn th\u01b0 m\u1ee5c  hardware/esp8266com/esp8266 . Ho\u1eb7c b\u1ea1n c\u00f3 th\u1ec3 clone v\u00e0o n\u01a1i n\u00e0o \u0111\u00f3 v\u00e0 t\u1ea1o symlink b\u1eb1ng  ln -s , n\u1ebfu H\u1ec7 \u0111i\u1ec1u h\u00e0nh h\u1ed7 tr\u1ee3.   cd hardware\nmkdir esp8266com\ncd esp8266com\ngit clone https://github.com/esp8266/Arduino.git esp8266  C\u1ea5u tr\u00fac d\u1ef1 \u00e1n sau khi b\u1ea1n th\u1ef1c hi\u1ec7n xong:  Arduino\n    |- hardware\n    |- esp8266com\n        |- esp8266\n            |- bootloaders\n            |- cores\n            |- doc\n            |- libraries\n            |- package\n            |- tests\n            |- tools\n            |- variants\n            |- platform.txt\n            |- programmers.txt\n            |- README.md\n            |- boards.txt\n            `- LICENSE   T\u1ea3i binary tools   cd esp8266/tools\npython get.py   Kh\u1edfi \u0111\u1ed9ng l\u1ea1i Arduino",
            "title": "H\u01b0\u1edbng d\u1eabn"
        },
        {
            "location": "/arduino/basic/digital/",
            "text": "Digital IO\n\n\nV\u00ed d\u1ee5\n\n\n\u0110\u00e8n LED\n\n\nN\u00fat nh\u1ea5n & interrupt\n\n\n\n\n\n\n\n\n\n\nDigital IO\n#\n\n\nT\u00ean ch\u00e2n trong Arduino (Pin number) gi\u1ed1ng v\u1edbi th\u1ee9 t\u1ef1 ch\u00e2n c\u1ee7a ESP8266. \npinMode\n, \ndigitalRead\n, v\u00e0 \ndigitalWrite\n \u0111\u1ec1u s\u1eed d\u1ee5ng Pin Number nh\u01b0 nhau, v\u00ed d\u1ee5 nh\u01b0 \u0111\u1ecdc GPIO2, g\u1ecdi h\u00e0m \ndigitalRead(2)\n.\n\n\nCh\u00e2n GPIO0..15 c\u00f3 th\u1ec3 l\u00e0 \nINPUT\n, \nOUTPUT\n, hay \nINPUT_PULLUP\n.\nCh\u00e2n GPIO16 c\u00f3 th\u1ec3 l\u00e0 \nINPUT\n, \nOUTPUT\n hay \nINPUT_PULLDOWN_16\n. Khi kh\u1edfi \u0111\u1ed9ng, t\u1ea5t c\u1ea3 c\u00e1c ch\u00e2n s\u1ebd \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh l\u00e0 \nINPUT\n.\n\n\nM\u1ed7i ch\u00e2n c\u00f3 th\u1ec3 ph\u1ee5c v\u1ee5 cho m\u1ed9t t\u00ednh n\u0103ng n\u00e0o \u0111\u00f3, v\u00ed d\u1ee5 \nSerial\n, \nI2C\n, \nSPI\n. V\u00e0 t\u00ednh n\u0103ng \u0111\u00f3 s\u1ebd \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh \u0111\u00fang khi s\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n. H\u00ecnh b\u00ean d\u01b0\u1edbi th\u1ebb hi\u1ec7n s\u01a1 \u0111\u1ed3 ch\u00e2n \u0111\u1ed1i v\u1edbi module ESP-12 ph\u1ed5 bi\u1ebfn.\n\n\n\n\nGPIO6 v\u00e0 GPIO11 kh\u00f4ng \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n b\u1edfi v\u00ec n\u00f3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho vi\u1ec7c k\u1ebft n\u1ed1i v\u1edbi Flash. Vi\u1ec7c s\u1eed d\u1ee5ng 2 ch\u00e2n n\u00e0y c\u00f3 th\u1ec3 g\u00e2y l\u1ed7i ch\u01b0\u01a1ng tr\u00ecnh.\n\n\n\n\nL\u01b0u \u00fd\n\n\nM\u1ed9t s\u1ed1 board v\u00e0 module kh\u00e1c (v\u00ed d\u1ee5 ESP-12ED, NodeMCU 1.0) kh\u00f4ng c\u00f3 GPIO9 v\u00e0 GPIO11, h\u1ecd s\u1eed d\u1ee5ng v\u1edbi ch\u1ebf \u0111\u1ed9 \nDIO\n cho Flash, trong khi ESP12 ch\u00fang ta n\u00f3i b\u00ean tr\u00ean s\u1eed d\u1ee5ng ch\u1ebf \u0111\u1ed9 \nQIO\n\n\n\n\nNg\u1eaft GPIO h\u1ed7 tr\u1ee3 th\u00f4ng qua c\u00e1c h\u00e0m  \nattachInterrupt\n, \ndetachInterrupt\n \nNg\u1eaft GPIO c\u00f3 th\u1ec3 g\u00e1n cho b\u1ea5t k\u1ef3 GPIO n\u00e0o, ngo\u1ea1i tr\u1eeb \nGPIO16\n. \u0110\u1ec1u h\u1ed7 tr\u1ee3 c\u00e1c ng\u1eaft ti\u00eau chu\u1ea9n c\u1ee7a Arduino nh\u01b0: \nCHANGE\n, \nRISING\n, \nFALLING\n.\n\n\nV\u00ed d\u1ee5\n#\n\n\n\u0110\u00e8n LED\n#\n\n\nint ledPin = 16;                 // LED connected to digital pin 13\n\nvoid setup()\n{\n  pinMode(ledPin, OUTPUT);      // sets the digital pin as output\n}\n\nvoid loop()\n{\n  digitalWrite(ledPin, HIGH);   // sets the LED on\n  delay(1000);                  // waits for a second\n  digitalWrite(ledPin, LOW);    // sets the LED off\n  delay(1000);                  // waits for a second\n}\n\n\n\n\nN\u00fat nh\u1ea5n & interrupt\n#\n\n\nconst byte ledPin = 16;\nconst byte interruptPin = 0;\nvolatile byte state = LOW;\n\nvoid setup() {\n  pinMode(ledPin, OUTPUT);\n  pinMode(interruptPin, INPUT_PULLUP);\n  attachInterrupt(digitalPinToInterrupt(interruptPin), blink, CHANGE);\n}\n\nvoid loop() {\n  digitalWrite(ledPin, state);\n}\n\nvoid blink() {\n  state = !state;\n}",
            "title": "Digital"
        },
        {
            "location": "/arduino/basic/digital/#digital-io",
            "text": "T\u00ean ch\u00e2n trong Arduino (Pin number) gi\u1ed1ng v\u1edbi th\u1ee9 t\u1ef1 ch\u00e2n c\u1ee7a ESP8266.  pinMode ,  digitalRead , v\u00e0  digitalWrite  \u0111\u1ec1u s\u1eed d\u1ee5ng Pin Number nh\u01b0 nhau, v\u00ed d\u1ee5 nh\u01b0 \u0111\u1ecdc GPIO2, g\u1ecdi h\u00e0m  digitalRead(2) .  Ch\u00e2n GPIO0..15 c\u00f3 th\u1ec3 l\u00e0  INPUT ,  OUTPUT , hay  INPUT_PULLUP .\nCh\u00e2n GPIO16 c\u00f3 th\u1ec3 l\u00e0  INPUT ,  OUTPUT  hay  INPUT_PULLDOWN_16 . Khi kh\u1edfi \u0111\u1ed9ng, t\u1ea5t c\u1ea3 c\u00e1c ch\u00e2n s\u1ebd \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh l\u00e0  INPUT .  M\u1ed7i ch\u00e2n c\u00f3 th\u1ec3 ph\u1ee5c v\u1ee5 cho m\u1ed9t t\u00ednh n\u0103ng n\u00e0o \u0111\u00f3, v\u00ed d\u1ee5  Serial ,  I2C ,  SPI . V\u00e0 t\u00ednh n\u0103ng \u0111\u00f3 s\u1ebd \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh \u0111\u00fang khi s\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n. H\u00ecnh b\u00ean d\u01b0\u1edbi th\u1ebb hi\u1ec7n s\u01a1 \u0111\u1ed3 ch\u00e2n \u0111\u1ed1i v\u1edbi module ESP-12 ph\u1ed5 bi\u1ebfn.   GPIO6 v\u00e0 GPIO11 kh\u00f4ng \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n b\u1edfi v\u00ec n\u00f3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho vi\u1ec7c k\u1ebft n\u1ed1i v\u1edbi Flash. Vi\u1ec7c s\u1eed d\u1ee5ng 2 ch\u00e2n n\u00e0y c\u00f3 th\u1ec3 g\u00e2y l\u1ed7i ch\u01b0\u01a1ng tr\u00ecnh.   L\u01b0u \u00fd  M\u1ed9t s\u1ed1 board v\u00e0 module kh\u00e1c (v\u00ed d\u1ee5 ESP-12ED, NodeMCU 1.0) kh\u00f4ng c\u00f3 GPIO9 v\u00e0 GPIO11, h\u1ecd s\u1eed d\u1ee5ng v\u1edbi ch\u1ebf \u0111\u1ed9  DIO  cho Flash, trong khi ESP12 ch\u00fang ta n\u00f3i b\u00ean tr\u00ean s\u1eed d\u1ee5ng ch\u1ebf \u0111\u1ed9  QIO   Ng\u1eaft GPIO h\u1ed7 tr\u1ee3 th\u00f4ng qua c\u00e1c h\u00e0m   attachInterrupt ,  detachInterrupt  \nNg\u1eaft GPIO c\u00f3 th\u1ec3 g\u00e1n cho b\u1ea5t k\u1ef3 GPIO n\u00e0o, ngo\u1ea1i tr\u1eeb  GPIO16 . \u0110\u1ec1u h\u1ed7 tr\u1ee3 c\u00e1c ng\u1eaft ti\u00eau chu\u1ea9n c\u1ee7a Arduino nh\u01b0:  CHANGE ,  RISING ,  FALLING .",
            "title": "Digital IO"
        },
        {
            "location": "/arduino/basic/digital/#vi-du",
            "text": "",
            "title": "V\u00ed d\u1ee5"
        },
        {
            "location": "/arduino/basic/digital/#en-led",
            "text": "int ledPin = 16;                 // LED connected to digital pin 13\n\nvoid setup()\n{\n  pinMode(ledPin, OUTPUT);      // sets the digital pin as output\n}\n\nvoid loop()\n{\n  digitalWrite(ledPin, HIGH);   // sets the LED on\n  delay(1000);                  // waits for a second\n  digitalWrite(ledPin, LOW);    // sets the LED off\n  delay(1000);                  // waits for a second\n}",
            "title": "\u0110\u00e8n LED"
        },
        {
            "location": "/arduino/basic/digital/#nut-nhan-interrupt",
            "text": "const byte ledPin = 16;\nconst byte interruptPin = 0;\nvolatile byte state = LOW;\n\nvoid setup() {\n  pinMode(ledPin, OUTPUT);\n  pinMode(interruptPin, INPUT_PULLUP);\n  attachInterrupt(digitalPinToInterrupt(interruptPin), blink, CHANGE);\n}\n\nvoid loop() {\n  digitalWrite(ledPin, state);\n}\n\nvoid blink() {\n  state = !state;\n}",
            "title": "N\u00fat nh\u1ea5n &amp; interrupt"
        },
        {
            "location": "/arduino/basic/analog/",
            "text": "\u0110\u1ecdc Analog\n\n\nNg\u00f5 ra Analog\n\n\nV\u00ed d\u1ee5\n\n\n\u0110\u1ecdc gi\u00e1 tr\u1ecb analog ghi ra PWM\n\n\n\n\n\n\n\n\n\n\n\u0110\u1ecdc Analog\n#\n\n\nESP8266 c\u00f3 duy nh\u1ea5t 1 ch\u00e2n ADC, ch\u00fang ta c\u00f3 th\u1ec3 d\u00f9ng \u0111\u1ec3 \u0111\u1ecdc \u0111i\u1ec7n \u00e1p b\u00ean ngo\u00e0i, hay \u0111\u1ecdc \u0111i\u1ec7n \u00e1p VCC.\n\n\n\u0110\u1ec3 \u0111\u1ecdc \u0111i\u1ec7n \u00e1p b\u00ean ngo\u00e0i b\u1eb1ng ch\u00e2n ADC, s\u1eed d\u1ee5ng h\u00e0m \nanalogRead(A0)\n. \u0110i\u1ec7n \u00e1p ch\u1ea5p nh\u1eadn \u1edf m\u1ee9c \n0 \u2014 1.0V\n.\n\n\n\u0110\u1ec3 \u0111\u1ecdc \u0111i\u1ec7n \u00e1p c\u1ea5p (VCC) cho module, s\u1eed d\u1ee5ng \nESP.getVcc()\n v\u00e0 ch\u00e2n ADC b\u00ean ngo\u00e0i ph\u1ea3i \u0111\u1ec3 h\u1edf. \u0110\u1ed3ng th\u1eddi ph\u1ea3i c\u1ea5u h\u00ecnh d\u00f2ng l\u1ec7nh sau trong sketch:\n\n\nADC_MODE(ADC_VCC);\n\n\n\n\nD\u00f2ng l\u1ec7nh n\u00e0y c\u00f3 th\u1ec3 b\u1ea5t k\u1ef3 \u0111\u00e2u, \u1edf ph\u00eda ngo\u00e0i m\u1ed9t h\u00e0m - c\u00f3 th\u1ec3 coi nh\u01b0 ngang ng\u1eeda v\u1edbi d\u00f2ng \n#include\n trong sketch.\n\n\nNg\u00f5 ra Analog\n#\n\n\nanalogWrite(pin, value)\n cho ph\u00e9p s\u1eed d\u1ee5ng Software PWM tr\u00ean b\u1ea5t k\u1ef3 GPIO n\u00e0o t\u1eeb \n0..16\n.\n\n\nG\u1ecdi \nanalogWrite(pin, 0)\n s\u1ebd ng\u1eebng cho ph\u00e9p PWM tr\u00ean ch\u00e2n \u0111\u00f3. \nvalue\n c\u00f3 th\u1ec3 gi\u1edbi h\u1ea1n t\u1eeb 0 \u0111\u1ebfn  \nPWMRANGE\n, m\u1eb7c \u0111\u1ecbnh l\u00e0 1023. v\u00e0 c\u00f3 th\u1ec3 thay \u0111\u1ed5i b\u1edfi h\u00e0m \nanalogWriteRange(new_range)\n.\n\n\nT\u1ea7n s\u1ed1 PWM m\u1eb7c \u0111\u1ecbnh l\u00e0 1kHz. G\u1ecdi \nanalogWriteFreq(new_frequency)\n \u0111\u1ec3 thay \u0111\u1ed5i t\u1ea7n s\u1ed1.\n\n\nV\u00ed d\u1ee5\n#\n\n\n\u0110\u1ecdc gi\u00e1 tr\u1ecb analog ghi ra PWM\n#\n\n\nint ledPin = 16;      // LED connected to digital pin 9\nint val = 0;         // variable to store the read value\n\nvoid setup()\n{\n  pinMode(ledPin, OUTPUT);   // sets the pin as output\n}\n\nvoid loop()\n{\n  val = analogRead(A0);   // read the input pin\n  analogWrite(ledPin, val / 4);  // analogRead values go from 0 to 1023, analogWrite values from 0 to 255\n}",
            "title": "Analog"
        },
        {
            "location": "/arduino/basic/analog/#oc-analog",
            "text": "ESP8266 c\u00f3 duy nh\u1ea5t 1 ch\u00e2n ADC, ch\u00fang ta c\u00f3 th\u1ec3 d\u00f9ng \u0111\u1ec3 \u0111\u1ecdc \u0111i\u1ec7n \u00e1p b\u00ean ngo\u00e0i, hay \u0111\u1ecdc \u0111i\u1ec7n \u00e1p VCC.  \u0110\u1ec3 \u0111\u1ecdc \u0111i\u1ec7n \u00e1p b\u00ean ngo\u00e0i b\u1eb1ng ch\u00e2n ADC, s\u1eed d\u1ee5ng h\u00e0m  analogRead(A0) . \u0110i\u1ec7n \u00e1p ch\u1ea5p nh\u1eadn \u1edf m\u1ee9c  0 \u2014 1.0V .  \u0110\u1ec3 \u0111\u1ecdc \u0111i\u1ec7n \u00e1p c\u1ea5p (VCC) cho module, s\u1eed d\u1ee5ng  ESP.getVcc()  v\u00e0 ch\u00e2n ADC b\u00ean ngo\u00e0i ph\u1ea3i \u0111\u1ec3 h\u1edf. \u0110\u1ed3ng th\u1eddi ph\u1ea3i c\u1ea5u h\u00ecnh d\u00f2ng l\u1ec7nh sau trong sketch:  ADC_MODE(ADC_VCC);  D\u00f2ng l\u1ec7nh n\u00e0y c\u00f3 th\u1ec3 b\u1ea5t k\u1ef3 \u0111\u00e2u, \u1edf ph\u00eda ngo\u00e0i m\u1ed9t h\u00e0m - c\u00f3 th\u1ec3 coi nh\u01b0 ngang ng\u1eeda v\u1edbi d\u00f2ng  #include  trong sketch.",
            "title": "\u0110\u1ecdc Analog"
        },
        {
            "location": "/arduino/basic/analog/#ngo-ra-analog",
            "text": "analogWrite(pin, value)  cho ph\u00e9p s\u1eed d\u1ee5ng Software PWM tr\u00ean b\u1ea5t k\u1ef3 GPIO n\u00e0o t\u1eeb  0..16 .  G\u1ecdi  analogWrite(pin, 0)  s\u1ebd ng\u1eebng cho ph\u00e9p PWM tr\u00ean ch\u00e2n \u0111\u00f3.  value  c\u00f3 th\u1ec3 gi\u1edbi h\u1ea1n t\u1eeb 0 \u0111\u1ebfn   PWMRANGE , m\u1eb7c \u0111\u1ecbnh l\u00e0 1023. v\u00e0 c\u00f3 th\u1ec3 thay \u0111\u1ed5i b\u1edfi h\u00e0m  analogWriteRange(new_range) .  T\u1ea7n s\u1ed1 PWM m\u1eb7c \u0111\u1ecbnh l\u00e0 1kHz. G\u1ecdi  analogWriteFreq(new_frequency)  \u0111\u1ec3 thay \u0111\u1ed5i t\u1ea7n s\u1ed1.",
            "title": "Ng\u00f5 ra Analog"
        },
        {
            "location": "/arduino/basic/analog/#vi-du",
            "text": "",
            "title": "V\u00ed d\u1ee5"
        },
        {
            "location": "/arduino/basic/analog/#oc-gia-tri-analog-ghi-ra-pwm",
            "text": "int ledPin = 16;      // LED connected to digital pin 9\nint val = 0;         // variable to store the read value\n\nvoid setup()\n{\n  pinMode(ledPin, OUTPUT);   // sets the pin as output\n}\n\nvoid loop()\n{\n  val = analogRead(A0);   // read the input pin\n  analogWrite(ledPin, val / 4);  // analogRead values go from 0 to 1023, analogWrite values from 0 to 255\n}",
            "title": "\u0110\u1ecdc gi\u00e1 tr\u1ecb analog ghi ra PWM"
        },
        {
            "location": "/arduino/basic/timming-delay/",
            "text": "Th\u1eddi gian v\u00e0 Delay\n\n\n\n\n\n\nTh\u1eddi gian v\u00e0 Delay\n#\n\n\nmillis()\n v\u00e0 \nmicros()\n tr\u1ea3 v\u1ec1 mili gi\u00e2y v\u00e0 micro gi\u00e2y t\u00ednh t\u1eeb th\u1eddi \u0111i\u1ec3m reset.\n\n\ndelay(ms)\n s\u1ebd d\u1eebng sketch cho \nms\n micro gi\u00e2y, v\u1eabn cho ph\u00e9p WiFi v\u00e0 TCP/IP ho\u1ea1t \u0111\u1ed9ng.\nT\u01b0\u01a1ng t\u1ef1 v\u1edbi \ndelayMicroseconds(us)\n s\u1ebd d\u1eebng ch\u01b0\u01a1ng tr\u00ecnh v\u1edbi \nus\n micro gi\u00e2y.\n\n\nH\u00e3y ghi nh\u1edb r\u1eb1ng c\u00f3 r\u1ea5t nhi\u1ec1u th\u1ee9 \u0111ang c\u1ea7n ho\u1ea1t \u0111\u1ed9ng b\u00ean d\u01b0\u1edbi sketch c\u1ee7a b\u1ea1n. Khi WiFi \u0111\u00e3 k\u1ebft n\u1ed1i, th\u01b0 vi\u1ec7n WiFi v\u00e0 TCP/IP s\u1ebd c\u1ea7n th\u1eddi gian \u0111\u1ec3 th\u1ef1c hi\u1ec7n b\u1ea5t k\u1ef3 s\u1ef1 ki\u1ec7n n\u00e0o. Vi\u1ec7c g\u1ecdi g\u1ecdi h\u00e0m \nloop()\n, hay th\u1ef1c thi \ndelay\n s\u1ebd th\u1ef1c hi\u1ec7n \u0111i\u1ec1u \u0111\u00f3.\nCho n\u00ean, n\u1ebfu b\u1ea1n c\u00f3 b\u1ea5t k\u1ef3 v\u00f2ng l\u1eb7p n\u00e0o chi\u1ebfm nhi\u1ec1u th\u1eddi gian (>50ms) m\u00e0 kh\u00f4ng g\u1ecdi h\u00e0m \ndelay\n, b\u1ea1n n\u00ean \u0111\u1eb7t h\u00e0m \ndelay\n v\u00e0o trong h\u00e0m \u0111\u00f3, \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o WiFi stack ho\u1ea1t \u0111\u1ed9ng tr\u01a1n tru.\n\n\nCh\u00fang ta c\u0169ng c\u00f3 h\u00e0m \nyield()\n t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi \ndelay(0)\n. H\u00e0m \ndelayMicroseconds\n th\u00ec l\u1ea1i kh\u00f4ng th\u1ef1c hi\u1ec7n vi\u1ec7c chuy\u1ec3n task, \u0111\u01a1n gi\u1ea3n n\u00f3 ch\u1ec9 d\u00f9ng \u0111\u1ec3 delay v\u00e0 n\u1ebfu nhi\u1ec1u h\u01a1n 20 mili gi\u00e2y th\u00ec kh\u00f4ng \u0111\u01b0\u1ee3c khuy\u1ebfn kh\u00edch.",
            "title": "Th\u1eddi gian & Delay"
        },
        {
            "location": "/arduino/basic/timming-delay/#thoi-gian-va-delay",
            "text": "millis()  v\u00e0  micros()  tr\u1ea3 v\u1ec1 mili gi\u00e2y v\u00e0 micro gi\u00e2y t\u00ednh t\u1eeb th\u1eddi \u0111i\u1ec3m reset.  delay(ms)  s\u1ebd d\u1eebng sketch cho  ms  micro gi\u00e2y, v\u1eabn cho ph\u00e9p WiFi v\u00e0 TCP/IP ho\u1ea1t \u0111\u1ed9ng.\nT\u01b0\u01a1ng t\u1ef1 v\u1edbi  delayMicroseconds(us)  s\u1ebd d\u1eebng ch\u01b0\u01a1ng tr\u00ecnh v\u1edbi  us  micro gi\u00e2y.  H\u00e3y ghi nh\u1edb r\u1eb1ng c\u00f3 r\u1ea5t nhi\u1ec1u th\u1ee9 \u0111ang c\u1ea7n ho\u1ea1t \u0111\u1ed9ng b\u00ean d\u01b0\u1edbi sketch c\u1ee7a b\u1ea1n. Khi WiFi \u0111\u00e3 k\u1ebft n\u1ed1i, th\u01b0 vi\u1ec7n WiFi v\u00e0 TCP/IP s\u1ebd c\u1ea7n th\u1eddi gian \u0111\u1ec3 th\u1ef1c hi\u1ec7n b\u1ea5t k\u1ef3 s\u1ef1 ki\u1ec7n n\u00e0o. Vi\u1ec7c g\u1ecdi g\u1ecdi h\u00e0m  loop() , hay th\u1ef1c thi  delay  s\u1ebd th\u1ef1c hi\u1ec7n \u0111i\u1ec1u \u0111\u00f3.\nCho n\u00ean, n\u1ebfu b\u1ea1n c\u00f3 b\u1ea5t k\u1ef3 v\u00f2ng l\u1eb7p n\u00e0o chi\u1ebfm nhi\u1ec1u th\u1eddi gian (>50ms) m\u00e0 kh\u00f4ng g\u1ecdi h\u00e0m  delay , b\u1ea1n n\u00ean \u0111\u1eb7t h\u00e0m  delay  v\u00e0o trong h\u00e0m \u0111\u00f3, \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o WiFi stack ho\u1ea1t \u0111\u1ed9ng tr\u01a1n tru.  Ch\u00fang ta c\u0169ng c\u00f3 h\u00e0m  yield()  t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi  delay(0) . H\u00e0m  delayMicroseconds  th\u00ec l\u1ea1i kh\u00f4ng th\u1ef1c hi\u1ec7n vi\u1ec7c chuy\u1ec3n task, \u0111\u01a1n gi\u1ea3n n\u00f3 ch\u1ec9 d\u00f9ng \u0111\u1ec3 delay v\u00e0 n\u1ebfu nhi\u1ec1u h\u01a1n 20 mili gi\u00e2y th\u00ec kh\u00f4ng \u0111\u01b0\u1ee3c khuy\u1ebfn kh\u00edch.",
            "title": "Th\u1eddi gian v\u00e0 Delay"
        },
        {
            "location": "/arduino/basic/serial/",
            "text": "Serial\n\n\nSoftware Serial\n\n\n\n\n\n\nSerial\n#\n\n\n\u0110\u1ed1i t\u01b0\u1ee3ng \nSerial\n l\u00e0m vi\u1ec7c gi\u1ed1ng nhi\u1ec1u v\u1edbi Arduino b\u00ecnh th\u01b0\u1eddng. Ngo\u1ea1i tr\u1eeb vi\u1ec7c ph\u1ea7n c\u1ee9ng c\u1ee7a ESP8266 c\u00f3 th\u00eam 128 bytes RAM FIFO v\u00e0 256 bytes RX-TX Buffer. C\u1ea3 TX v\u00e0 RX \u0111\u1ec1u truy\u1ec1n nh\u1eadn d\u1ef1a v\u00e0o interrupt. Vi\u1ec7c \u0111\u1ecdc v\u00e0 ghi d\u1eef li\u1ec7u ch\u1ec9 b\u1ecb block l\u1ea1i khi FIFO/buffer \u0111\u1ea7y/r\u1ed7ng.\n\n\nSerial\n s\u1eed d\u1ee5ng l\u00e0 UART0, \u0111\u01b0\u1ee3c map th\u1eb1ng v\u00e0o ch\u00e2n GPIO1 (TX) v\u00e0 GPIO3 (RX). Serial c\u00f3 th\u1ec3 REMAP l\u1ea1i v\u00e0o GPIO15 (TX) v\u00e0 GPIO13 (RX) b\u1edfi vi\u1ec7c g\u1ecdi h\u00e0m \nSerial.swap()\n sau khi g\u1ecdi \nSerial.begin\n. G\u1ecdi \nswap\n l\u1ea1i s\u1ebd MAP UART0 tr\u1edf l\u1ea1i GPIO1 v\u00e0 GPIO3.\n\n\nSerial1\n s\u1eed d\u1ee5ng UART1, TX pin l\u00e0 ch\u00e2n GPIO2. UART1 kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 nh\u1eadn d\u1eef li\u1ec7u b\u1edfi v\u00ec b\u00ecnh th\u01b0\u1eddng n\u00f3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 k\u1ebft n\u1ed1i v\u1edbi Flash. \u0110\u1ec3 s\u1eed d\u1ee5ng \nSerial1\n, g\u1ecdi \nSerial1.begin(baudrate)\n.\n\n\n\n\nL\u01b0u \u00fd\n\n\nN\u1ebfu \nSerial1\n kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng v\u00e0 \nSerial\n kh\u00f4ng b\u1ecb REMAP - TX cho UART0 c\u00f3 th\u1ec3 MAP sang GPIO2 b\u1edfi g\u1ecdi h\u00e0m \nSerial.set_tx(2)\n sau \nSerial.begin\n hay tr\u1ef1c ti\u1ebfp v\u1edbi \nSerial.begin(baud, config, mode, 2)\n.\n\n\n\n\nM\u1eb7c \u0111\u1ecbnh, t\u1ea5t c\u1ea3 th\u00f4ng tin chu\u1ea9n \u0111o\u00e1n h\u1ec7 th\u1ed1ng v\u00e0 th\u01b0 vi\u1ec7n s\u1ebd b\u1ecb b\u1ecf qua nesu g\u1ecdi h\u00e0m \nSerial.begin\n. \u0110\u1ec3 cho ph\u00e9p nh\u1eefng th\u00f4ng tin \u0111\u00f3, c\u00f3 th\u1ec3 g\u1ecdi \nSerial.setDebugOutput(true)\n. \u0110\u1ec3 chuy\u1ec3n th\u00f4ng tin \u0111\u00f3 ra  \nSerial1\n, g\u1ecdi h\u00e0m \nSerial1.setDebugOutput(true)\n.\n\n\n\n\nL\u01b0u \u00fd\n\n\nB\u1ea1n c\u0169ng c\u1ea7n ph\u1ea3i g\u1ecdi \nSerial.setDebugOutput(true)\n \u0111\u1ec3 cho ph\u00e9p h\u00e0m \nprintf()\n.\n\n\n\n\nC\u1ea3 \u0111\u1ed1i t\u01b0\u1ee3ng \nSerial\n v\u00e0 \nSerial1\n h\u1ed7 tr\u1ee3 5, 6, 7, 8 bits d\u1eef li\u1ec7u, odd (O), even (E), v\u00e0 no (N) parity, v\u00e0 1 hay 2 bits stop. \u0110\u1ec3 c\u1ea5u h\u00ecnh c\u00e1c mode tr\u00ean, g\u1ecdi \nSerial.begin(baudrate, SERIAL_8N1)\n, \nSerial.begin(baudrate, SERIAL_6E2)\n, v.v..\n\n\nM\u1ed9t ph\u01b0\u01a1ng th\u1ee9c \u0111\u01b0\u1ee3c hi\u1ec7n th\u1ef1c tr\u00ean c\u1ea3 2 \nSerial\n v\u00e0 \nSerial1\n \u0111\u1ec3 l\u1ea5y baud rate hi\u1ec7n t\u1ea1i nh\u01b0 sau: \nSerial.baudRate()\n, \nSerial1.baudRate()\n tr\u1ea3 v\u1ec1 m\u1ed9t s\u1ed1 \nint\n c\u1ee7a t\u1ed1c \u0111\u1ed9 Baud hi\u1ec7n t\u1ea1i. V\u00ed d\u1ee5\n\n\n// Set Baud rate 57600\nSerial.begin(57600);\n\n// Ki\u1ec3m tra baud rate hi\u1ec7n t\u1ea1i\nint br = Serial.baudRate();\n\n// s\u1ebd xu\u1ea5t ra \"Serial is 57600 bps\"\nSerial.printf(\"Serial is %d bps\", br);\n\n\n\n\nSoftware Serial\n#\n\n\nNgo\u00e0i ra, c\u00e1c Contributor Team ESP8266 Arduino c\u0169ng ho\u00e0n thi\u1ec7n th\u01b0 vi\u1ec7n \nSoftware Serial\n cho ESP8266, xem \npull request\n.    \n\n\n\n\nC\u1ea9n th\u1eadn\n\n\nTh\u01b0 vi\u1ec7n n\u00e0y \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n ch\u1ec9  \nduy nh\u1ea5t cho ESP8266 boards\n, v\u00e0 s\u1ebd kh\u00f4ng l\u00e0m vi\u1ec7c v\u1edbi c\u00e1c th\u01b0 vi\u1ec7n Arduino kh\u00e1c.",
            "title": "Serial"
        },
        {
            "location": "/arduino/basic/serial/#serial",
            "text": "\u0110\u1ed1i t\u01b0\u1ee3ng  Serial  l\u00e0m vi\u1ec7c gi\u1ed1ng nhi\u1ec1u v\u1edbi Arduino b\u00ecnh th\u01b0\u1eddng. Ngo\u1ea1i tr\u1eeb vi\u1ec7c ph\u1ea7n c\u1ee9ng c\u1ee7a ESP8266 c\u00f3 th\u00eam 128 bytes RAM FIFO v\u00e0 256 bytes RX-TX Buffer. C\u1ea3 TX v\u00e0 RX \u0111\u1ec1u truy\u1ec1n nh\u1eadn d\u1ef1a v\u00e0o interrupt. Vi\u1ec7c \u0111\u1ecdc v\u00e0 ghi d\u1eef li\u1ec7u ch\u1ec9 b\u1ecb block l\u1ea1i khi FIFO/buffer \u0111\u1ea7y/r\u1ed7ng.  Serial  s\u1eed d\u1ee5ng l\u00e0 UART0, \u0111\u01b0\u1ee3c map th\u1eb1ng v\u00e0o ch\u00e2n GPIO1 (TX) v\u00e0 GPIO3 (RX). Serial c\u00f3 th\u1ec3 REMAP l\u1ea1i v\u00e0o GPIO15 (TX) v\u00e0 GPIO13 (RX) b\u1edfi vi\u1ec7c g\u1ecdi h\u00e0m  Serial.swap()  sau khi g\u1ecdi  Serial.begin . G\u1ecdi  swap  l\u1ea1i s\u1ebd MAP UART0 tr\u1edf l\u1ea1i GPIO1 v\u00e0 GPIO3.  Serial1  s\u1eed d\u1ee5ng UART1, TX pin l\u00e0 ch\u00e2n GPIO2. UART1 kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 nh\u1eadn d\u1eef li\u1ec7u b\u1edfi v\u00ec b\u00ecnh th\u01b0\u1eddng n\u00f3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 k\u1ebft n\u1ed1i v\u1edbi Flash. \u0110\u1ec3 s\u1eed d\u1ee5ng  Serial1 , g\u1ecdi  Serial1.begin(baudrate) .   L\u01b0u \u00fd  N\u1ebfu  Serial1  kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng v\u00e0  Serial  kh\u00f4ng b\u1ecb REMAP - TX cho UART0 c\u00f3 th\u1ec3 MAP sang GPIO2 b\u1edfi g\u1ecdi h\u00e0m  Serial.set_tx(2)  sau  Serial.begin  hay tr\u1ef1c ti\u1ebfp v\u1edbi  Serial.begin(baud, config, mode, 2) .   M\u1eb7c \u0111\u1ecbnh, t\u1ea5t c\u1ea3 th\u00f4ng tin chu\u1ea9n \u0111o\u00e1n h\u1ec7 th\u1ed1ng v\u00e0 th\u01b0 vi\u1ec7n s\u1ebd b\u1ecb b\u1ecf qua nesu g\u1ecdi h\u00e0m  Serial.begin . \u0110\u1ec3 cho ph\u00e9p nh\u1eefng th\u00f4ng tin \u0111\u00f3, c\u00f3 th\u1ec3 g\u1ecdi  Serial.setDebugOutput(true) . \u0110\u1ec3 chuy\u1ec3n th\u00f4ng tin \u0111\u00f3 ra   Serial1 , g\u1ecdi h\u00e0m  Serial1.setDebugOutput(true) .   L\u01b0u \u00fd  B\u1ea1n c\u0169ng c\u1ea7n ph\u1ea3i g\u1ecdi  Serial.setDebugOutput(true)  \u0111\u1ec3 cho ph\u00e9p h\u00e0m  printf() .   C\u1ea3 \u0111\u1ed1i t\u01b0\u1ee3ng  Serial  v\u00e0  Serial1  h\u1ed7 tr\u1ee3 5, 6, 7, 8 bits d\u1eef li\u1ec7u, odd (O), even (E), v\u00e0 no (N) parity, v\u00e0 1 hay 2 bits stop. \u0110\u1ec3 c\u1ea5u h\u00ecnh c\u00e1c mode tr\u00ean, g\u1ecdi  Serial.begin(baudrate, SERIAL_8N1) ,  Serial.begin(baudrate, SERIAL_6E2) , v.v..  M\u1ed9t ph\u01b0\u01a1ng th\u1ee9c \u0111\u01b0\u1ee3c hi\u1ec7n th\u1ef1c tr\u00ean c\u1ea3 2  Serial  v\u00e0  Serial1  \u0111\u1ec3 l\u1ea5y baud rate hi\u1ec7n t\u1ea1i nh\u01b0 sau:  Serial.baudRate() ,  Serial1.baudRate()  tr\u1ea3 v\u1ec1 m\u1ed9t s\u1ed1  int  c\u1ee7a t\u1ed1c \u0111\u1ed9 Baud hi\u1ec7n t\u1ea1i. V\u00ed d\u1ee5  // Set Baud rate 57600\nSerial.begin(57600);\n\n// Ki\u1ec3m tra baud rate hi\u1ec7n t\u1ea1i\nint br = Serial.baudRate();\n\n// s\u1ebd xu\u1ea5t ra \"Serial is 57600 bps\"\nSerial.printf(\"Serial is %d bps\", br);",
            "title": "Serial"
        },
        {
            "location": "/arduino/basic/serial/#software-serial",
            "text": "Ngo\u00e0i ra, c\u00e1c Contributor Team ESP8266 Arduino c\u0169ng ho\u00e0n thi\u1ec7n th\u01b0 vi\u1ec7n  Software Serial  cho ESP8266, xem  pull request .       C\u1ea9n th\u1eadn  Th\u01b0 vi\u1ec7n n\u00e0y \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n ch\u1ec9   duy nh\u1ea5t cho ESP8266 boards , v\u00e0 s\u1ebd kh\u00f4ng l\u00e0m vi\u1ec7c v\u1edbi c\u00e1c th\u01b0 vi\u1ec7n Arduino kh\u00e1c.",
            "title": "Software Serial"
        },
        {
            "location": "/arduino/basic/progmem/",
            "text": "Progmem\n\n\n\n\n\n\nProgmem\n#\n\n\nB\u1ed9 nh\u1edb ch\u1ec9 \u0111\u1ecdc l\u01b0u trong v\u00f9ng nh\u1edb Flash c\u00f3 c\u00f9ng c\u00e1ch ho\u1ea1t \u0111\u1ed9ng v\u1edbi Arduino th\u00f4ng th\u01b0\u1eddng. \u0110\u1eb7t chu\u1ed7i d\u1eef li\u1ec7u hay string v\u00e0o v\u00f9ng nh\u1edb ch\u1ec9 \u0111\u1ecdc gi\u00fap ti\u1ebft ki\u1ec7m b\u1ed9 nh\u1edb RAM c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh.\n\n\n\n\nL\u01b0u \u00fd\n\n\n\u0110i\u1ec1u kh\u00e1c bi\u1ec7t nh\u1ea5t l\u00e0 chu\u1ed7i d\u1eef li\u1ec7u \u0111\u1ecbnh ngh\u0129a s\u1eb5n n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ed9p chung. N\u1ebfu b\u1ea1n \u0111\u1eb7t chu\u1ed7i trong \nF(\"\")\n v\u00e0/ho\u1eb7c trong \nPSTR(\"\")\n s\u1ebd chi\u1ebfm d\u1ee5ng b\u1ed9 nh\u1edb cho m\u1ed7i instance c\u1ee7a m\u00e3. Cho n\u00ean b\u1ea1n c\u1ea7n t\u1ef1 qu\u1ea3n l\u00fd nh\u1eefng chu\u1ed7i string tr\u00f9ng.\n\n\n\n\nM\u1ed9t s\u1ed1 macro h\u1ed7 tr\u1ee3 c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng s\u1eed d\u1ee5ng \nconst PROGMEM\n \u0111\u1ec3 c\u00f3 th\u1ec3 g\u1ecdi  t\u1eeb \n__FlashStringHelper\n h\u00e0m \nFPSTR()\n. \n\n\nString response1;\nresponse1 += F(\"http:\");\n...\nString response2;\nresponse2 += F(\"http:\");\n\n\n\n\nusing FPSTR would become\u2026\n\n\nconst char HTTP[] PROGMEM = \"http:\";\n...\n{\n    String response1;\n    response1 += FPSTR(HTTP);\n    ...\n    String response2;\n    response2 += FPSTR(HTTP);\n}",
            "title": "Progmem"
        },
        {
            "location": "/arduino/basic/progmem/#progmem",
            "text": "B\u1ed9 nh\u1edb ch\u1ec9 \u0111\u1ecdc l\u01b0u trong v\u00f9ng nh\u1edb Flash c\u00f3 c\u00f9ng c\u00e1ch ho\u1ea1t \u0111\u1ed9ng v\u1edbi Arduino th\u00f4ng th\u01b0\u1eddng. \u0110\u1eb7t chu\u1ed7i d\u1eef li\u1ec7u hay string v\u00e0o v\u00f9ng nh\u1edb ch\u1ec9 \u0111\u1ecdc gi\u00fap ti\u1ebft ki\u1ec7m b\u1ed9 nh\u1edb RAM c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh.   L\u01b0u \u00fd  \u0110i\u1ec1u kh\u00e1c bi\u1ec7t nh\u1ea5t l\u00e0 chu\u1ed7i d\u1eef li\u1ec7u \u0111\u1ecbnh ngh\u0129a s\u1eb5n n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ed9p chung. N\u1ebfu b\u1ea1n \u0111\u1eb7t chu\u1ed7i trong  F(\"\")  v\u00e0/ho\u1eb7c trong  PSTR(\"\")  s\u1ebd chi\u1ebfm d\u1ee5ng b\u1ed9 nh\u1edb cho m\u1ed7i instance c\u1ee7a m\u00e3. Cho n\u00ean b\u1ea1n c\u1ea7n t\u1ef1 qu\u1ea3n l\u00fd nh\u1eefng chu\u1ed7i string tr\u00f9ng.   M\u1ed9t s\u1ed1 macro h\u1ed7 tr\u1ee3 c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng s\u1eed d\u1ee5ng  const PROGMEM  \u0111\u1ec3 c\u00f3 th\u1ec3 g\u1ecdi  t\u1eeb  __FlashStringHelper  h\u00e0m  FPSTR() .   String response1;\nresponse1 += F(\"http:\");\n...\nString response2;\nresponse2 += F(\"http:\");  using FPSTR would become\u2026  const char HTTP[] PROGMEM = \"http:\";\n...\n{\n    String response1;\n    response1 += FPSTR(HTTP);\n    ...\n    String response2;\n    response2 += FPSTR(HTTP);\n}",
            "title": "Progmem"
        },
        {
            "location": "/arduino/libraries/esp8266-wifi/",
            "text": "Th\u01b0 vi\u1ec7n ESP8266WiFi\n\n\n\n\n\n\nTh\u01b0 vi\u1ec7n ESP8266WiFi\n#\n\n\nTh\u01b0 vi\u1ec7n ESP8266WiFi c\u00f3 khung gi\u1ed1ng nh\u01b0 c\u00e1c th\u01b0 vi\u1ec7n wifi kh\u00e1c. B\u00ean c\u1ea1nh \u0111\u00f3 c\u0169ng c\u00f3 nh\u1eefng \u0111i\u1ec3m kh\u00e1c bi\u1ec7t, g\u1ed3m :\n\n\n\n\nWiFi.mode(m)\n: thi\u1ebft l\u1eadp ch\u1ebf \u0111\u1ed9 \nWIFI_AP\n, \nWIFI_STA\n, \nWIFI_AP_STA\n ho\u1eb7c \nWIFI_OFF\n.\n\n\nG\u1ecdi \nWiFi.softAP(ssid)\n \u0111\u1ec3 thi\u1ebft l\u1eadp m\u1ed9t open network\n\n\nG\u1ecdi \nWiFi.softAP(ssid, password)\n \u0111\u1ec3 thi\u1ebft l\u1eadp \nWPA2-PSK\n ( m\u1eadt kh\u1ea5u \u00edt nh\u1ea5t 8 k\u00fd t\u1ef1 )\n\n\nWiFi.macAddress(mac)\n cho \nSTA\n, \nWiFi.softAPmacAddress(mac)\n cho \nAP\n.\n\n\nWiFi.localIP()\n cho \nSTA\n, \nWiFi.softAPIP()\n cho \nAP\n.\n\n\nWiFi.printDiag(Serial)\n s\u1ebd hi\u1ec3n th\u1ecb nh\u1eefng th\u00f4ng tin d\u1ef1 \u0111o\u00e1n\n\n\nWiFiUDP\n l\u1edbp h\u1ed5 tr\u1ee3 g\u1eefi v\u00e0 nh\u1eadn c\u00e1c g\u00f3i tin multicast tr\u00ean giao di\u1ec7n STA. Khi g\u1eefi m\u1ed9t g\u00f3i tin multicast, thay th\u1ebf \nudp.beginPacket(addr, port)\n b\u1eb1ng \nudp.beginPacketMulticast(addr, port, WiFi.localIP())\n. Khi \u0111ang l\u1eafng nghe nh\u1eefng g\u00f3i tin multicast, thay th\u1ebf \nudp.begin(port)\n b\u1eb1ng \nudp.beginMulticast(WiFi.localIP()\n, \nmulticast_ip_addr, port)\n. B\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \nudp.destinationIP()\n \u0111\u1ec3 ph\u00e2n bi\u1ec7t g\u00f3i tin nh\u1eadn \u0111\u01b0\u1ee3c \u0111\u1ebfn multicast ho\u1eb7c \u0111\u1ecba ch\u1ec9 unicast.\n\n\n\n\nWiFiServer\n, \nWiFiClient\n, v\u00e0 \nWiFiUDP\n th\u1ef1c hi\u1ec7n theo c\u00f9ng m\u1ed9t c\u00e1ch nh\u01b0 khung th\u01b0 vi\u1ec7n WiFi. C\u00f3 b\u1ed1n v\u00ed d\u1ee5 \u0111\u01b0\u1ee3c l\u00e0m m\u1eabu cho th\u01b0 vi\u1ec7n n\u00e0y. B\u1ea1n c\u00f3 th\u1ec3 xem chi ti\u1ebft c\u00e1c l\u1ec7nh \u1edf \u0111\u00e2y : \nhttp://www.arduino.cc/en/Reference/WiFi",
            "title": "ESP8266WiFi"
        },
        {
            "location": "/arduino/libraries/esp8266-wifi/#thu-vien-esp8266wifi",
            "text": "Th\u01b0 vi\u1ec7n ESP8266WiFi c\u00f3 khung gi\u1ed1ng nh\u01b0 c\u00e1c th\u01b0 vi\u1ec7n wifi kh\u00e1c. B\u00ean c\u1ea1nh \u0111\u00f3 c\u0169ng c\u00f3 nh\u1eefng \u0111i\u1ec3m kh\u00e1c bi\u1ec7t, g\u1ed3m :   WiFi.mode(m) : thi\u1ebft l\u1eadp ch\u1ebf \u0111\u1ed9  WIFI_AP ,  WIFI_STA ,  WIFI_AP_STA  ho\u1eb7c  WIFI_OFF .  G\u1ecdi  WiFi.softAP(ssid)  \u0111\u1ec3 thi\u1ebft l\u1eadp m\u1ed9t open network  G\u1ecdi  WiFi.softAP(ssid, password)  \u0111\u1ec3 thi\u1ebft l\u1eadp  WPA2-PSK  ( m\u1eadt kh\u1ea5u \u00edt nh\u1ea5t 8 k\u00fd t\u1ef1 )  WiFi.macAddress(mac)  cho  STA ,  WiFi.softAPmacAddress(mac)  cho  AP .  WiFi.localIP()  cho  STA ,  WiFi.softAPIP()  cho  AP .  WiFi.printDiag(Serial)  s\u1ebd hi\u1ec3n th\u1ecb nh\u1eefng th\u00f4ng tin d\u1ef1 \u0111o\u00e1n  WiFiUDP  l\u1edbp h\u1ed5 tr\u1ee3 g\u1eefi v\u00e0 nh\u1eadn c\u00e1c g\u00f3i tin multicast tr\u00ean giao di\u1ec7n STA. Khi g\u1eefi m\u1ed9t g\u00f3i tin multicast, thay th\u1ebf  udp.beginPacket(addr, port)  b\u1eb1ng  udp.beginPacketMulticast(addr, port, WiFi.localIP()) . Khi \u0111ang l\u1eafng nghe nh\u1eefng g\u00f3i tin multicast, thay th\u1ebf  udp.begin(port)  b\u1eb1ng  udp.beginMulticast(WiFi.localIP() ,  multicast_ip_addr, port) . B\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng  udp.destinationIP()  \u0111\u1ec3 ph\u00e2n bi\u1ec7t g\u00f3i tin nh\u1eadn \u0111\u01b0\u1ee3c \u0111\u1ebfn multicast ho\u1eb7c \u0111\u1ecba ch\u1ec9 unicast.   WiFiServer ,  WiFiClient , v\u00e0  WiFiUDP  th\u1ef1c hi\u1ec7n theo c\u00f9ng m\u1ed9t c\u00e1ch nh\u01b0 khung th\u01b0 vi\u1ec7n WiFi. C\u00f3 b\u1ed1n v\u00ed d\u1ee5 \u0111\u01b0\u1ee3c l\u00e0m m\u1eabu cho th\u01b0 vi\u1ec7n n\u00e0y. B\u1ea1n c\u00f3 th\u1ec3 xem chi ti\u1ebft c\u00e1c l\u1ec7nh \u1edf \u0111\u00e2y :  http://www.arduino.cc/en/Reference/WiFi",
            "title": "Th\u01b0 vi\u1ec7n ESP8266WiFi"
        },
        {
            "location": "/arduino/libraries/esp-api/",
            "text": "ESP-specific APIs\n#\n\n\nAPIs \u0111\u1ec1 c\u1eadp \u0111\u1ebfn deep sleep v\u00e0 watchdog timer c\u00f3 t\u00e1c d\u1ee5ng v\u1edbi c\u00e1c ESP phi\u00ean b\u1ea3n Alpha.\n\n\n\n\nESP.deepSleep(microseconds, mode)\n s\u1ebd \u0111\u01b0a chip v\u00e0o ch\u1ebf \u0111\u1ed9 deep sleep, v\u1edbi \nmode\n l\u00e0 m\u1ed9t trong c\u00e1ch th\u00f4ng s\u1ed1 \nWAKE_RF_DEFAULT\n, \nWAKE_RFCAL\n, \nWAKE_NO_RFCAL\n, \nWAKE_RF_DISABLED\n. ( GPIO16 c\u1ea7n \u0111\u01b0\u1ee3c n\u1ed1i t\u1edbi RST \u0111\u1ec3 \u0111\u01b0a chip ra kh\u1ecfi deepSleep )\n\n\nESP.rtcUserMemoryWrite(offset, &data, sizeof(data))\n v\u00e0 \nESP.rtcUserMemoryRead(offset, &data, sizeof(data))\n cho ph\u00e9p d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef v\u00e0o b\u1ed9 nh\u1edb v\u00e0 l\u1ea5y d\u1eef li\u1ec7u t\u1eeb \nRTC user memory\n c\u1ee7a chip t\u01b0\u01a1ng \u1ee9ng. T\u1ed5ng k\u00edch th\u01b0\u1edbc c\u1ee7a \nRTC user memory\n l\u00e0 512 bytes, do \u0111\u00f3 \noffser + sizeof(data)\n kh\u00f4ng \u0111\u01b0\u1ee3c v\u01b0\u1ee3t qu\u00e1 512 bytes. D\u1eef li\u1ec7u \u0111\u01b0\u1ee3c x\u1ebfp th\u00e0nh t\u1eebng ph\u1ea7n 4-bytes. D\u1eef li\u1ec7u \u0111\u00e3 \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c d\u00f9ng gi\u1eef c\u00e1c chu k\u1ef3 \ndeep sleep\n. Tuy nhi\u00ean, d\u1eef li\u1ec7u c\u00f3 th\u1ec3 b\u1ecb m\u1ea5t sau \npower cycling\n c\u1ee7a chip.\n\n\nESP.restart()\n kh\u1edfi \u0111\u1ed9ng l\u1ea1i CPU.\n\n\nESP.getResetReason()\n tr\u1ea3 v\u1ec1 chu\u1ed7i ch\u1ee9a nguy\u00ean do thi\u1ebft l\u1eadp l\u1ea1i \u1edf \u0111\u1ecbnh d\u1ea1ng m\u00e0 con ng\u01b0\u1eddi hi\u1ec3u \u0111\u01b0\u1ee3c.\n\n\nESP.getFreeHeap()\n tr\u1ea3 v\u1ec1 k\u00edch th\u01b0\u1edbc heap tr\u1ed1ng.\n\n\nESP.getChipId()\n tr\u1ea3 v\u1ec1 ID chip ESP8266 nh\u01b0 m\u1ed9t s\u1ed1 nguy\u1ec3n 32-bit.\n\n\n\n\nM\u1ed9t s\u1ed1 API c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 bi\u1ebft th\u00f4ng tin v\u1ec1 flash:\n#\n\n\n\n\nESP.getFlashChipId()\n tr\u1ea3 v\u1ec1 ID chip flash theo s\u1ed1 nguy\u00ean 32-bit. \n\n\nESP.getFlashChipSize()\n tr\u1ea3 v\u1ec1 dung l\u01b0\u1ee3ng c\u1ee7a chip flash theo bytes, nh\u01b0 \u0111\u01b0\u1ee3c th\u1ea5y trong SDK ( dung l\u01b0\u1ee3ng flash c\u00f3 th\u1ec3 nh\u1ecf h\u01a1n dung l\u01b0\u1ee3ng th\u1ef1c t\u1ebf ).\n\n\nESP.getFlashChipSpeed(void)\n tr\u1ea3 v\u1ec1 t\u1ea7n s\u1ed1 c\u1ee7a flash theo \nHz\n.\n\n\nESP.getCycleCount()\n tr\u1ea3 v\u1ec1 s\u1ed1 chu k\u1ef3 m\u00e0 CPU \u0111\u00e3 th\u1ef1c hi\u1ec7n k\u1ec3 t\u1eeb khi b\u1eaft \u0111\u1ea7u b\u1eb1ng s\u1ed1 nguy\u00ean 32-bit. \u0110i\u1ec1u n\u00e0y r\u1ea5t h\u01b0u \u00edch \u0111\u1ec3 bi\u1ebft ch\u00ednh x\u00e1c th\u1eddi gian th\u1ef1c hi\u1ec7n nh\u1eefng c\u00f4ng vi\u1ec7c \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n r\u1ea5t nhanh, gi\u1ed1ng nh\u01b0 bit banging.\n\n\nESP.getVcc()\n c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111o \u0111i\u1ec7n \u00e1p cung c\u1ea5p. ESP c\u1ea9n ph\u1ea3i c\u1ea5u h\u00ecnh l\u1ea1i ADC l\u00fac kh\u1edfi \u0111\u1ed9ng \u0111\u1ec3 t\u00ednh n\u0103ng c\u00f3 s\u1eb3n. Th\u00eam d\u00f2ng l\u1ec7nh sau \u1edf \u0111\u1ea7u ch\u01b0\u01a1ng tr\u00ecnh th\u1ee9c vi\u1ec7c vi\u1ec7c n\u00e0y \u0111\u1ec3 s\u1eed d\u1ee5ng \ngetVcc\n :\n\n\nADC_MODE(ADC_VCC);\n\n\n\n\nCh\u00e2n TOUT ph\u1ea3i ng\u1eaft k\u1ebft n\u1ed1i \u1edf ch\u1ebf \u0111\u1ed9 n\u00e0y.\n\n\n\n\nQuan tr\u1ecdng\n\n\nM\u1eb7c \u0111\u1ecbnh ADC \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh \u0111\u1ec3 \u0111\u1ecdc t\u1eeb ch\u00e2n TOUT, vi\u1ec7c s\u1eed d\u1ee5ng \nanalogRead(A0)\n, v\u00e0 \nESP.getVCC()\n kh\u00f4ng c\u00f3 hi\u1ec7u l\u1ef1c.",
            "title": "ESP-API"
        },
        {
            "location": "/arduino/libraries/esp-api/#esp-specific-apis",
            "text": "APIs \u0111\u1ec1 c\u1eadp \u0111\u1ebfn deep sleep v\u00e0 watchdog timer c\u00f3 t\u00e1c d\u1ee5ng v\u1edbi c\u00e1c ESP phi\u00ean b\u1ea3n Alpha.   ESP.deepSleep(microseconds, mode)  s\u1ebd \u0111\u01b0a chip v\u00e0o ch\u1ebf \u0111\u1ed9 deep sleep, v\u1edbi  mode  l\u00e0 m\u1ed9t trong c\u00e1ch th\u00f4ng s\u1ed1  WAKE_RF_DEFAULT ,  WAKE_RFCAL ,  WAKE_NO_RFCAL ,  WAKE_RF_DISABLED . ( GPIO16 c\u1ea7n \u0111\u01b0\u1ee3c n\u1ed1i t\u1edbi RST \u0111\u1ec3 \u0111\u01b0a chip ra kh\u1ecfi deepSleep )  ESP.rtcUserMemoryWrite(offset, &data, sizeof(data))  v\u00e0  ESP.rtcUserMemoryRead(offset, &data, sizeof(data))  cho ph\u00e9p d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef v\u00e0o b\u1ed9 nh\u1edb v\u00e0 l\u1ea5y d\u1eef li\u1ec7u t\u1eeb  RTC user memory  c\u1ee7a chip t\u01b0\u01a1ng \u1ee9ng. T\u1ed5ng k\u00edch th\u01b0\u1edbc c\u1ee7a  RTC user memory  l\u00e0 512 bytes, do \u0111\u00f3  offser + sizeof(data)  kh\u00f4ng \u0111\u01b0\u1ee3c v\u01b0\u1ee3t qu\u00e1 512 bytes. D\u1eef li\u1ec7u \u0111\u01b0\u1ee3c x\u1ebfp th\u00e0nh t\u1eebng ph\u1ea7n 4-bytes. D\u1eef li\u1ec7u \u0111\u00e3 \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c d\u00f9ng gi\u1eef c\u00e1c chu k\u1ef3  deep sleep . Tuy nhi\u00ean, d\u1eef li\u1ec7u c\u00f3 th\u1ec3 b\u1ecb m\u1ea5t sau  power cycling  c\u1ee7a chip.  ESP.restart()  kh\u1edfi \u0111\u1ed9ng l\u1ea1i CPU.  ESP.getResetReason()  tr\u1ea3 v\u1ec1 chu\u1ed7i ch\u1ee9a nguy\u00ean do thi\u1ebft l\u1eadp l\u1ea1i \u1edf \u0111\u1ecbnh d\u1ea1ng m\u00e0 con ng\u01b0\u1eddi hi\u1ec3u \u0111\u01b0\u1ee3c.  ESP.getFreeHeap()  tr\u1ea3 v\u1ec1 k\u00edch th\u01b0\u1edbc heap tr\u1ed1ng.  ESP.getChipId()  tr\u1ea3 v\u1ec1 ID chip ESP8266 nh\u01b0 m\u1ed9t s\u1ed1 nguy\u1ec3n 32-bit.",
            "title": "ESP-specific APIs"
        },
        {
            "location": "/arduino/libraries/esp-api/#mot-so-api-co-the-uoc-su-dung-e-biet-thong-tin-ve-flash",
            "text": "ESP.getFlashChipId()  tr\u1ea3 v\u1ec1 ID chip flash theo s\u1ed1 nguy\u00ean 32-bit.   ESP.getFlashChipSize()  tr\u1ea3 v\u1ec1 dung l\u01b0\u1ee3ng c\u1ee7a chip flash theo bytes, nh\u01b0 \u0111\u01b0\u1ee3c th\u1ea5y trong SDK ( dung l\u01b0\u1ee3ng flash c\u00f3 th\u1ec3 nh\u1ecf h\u01a1n dung l\u01b0\u1ee3ng th\u1ef1c t\u1ebf ).  ESP.getFlashChipSpeed(void)  tr\u1ea3 v\u1ec1 t\u1ea7n s\u1ed1 c\u1ee7a flash theo  Hz .  ESP.getCycleCount()  tr\u1ea3 v\u1ec1 s\u1ed1 chu k\u1ef3 m\u00e0 CPU \u0111\u00e3 th\u1ef1c hi\u1ec7n k\u1ec3 t\u1eeb khi b\u1eaft \u0111\u1ea7u b\u1eb1ng s\u1ed1 nguy\u00ean 32-bit. \u0110i\u1ec1u n\u00e0y r\u1ea5t h\u01b0u \u00edch \u0111\u1ec3 bi\u1ebft ch\u00ednh x\u00e1c th\u1eddi gian th\u1ef1c hi\u1ec7n nh\u1eefng c\u00f4ng vi\u1ec7c \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n r\u1ea5t nhanh, gi\u1ed1ng nh\u01b0 bit banging.  ESP.getVcc()  c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111o \u0111i\u1ec7n \u00e1p cung c\u1ea5p. ESP c\u1ea9n ph\u1ea3i c\u1ea5u h\u00ecnh l\u1ea1i ADC l\u00fac kh\u1edfi \u0111\u1ed9ng \u0111\u1ec3 t\u00ednh n\u0103ng c\u00f3 s\u1eb3n. Th\u00eam d\u00f2ng l\u1ec7nh sau \u1edf \u0111\u1ea7u ch\u01b0\u01a1ng tr\u00ecnh th\u1ee9c vi\u1ec7c vi\u1ec7c n\u00e0y \u0111\u1ec3 s\u1eed d\u1ee5ng  getVcc  :  ADC_MODE(ADC_VCC);   Ch\u00e2n TOUT ph\u1ea3i ng\u1eaft k\u1ebft n\u1ed1i \u1edf ch\u1ebf \u0111\u1ed9 n\u00e0y.   Quan tr\u1ecdng  M\u1eb7c \u0111\u1ecbnh ADC \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh \u0111\u1ec3 \u0111\u1ecdc t\u1eeb ch\u00e2n TOUT, vi\u1ec7c s\u1eed d\u1ee5ng  analogRead(A0) , v\u00e0  ESP.getVCC()  kh\u00f4ng c\u00f3 hi\u1ec7u l\u1ef1c.",
            "title": "M\u1ed9t s\u1ed1 API c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 bi\u1ebft th\u00f4ng tin v\u1ec1 flash:"
        },
        {
            "location": "/arduino/libraries/ticker/",
            "text": "Ticker\n#\n\n\nTh\u01b0 vi\u1ec7n cho ph\u00e9p g\u1ecdi l\u1ea1i h\u00e0m v\u1edbi m\u1ed9t chu k\u1ef3 nh\u1ea5t \u0111\u1ecbnh. G\u1ed3m c\u00f3 hai v\u00ed d\u1ee5.\n\n\n\u1ede th\u1eddi \u0111i\u1ec3m hi\u1ec7n t\u1ea1i n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p ng\u0103n ch\u1eb7n c\u00e1c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a IO (network, serial, file) t\u1eeb h\u00e0m g\u1ecdi l\u1ea1i Ticker. Thay v\u00e0o \u0111\u00f3, thi\u1ebft l\u1eadp m\u1ed9t c\u1edd b\u00ean trong h\u00e0m g\u1ecdi l\u1ea1i Ticker v\u00e0 ki\u1ec3m tra c\u1edd \u0111\u00f3 b\u00ean trong h\u00e0m l\u1eb7p.\n\n\n\u0110\u01b0\u1eddng d\u1eabn sau l\u00e0 th\u01b0 vi\u1ec7n th\u01b0\u1eddng d\u00f9ng \nsimplificate\n Ticker v\u00e0 tr\u00e1nh reset WDT : \nTickerScheduler",
            "title": "Ticker"
        },
        {
            "location": "/arduino/libraries/ticker/#ticker",
            "text": "Th\u01b0 vi\u1ec7n cho ph\u00e9p g\u1ecdi l\u1ea1i h\u00e0m v\u1edbi m\u1ed9t chu k\u1ef3 nh\u1ea5t \u0111\u1ecbnh. G\u1ed3m c\u00f3 hai v\u00ed d\u1ee5.  \u1ede th\u1eddi \u0111i\u1ec3m hi\u1ec7n t\u1ea1i n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p ng\u0103n ch\u1eb7n c\u00e1c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a IO (network, serial, file) t\u1eeb h\u00e0m g\u1ecdi l\u1ea1i Ticker. Thay v\u00e0o \u0111\u00f3, thi\u1ebft l\u1eadp m\u1ed9t c\u1edd b\u00ean trong h\u00e0m g\u1ecdi l\u1ea1i Ticker v\u00e0 ki\u1ec3m tra c\u1edd \u0111\u00f3 b\u00ean trong h\u00e0m l\u1eb7p.  \u0110\u01b0\u1eddng d\u1eabn sau l\u00e0 th\u01b0 vi\u1ec7n th\u01b0\u1eddng d\u00f9ng  simplificate  Ticker v\u00e0 tr\u00e1nh reset WDT :  TickerScheduler",
            "title": "Ticker"
        },
        {
            "location": "/arduino/libraries/eeprom/",
            "text": "EEPROM\n#\n\n\nEEPROM c\u1ee7a ESP8266 c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t nh\u1ecf so v\u1edbi EEPROM chu\u1ea9n. \u0110\u1ec3 s\u1eed d\u1ee5ng, c\u1ea7n g\u1ecdi \nEEPROM.begin(size)\n tr\u01b0\u1edbc khi b\u1eaft \u0111\u1ea7u \u0111\u1ecdc ho\u1eb7c ghi, \nsize\n l\u00e0 s\u1ed1 bytes mu\u1ed1n s\u1eed d\u1ee5ng. S\u1ed1 bytes \u0111\u00f3 c\u00f3 th\u1ec3 \u1edf b\u1ea5t c\u1ee9 \u0111\u00e2u trong kho\u1ea3ng 4 v\u00e0 4096 bytes.\n\n\nEEPROM.write()\n kh\u00f4ng vi\u1ebft tr\u1ef1c ti\u1ebfp l\u00ean flash, m\u00e0 c\u1ea7n ph\u1ea3i g\u1ecdi \nEEPROM.commit()\n tr\u01b0\u1edbc khi mu\u1ed1n thay \u0111\u1ed5i, l\u01b0u tr\u1eef l\u00ean flash. \nEEPROM.end()\n c\u0169ng s\u1ebd ghi nh\u1eadn v\u00e0 s\u1ebd cho ph\u00e9p RAM sao ch\u00e9p n\u1ed9i dung ch\u1ee9a trong EEPROM.\n\n\nTh\u01b0 vi\u1ec7n EEPROM s\u1eed d\u1ee5ng m\u1ed9t v\u00f9ng c\u1ee7a flash, ngay sau SPIFFS.\n\n\nG\u1ed3m c\u00f3 ba v\u00ed d\u1ee5.",
            "title": "EEPROM"
        },
        {
            "location": "/arduino/libraries/eeprom/#eeprom",
            "text": "EEPROM c\u1ee7a ESP8266 c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t nh\u1ecf so v\u1edbi EEPROM chu\u1ea9n. \u0110\u1ec3 s\u1eed d\u1ee5ng, c\u1ea7n g\u1ecdi  EEPROM.begin(size)  tr\u01b0\u1edbc khi b\u1eaft \u0111\u1ea7u \u0111\u1ecdc ho\u1eb7c ghi,  size  l\u00e0 s\u1ed1 bytes mu\u1ed1n s\u1eed d\u1ee5ng. S\u1ed1 bytes \u0111\u00f3 c\u00f3 th\u1ec3 \u1edf b\u1ea5t c\u1ee9 \u0111\u00e2u trong kho\u1ea3ng 4 v\u00e0 4096 bytes.  EEPROM.write()  kh\u00f4ng vi\u1ebft tr\u1ef1c ti\u1ebfp l\u00ean flash, m\u00e0 c\u1ea7n ph\u1ea3i g\u1ecdi  EEPROM.commit()  tr\u01b0\u1edbc khi mu\u1ed1n thay \u0111\u1ed5i, l\u01b0u tr\u1eef l\u00ean flash.  EEPROM.end()  c\u0169ng s\u1ebd ghi nh\u1eadn v\u00e0 s\u1ebd cho ph\u00e9p RAM sao ch\u00e9p n\u1ed9i dung ch\u1ee9a trong EEPROM.  Th\u01b0 vi\u1ec7n EEPROM s\u1eed d\u1ee5ng m\u1ed9t v\u00f9ng c\u1ee7a flash, ngay sau SPIFFS.  G\u1ed3m c\u00f3 ba v\u00ed d\u1ee5.",
            "title": "EEPROM"
        },
        {
            "location": "/arduino/libraries/i2c/",
            "text": "I2C (Wire library)\n#\n\n\nTh\u01b0 vi\u1ec7n \nWire\n hi\u1ec7n t\u1ea1i ch\u1ec9 h\u1ed5 tr\u1ee3 ch\u1ebf \u0111\u1ed9 master l\u00ean \u0111\u1ebfn 450KHz. Tr\u01b0\u1edbc khi s\u1eed d\u1ee5ng I2C, ch\u00e2n SDA v\u00e0 SCL c\u1ea7n ph\u1ea3i \u0111\u01b0\u1edbc thi\u1ebft l\u1eadp b\u1eb1ng c\u00e1ch g\u1ecdi \nWire.begin(int sda, int scl)\n, i.e. \nWire.begin(0, 2)\n \u0111\u1ed1i v\u1edbi module ESP-01, c\u00e1c module ESP kh\u00e1c m\u1eb7c \u0111\u1ecbnh ch\u00e2n 4 (SDA) v\u00e0 5 (SCL).\n\n\nSau \u0111\u00e2y m\u00ecnh s\u1ebd demo m\u1ed9t s\u1ed1 v\u00ed d\u1ee5 d\u00f9ng th\u01b0 vi\u1ec7n i2c \u0111\u1ec3 hi\u1ec3n th\u1ecb l\u00ean GLCD (LCD OLED SSD1306)\n#\n\n\nTr\u01b0\u1edbc h\u1ebft ch\u00fang ta s\u1ebd ti\u1ebfn h\u00e0nh c\u00e0i \u0111\u1eb7t th\u01b0 vi\u1ec7n l\u00ean Arduino IDE\n#\n\n\n\n\n\n\nTh\u01b0 vi\u1ec7n \nWire.h\n.\n#\n\n Th\u01b0 vi\u1ec7n n\u00e0y s\u1ebd c\u00f3 s\u1eb5n trong Arduino IDE. Khi s\u1eed d\u1ee5ng ta ch\u1ec9 c\u1ea7n include n\u00f3 ra l\u00e0 \u0111\u01b0\u1ee3c. M\u00ecnh s\u1ebd gi\u1edbi thi\u1ec7u th\u00eam cho c\u00e1c b\u1ea1n m\u1ed9t s\u1ed1 h\u00e0m c\u1ee7a n\u00f3:\nWire.begin(address (optional));\n\n\n\nKh\u1edfi t\u1ea1o th\u01b0 vi\u1ec7n Wire.h v\u00e0 tham gia v\u00e0o I2C bus. address: 7-bit \u0111\u1ecba ch\u1ec9 c\u1ee7a thi\u1ebft b\u1ecb \u201cSlave\u201d (optional); n\u1ebfu kh\u00f4ng c\u00f3 \u0111\u1ecba ch\u1ec9 th\u00ec coi nh\u01b0 \u201cMaster\u201d.\n\n\nWire.beginTransmission(address);\n\n\n\n\n\n\n\nB\u1eaft \u0111\u1ea7u truy\u1ec1n d\u1eef li\u1ec7u \u0111\u1ebfn thi\u1ebft b\u1ecb \u201cSlave\u201d v\u1edbi address \u0111\u00e3 c\u00f3.\n\n\n    Wire.endTransmission();\n\n\n\nK\u1ebft th\u00fac truy\u1ec1n d\u1eef li\u1ec7u \u0111\u1ebfn thi\u1ebft b\u1ecb \u201cSlave\u201d \u0111\u00e3 \u0111\u01b0\u1ee3c b\u1eaft \u0111\u1ea7u b\u1edfi Wire.beginTransmission(address). \n\n\n    Wire.write(value);\n\n\n\nGhi d\u1eef li\u1ec7u l\u00ean thi\u1ebft b\u1ecb \u201cSlave\u201d, \u0111\u01b0\u1ee3c g\u1ecdi gi\u1eefa beginTransmission() v\u00e0 endTransmission().\n\n\n    Wire.read();\n\n\n\n\u0110\u1ecdc d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c truy\u1ec1n t\u1eeb thi\u1ebft b\u1ecb \u201cSlave\u201d \u0111\u1ebfn Arduino, \u0111\u01b0\u1ee3c g\u1ecdi sau requestFrom().\n\n\n    Wire.requestFrom(address, quantity);\n\n\n\n\u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng b\u1edfi thi\u1ebft b\u1ecb \u201cMaster\u201d \u0111\u1ec3 y\u00eau c\u1ea7u d\u1eef li\u1ec7u t\u1eeb thi\u1ebft b\u1ecb \u201cSlave\u201d. \n{address}: l\u00e0 \u0111\u1ecba ch\u1ec9 c\u1ee7a thi\u1ebft b\u1ecb \u201cSlave\u201d. (quantity): s\u1ed1 l\u01b0\u1ee3ng bytes y\u00eau c\u1ea7u.\n\n\n\n\n\n\nTh\u01b0 vi\u1ec7n BRZO I2c.\n#\n\n\n\n\n\n\n\u0110\u00e2y l\u00e0 th\u01b0 vi\u1ec7n h\u1ed7 tr\u1ee3 k\u1ebft n\u1ed1i hi\u1ec3n th\u1ecb tr\u00ean OLED. N\u00f3 \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng cho th\u01b0 vi\u1ec7n\nWire.h\n.\nTh\u01b0 vi\u1ec7n n\u00e0y \u0111\u01b0\u1ee3c vi\u1ebft cho c\u1ea3 hai lo\u1ea1i GLCD l\u00e0 OLED SSD1306 v\u00e0 SH1106, \u1edf \u0111\u00e2y m\u00ecnh s\u1eed d\u1ee5ng SSD1360. B\u1ea1n c\u00f3 th\u1ec3 t\u1ea3i v\u1ec1 v\u00e0  tham kh\u1ea3o m\u1ed9t s\u1ed1 h\u00e0m c\u1ee7a n\u00f3 \u1edf \u0111\u1ecba ch\u1ec9 \nhttp://github.com/squix78/esp8266-oled-ssd1306\n. \n\n\nVi\u1ec7c c\u00e0i \u0111\u1eb7t th\u01b0 vi\u1ec7n c\u01a1 b\u1ea3n \u0111\u00e3 xong, b\u00e2y gi\u1edd m\u00ecnh s\u1ebd gi\u1edbi thi\u1ec7u cho c\u00e1c b\u1ea1n m\u1ed9t ch\u00fat v\u1ec1 l\u1eafp ph\u1ea7n c\u1ee9ng\n#\n\n\n\u1edf \u0111\u00e2y m\u00ecnh s\u1eed d\u1ee5ng bo NodeMCU 0.9 (ESP8266 v12).\n\n \n\n\nM\u00ecnh s\u1eed d\u1ee5ng ch\u00e2n D3 (GPIO 0) l\u00e0 SDA, ch\u00e2n D5 (GPIO 14) l\u00e0 SCL.\nTa ti\u1ebfn h\u00e0nh k\u1ebft n\u1ed1i ch\u00e2n SDA, SCL, GND, VCC (3.3v) c\u1ee7a bo NodeMCU t\u01b0\u01a1ng \u1ee9ng v\u00e0o ch\u00e2n SDA, SCL, GND, VCC (3.3v) c\u1ee7a module GCLD (OLED SSD 1306). B\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ph\u1ea7n m\u1ec1m Fritzing \u0111\u1ec3 th\u1ef1c hi\u1ec7n k\u1ebft n\u1ed1i n\u1ebfu ch\u01b0a c\u00f3 c\u00e1c linh ki\u1ec7n th\u1ef1c t\u1ebf.\n\n\n\n\nSau khi k\u1ebft n\u1ed1i xong ph\u1ea7n c\u1ee9ng nh\u01b0 h\u00ecnh, ta b\u1eaft \u0111\u1ea7u vi\u1ebft code hi\u1ec3n th\u1ecb tr\u00ean m\u00e0n h\u00ecnh LCD\n#\n\n\nM\u00ecnh s\u1ebd demo cho c\u00e1c b\u1ea1n 2 \u0111o\u1ea1n code \u0111\u01a1n gi\u1ea3n l\u00e0 hi\u1ec3n th\u1ecb ch\u1eef v\u00e0 h\u00ecnh \u1ea3nh l\u00ean m\u00e0n h\u00ecnh c\u1ee7a GLCD OLED SSD1306\n\n\n\n\nHi\u1ec3n th\u1ecb d\u00f2ng ch\u1eef \u201ciotmaker.vn\u201d\n\n\n\n\n    # include <Wire.h>  \n    # include \"SSD1306.h\" \n    SSD1306  display(0x3c, D3, D5);\n\n    void setup() \n    {\n        Serial.begin(115200);\n        Serial.println();\n        display.init();\n        display.flipScreenVertically();\n        display.setFont(ArialMT_Plain_10);\n    }   \n\n    void drawFontFaceDemo()\n    {\n        display.setTextAlignment(TEXT_ALIGN_LEFT);\n        display.setFont(ArialMT_Plain_24);\n        display.drawString(0, 26, \"iotmaker.vn\");\n    }\n    void loop() \n    {\n        display.clear();\n        drawFontFaceDemo();\n        display.display();\n    }\n\n\n\n\n\n\n\u2013 \u1edf \u0111\u00e2y, \u0111\u00e3 c\u00f3 s\u1eb5n th\u01b0 vi\u1ec7n h\u1ed7 tr\u1ee3 hi\u1ec3n th\u1ecb cho LCD, b\u1ea1n ch\u1ec9 c\u1ea7n nh\u1eadp v\u1ecb tr\u00ed c\u1ee7a c\u1ed9t, d\u00f2ng, n\u1ed9i dung, size ch\u1eef, font ch\u1eef m\u00e0 m\u00ecnh mu\u1ed1n hi\u1ec3n th\u1ecb v\u00e0o c\u00e1c h\u00e0m t\u01b0\u01a1ng \u1ee9ng l\u00e0 \u0111\u01b0\u1ee3c.\n\n\n\n\nHi\u1ec3n th\u1ecb \u1ea3nh logo \u201cIOT Maker\u201d\n\n\n\n\n\nVi\u1ec7c hi\u1ec3n th\u1ecb \u1ea3nh l\u00ean GLCD s\u1ebd h\u01a1i ph\u1ee9c t\u1ea1p h\u01a1n m\u1ed9t ch\u00fat so v\u1edbi hi\u1ec3n th\u1ecb d\u00f2ng ch\u1eef.\n\n\n\u2013 \u0110\u1ea7u ti\u00ean b\u1ea1n s\u1ebd ph\u1ea3i chuy\u1ec3n \u1ea3nh c\u1ee7a m\u00ecnh v\u1ec1 \u0111\u1ecbnh d\u1ea1ng \n*.xbm\n. C\u00e1c b\u1ea1n v\u00e0o \u0111\u1ecba ch\u1ec9 \nhttps://www.online-utility.org/image/convert/to/XBM\n v\u00e0 l\u00e0m theo h\u01b0\u1edbng d\u1eabn s\u1ebd t\u1ea1o m\u1ed9t file \n*.xbm' cho m\u00ecnh. Sau \u0111\u00f3, b\u1ea1n \u0111\u1ed5i \u0111u\u00f4i c\u1ee7a file n\u00e0y sang\n*.h` \u0111\u1ec3 l\u00e0m file th\u01b0 vi\u1ec7n \u1ea3nh trong Arduino IDE.\n\n\nN\u1ebfu c\u1ea7n thi\u1ebft th\u00ec b\u1ea1n c\u0169ng n\u00ean fit zise \u1ea3nh c\u1ee7a m\u00ecnh v\u1ec1  128x64. M\u00ecnh th\u1ef1c hi\u1ec7n vi\u1ec7c n\u00e0y \u1edf \u0111\u1ecba ch\u1ec9 \nhttp://www.digole.com/tools/PicturetoC_Hex_converter.php\n.\n\n\nV\u1eady l\u00e0 th\u01b0 vi\u1ec7n \u1ea3nh c\u1ee7a b\u1ea1n \u0111\u00e3 s\u1eb5n s\u00e0ng, b\u00e2y gi\u1edd th\u00ec b\u1eaft \u0111\u1ea7u code th\u00f4i!\n\n\n#include <Wire.h>  \n#include \"SSD1306.h\" \n#include \"iot.h\"\nSSD1306  display(0x3c, D3, D5);\n\nvoid setup() \n{\n    Serial.begin(115200);\n    Serial.println();\n}\nvoid drawImageDemo()\n{\n    display.drawXbm(0, 0,iot_width, iot_height, iot_bits);\n}\nvoid loop()\n{\n    display.clear();\n    drawImageDemo();\n    display.display();\n}\n\n\n\n\n\n\u2013 \niot.h\n l\u00e0 t\u00ean file th\u01b0 vi\u1ec7n \u1ea3nh c\u1ee7a m\u00ecnh. B\u1ea1n ch\u00fa \u00fd \u0111\u1ec3 n\u00f3 \u1edf c\u00f9ng th\u01b0 m\u1ee5c v\u1edbi file l\u1eadp tr\u00ecnh.\n\n\nV\u00e0 \u0111\u00e2y l\u00e0 th\u00e0nh qu\u1ea3 c\u1ee7a m\u00ecnh! :). \n\n\n\n\nCh\u00fac c\u00e1c b\u1ea1n s\u1ebd th\u1ef1c hi\u1ec7n th\u00e0nh c\u00f4ng. H\u1eb9n g\u1eb7p l\u1ea1i trong c\u00e1c b\u00e0i vi\u1ebft k\u1ebf ti\u1ebfp!",
            "title": "I2C (Th\u01b0 vi\u1ec7n Wire)"
        },
        {
            "location": "/arduino/libraries/i2c/#i2c-wire-library",
            "text": "Th\u01b0 vi\u1ec7n  Wire  hi\u1ec7n t\u1ea1i ch\u1ec9 h\u1ed5 tr\u1ee3 ch\u1ebf \u0111\u1ed9 master l\u00ean \u0111\u1ebfn 450KHz. Tr\u01b0\u1edbc khi s\u1eed d\u1ee5ng I2C, ch\u00e2n SDA v\u00e0 SCL c\u1ea7n ph\u1ea3i \u0111\u01b0\u1edbc thi\u1ebft l\u1eadp b\u1eb1ng c\u00e1ch g\u1ecdi  Wire.begin(int sda, int scl) , i.e.  Wire.begin(0, 2)  \u0111\u1ed1i v\u1edbi module ESP-01, c\u00e1c module ESP kh\u00e1c m\u1eb7c \u0111\u1ecbnh ch\u00e2n 4 (SDA) v\u00e0 5 (SCL).",
            "title": "I2C (Wire library)"
        },
        {
            "location": "/arduino/libraries/i2c/#sau-ay-minh-se-demo-mot-so-vi-du-dung-thu-vien-i2c-e-hien-thi-len-glcd-lcd-oled-ssd1306",
            "text": "",
            "title": "Sau \u0111\u00e2y m\u00ecnh s\u1ebd demo m\u1ed9t s\u1ed1 v\u00ed d\u1ee5 d\u00f9ng th\u01b0 vi\u1ec7n i2c \u0111\u1ec3 hi\u1ec3n th\u1ecb l\u00ean GLCD (LCD OLED SSD1306)"
        },
        {
            "location": "/arduino/libraries/i2c/#truoc-het-chung-ta-se-tien-hanh-cai-at-thu-vien-len-arduino-ide",
            "text": "",
            "title": "Tr\u01b0\u1edbc h\u1ebft ch\u00fang ta s\u1ebd ti\u1ebfn h\u00e0nh c\u00e0i \u0111\u1eb7t th\u01b0 vi\u1ec7n l\u00ean Arduino IDE"
        },
        {
            "location": "/arduino/libraries/i2c/#thu-vien-wireh",
            "text": "Th\u01b0 vi\u1ec7n n\u00e0y s\u1ebd c\u00f3 s\u1eb5n trong Arduino IDE. Khi s\u1eed d\u1ee5ng ta ch\u1ec9 c\u1ea7n include n\u00f3 ra l\u00e0 \u0111\u01b0\u1ee3c. M\u00ecnh s\u1ebd gi\u1edbi thi\u1ec7u th\u00eam cho c\u00e1c b\u1ea1n m\u1ed9t s\u1ed1 h\u00e0m c\u1ee7a n\u00f3: Wire.begin(address (optional));  Kh\u1edfi t\u1ea1o th\u01b0 vi\u1ec7n Wire.h v\u00e0 tham gia v\u00e0o I2C bus. address: 7-bit \u0111\u1ecba ch\u1ec9 c\u1ee7a thi\u1ebft b\u1ecb \u201cSlave\u201d (optional); n\u1ebfu kh\u00f4ng c\u00f3 \u0111\u1ecba ch\u1ec9 th\u00ec coi nh\u01b0 \u201cMaster\u201d.  Wire.beginTransmission(address);    B\u1eaft \u0111\u1ea7u truy\u1ec1n d\u1eef li\u1ec7u \u0111\u1ebfn thi\u1ebft b\u1ecb \u201cSlave\u201d v\u1edbi address \u0111\u00e3 c\u00f3.      Wire.endTransmission();  K\u1ebft th\u00fac truy\u1ec1n d\u1eef li\u1ec7u \u0111\u1ebfn thi\u1ebft b\u1ecb \u201cSlave\u201d \u0111\u00e3 \u0111\u01b0\u1ee3c b\u1eaft \u0111\u1ea7u b\u1edfi Wire.beginTransmission(address).       Wire.write(value);  Ghi d\u1eef li\u1ec7u l\u00ean thi\u1ebft b\u1ecb \u201cSlave\u201d, \u0111\u01b0\u1ee3c g\u1ecdi gi\u1eefa beginTransmission() v\u00e0 endTransmission().      Wire.read();  \u0110\u1ecdc d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c truy\u1ec1n t\u1eeb thi\u1ebft b\u1ecb \u201cSlave\u201d \u0111\u1ebfn Arduino, \u0111\u01b0\u1ee3c g\u1ecdi sau requestFrom().      Wire.requestFrom(address, quantity);  \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng b\u1edfi thi\u1ebft b\u1ecb \u201cMaster\u201d \u0111\u1ec3 y\u00eau c\u1ea7u d\u1eef li\u1ec7u t\u1eeb thi\u1ebft b\u1ecb \u201cSlave\u201d. \n{address}: l\u00e0 \u0111\u1ecba ch\u1ec9 c\u1ee7a thi\u1ebft b\u1ecb \u201cSlave\u201d. (quantity): s\u1ed1 l\u01b0\u1ee3ng bytes y\u00eau c\u1ea7u.",
            "title": "Th\u01b0 vi\u1ec7n Wire.h."
        },
        {
            "location": "/arduino/libraries/i2c/#thu-vien-brzo-i2c",
            "text": "\u0110\u00e2y l\u00e0 th\u01b0 vi\u1ec7n h\u1ed7 tr\u1ee3 k\u1ebft n\u1ed1i hi\u1ec3n th\u1ecb tr\u00ean OLED. N\u00f3 \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng cho th\u01b0 vi\u1ec7n Wire.h .\nTh\u01b0 vi\u1ec7n n\u00e0y \u0111\u01b0\u1ee3c vi\u1ebft cho c\u1ea3 hai lo\u1ea1i GLCD l\u00e0 OLED SSD1306 v\u00e0 SH1106, \u1edf \u0111\u00e2y m\u00ecnh s\u1eed d\u1ee5ng SSD1360. B\u1ea1n c\u00f3 th\u1ec3 t\u1ea3i v\u1ec1 v\u00e0  tham kh\u1ea3o m\u1ed9t s\u1ed1 h\u00e0m c\u1ee7a n\u00f3 \u1edf \u0111\u1ecba ch\u1ec9  http://github.com/squix78/esp8266-oled-ssd1306 .",
            "title": "Th\u01b0 vi\u1ec7n BRZO I2c."
        },
        {
            "location": "/arduino/libraries/i2c/#viec-cai-at-thu-vien-co-ban-a-xong-bay-gio-minh-se-gioi-thieu-cho-cac-ban-mot-chut-ve-lap-phan-cung",
            "text": "\u1edf \u0111\u00e2y m\u00ecnh s\u1eed d\u1ee5ng bo NodeMCU 0.9 (ESP8266 v12).    M\u00ecnh s\u1eed d\u1ee5ng ch\u00e2n D3 (GPIO 0) l\u00e0 SDA, ch\u00e2n D5 (GPIO 14) l\u00e0 SCL.\nTa ti\u1ebfn h\u00e0nh k\u1ebft n\u1ed1i ch\u00e2n SDA, SCL, GND, VCC (3.3v) c\u1ee7a bo NodeMCU t\u01b0\u01a1ng \u1ee9ng v\u00e0o ch\u00e2n SDA, SCL, GND, VCC (3.3v) c\u1ee7a module GCLD (OLED SSD 1306). B\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ph\u1ea7n m\u1ec1m Fritzing \u0111\u1ec3 th\u1ef1c hi\u1ec7n k\u1ebft n\u1ed1i n\u1ebfu ch\u01b0a c\u00f3 c\u00e1c linh ki\u1ec7n th\u1ef1c t\u1ebf.",
            "title": "Vi\u1ec7c c\u00e0i \u0111\u1eb7t th\u01b0 vi\u1ec7n c\u01a1 b\u1ea3n \u0111\u00e3 xong, b\u00e2y gi\u1edd m\u00ecnh s\u1ebd gi\u1edbi thi\u1ec7u cho c\u00e1c b\u1ea1n m\u1ed9t ch\u00fat v\u1ec1 l\u1eafp ph\u1ea7n c\u1ee9ng"
        },
        {
            "location": "/arduino/libraries/i2c/#sau-khi-ket-noi-xong-phan-cung-nhu-hinh-ta-bat-au-viet-code-hien-thi-tren-man-hinh-lcd",
            "text": "M\u00ecnh s\u1ebd demo cho c\u00e1c b\u1ea1n 2 \u0111o\u1ea1n code \u0111\u01a1n gi\u1ea3n l\u00e0 hi\u1ec3n th\u1ecb ch\u1eef v\u00e0 h\u00ecnh \u1ea3nh l\u00ean m\u00e0n h\u00ecnh c\u1ee7a GLCD OLED SSD1306   Hi\u1ec3n th\u1ecb d\u00f2ng ch\u1eef \u201ciotmaker.vn\u201d       # include <Wire.h>  \n    # include \"SSD1306.h\" \n    SSD1306  display(0x3c, D3, D5);\n\n    void setup() \n    {\n        Serial.begin(115200);\n        Serial.println();\n        display.init();\n        display.flipScreenVertically();\n        display.setFont(ArialMT_Plain_10);\n    }   \n\n    void drawFontFaceDemo()\n    {\n        display.setTextAlignment(TEXT_ALIGN_LEFT);\n        display.setFont(ArialMT_Plain_24);\n        display.drawString(0, 26, \"iotmaker.vn\");\n    }\n    void loop() \n    {\n        display.clear();\n        drawFontFaceDemo();\n        display.display();\n    }   \u2013 \u1edf \u0111\u00e2y, \u0111\u00e3 c\u00f3 s\u1eb5n th\u01b0 vi\u1ec7n h\u1ed7 tr\u1ee3 hi\u1ec3n th\u1ecb cho LCD, b\u1ea1n ch\u1ec9 c\u1ea7n nh\u1eadp v\u1ecb tr\u00ed c\u1ee7a c\u1ed9t, d\u00f2ng, n\u1ed9i dung, size ch\u1eef, font ch\u1eef m\u00e0 m\u00ecnh mu\u1ed1n hi\u1ec3n th\u1ecb v\u00e0o c\u00e1c h\u00e0m t\u01b0\u01a1ng \u1ee9ng l\u00e0 \u0111\u01b0\u1ee3c.   Hi\u1ec3n th\u1ecb \u1ea3nh logo \u201cIOT Maker\u201d   Vi\u1ec7c hi\u1ec3n th\u1ecb \u1ea3nh l\u00ean GLCD s\u1ebd h\u01a1i ph\u1ee9c t\u1ea1p h\u01a1n m\u1ed9t ch\u00fat so v\u1edbi hi\u1ec3n th\u1ecb d\u00f2ng ch\u1eef.  \u2013 \u0110\u1ea7u ti\u00ean b\u1ea1n s\u1ebd ph\u1ea3i chuy\u1ec3n \u1ea3nh c\u1ee7a m\u00ecnh v\u1ec1 \u0111\u1ecbnh d\u1ea1ng  *.xbm . C\u00e1c b\u1ea1n v\u00e0o \u0111\u1ecba ch\u1ec9  https://www.online-utility.org/image/convert/to/XBM  v\u00e0 l\u00e0m theo h\u01b0\u1edbng d\u1eabn s\u1ebd t\u1ea1o m\u1ed9t file  *.xbm' cho m\u00ecnh. Sau \u0111\u00f3, b\u1ea1n \u0111\u1ed5i \u0111u\u00f4i c\u1ee7a file n\u00e0y sang *.h` \u0111\u1ec3 l\u00e0m file th\u01b0 vi\u1ec7n \u1ea3nh trong Arduino IDE.  N\u1ebfu c\u1ea7n thi\u1ebft th\u00ec b\u1ea1n c\u0169ng n\u00ean fit zise \u1ea3nh c\u1ee7a m\u00ecnh v\u1ec1  128x64. M\u00ecnh th\u1ef1c hi\u1ec7n vi\u1ec7c n\u00e0y \u1edf \u0111\u1ecba ch\u1ec9  http://www.digole.com/tools/PicturetoC_Hex_converter.php .  V\u1eady l\u00e0 th\u01b0 vi\u1ec7n \u1ea3nh c\u1ee7a b\u1ea1n \u0111\u00e3 s\u1eb5n s\u00e0ng, b\u00e2y gi\u1edd th\u00ec b\u1eaft \u0111\u1ea7u code th\u00f4i!  #include <Wire.h>  \n#include \"SSD1306.h\" \n#include \"iot.h\"\nSSD1306  display(0x3c, D3, D5);\n\nvoid setup() \n{\n    Serial.begin(115200);\n    Serial.println();\n}\nvoid drawImageDemo()\n{\n    display.drawXbm(0, 0,iot_width, iot_height, iot_bits);\n}\nvoid loop()\n{\n    display.clear();\n    drawImageDemo();\n    display.display();\n}  \u2013  iot.h  l\u00e0 t\u00ean file th\u01b0 vi\u1ec7n \u1ea3nh c\u1ee7a m\u00ecnh. B\u1ea1n ch\u00fa \u00fd \u0111\u1ec3 n\u00f3 \u1edf c\u00f9ng th\u01b0 m\u1ee5c v\u1edbi file l\u1eadp tr\u00ecnh.  V\u00e0 \u0111\u00e2y l\u00e0 th\u00e0nh qu\u1ea3 c\u1ee7a m\u00ecnh! :).    Ch\u00fac c\u00e1c b\u1ea1n s\u1ebd th\u1ef1c hi\u1ec7n th\u00e0nh c\u00f4ng. H\u1eb9n g\u1eb7p l\u1ea1i trong c\u00e1c b\u00e0i vi\u1ebft k\u1ebf ti\u1ebfp!",
            "title": "Sau khi k\u1ebft n\u1ed1i xong ph\u1ea7n c\u1ee9ng nh\u01b0 h\u00ecnh, ta b\u1eaft \u0111\u1ea7u vi\u1ebft code hi\u1ec3n th\u1ecb tr\u00ean m\u00e0n h\u00ecnh LCD"
        },
        {
            "location": "/arduino/libraries/spi/",
            "text": "ESP8266 Arduino - SPI\n#\n\n\nTh\u01b0 vi\u1ec7n SPI h\u1ed5 tr\u1ee3 ho\u00e0n to\u00e0n Arduino SPI, API g\u1ed3m trao \u0111\u1ed5i d\u1eef li\u1ec7u, thi\u1ebft l\u1eadp phase (CPHA). Vi\u1ec7c thi\u1ebft l\u1eadp \nClock polarity\n (CPOL ) kh\u00f4ng \u0111\u01b0\u1ee3c h\u1ed5 tr\u1ee3 \u0111\u1ed3ng th\u1eddi \nSPI_MODE2\n v\u00e0 \nSPI_MODE3\n kh\u00f4ng l\u00e0m vi\u1ec7c.\n\n\nArduino - SPI\n#\n\n\nThis library allows you to communicate with SPI devices, with the Arduino as the master device.\n\n\nA Brief Introduction to the Serial Peripheral Interface (SPI)\n#\n\n\nSerial Peripheral Interface (SPI) is a synchronous serial data protocol used by microcontrollers for communicating with one or more peripheral devices quickly over short distances. It can also be used for communication between two microcontrollers.\n\n\nWith an SPI connection there is always one master device (usually a microcontroller) which controls the peripheral devices. Typically there are three lines common to all the devices:\n\n\n\n\nMISO\n (Master In Slave Out) - The Slave line for sending data to the master,\n\n\nMOSI\n (Master Out Slave In) - The Master line for sending data to the peripherals,\n\n\nSCK\n (Serial Clock) - The clock pulses which synchronize data transmission generated by the master\n\n\n\n\nand one line specific for every device:\n\n\n\n\nSS\n (Slave Select) - the pin on each device that the master can use to enable and disable specific devices.\n\n\n\n\nWhen a device\u2019s Slave Select pin is low, it communicates with the master. When it\u2019s high, it ignores the master. This allows you to have multiple SPI devices sharing the same MISO, MOSI, and CLK lines.\n\n\nTo write code for a new SPI device you need to note a few things:\n\n\n\n\nWhat is the maximum SPI speed your device can use? This is controlled by the first parameter in SPISettings. If you are using a chip rated at 15 MHz, use 15000000. Arduino will automatically use the best speed that is equal to or less than the number you use with SPISettings.\n\n\nIs data shifted in Most Significant Bit (MSB) or Least Significant Bit (LSB) first? This is controlled by second SPISettings parameter, either MSBFIRST or LSBFIRST. Most SPI chips use MSB first data order.\n\n\nIs the data clock idle when high or low? Are samples on the rising or falling edge of clock pulses? These modes are controlled by the third parameter in SPISettings.\n\n\n\n\nThe SPI standard is loose and each device implements it a little differently. This means you have to pay special attention to the device\u2019s datasheet when writing your code.\n\n\nGenerally speaking, there are four modes of transmission. These modes control whether data is shifted in and out on the rising or falling edge of the data clock signal (called the clock \nphase\n), and whether the clock is idle when high or low (called the clock \npolarity\n). The four modes combine polarity and phase according to this table:\n\n\n\n\n\n\n\n\nMode\n\n\nClock Polarity (CPOL)\n\n\nClock Phase (CPHA)\n\n\nOutput Edge\n\n\nData Capture\n\n\n\n\n\n\n\n\n\n\nSPI_MODE0\n\n\n0\n\n\n0\n\n\nFalling\n\n\nRising\n\n\n\n\n\n\nSPI_MODE1\n\n\n0\n\n\n1\n\n\nRising\n\n\nFalling\n\n\n\n\n\n\n\n\nOnce you have your SPI parameters, use SPI.beginTransaction() to begin using the SPI port. The SPI port will be configured with your all of your settings. The simplest and most efficient way to use SPISettings is directly inside SPI.beginTransaction(). For example:\n\n\nSPI.beginTransaction(SPISettings(14000000, MSBFIRST, SPI_MODE0));\n\n\nIf other libraries use SPI from interrupts, they will be prevented from accessing SPI until you call \nSPI.endTransaction()\n. The SPI settings are applied at the \nbegin\n of the transaction and \nSPI.endTransaction()\n \ndoesn\u2019t change\n SPI settings. \nUnless\n you, or some library, \ncalls\n beginTransaction a second time, the setting are \nmaintained\n. You should attempt to minimize the time between before you call \nSPI.endTransaction()\n, for best compatibility if your program is used together with other libraries which use SPI.\n\n\nWith most SPI devices, after \nSPI.beginTransaction()\n, you will write the slave select pin LOW, call \nSPI.transfer()\n any number of times to transfer data, then write the SS pin HIGH, and finally call \nSPI.endTransaction()\n.\n\n\nFor more on SPI, see \nWikipedia\u2019s page on SPI\n and \nMaxembedded SPI\n\n\nConnections\n#\n\n\nThe following table display on which pins the SPI lines are broken out on the different Arduino boards:\n\n\nNote that MISO, MOSI, and SCK are available in a consistent physical location on the ICSP header; this is useful, for example, in designing a shield that works on every board.\n\n\nExamples\n#\n\n\nSPI Master\n#\n\n\nhttps://github.com/esp8266/Arduino/tree/master/libraries/SPI\n\n\nSPI Slave\n#\n\n\nhttps://github.com/esp8266/Arduino/tree/master/libraries/SPISlave",
            "title": "SPI"
        },
        {
            "location": "/arduino/libraries/spi/#esp8266-arduino-spi",
            "text": "Th\u01b0 vi\u1ec7n SPI h\u1ed5 tr\u1ee3 ho\u00e0n to\u00e0n Arduino SPI, API g\u1ed3m trao \u0111\u1ed5i d\u1eef li\u1ec7u, thi\u1ebft l\u1eadp phase (CPHA). Vi\u1ec7c thi\u1ebft l\u1eadp  Clock polarity  (CPOL ) kh\u00f4ng \u0111\u01b0\u1ee3c h\u1ed5 tr\u1ee3 \u0111\u1ed3ng th\u1eddi  SPI_MODE2  v\u00e0  SPI_MODE3  kh\u00f4ng l\u00e0m vi\u1ec7c.",
            "title": "ESP8266 Arduino - SPI"
        },
        {
            "location": "/arduino/libraries/spi/#arduino-spi",
            "text": "This library allows you to communicate with SPI devices, with the Arduino as the master device.",
            "title": "Arduino - SPI"
        },
        {
            "location": "/arduino/libraries/spi/#a-brief-introduction-to-the-serial-peripheral-interface-spi",
            "text": "Serial Peripheral Interface (SPI) is a synchronous serial data protocol used by microcontrollers for communicating with one or more peripheral devices quickly over short distances. It can also be used for communication between two microcontrollers.  With an SPI connection there is always one master device (usually a microcontroller) which controls the peripheral devices. Typically there are three lines common to all the devices:   MISO  (Master In Slave Out) - The Slave line for sending data to the master,  MOSI  (Master Out Slave In) - The Master line for sending data to the peripherals,  SCK  (Serial Clock) - The clock pulses which synchronize data transmission generated by the master   and one line specific for every device:   SS  (Slave Select) - the pin on each device that the master can use to enable and disable specific devices.   When a device\u2019s Slave Select pin is low, it communicates with the master. When it\u2019s high, it ignores the master. This allows you to have multiple SPI devices sharing the same MISO, MOSI, and CLK lines.  To write code for a new SPI device you need to note a few things:   What is the maximum SPI speed your device can use? This is controlled by the first parameter in SPISettings. If you are using a chip rated at 15 MHz, use 15000000. Arduino will automatically use the best speed that is equal to or less than the number you use with SPISettings.  Is data shifted in Most Significant Bit (MSB) or Least Significant Bit (LSB) first? This is controlled by second SPISettings parameter, either MSBFIRST or LSBFIRST. Most SPI chips use MSB first data order.  Is the data clock idle when high or low? Are samples on the rising or falling edge of clock pulses? These modes are controlled by the third parameter in SPISettings.   The SPI standard is loose and each device implements it a little differently. This means you have to pay special attention to the device\u2019s datasheet when writing your code.  Generally speaking, there are four modes of transmission. These modes control whether data is shifted in and out on the rising or falling edge of the data clock signal (called the clock  phase ), and whether the clock is idle when high or low (called the clock  polarity ). The four modes combine polarity and phase according to this table:     Mode  Clock Polarity (CPOL)  Clock Phase (CPHA)  Output Edge  Data Capture      SPI_MODE0  0  0  Falling  Rising    SPI_MODE1  0  1  Rising  Falling     Once you have your SPI parameters, use SPI.beginTransaction() to begin using the SPI port. The SPI port will be configured with your all of your settings. The simplest and most efficient way to use SPISettings is directly inside SPI.beginTransaction(). For example:  SPI.beginTransaction(SPISettings(14000000, MSBFIRST, SPI_MODE0));  If other libraries use SPI from interrupts, they will be prevented from accessing SPI until you call  SPI.endTransaction() . The SPI settings are applied at the  begin  of the transaction and  SPI.endTransaction()   doesn\u2019t change  SPI settings.  Unless  you, or some library,  calls  beginTransaction a second time, the setting are  maintained . You should attempt to minimize the time between before you call  SPI.endTransaction() , for best compatibility if your program is used together with other libraries which use SPI.  With most SPI devices, after  SPI.beginTransaction() , you will write the slave select pin LOW, call  SPI.transfer()  any number of times to transfer data, then write the SS pin HIGH, and finally call  SPI.endTransaction() .  For more on SPI, see  Wikipedia\u2019s page on SPI  and  Maxembedded SPI",
            "title": "A Brief Introduction to the Serial Peripheral Interface (SPI)"
        },
        {
            "location": "/arduino/libraries/spi/#connections",
            "text": "The following table display on which pins the SPI lines are broken out on the different Arduino boards:  Note that MISO, MOSI, and SCK are available in a consistent physical location on the ICSP header; this is useful, for example, in designing a shield that works on every board.",
            "title": "Connections"
        },
        {
            "location": "/arduino/libraries/spi/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/arduino/libraries/spi/#spi-master",
            "text": "https://github.com/esp8266/Arduino/tree/master/libraries/SPI",
            "title": "SPI Master"
        },
        {
            "location": "/arduino/libraries/spi/#spi-slave",
            "text": "https://github.com/esp8266/Arduino/tree/master/libraries/SPISlave",
            "title": "SPI Slave"
        },
        {
            "location": "/arduino/libraries/software-serial/",
            "text": "SoftwareSerial\n#\n\n\nM\u1ed9t th\u01b0 vi\u1ec7n SoftwareSerial cho ESP8266 \u0111\u01b0\u1ee3c vi\u1ebft b\u1edfi Peter Lerup (@plerup) h\u1ed5 tr\u1ee3 t\u1ed1c \u0111\u1ed9 baud l\u00ean \u0111\u1ebfn 115200 v\u00e0 nhi\u1ec3u SoftwareSerial kh\u00e1c. Xem \nhttps://github.com/plerup/espsoftwareserial\n n\u1ebfu b\u1ea1n mu\u1ed1n \u0111\u1ec1 g\u1eefi b\u1ea3n c\u1ea3i ti\u1ebfn ho\u1eb7c m\u1edf m\u1ed9t v\u1ea5n \u0111\u1ec1 li\u00ean quan \u0111\u1ebfn SoftwareSerial.",
            "title": "Software Serial"
        },
        {
            "location": "/arduino/libraries/software-serial/#softwareserial",
            "text": "M\u1ed9t th\u01b0 vi\u1ec7n SoftwareSerial cho ESP8266 \u0111\u01b0\u1ee3c vi\u1ebft b\u1edfi Peter Lerup (@plerup) h\u1ed5 tr\u1ee3 t\u1ed1c \u0111\u1ed9 baud l\u00ean \u0111\u1ebfn 115200 v\u00e0 nhi\u1ec3u SoftwareSerial kh\u00e1c. Xem  https://github.com/plerup/espsoftwareserial  n\u1ebfu b\u1ea1n mu\u1ed1n \u0111\u1ec1 g\u1eefi b\u1ea3n c\u1ea3i ti\u1ebfn ho\u1eb7c m\u1edf m\u1ed9t v\u1ea5n \u0111\u1ec1 li\u00ean quan \u0111\u1ebfn SoftwareSerial.",
            "title": "SoftwareSerial"
        },
        {
            "location": "/arduino/libraries/mdns-dnssd/",
            "text": "mDNS v\u00e0 tr\u1ea3 l\u1eddi DNS-SD (Th\u01b0 vi\u1ec7n ESP8266mDNS)\n#\n\n\nCho ph\u00e9p \nsketch\n \u0111\u1ec3 \u0111\u00e1p l\u1ea1i c\u00e1c truy v\u1ea5n multicast DNS \u0111\u1ec3 c\u00e1c t\u00ean mi\u1ec1n gi\u1ed1ng \n\u201cfoo.local\u201d\n, v\u00e0 DNS-SD (nh\u1eadn bi\u1ebft d\u1ecbch v\u1ee5) truy v\u1ea5n. Xem v\u00ed d\u1ee5 \u0111\u00ednh k\u00e8m \u0111\u1ec3 bi\u1ebft chi ti\u1ebft.",
            "title": "mDNS v\u00e0 DNS-SD"
        },
        {
            "location": "/arduino/libraries/mdns-dnssd/#mdns-va-tra-loi-dns-sd-thu-vien-esp8266mdns",
            "text": "Cho ph\u00e9p  sketch  \u0111\u1ec3 \u0111\u00e1p l\u1ea1i c\u00e1c truy v\u1ea5n multicast DNS \u0111\u1ec3 c\u00e1c t\u00ean mi\u1ec1n gi\u1ed1ng  \u201cfoo.local\u201d , v\u00e0 DNS-SD (nh\u1eadn bi\u1ebft d\u1ecbch v\u1ee5) truy v\u1ea5n. Xem v\u00ed d\u1ee5 \u0111\u00ednh k\u00e8m \u0111\u1ec3 bi\u1ebft chi ti\u1ebft.",
            "title": "mDNS v\u00e0 tr\u1ea3 l\u1eddi DNS-SD (Th\u01b0 vi\u1ec7n ESP8266mDNS)"
        },
        {
            "location": "/arduino/libraries/ssdp/",
            "text": "SSDP (ESP8266SSDP)\n#\n\n\nSSDP l\u00e0 giao th\u1ee9c nh\u1eadn bi\u1ebft d\u1ecbch v\u1ee5, h\u1ed5 tr\u1edf tr\u00ean windowns \nout of the box - b\u00ean ngo\u00e0i c\u1ee7a h\u1ee3p\n. Xem v\u00ed d\u1ee5 \u0111\u00ednh k\u00e8m \u0111\u1ec3 tham kh\u1ea3o.",
            "title": "SSDP"
        },
        {
            "location": "/arduino/libraries/ssdp/#ssdp-esp8266ssdp",
            "text": "SSDP l\u00e0 giao th\u1ee9c nh\u1eadn bi\u1ebft d\u1ecbch v\u1ee5, h\u1ed5 tr\u1edf tr\u00ean windowns  out of the box - b\u00ean ngo\u00e0i c\u1ee7a h\u1ee3p . Xem v\u00ed d\u1ee5 \u0111\u00ednh k\u00e8m \u0111\u1ec3 tham kh\u1ea3o.",
            "title": "SSDP (ESP8266SSDP)"
        },
        {
            "location": "/arduino/libraries/dns-server/",
            "text": "DNS server (DNSServer library)\n#\n\n\nTh\u1ef1c hi\u1ec7n m\u1ed9t DNS server \u0111\u01a1n gi\u1ea3n m\u00e0 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u1ea3 STA v\u00e0 AP. C\u00e1c DNS server ch\u1ec9 h\u1ed5 tr\u1ee3 m\u1ed9t domain ( \u0111\u1ec3 t\u1ea5t c\u1ea3 c\u00e1c domain kh\u00e1c n\u00f3 s\u1ebd tr\u1ea3 l\u1edbi v\u1edbi NXDOMAIN ho\u1eb7c m\u00e3 tr\u1ea1ng th\u00e1i kh\u00e1ch h\u00e0ng ). V\u1edbi Client c\u00f3 th\u1ec3 m\u1edf m\u1ed9t web server ch\u1ea1y tr\u00ean ESP8266 s\u1eed d\u1ee5ng m\u1ed9t t\u00ean domain, kh\u00f4ng c\u1ea7n \u0111\u1ecba ch\u1ec9 IP. Xem v\u00ed d\u1ee5 \u0111\u00ednh k\u00e8m \u0111\u1ec3 bi\u1ebft th\u00eam chi ti\u1ebft.",
            "title": "DNS Server"
        },
        {
            "location": "/arduino/libraries/dns-server/#dns-server-dnsserver-library",
            "text": "Th\u1ef1c hi\u1ec7n m\u1ed9t DNS server \u0111\u01a1n gi\u1ea3n m\u00e0 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u1ea3 STA v\u00e0 AP. C\u00e1c DNS server ch\u1ec9 h\u1ed5 tr\u1ee3 m\u1ed9t domain ( \u0111\u1ec3 t\u1ea5t c\u1ea3 c\u00e1c domain kh\u00e1c n\u00f3 s\u1ebd tr\u1ea3 l\u1edbi v\u1edbi NXDOMAIN ho\u1eb7c m\u00e3 tr\u1ea1ng th\u00e1i kh\u00e1ch h\u00e0ng ). V\u1edbi Client c\u00f3 th\u1ec3 m\u1edf m\u1ed9t web server ch\u1ea1y tr\u00ean ESP8266 s\u1eed d\u1ee5ng m\u1ed9t t\u00ean domain, kh\u00f4ng c\u1ea7n \u0111\u1ecba ch\u1ec9 IP. Xem v\u00ed d\u1ee5 \u0111\u00ednh k\u00e8m \u0111\u1ec3 bi\u1ebft th\u00eam chi ti\u1ebft.",
            "title": "DNS server (DNSServer library)"
        },
        {
            "location": "/arduino/libraries/servo/",
            "text": "Servo\n#\n\n\nTh\u01b0 vi\u1ec7n tr\u00ecnh b\u00e0y kh\u1ea3 n\u0103ng \u0111i\u1ec1u khi\u1ec3n \u0111\u1ed9ng c\u01a1 servo RC. Th\u01b0 vi\u1ec7n h\u1ed5 tr\u1ee3 t\u1ed1i \u0111a 24 servo tr\u00ean b\u1ea5t k\u1ef3 ch\u00e2n output c\u00f3 s\u1eb3n. Theo m\u1eb7c \u0111\u1ecbnh 12 servo \u0111\u1ea7u ti\u00ean s\u1ebd s\u1eed d\u1ee5ng Timer0 v\u00e0 hi\u1ec7n t\u1ea1i s\u1ebd kh\u00f4ng d\u00f9ng cho b\u1ea5t k\u1ef3 h\u1ed9 tr\u1ee3 n\u00e0o kh\u00e1c. \u0110\u1ebfn 12 Servo ti\u1ebfp theo s\u1eed d\u1ee5ng Timer1 v\u00e0 t\u00ednh n\u0103ng s\u1eed d\u1ee5ng n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n. Trong khi nhi\u1ec1u \u0111\u1ed9ng c\u01a1 Servo RC s\u1ebd ch\u1ea5p nh\u1eadn m\u1ee9c \u0111i\u1ec7n \u00e1p \u1edf c\u00e1c ch\u00e2n IO l\u00e0 3.3V t\u1eeb ESP8266. Ph\u1ea7n l\u1edbn s\u1ebd kh\u00f4ng th\u1ec3 ch\u1ea1y v\u1edbi \u0111i\u1ec7n \u00e1p 3.3V, s\u1ebd c\u1ea7n m\u1ed9t ngu\u1ed3n \u0111i\u1ec7n ph\u00f9 h\u1ee3p v\u1edbi c\u00e1c th\u00f4ng s\u1ed1 c\u1ee7a Servo. C\u1ea7n k\u1ebft n\u1ed1i mass chung gi\u1eefa ESP8266 v\u00e0 ngu\u1ed3n c\u1ee7a \u0111\u1ed9ng c\u01a1 Servo.",
            "title": "Servo"
        },
        {
            "location": "/arduino/libraries/servo/#servo",
            "text": "Th\u01b0 vi\u1ec7n tr\u00ecnh b\u00e0y kh\u1ea3 n\u0103ng \u0111i\u1ec1u khi\u1ec3n \u0111\u1ed9ng c\u01a1 servo RC. Th\u01b0 vi\u1ec7n h\u1ed5 tr\u1ee3 t\u1ed1i \u0111a 24 servo tr\u00ean b\u1ea5t k\u1ef3 ch\u00e2n output c\u00f3 s\u1eb3n. Theo m\u1eb7c \u0111\u1ecbnh 12 servo \u0111\u1ea7u ti\u00ean s\u1ebd s\u1eed d\u1ee5ng Timer0 v\u00e0 hi\u1ec7n t\u1ea1i s\u1ebd kh\u00f4ng d\u00f9ng cho b\u1ea5t k\u1ef3 h\u1ed9 tr\u1ee3 n\u00e0o kh\u00e1c. \u0110\u1ebfn 12 Servo ti\u1ebfp theo s\u1eed d\u1ee5ng Timer1 v\u00e0 t\u00ednh n\u0103ng s\u1eed d\u1ee5ng n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n. Trong khi nhi\u1ec1u \u0111\u1ed9ng c\u01a1 Servo RC s\u1ebd ch\u1ea5p nh\u1eadn m\u1ee9c \u0111i\u1ec7n \u00e1p \u1edf c\u00e1c ch\u00e2n IO l\u00e0 3.3V t\u1eeb ESP8266. Ph\u1ea7n l\u1edbn s\u1ebd kh\u00f4ng th\u1ec3 ch\u1ea1y v\u1edbi \u0111i\u1ec7n \u00e1p 3.3V, s\u1ebd c\u1ea7n m\u1ed9t ngu\u1ed3n \u0111i\u1ec7n ph\u00f9 h\u1ee3p v\u1edbi c\u00e1c th\u00f4ng s\u1ed1 c\u1ee7a Servo. C\u1ea7n k\u1ebft n\u1ed1i mass chung gi\u1eefa ESP8266 v\u00e0 ngu\u1ed3n c\u1ee7a \u0111\u1ed9ng c\u01a1 Servo.",
            "title": "Servo"
        },
        {
            "location": "/arduino/libraries/wifi-manager/",
            "text": "Th\u01b0 vi\u1ec7n WiFiManager\n#\n\n\nTh\u01b0 vi\u1ec7n WIFIManager h\u1ed7 tr\u1ee3 ESP8266 m\u1edf 1 Webserver + 1 Access Point(AP), \u0111\u1ec3 user c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i v\u00e0o v\u00e0 c\u1ea5u h\u00ecnh Wifi password.\n\n\nAccess Point l\u00e0 m\u1ed9t \u0111i\u1ec3m truy c\u1eadp m\u1ea1ng kh\u00f4ng d\u00e2y,c\u00f3 kh\u1ea3 n\u0103ng truy\u1ec1n v\u00e0 nh\u1eadn d\u1eef li\u1ec7u th\u00f4ng qua k\u1ebft n\u1ed1i Wifi.\n\n\nNguy\u00ean l\u00fd l\u00e0m vi\u1ec7c c\u1ee7a th\u01b0 vi\u00ean WIFIManager\n#\n\n\nKhi kh\u1edfi \u0111\u1ed9ng ,ESP s\u1ebd \u1edf ch\u1ebf \u0111\u1ed9 Station(\u0111i\u1ec3m thu s\u00f3ng) v\u00e0 th\u1eed k\u1ebft n\u1ed1i v\u1edbi c\u00e1c Access Point(\u0111i\u1ec3m ph\u00e1t s\u00f3ng) \u0111\u00e3 l\u01b0u tr\u01b0\u1edbc \u0111\u00f3.\n\n\nN\u1ebfu kh\u00f4ng th\u1ec3 k\u1ebft n\u1ed1i,ESP s\u1ebd chuy\u1ec3n qua ch\u1ebf \u0111\u1ed9 AP v\u00e0 t\u1ea1o m\u1ed9t Webserver . B\u1ea1n c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i v\u00e0o AP v\u1eeba \u0111\u01b0\u1ee3c t\u1ea1o v\u00e0 c\u1ea5u h\u00ecnh Wifi cho ESP c\u1ee7a b\u1ea1n.\n\n\nV\u00ed d\u1ee5 \u1ee9ng d\u1ee5ng th\u01b0 vi\u1ec7n WIFIManager s\u1eed d\u1ee5ng board iot-Wifi-uno\n#\n\n\nChu\u1ea9n b\u1ecb\n#\n\n\nBoard iot-wifi-uno. \nhttps://github.com/iotmakervn/iot-wifi-uno-hw\n.\n\n\nArduino IDE 1.6.8, t\u1ea3i t\u1eeb \nArduino website\n.\n\n\nH\u01b0\u1edbng d\u1eabn\n#\n\n\n1.T\u1ea3i th\u01b0 vi\u1ec7n WIFIManager:\n#\n\n\nM\u1edf  Arduino v\u00e0o Sketch -> Include Library -> Manager Libraries.\nT\u00ecm ki\u1ebfm th\u01b0 vi\u1ec7n WIFIManager v\u00e0 b\u1ea5m Install.\n\n\n\n\n2.C\u00e0i \u0111\u1eb7t board Generic ESP8266 Module:\n#\n\n\nV\u00e0o File->Preferences.\n\n\nTrong \u00f4 Additional Boards Manager URLS paste Link sau:\n\n\nhttp://arduino.esp8266.com/stable/package_esp8266com_index.json\n\n\n\n\n\n\nV\u00e0o Tool->Board->Board Manager . T\u00ecm v\u00e0 c\u00e0i \u0111\u1eb7t nh\u01b0 h\u00ecnh sau \u0111\u00f3 trong Tool -> Board t\u00ecm v\u00e0 ch\u1ecdn Board Generic ESP8266 Module\n\n\n\n\n3.N\u1ea1p code cho iot-wifi-uno:\n#\n\n\nSau khi c\u00e0i \u0111\u1eb7t th\u01b0 vi\u1ec7n v\u00e0 Board,ti\u1ebfn h\u00e0nh n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh sau v\u00e0o Board iot-wifi-uno b\u1eb1ng Arduino IDE\n\n\n#include <ESP8266WiFi.h>  \n#include <DNSServer.h>\n#include <ESP8266WebServer.h>\n#include <WiFiManager.h>         \n\n\nvoid setup() {\n    Serial.begin(115200);\n    WiFiManager wifiManager;\n    wifiManager.autoConnect(\"AutoConnectAP\");\n    Serial.println(\"connected...\");\n}\n\nvoid loop() {\n    // put your main code here, to run repeatedly:\n\n}\n\n\n\n\n4.K\u1ebft n\u1ed1i v\u1edbi AP v\u00e0 c\u1ea5u h\u00ecnh wifi:\n#\n\n\nSau khi reset Board,trong Wifi c\u1ee7a b\u1ea1n s\u1ebd xu\u1ea5t hi\u1ec7n 1 AP m\u1edbi . H\u00e3y ch\u1ecdn v\u00e0 k\u1ebft n\u1ed1i nh\u01b0 trong h\u00ecnh.\n\n\n\n\nAP n\u00e0y l\u00e0 m\u1ea1ng wifi m\u1edf.\nc\u00f3 th\u1ec3 c\u00e0i \u0111\u1eb7t password cho AP b\u1eb1ng c\u00e1ch thay l\u1ec7nh:\n\n\ncpp wifiManager.autoConnect(\"AutoConnectAP\")\n\n\nB\u1eb1ng l\u1ec7nh\n\n\ncpp wifiManager.autoConnect(\"AutoConnectAP\", \"password\")\n\n\n(password l\u00e0 m\u1eadt kh\u1ea9u b\u1ea1n \u0111\u1eb7t cho AP)\n\n\nS\u1eed d\u1ee5ng thi\u1ebft b\u1ecb c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i wifi k\u1ebft n\u1ed1i v\u00e0o AP v\u1eeba \u0111\u01b0\u1ee3c t\u1ea1o.B\u1eb1ng c\u00e1ch tr\u00ean c\u1eeda s\u1ed5 tr\u00ecnh duy\u1ec7t g\u00f5 \u0111\u1ecba ch\u1ec9 \n192.168.4.1\n.S\u1ebd hi\u1ec7n ra m\u1ed9t c\u1eeda s\u1ed5 c\u1ea5u h\u00ecnh.\n\n\n\n\nCh\u1ecdn Configure WIFI sau \u0111\u00f3 ch\u1ecdn t\u00ean Wifi b\u1ea1n mu\u1ed1n ESP truy c\u1eadp,nh\u1eadp m\u1eadt kh\u1ea9u v\u00e0o b\u1ea5m SAVE.\n\n\n\n\nN\u1ebfu b\u1ea1n nh\u1eadp m\u1eadt kh\u1ea9u \u0111\u00fang ESP s\u1ebd t\u1ef1 \u0111\u1ed9ng k\u1ebft n\u1ed1i v\u00e0o m\u1ea1ng Wifi b\u1ea1n v\u1eeba ch\u1ecdn.\n\n\nNh\u01b0 v\u1eady ESP c\u1ee7a b\u1ea1n \u0111\u00e3 \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i v\u1edbi Wifi.",
            "title": "WiFiManager"
        },
        {
            "location": "/arduino/libraries/wifi-manager/#thu-vien-wifimanager",
            "text": "Th\u01b0 vi\u1ec7n WIFIManager h\u1ed7 tr\u1ee3 ESP8266 m\u1edf 1 Webserver + 1 Access Point(AP), \u0111\u1ec3 user c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i v\u00e0o v\u00e0 c\u1ea5u h\u00ecnh Wifi password.  Access Point l\u00e0 m\u1ed9t \u0111i\u1ec3m truy c\u1eadp m\u1ea1ng kh\u00f4ng d\u00e2y,c\u00f3 kh\u1ea3 n\u0103ng truy\u1ec1n v\u00e0 nh\u1eadn d\u1eef li\u1ec7u th\u00f4ng qua k\u1ebft n\u1ed1i Wifi.",
            "title": "Th\u01b0 vi\u1ec7n WiFiManager"
        },
        {
            "location": "/arduino/libraries/wifi-manager/#nguyen-ly-lam-viec-cua-thu-vien-wifimanager",
            "text": "Khi kh\u1edfi \u0111\u1ed9ng ,ESP s\u1ebd \u1edf ch\u1ebf \u0111\u1ed9 Station(\u0111i\u1ec3m thu s\u00f3ng) v\u00e0 th\u1eed k\u1ebft n\u1ed1i v\u1edbi c\u00e1c Access Point(\u0111i\u1ec3m ph\u00e1t s\u00f3ng) \u0111\u00e3 l\u01b0u tr\u01b0\u1edbc \u0111\u00f3.  N\u1ebfu kh\u00f4ng th\u1ec3 k\u1ebft n\u1ed1i,ESP s\u1ebd chuy\u1ec3n qua ch\u1ebf \u0111\u1ed9 AP v\u00e0 t\u1ea1o m\u1ed9t Webserver . B\u1ea1n c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i v\u00e0o AP v\u1eeba \u0111\u01b0\u1ee3c t\u1ea1o v\u00e0 c\u1ea5u h\u00ecnh Wifi cho ESP c\u1ee7a b\u1ea1n.",
            "title": "Nguy\u00ean l\u00fd l\u00e0m vi\u1ec7c c\u1ee7a th\u01b0 vi\u00ean WIFIManager"
        },
        {
            "location": "/arduino/libraries/wifi-manager/#vi-du-ung-dung-thu-vien-wifimanager-su-dung-board-iot-wifi-uno",
            "text": "",
            "title": "V\u00ed d\u1ee5 \u1ee9ng d\u1ee5ng th\u01b0 vi\u1ec7n WIFIManager s\u1eed d\u1ee5ng board iot-Wifi-uno"
        },
        {
            "location": "/arduino/libraries/wifi-manager/#chuan-bi",
            "text": "Board iot-wifi-uno.  https://github.com/iotmakervn/iot-wifi-uno-hw .  Arduino IDE 1.6.8, t\u1ea3i t\u1eeb  Arduino website .",
            "title": "Chu\u1ea9n b\u1ecb"
        },
        {
            "location": "/arduino/libraries/wifi-manager/#huong-dan",
            "text": "",
            "title": "H\u01b0\u1edbng d\u1eabn"
        },
        {
            "location": "/arduino/libraries/wifi-manager/#1tai-thu-vien-wifimanager",
            "text": "M\u1edf  Arduino v\u00e0o Sketch -> Include Library -> Manager Libraries.\nT\u00ecm ki\u1ebfm th\u01b0 vi\u1ec7n WIFIManager v\u00e0 b\u1ea5m Install.",
            "title": "1.T\u1ea3i th\u01b0 vi\u1ec7n WIFIManager:"
        },
        {
            "location": "/arduino/libraries/wifi-manager/#2cai-at-board-generic-esp8266-module",
            "text": "V\u00e0o File->Preferences.  Trong \u00f4 Additional Boards Manager URLS paste Link sau:  http://arduino.esp8266.com/stable/package_esp8266com_index.json   V\u00e0o Tool->Board->Board Manager . T\u00ecm v\u00e0 c\u00e0i \u0111\u1eb7t nh\u01b0 h\u00ecnh sau \u0111\u00f3 trong Tool -> Board t\u00ecm v\u00e0 ch\u1ecdn Board Generic ESP8266 Module",
            "title": "2.C\u00e0i \u0111\u1eb7t board Generic ESP8266 Module:"
        },
        {
            "location": "/arduino/libraries/wifi-manager/#3nap-code-cho-iot-wifi-uno",
            "text": "Sau khi c\u00e0i \u0111\u1eb7t th\u01b0 vi\u1ec7n v\u00e0 Board,ti\u1ebfn h\u00e0nh n\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh sau v\u00e0o Board iot-wifi-uno b\u1eb1ng Arduino IDE  #include <ESP8266WiFi.h>  \n#include <DNSServer.h>\n#include <ESP8266WebServer.h>\n#include <WiFiManager.h>         \n\n\nvoid setup() {\n    Serial.begin(115200);\n    WiFiManager wifiManager;\n    wifiManager.autoConnect(\"AutoConnectAP\");\n    Serial.println(\"connected...\");\n}\n\nvoid loop() {\n    // put your main code here, to run repeatedly:\n\n}",
            "title": "3.N\u1ea1p code cho iot-wifi-uno:"
        },
        {
            "location": "/arduino/libraries/wifi-manager/#4ket-noi-voi-ap-va-cau-hinh-wifi",
            "text": "Sau khi reset Board,trong Wifi c\u1ee7a b\u1ea1n s\u1ebd xu\u1ea5t hi\u1ec7n 1 AP m\u1edbi . H\u00e3y ch\u1ecdn v\u00e0 k\u1ebft n\u1ed1i nh\u01b0 trong h\u00ecnh.   AP n\u00e0y l\u00e0 m\u1ea1ng wifi m\u1edf.\nc\u00f3 th\u1ec3 c\u00e0i \u0111\u1eb7t password cho AP b\u1eb1ng c\u00e1ch thay l\u1ec7nh:  cpp wifiManager.autoConnect(\"AutoConnectAP\")  B\u1eb1ng l\u1ec7nh  cpp wifiManager.autoConnect(\"AutoConnectAP\", \"password\")  (password l\u00e0 m\u1eadt kh\u1ea9u b\u1ea1n \u0111\u1eb7t cho AP)  S\u1eed d\u1ee5ng thi\u1ebft b\u1ecb c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i wifi k\u1ebft n\u1ed1i v\u00e0o AP v\u1eeba \u0111\u01b0\u1ee3c t\u1ea1o.B\u1eb1ng c\u00e1ch tr\u00ean c\u1eeda s\u1ed5 tr\u00ecnh duy\u1ec7t g\u00f5 \u0111\u1ecba ch\u1ec9  192.168.4.1 .S\u1ebd hi\u1ec7n ra m\u1ed9t c\u1eeda s\u1ed5 c\u1ea5u h\u00ecnh.   Ch\u1ecdn Configure WIFI sau \u0111\u00f3 ch\u1ecdn t\u00ean Wifi b\u1ea1n mu\u1ed1n ESP truy c\u1eadp,nh\u1eadp m\u1eadt kh\u1ea9u v\u00e0o b\u1ea5m SAVE.   N\u1ebfu b\u1ea1n nh\u1eadp m\u1eadt kh\u1ea9u \u0111\u00fang ESP s\u1ebd t\u1ef1 \u0111\u1ed9ng k\u1ebft n\u1ed1i v\u00e0o m\u1ea1ng Wifi b\u1ea1n v\u1eeba ch\u1ecdn.  Nh\u01b0 v\u1eady ESP c\u1ee7a b\u1ea1n \u0111\u00e3 \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i v\u1edbi Wifi.",
            "title": "4.K\u1ebft n\u1ed1i v\u1edbi AP v\u00e0 c\u1ea5u h\u00ecnh wifi:"
        },
        {
            "location": "/arduino/libraries/smartconfig-wps/",
            "text": "Smartconfig\n#\n\n\nWPS\n#\n\n\nDemo m\u1ed9t v\u00ed d\u1ee5 \u1ee9ng d\u1ee5ng smartconfig trong c\u1ea5u h\u00ecnh th\u00f4ng tin thi\u1ebft b\u1ecb.\n#\n\n\nTa s\u1ebd vi\u1ebft m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh cho ph\u00e9p c\u1ea5u h\u00ecnh th\u00f4ng tin (username, password) cho module Esp8266 sau khi nh\u1ea5n n\u00fat Flash th\u00f4ng qua ph\u1ea7n m\u1ec1m Esp8266 Smartconfig tr\u00ean Smartphone Android.\n\n\n\u2013 Vi\u1ec7c c\u1ea7n l\u00e0m \u0111\u1ea7u ti\u00ean l\u00e0 b\u1ea1n ki\u1ec3m tra xem trong th\u01b0 vi\u1ec7n Arduino IDE \u0111\u00e3 c\u00f3 th\u01b0 vi\u1ec7n WiFi Manager v\u00e0 ESP8266WiFi ch\u01b0a. N\u1ebfu ch\u01b0a c\u00f3 th\u00ec b\u1ea1n c\u00f3 th\u1ec3 include n\u00f3 m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng t\u1eeb Sketch-> include library -> manager library, g\u00f5 t\u00ean c\u00e1c th\u01b0 vi\u1ec7n n\u00e0y v\u00e0 ti\u1ebfn h\u00e0nh c\u00e0i \u0111\u1eb7t. \n\n\n\u2013 C\u00e0i \u0111\u1eb7t ph\u1ea7n m\u1ec1m Esp8266: N\u1ebfu b\u1ea1n c\u00f3 \u0111i\u1ec7n tho\u1ea1i Android b\u1ea1n c\u00f3 th\u1ec3 v\u00e0o CH Play \u0111\u1ec3 t\u1ea3i.\n\n\n\u2013 Vi\u1ebft code ch\u01b0\u01a1ng tr\u00ecnh cho ph\u00e9p smartconfig sau khi nh\u1ea5n n\u00fat flash.\n\n\n```\n\n\n#include <ESP8266WiFi.h>;\nconst int buttonPin = D3;\nconst int pinled = D0;\nint buttonState = 0;\n\nvoid setup() {\n    pinMode(buttonPin, INPUT);\n    pinmode(pinled, OUTPUT)\n    WiFi.mode(WIFI_AP_STA);\n    delay(500);\n}\n\nvoid loop() {\n    buttonState = digitalRead(buttonPin);\n    if (buttonState == LOW) {\n    digitalWrite(pinled,HIGH)\n    WiFi.beginSmartConfig();\n    }\n}",
            "title": "Smartconfig & WPS"
        },
        {
            "location": "/arduino/libraries/smartconfig-wps/#smartconfig",
            "text": "",
            "title": "Smartconfig"
        },
        {
            "location": "/arduino/libraries/smartconfig-wps/#wps",
            "text": "",
            "title": "WPS"
        },
        {
            "location": "/arduino/libraries/smartconfig-wps/#demo-mot-vi-du-ung-dung-smartconfig-trong-cau-hinh-thong-tin-thiet-bi",
            "text": "Ta s\u1ebd vi\u1ebft m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh cho ph\u00e9p c\u1ea5u h\u00ecnh th\u00f4ng tin (username, password) cho module Esp8266 sau khi nh\u1ea5n n\u00fat Flash th\u00f4ng qua ph\u1ea7n m\u1ec1m Esp8266 Smartconfig tr\u00ean Smartphone Android.  \u2013 Vi\u1ec7c c\u1ea7n l\u00e0m \u0111\u1ea7u ti\u00ean l\u00e0 b\u1ea1n ki\u1ec3m tra xem trong th\u01b0 vi\u1ec7n Arduino IDE \u0111\u00e3 c\u00f3 th\u01b0 vi\u1ec7n WiFi Manager v\u00e0 ESP8266WiFi ch\u01b0a. N\u1ebfu ch\u01b0a c\u00f3 th\u00ec b\u1ea1n c\u00f3 th\u1ec3 include n\u00f3 m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng t\u1eeb Sketch-> include library -> manager library, g\u00f5 t\u00ean c\u00e1c th\u01b0 vi\u1ec7n n\u00e0y v\u00e0 ti\u1ebfn h\u00e0nh c\u00e0i \u0111\u1eb7t.   \u2013 C\u00e0i \u0111\u1eb7t ph\u1ea7n m\u1ec1m Esp8266: N\u1ebfu b\u1ea1n c\u00f3 \u0111i\u1ec7n tho\u1ea1i Android b\u1ea1n c\u00f3 th\u1ec3 v\u00e0o CH Play \u0111\u1ec3 t\u1ea3i.  \u2013 Vi\u1ebft code ch\u01b0\u01a1ng tr\u00ecnh cho ph\u00e9p smartconfig sau khi nh\u1ea5n n\u00fat flash.  ```  #include <ESP8266WiFi.h>;\nconst int buttonPin = D3;\nconst int pinled = D0;\nint buttonState = 0;\n\nvoid setup() {\n    pinMode(buttonPin, INPUT);\n    pinmode(pinled, OUTPUT)\n    WiFi.mode(WIFI_AP_STA);\n    delay(500);\n}\n\nvoid loop() {\n    buttonState = digitalRead(buttonPin);\n    if (buttonState == LOW) {\n    digitalWrite(pinled,HIGH)\n    WiFi.beginSmartConfig();\n    }\n}",
            "title": "Demo m\u1ed9t v\u00ed d\u1ee5 \u1ee9ng d\u1ee5ng smartconfig trong c\u1ea5u h\u00ecnh th\u00f4ng tin thi\u1ebft b\u1ecb."
        },
        {
            "location": "/arduino/libraries/others/",
            "text": "C\u00e1c th\u01b0 vi\u1ec7n kh\u00e1c (Kh\u00f4ng bao g\u1ed3m IDE)\n#\n\n\nNh\u1eefng th\u01b0 vi\u1ec7n kh\u00f4ng d\u1ef1a v\u00e0o quy\u1ec1n truy c\u1eadp c\u1ea5p th\u1ea5p \u0111\u1ebfn nh\u1eefng thanh ghi AVR n\u00ean l\u00e0m vi\u1ec7c \u1ed5n \u0111\u1ecbnh. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t v\u00e0i th\u01b0 vi\u1ec7n \u0111\u01b0\u1ee3c x\u00e1c minnh \u0111\u1ec3 l\u00e0m vi\u1ec7c:\n\n\n\n\nAdafruit_ILI9341\n - lu\u1ed3ng c\u1ee7a Adafruit ILI9341 cho ESP8266\n\n\narduinoVNC\n - VNC Client cho Arduino\n\n\narduinoWebSockets\n - WebSocket Server v\u00e0 Client t\u01b0\u01a1ng th\u00edch v\u1edbi ESP8266 (RFC6455)\n\n\naREST\n - th\u01b0 vi\u1ec7n REST API handler\n\n\nBlynk\n - IoT framework cho c\u00e1c Maker ( ki\u1ec3m tr\u1ea3 \u1edf trang \nKickstarter page\n\n\nDallasTemperature\n\n\nDHT-sensor-library \n - th\u01b0 vi\u1ec7n Arduino cho c\u1ea3m bi\u1ebfn nhi\u1ec7t \u0111\u1ed9, \u0111\u1ed9 \u1ea9m DHT11/DHT22. T\u1ea3i phi\u00ean b\u1ea3n th\u01b0 vi\u1ec7n m\u1edbi nh\u1ea5t v1.1.1 v\u00e0 kh\u00f4ng thay \u0111\u1ed5i n\u1ebfu kh\u00f4ng c\u1ea7n thi\u1ebft. M\u1ed9t phi\u00ean b\u1ea3n c\u0169 h\u01a1n c\u0169ng c\u00f3 th\u1ec3 cho ph\u00e9p DHT nhu \nDHT dht(DHTPIN, DHTTYPE, 15)\n\n\nDimSwitch\n - \u0111i\u1ec1u khi\u1ec3n ch\u1ea5n l\u01b0u \u0111i\u1ec7n t\u1eeb cho \u1ed1ng \u0111\u00e8n hu\u1ef3nh quang t\u1eeb xa nh\u01b0 l\u00e0 s\u1eed d\u1ee5ng c\u00f4ng t\u1eaft tr\u00ean t\u01b0\u1eddng.\n\n\nEncoder\n - th\u01b0 vi\u1ec7n Arduino cho rotary encoders. Phi\u00ean b\u1ea3n 1.4 h\u1ed5 tr\u1ee3 ESP8266.\n\n\nesp8266_mdns\n - truy v\u1ea5n v\u00e0 tr\u1ea3 l\u1eddi mDNS tr\u00ean ESP8266. Ho\u1eb7c \u0111\u1ec3 m\u00f4 t\u1ea3 n\u00f3 theo c\u00e1c kh\u00e1c : m\u1ed9t Client mDNS ho\u1eb7c th\u01b0 vi\u1ec7n Bonjour Client cho ESP8266.\n\n\nESPAsyncTCP\n - th\u01b0 vi\u1ec7n TCP kh\u00f4ng \u0111\u1ed3ng b\u1ed9 cho ESP8266 v\u00e0 ESP32/31B\n\n\nESPAsyncWebServer\n - th\u01b0 vi\u1ec7n kh\u00f4ng \u0111\u1ed3ng b\u1ed9 Web Server cho ESP82666 v\u00e0 ESP32/31B\n\n\nHomie for ESP8266\n - khung Arduino cho ESP8266 th\u1ef1c hi\u1ec7n Homie, m\u1ed9t hi\u1ec7p \u01b0\u1edbc MQTT cho IoT.\n\n\nNeoPixel\n - th\u01b0 vi\u1ec7n NeoPixel c\u1ee7a Adafruit, hi\u1ec7n nay h\u1ed5 tr\u1ee3 cho c\u00e1c ESP8266 ( phi\u00ean b\u1ea3n 1.0.2 ho\u1eb7c cao h\u01a1n t\u1eeb th\u01b0 vi\u1ec7n qu\u1ea3n l\u00fd c\u1ee7a Arduino)\n\n\nNeoPixelBus\n - th\u01b0 vi\u1ec7n Arduino NeoPixel t\u01b0\u01a1ng th\u00edch v\u1edbi ESP8266. D\u00f9ng nh\u00e1nh \u201cDmaDriven\u201d ho\u1eb7c \u201cUartDriven\u201d cho ESP8266. Bao g\u1ed3m h\u1ed5 tr\u1ee3 m\u00e0u HSL v\u00e0 nhi\u1ec1u h\u01a1n n\u1eeda.\n\n\nPubSubClient \n - th\u01b0 vi\u1ec7n MQTT c\u1ee7a @Imroy\n\n\nRTC\n - th\u01b0 vi\u1ec7n Arduino cho DS1307 v\u00e0 DS3231 t\u01b0\u01a1ng th\u00edch v\u1edbi ESP8266.\n\n\nSouliss, Smart Home \n - khung cho Smart Home d\u1ef1a tr\u00ean Arduino, Arduino v\u00e0 OpenHAB.\n\n\nST7735\n - s\u1eeda \u0111\u1ed5i th\u01b0 vi\u1ec7n ST7735 c\u1ee7a Adafruit \u0111\u1ec3 t\u01b0\u01a1ng th\u00edch v\u1edbi ESP8266. Ch\u1ec9 c\u1ea7n ch\u1eafc ch\u1eafn l\u00e0 s\u1eeda \u0111\u1ed5i c\u00e1c ch\u00e2n trong v\u00ed d\u1ee5 m\u1eabu nh\u01b0 c\u00e1ch h\u1ecd l\u00e0m trong AVR.\n\n\nTask\n - th\u01b0 vi\u1ec7n \u0111a nhi\u1ec7m Arduino Nonpreemptive. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 c\u00e1c th\u01b0 vi\u1ec7n m\u00e3 ngu\u1ed3n bao g\u1ed3m ch\u1ee9c n\u0103ng cung c\u1ea5p, t\u1ee9c th\u01b0 vi\u1ec7n n\u00e0y c\u00f3 kh\u1ea3 n\u0103ng t\u01b0\u01a1ng th\u00edch ch\u00e9o.\n\n\nTickerScheduler\n - th\u01b0 vi\u1ec7n c\u0169ng c\u1ea5p l\u1ecbch tr\u00ecnh \u0111\u01a1n gi\u1ea3n cho Ticker \u0111\u1ec3 tr\u00e1nh reset WDT.\n\n\nTeleinfo\n - th\u01b0 vi\u1ec7n Generic French Power M\u1ec3t \u0111\u1ec3 \u0111\u1ecdc Teleinfo d\u1eef li\u1ec7u gi\u00e1m s\u00e1t n\u0103ng l\u01b0\u1ee3ng nh\u01b0 s\u1ef1 ti\u00eau th\u1ee5, k\u1ebft n\u1ed1i, c\u00f4ng su\u1ea5t, th\u1eddi gian, \u2026 Th\u01b0 vi\u1ec7n n\u00e0y l\u00e0 cross platform gi\u1eefa ESP8266, Arduino, Particle, v\u00e0 C++ c\u0103n b\u1ea3n. French \u0111\u00e3 c\u00f4ng c\u1ed1 \n\u0111\u1ec1 t\u1eb7ng\n tr\u00ean blog c\u1ee7a t\u00e1c gi\u1ea3 v\u00e0 t\u1ea5t c\u1ea3 th\u00f4ng tin li\u00ean quan v\u1ec1 \nTeleinfo\n c\u0169ng c\u00f3 \u00edch.\n\n\nUTFT-ESP8266\n - th\u01b0 vi\u1ec7n hi\u1ec3n th\u1ecb UTFT v\u1edbi s\u1ef1 h\u1ed5 tr\u1ee3 cho ESP8266. Ch\u1ec9 c\u00f3 hi\u1ec7n th\u1ecb qua SPI \u0111\u01b0\u1ee3c h\u1ed5 tr\u1ee3 t\u1edbi th\u1eddi \u0111i\u1ec3m hi\u1ec7n t\u1ea1i ( kh\u00f4ng c\u00f3 ch\u1ebf \u0111\u1ed9 8-bit song song,\u2026). C\u0169ng bao g\u1ed3m c\u00e1c h\u1ed5 tr\u1ee3 cho SPI vi \u0111i\u1ec1u khi\u1ec3n v\u1ec1 ph\u1ea7n c\u1ee9ng c\u1ee7a ESP8266.\n\n\nWiFiManager\n - qu\u1ea3n l\u00fd k\u1ebft n\u1ed1i wifi v\u1edbi web captive portal. N\u1ebfu kh\u00f4ng th\u1ec3 k\u1ebft n\u1ed1i, n\u00f3 b\u1eaft \u0111\u1ea7u kh\u1edfi \u0111\u1ed9ng ch\u00ea \u0111\u1ed9 AP v\u00e0 m\u1ed9t c\u1ed5ng th\u00f4ng tin c\u1ea5u h\u00ecnh \u0111\u1ec3 b\u1ea1n c\u00f3 th\u1ec3 l\u1ef1a ch\u1ecdn v\u00e0 nh\u1eadp th\u00f4ng tin Wifi.\n\n\nOneWire\n - th\u01b0 vi\u1ec7n cho chip Dallas/Maxim 1-Wire.\n\n\nAdafruit-PCD8544-Nokia-5110-LCD-Library\n- lu\u1ed3ng c\u1ee7a Adafruit PCD8544 - th\u01b0 vi\u1ec7n cho ESP8266.\n\n\nPCF8574_ESP\n - m\u1ed9t th\u01b0 vi\u1ec7n r\u1ea5t \u0111\u01a1n gi\u1ea3n \u0111\u1ec3 s\u1eed d\u1ee5ng PCF8574/PCF8574A I2C 8-pin GPIO-expander.\n\n\nDot Matrix Display Library 2\n - Freetronics DMD & Generic 16 x 32 P10 th\u01b0 vi\u1ec7n hi\u1ec3n th\u1ecb Dot Matrix.\n\n\nSdFat-beta\n - th\u01b0 vi\u1ec7n SD-card v\u1edbi s\u1ef1 h\u1ed5 tr\u1ee3 t\u00ean t\u1eadp tin d\u00e0i, ph\u1ea7n m\u1ec1m v\u00e0 ph\u1ea7n c\u1ee9ng d\u1ef1a tr\u00ean SPI v\u00e0 nhi\u1ec1u th\u1ee9 kh\u00e1c.\n\n\nFastLED\n - m\u1ed9t th\u01b0 vi\u1ec7n cho ph\u00e9p \u0111i\u1ec1u khi\u1ec3n d\u1ec5 d\u00e0ng v\u00e0 hi\u1ec7u qu\u1ea3 m\u1ed9t lo\u1ea1t c\u00e1c LED chipset, gi\u1ed1ng nh\u01b0 Neopixel (WS2812B), DotStar, LPD8806 v\u00e0 nhi\u1ec1u th\u1ee9 kh\u00e1c. Bao g\u1ed3m fading, gradient, ch\u1ee9c n\u0103ng chuy\u1ec3n \u0111\u1ed5i m\u00e0u.\n\n\nOLED\n - m\u1ed9t th\u01b0 vi\u1ec7n \u0111\u1ec3 ki\u1ec3m so\u00e1t m\u00e0n h\u00ecnh OLED qua k\u1ebft n\u1ed1i I2C. \u0110\u00e3 th\u1eed nghi\u1ec7m v\u1edbi m\u00e0n h\u00ecnh hi\u1ec7n th\u1ecb \u0111\u1ed3 h\u1ecda OLED 0.96 inch.\n\n\nMFRC522\n - m\u1ed9t th\u01b0 vi\u1ec7n \u0111\u1ec3 s\u1eed d\u1ee5ng Mifare RC522 RFID - th\u1ebb \u0111\u1ecdc/ghi.\n\n\nPing\n - cho ph\u00e9p c\u00e1c ESP8266 ping m\u1ed9t m\u00e1y t\u00ednh t\u1eeb xa.",
            "title": "Th\u01b0 vi\u1ec7n h\u1eefu \u00edch kh\u00e1c"
        },
        {
            "location": "/arduino/libraries/others/#cac-thu-vien-khac-khong-bao-gom-ide",
            "text": "Nh\u1eefng th\u01b0 vi\u1ec7n kh\u00f4ng d\u1ef1a v\u00e0o quy\u1ec1n truy c\u1eadp c\u1ea5p th\u1ea5p \u0111\u1ebfn nh\u1eefng thanh ghi AVR n\u00ean l\u00e0m vi\u1ec7c \u1ed5n \u0111\u1ecbnh. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t v\u00e0i th\u01b0 vi\u1ec7n \u0111\u01b0\u1ee3c x\u00e1c minnh \u0111\u1ec3 l\u00e0m vi\u1ec7c:   Adafruit_ILI9341  - lu\u1ed3ng c\u1ee7a Adafruit ILI9341 cho ESP8266  arduinoVNC  - VNC Client cho Arduino  arduinoWebSockets  - WebSocket Server v\u00e0 Client t\u01b0\u01a1ng th\u00edch v\u1edbi ESP8266 (RFC6455)  aREST  - th\u01b0 vi\u1ec7n REST API handler  Blynk  - IoT framework cho c\u00e1c Maker ( ki\u1ec3m tr\u1ea3 \u1edf trang  Kickstarter page  DallasTemperature  DHT-sensor-library   - th\u01b0 vi\u1ec7n Arduino cho c\u1ea3m bi\u1ebfn nhi\u1ec7t \u0111\u1ed9, \u0111\u1ed9 \u1ea9m DHT11/DHT22. T\u1ea3i phi\u00ean b\u1ea3n th\u01b0 vi\u1ec7n m\u1edbi nh\u1ea5t v1.1.1 v\u00e0 kh\u00f4ng thay \u0111\u1ed5i n\u1ebfu kh\u00f4ng c\u1ea7n thi\u1ebft. M\u1ed9t phi\u00ean b\u1ea3n c\u0169 h\u01a1n c\u0169ng c\u00f3 th\u1ec3 cho ph\u00e9p DHT nhu  DHT dht(DHTPIN, DHTTYPE, 15)  DimSwitch  - \u0111i\u1ec1u khi\u1ec3n ch\u1ea5n l\u01b0u \u0111i\u1ec7n t\u1eeb cho \u1ed1ng \u0111\u00e8n hu\u1ef3nh quang t\u1eeb xa nh\u01b0 l\u00e0 s\u1eed d\u1ee5ng c\u00f4ng t\u1eaft tr\u00ean t\u01b0\u1eddng.  Encoder  - th\u01b0 vi\u1ec7n Arduino cho rotary encoders. Phi\u00ean b\u1ea3n 1.4 h\u1ed5 tr\u1ee3 ESP8266.  esp8266_mdns  - truy v\u1ea5n v\u00e0 tr\u1ea3 l\u1eddi mDNS tr\u00ean ESP8266. Ho\u1eb7c \u0111\u1ec3 m\u00f4 t\u1ea3 n\u00f3 theo c\u00e1c kh\u00e1c : m\u1ed9t Client mDNS ho\u1eb7c th\u01b0 vi\u1ec7n Bonjour Client cho ESP8266.  ESPAsyncTCP  - th\u01b0 vi\u1ec7n TCP kh\u00f4ng \u0111\u1ed3ng b\u1ed9 cho ESP8266 v\u00e0 ESP32/31B  ESPAsyncWebServer  - th\u01b0 vi\u1ec7n kh\u00f4ng \u0111\u1ed3ng b\u1ed9 Web Server cho ESP82666 v\u00e0 ESP32/31B  Homie for ESP8266  - khung Arduino cho ESP8266 th\u1ef1c hi\u1ec7n Homie, m\u1ed9t hi\u1ec7p \u01b0\u1edbc MQTT cho IoT.  NeoPixel  - th\u01b0 vi\u1ec7n NeoPixel c\u1ee7a Adafruit, hi\u1ec7n nay h\u1ed5 tr\u1ee3 cho c\u00e1c ESP8266 ( phi\u00ean b\u1ea3n 1.0.2 ho\u1eb7c cao h\u01a1n t\u1eeb th\u01b0 vi\u1ec7n qu\u1ea3n l\u00fd c\u1ee7a Arduino)  NeoPixelBus  - th\u01b0 vi\u1ec7n Arduino NeoPixel t\u01b0\u01a1ng th\u00edch v\u1edbi ESP8266. D\u00f9ng nh\u00e1nh \u201cDmaDriven\u201d ho\u1eb7c \u201cUartDriven\u201d cho ESP8266. Bao g\u1ed3m h\u1ed5 tr\u1ee3 m\u00e0u HSL v\u00e0 nhi\u1ec1u h\u01a1n n\u1eeda.  PubSubClient   - th\u01b0 vi\u1ec7n MQTT c\u1ee7a @Imroy  RTC  - th\u01b0 vi\u1ec7n Arduino cho DS1307 v\u00e0 DS3231 t\u01b0\u01a1ng th\u00edch v\u1edbi ESP8266.  Souliss, Smart Home   - khung cho Smart Home d\u1ef1a tr\u00ean Arduino, Arduino v\u00e0 OpenHAB.  ST7735  - s\u1eeda \u0111\u1ed5i th\u01b0 vi\u1ec7n ST7735 c\u1ee7a Adafruit \u0111\u1ec3 t\u01b0\u01a1ng th\u00edch v\u1edbi ESP8266. Ch\u1ec9 c\u1ea7n ch\u1eafc ch\u1eafn l\u00e0 s\u1eeda \u0111\u1ed5i c\u00e1c ch\u00e2n trong v\u00ed d\u1ee5 m\u1eabu nh\u01b0 c\u00e1ch h\u1ecd l\u00e0m trong AVR.  Task  - th\u01b0 vi\u1ec7n \u0111a nhi\u1ec7m Arduino Nonpreemptive. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 c\u00e1c th\u01b0 vi\u1ec7n m\u00e3 ngu\u1ed3n bao g\u1ed3m ch\u1ee9c n\u0103ng cung c\u1ea5p, t\u1ee9c th\u01b0 vi\u1ec7n n\u00e0y c\u00f3 kh\u1ea3 n\u0103ng t\u01b0\u01a1ng th\u00edch ch\u00e9o.  TickerScheduler  - th\u01b0 vi\u1ec7n c\u0169ng c\u1ea5p l\u1ecbch tr\u00ecnh \u0111\u01a1n gi\u1ea3n cho Ticker \u0111\u1ec3 tr\u00e1nh reset WDT.  Teleinfo  - th\u01b0 vi\u1ec7n Generic French Power M\u1ec3t \u0111\u1ec3 \u0111\u1ecdc Teleinfo d\u1eef li\u1ec7u gi\u00e1m s\u00e1t n\u0103ng l\u01b0\u1ee3ng nh\u01b0 s\u1ef1 ti\u00eau th\u1ee5, k\u1ebft n\u1ed1i, c\u00f4ng su\u1ea5t, th\u1eddi gian, \u2026 Th\u01b0 vi\u1ec7n n\u00e0y l\u00e0 cross platform gi\u1eefa ESP8266, Arduino, Particle, v\u00e0 C++ c\u0103n b\u1ea3n. French \u0111\u00e3 c\u00f4ng c\u1ed1  \u0111\u1ec1 t\u1eb7ng  tr\u00ean blog c\u1ee7a t\u00e1c gi\u1ea3 v\u00e0 t\u1ea5t c\u1ea3 th\u00f4ng tin li\u00ean quan v\u1ec1  Teleinfo  c\u0169ng c\u00f3 \u00edch.  UTFT-ESP8266  - th\u01b0 vi\u1ec7n hi\u1ec3n th\u1ecb UTFT v\u1edbi s\u1ef1 h\u1ed5 tr\u1ee3 cho ESP8266. Ch\u1ec9 c\u00f3 hi\u1ec7n th\u1ecb qua SPI \u0111\u01b0\u1ee3c h\u1ed5 tr\u1ee3 t\u1edbi th\u1eddi \u0111i\u1ec3m hi\u1ec7n t\u1ea1i ( kh\u00f4ng c\u00f3 ch\u1ebf \u0111\u1ed9 8-bit song song,\u2026). C\u0169ng bao g\u1ed3m c\u00e1c h\u1ed5 tr\u1ee3 cho SPI vi \u0111i\u1ec1u khi\u1ec3n v\u1ec1 ph\u1ea7n c\u1ee9ng c\u1ee7a ESP8266.  WiFiManager  - qu\u1ea3n l\u00fd k\u1ebft n\u1ed1i wifi v\u1edbi web captive portal. N\u1ebfu kh\u00f4ng th\u1ec3 k\u1ebft n\u1ed1i, n\u00f3 b\u1eaft \u0111\u1ea7u kh\u1edfi \u0111\u1ed9ng ch\u00ea \u0111\u1ed9 AP v\u00e0 m\u1ed9t c\u1ed5ng th\u00f4ng tin c\u1ea5u h\u00ecnh \u0111\u1ec3 b\u1ea1n c\u00f3 th\u1ec3 l\u1ef1a ch\u1ecdn v\u00e0 nh\u1eadp th\u00f4ng tin Wifi.  OneWire  - th\u01b0 vi\u1ec7n cho chip Dallas/Maxim 1-Wire.  Adafruit-PCD8544-Nokia-5110-LCD-Library - lu\u1ed3ng c\u1ee7a Adafruit PCD8544 - th\u01b0 vi\u1ec7n cho ESP8266.  PCF8574_ESP  - m\u1ed9t th\u01b0 vi\u1ec7n r\u1ea5t \u0111\u01a1n gi\u1ea3n \u0111\u1ec3 s\u1eed d\u1ee5ng PCF8574/PCF8574A I2C 8-pin GPIO-expander.  Dot Matrix Display Library 2  - Freetronics DMD & Generic 16 x 32 P10 th\u01b0 vi\u1ec7n hi\u1ec3n th\u1ecb Dot Matrix.  SdFat-beta  - th\u01b0 vi\u1ec7n SD-card v\u1edbi s\u1ef1 h\u1ed5 tr\u1ee3 t\u00ean t\u1eadp tin d\u00e0i, ph\u1ea7n m\u1ec1m v\u00e0 ph\u1ea7n c\u1ee9ng d\u1ef1a tr\u00ean SPI v\u00e0 nhi\u1ec1u th\u1ee9 kh\u00e1c.  FastLED  - m\u1ed9t th\u01b0 vi\u1ec7n cho ph\u00e9p \u0111i\u1ec1u khi\u1ec3n d\u1ec5 d\u00e0ng v\u00e0 hi\u1ec7u qu\u1ea3 m\u1ed9t lo\u1ea1t c\u00e1c LED chipset, gi\u1ed1ng nh\u01b0 Neopixel (WS2812B), DotStar, LPD8806 v\u00e0 nhi\u1ec1u th\u1ee9 kh\u00e1c. Bao g\u1ed3m fading, gradient, ch\u1ee9c n\u0103ng chuy\u1ec3n \u0111\u1ed5i m\u00e0u.  OLED  - m\u1ed9t th\u01b0 vi\u1ec7n \u0111\u1ec3 ki\u1ec3m so\u00e1t m\u00e0n h\u00ecnh OLED qua k\u1ebft n\u1ed1i I2C. \u0110\u00e3 th\u1eed nghi\u1ec7m v\u1edbi m\u00e0n h\u00ecnh hi\u1ec7n th\u1ecb \u0111\u1ed3 h\u1ecda OLED 0.96 inch.  MFRC522  - m\u1ed9t th\u01b0 vi\u1ec7n \u0111\u1ec3 s\u1eed d\u1ee5ng Mifare RC522 RFID - th\u1ebb \u0111\u1ecdc/ghi.  Ping  - cho ph\u00e9p c\u00e1c ESP8266 ping m\u1ed9t m\u00e1y t\u00ednh t\u1eeb xa.",
            "title": "C\u00e1c th\u01b0 vi\u1ec7n kh\u00e1c (Kh\u00f4ng bao g\u1ed3m IDE)"
        },
        {
            "location": "/arduino/filesystem/flash-layout/",
            "text": "Flash layout\n\n\nUploading files to file system\n\n\nFile system object (SPIFFS)\n\n\nbegin\n\n\nend\n\n\nformat\n\n\nopen\n\n\nexists\n\n\nopenDir\n\n\nremove\n\n\nrename\n\n\ninfo\n\n\n\n\n\n\nFilesystem information structure\n\n\nDirectory object (Dir)\n\n\nFile object\n\n\nseek\n\n\nposition\n\n\nsize\n\n\nname\n\n\nclose\n\n\n\n\n\n\n\n\n\n\nFlash layout\n#\n\n\nEven though file system is stored on the same flash chip as the program, programming new sketch will not modify file system contents. This allows to use file system to store sketch data, configuration files, or content for Web server.\n\n\nThe following diagram illustrates flash layout used in Arduino environment:\n\n\n|--------------|-------|---------------|--|--|--|--|--|\n^              ^       ^               ^     ^\nSketch    OTA update   File system   EEPROM  WiFi config (SDK)\n\n\n\nFile system size depends on the flash chip size. Depending on the board which is selected in IDE, you have the following options for flash size:\n\n\n\n\n\n\n\n\nBoard\n\n\nFlash chip size, bytes\n\n\nFile system size, bytes\n\n\n\n\n\n\n\n\n\n\nGeneric module\n\n\n512k\n\n\n64k, 128k\n\n\n\n\n\n\nGeneric module\n\n\n1M\n\n\n64k, 128k, 256k, 512k\n\n\n\n\n\n\nGeneric module\n\n\n2M\n\n\n1M\n\n\n\n\n\n\nGeneric module\n\n\n4M\n\n\n3M\n\n\n\n\n\n\nAdafruit HUZZAH\n\n\n4M\n\n\n1M, 3M\n\n\n\n\n\n\nESPresso Lite 1.0\n\n\n4M\n\n\n1M, 3M\n\n\n\n\n\n\nESPresso Lite 2.0\n\n\n4M\n\n\n1M, 3M\n\n\n\n\n\n\nNodeMCU 0.9\n\n\n4M\n\n\n1M, 3M\n\n\n\n\n\n\nNodeMCU 1.0\n\n\n4M\n\n\n1M, 3M\n\n\n\n\n\n\nOlimex MOD-WIFI-ESP8266(-DEV)\n\n\n2M\n\n\n1M\n\n\n\n\n\n\nSparkFun Thing\n\n\n512k\n\n\n64k\n\n\n\n\n\n\nSweetPea ESP-210\n\n\n4M\n\n\n1M, 3M\n\n\n\n\n\n\nWeMos D1 & D1 mini\n\n\n4M\n\n\n1M, 3M\n\n\n\n\n\n\nESPDuino\n\n\n4M\n\n\n1M, 3M\n\n\n\n\n\n\n\n\nNote:\n to use any of file system functions in the sketch, add the following include to the sketch:\n\n\n#include \"FS.h\"\n\n\n\n\nUploading files to file system\n#\n\n\nESP8266FS\n is a tool which integrates into the Arduino IDE. It adds a menu item to \nTools\n menu for uploading the contents of sketch data directory into ESP8266 flash file system.\n\n\n\n\nDownload the tool: https://github.com/esp8266/arduino-esp8266fs-plugin/releases/download/0.2.0/ESP8266FS-0.2.0.zip.\n\n\nIn your Arduino sketchbook directory, create \ntools\n directory if it doesn\u2019t exist yet\n\n\nUnpack the tool into \ntools\n directory (the path will look like \n<home_dir>/Arduino/tools/ESP8266FS/tool/esp8266fs.jar\n)\n\n\nRestart Arduino IDE\n\n\nOpen a sketch (or create a new one and save it)\n\n\nGo to sketch directory (choose Sketch > Show Sketch Folder)\n\n\nCreate a directory named \ndata\n and any files you want in the file system there\n\n\nMake sure you have selected a board, port, and closed Serial Monitor\n\n\nSelect Tools > ESP8266 Sketch Data Upload. This should start uploading the files into ESP8266 flash file system. When done, IDE status bar will display \nSPIFFS Image Uploaded\n message.\n\n\n\n\nFile system object (SPIFFS)\n#\n\n\nbegin\n#\n\n\nSPIFFS.begin()\n\n\n\n\nThis method mounts SPIFFS file system. It must be called before any other\nFS APIs are used. Returns \ntrue\n if file system was mounted successfully, false\notherwise.\n\n\nend\n#\n\n\nSPIFFS.end()\n\n\n\n\nThis method unmounts SPIFFS file system. Use this method before updating SPIFFS using OTA.\n\n\nformat\n#\n\n\nSPIFFS.format()\n\n\n\n\nFormats the file system. May be called either before or after calling \nbegin\n.\nReturns \ntrue\n if formatting was successful.\n\n\nopen\n#\n\n\nSPIFFS.open(path, mode)\n\n\n\n\nOpens a file. \npath\n should be an absolute path starting with a slash\n(e.g. \n/dir/filename.txt\n). \nmode\n is a string specifying access mode. It can be\none of \u201cr\u201d, \u201cw\u201d, \u201ca\u201d, \u201cr+\u201d, \u201cw+\u201d, \u201ca+\u201d. Meaning of these modes is the same as\nfor \nfopen\n C function.\n\n\n   r      Open text file for reading.  The stream is positioned at the\n          beginning of the file.\n\n   r+     Open for reading and writing.  The stream is positioned at the\n          beginning of the file.\n\n   w      Truncate file to zero length or create text file for writing.\n          The stream is positioned at the beginning of the file.\n\n   w+     Open for reading and writing.  The file is created if it does\n          not exist, otherwise it is truncated.  The stream is\n          positioned at the beginning of the file.\n\n   a      Open for appending (writing at end of file).  The file is\n          created if it does not exist.  The stream is positioned at the\n          end of the file.\n\n   a+     Open for reading and appending (writing at end of file).  The\n          file is created if it does not exist.  The initial file\n          position for reading is at the beginning of the file, but\n          output is always appended to the end of the file.\n\n\n\nReturns \nFile\n object. To check whether the file was opened successfully, use\nthe boolean operator.\n\n\nFile f = SPIFFS.open(\"/f.txt\", \"w\");\nif (!f) {\n    Serial.println(\"file open failed\");\n}\n\n\n\n\nexists\n#\n\n\nSPIFFS.exists(path)\n\n\n\n\nReturns \ntrue\n if a file with given path exists, \nfalse\n otherwise.\n\n\nopenDir\n#\n\n\nSPIFFS.openDir(path)\n\n\n\n\nOpens a directory given its absolute path. Returns a \nDir\n object.\n\n\nremove\n#\n\n\nSPIFFS.remove(path)\n\n\n\n\nDeletes the file given its absolute path. Returns \ntrue\n if file was deleted successfully.\n\n\nrename\n#\n\n\nSPIFFS.rename(pathFrom, pathTo)\n\n\n\n\nRenames file from \npathFrom\n to \npathTo\n. Paths must be absolute. Returns \ntrue\n\nif file was renamed successfully.\n\n\ninfo\n#\n\n\nFSInfo fs_info;\nSPIFFS.info(fs_info);\n\n\n\n\nFills \nFSInfo structure\n with information about\nthe file system. Returns \ntrue\n is successful, \nfalse\n otherwise.\n\n\nFilesystem information structure\n#\n\n\nstruct FSInfo {\n    size_t totalBytes;\n    size_t usedBytes;\n    size_t blockSize;\n    size_t pageSize;\n    size_t maxOpenFiles;\n    size_t maxPathLength;\n};\n\n\n\n\nThis is the structure which may be filled using FS::info method.\n- \ntotalBytes\n \u2014 total size of useful data on the file system\n- \nusedBytes\n \u2014 number of bytes used by files\n- \nblockSize\n \u2014 SPIFFS block size\n- \npageSize\n \u2014 SPIFFS logical page size\n- \nmaxOpenFiles\n \u2014 max number of files which may be open simultaneously\n- \nmaxPathLength\n \u2014 max file name length (including one byte for zero termination)\n\n\nDirectory object (Dir)\n#\n\n\nThe purpose of \nDir\n object is to iterate over files inside a directory.\nIt provides three methods: \nnext()\n, \nfileName()\n, and \nopenFile(mode)\n.\n\n\nThe following example shows how it should be used:\n\n\nDir dir = SPIFFS.openDir(\"/data\");\nwhile (dir.next()) {\n    Serial.print(dir.fileName());\n    File f = dir.openFile(\"r\");\n    Serial.println(f.size());\n}\n\n\n\n\ndir.next()\n returns true while there are files in the directory to iterate over.\nIt must be called before calling \nfileName\n and \nopenFile\n functions.\n\n\nopenFile\n method takes \nmode\n argument which has the same meaning as for \nSPIFFS.open\n function.\n\n\nFile object\n#\n\n\nSPIFFS.open\n and \ndir.openFile\n functions return a \nFile\n object. This object\nsupports all the functions of \nStream\n, so you can use \nreadBytes\n, \nfindUntil\n,\n\nparseInt\n, \nprintln\n, and all other \nStream\n methods.\n\n\nThere are also some functions which are specific to \nFile\n object.\n\n\nseek\n#\n\n\nfile.seek(offset, mode)\n\n\n\n\nThis function behaves like \nfseek\n C function. Depending on the value of \nmode\n,\nit moves current position in a file as follows:\n\n\n\n\nif \nmode\n is \nSeekSet\n, position is set to \noffset\n bytes from the beginning.\n\n\nif \nmode\n is \nSeekCur\n, current position is moved by \noffset\n bytes.\n\n\nif \nmode\n is \nSeekEnd\n, position is set to \noffset\n bytes from the end of the\nfile.\n\n\n\n\nReturns \ntrue\n if position was set successfully.\n\n\nposition\n#\n\n\nfile.position()\n\n\n\n\nReturns the current position inside the file, in bytes.\n\n\nsize\n#\n\n\nfile.size()\n\n\n\n\nReturns file size, in bytes.\n\n\nname\n#\n\n\nString name = file.name();\n\n\n\n\nReturns file name, as \nconst char*\n. Convert it to \nString\n for storage.\n\n\nclose\n#\n\n\nfile.close()\n\n\n\n\nClose the file. No other operations should be performed on \nFile\n object after \nclose\n function was called.",
            "title": "Flash Layout"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#flash-layout",
            "text": "Even though file system is stored on the same flash chip as the program, programming new sketch will not modify file system contents. This allows to use file system to store sketch data, configuration files, or content for Web server.  The following diagram illustrates flash layout used in Arduino environment:  |--------------|-------|---------------|--|--|--|--|--|\n^              ^       ^               ^     ^\nSketch    OTA update   File system   EEPROM  WiFi config (SDK)  File system size depends on the flash chip size. Depending on the board which is selected in IDE, you have the following options for flash size:     Board  Flash chip size, bytes  File system size, bytes      Generic module  512k  64k, 128k    Generic module  1M  64k, 128k, 256k, 512k    Generic module  2M  1M    Generic module  4M  3M    Adafruit HUZZAH  4M  1M, 3M    ESPresso Lite 1.0  4M  1M, 3M    ESPresso Lite 2.0  4M  1M, 3M    NodeMCU 0.9  4M  1M, 3M    NodeMCU 1.0  4M  1M, 3M    Olimex MOD-WIFI-ESP8266(-DEV)  2M  1M    SparkFun Thing  512k  64k    SweetPea ESP-210  4M  1M, 3M    WeMos D1 & D1 mini  4M  1M, 3M    ESPDuino  4M  1M, 3M     Note:  to use any of file system functions in the sketch, add the following include to the sketch:  #include \"FS.h\"",
            "title": "Flash layout"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#uploading-files-to-file-system",
            "text": "ESP8266FS  is a tool which integrates into the Arduino IDE. It adds a menu item to  Tools  menu for uploading the contents of sketch data directory into ESP8266 flash file system.   Download the tool: https://github.com/esp8266/arduino-esp8266fs-plugin/releases/download/0.2.0/ESP8266FS-0.2.0.zip.  In your Arduino sketchbook directory, create  tools  directory if it doesn\u2019t exist yet  Unpack the tool into  tools  directory (the path will look like  <home_dir>/Arduino/tools/ESP8266FS/tool/esp8266fs.jar )  Restart Arduino IDE  Open a sketch (or create a new one and save it)  Go to sketch directory (choose Sketch > Show Sketch Folder)  Create a directory named  data  and any files you want in the file system there  Make sure you have selected a board, port, and closed Serial Monitor  Select Tools > ESP8266 Sketch Data Upload. This should start uploading the files into ESP8266 flash file system. When done, IDE status bar will display  SPIFFS Image Uploaded  message.",
            "title": "Uploading files to file system"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#file-system-object-spiffs",
            "text": "",
            "title": "File system object (SPIFFS)"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#begin",
            "text": "SPIFFS.begin()  This method mounts SPIFFS file system. It must be called before any other\nFS APIs are used. Returns  true  if file system was mounted successfully, false\notherwise.",
            "title": "begin"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#end",
            "text": "SPIFFS.end()  This method unmounts SPIFFS file system. Use this method before updating SPIFFS using OTA.",
            "title": "end"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#format",
            "text": "SPIFFS.format()  Formats the file system. May be called either before or after calling  begin .\nReturns  true  if formatting was successful.",
            "title": "format"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#open",
            "text": "SPIFFS.open(path, mode)  Opens a file.  path  should be an absolute path starting with a slash\n(e.g.  /dir/filename.txt ).  mode  is a string specifying access mode. It can be\none of \u201cr\u201d, \u201cw\u201d, \u201ca\u201d, \u201cr+\u201d, \u201cw+\u201d, \u201ca+\u201d. Meaning of these modes is the same as\nfor  fopen  C function.     r      Open text file for reading.  The stream is positioned at the\n          beginning of the file.\n\n   r+     Open for reading and writing.  The stream is positioned at the\n          beginning of the file.\n\n   w      Truncate file to zero length or create text file for writing.\n          The stream is positioned at the beginning of the file.\n\n   w+     Open for reading and writing.  The file is created if it does\n          not exist, otherwise it is truncated.  The stream is\n          positioned at the beginning of the file.\n\n   a      Open for appending (writing at end of file).  The file is\n          created if it does not exist.  The stream is positioned at the\n          end of the file.\n\n   a+     Open for reading and appending (writing at end of file).  The\n          file is created if it does not exist.  The initial file\n          position for reading is at the beginning of the file, but\n          output is always appended to the end of the file.  Returns  File  object. To check whether the file was opened successfully, use\nthe boolean operator.  File f = SPIFFS.open(\"/f.txt\", \"w\");\nif (!f) {\n    Serial.println(\"file open failed\");\n}",
            "title": "open"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#exists",
            "text": "SPIFFS.exists(path)  Returns  true  if a file with given path exists,  false  otherwise.",
            "title": "exists"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#opendir",
            "text": "SPIFFS.openDir(path)  Opens a directory given its absolute path. Returns a  Dir  object.",
            "title": "openDir"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#remove",
            "text": "SPIFFS.remove(path)  Deletes the file given its absolute path. Returns  true  if file was deleted successfully.",
            "title": "remove"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#rename",
            "text": "SPIFFS.rename(pathFrom, pathTo)  Renames file from  pathFrom  to  pathTo . Paths must be absolute. Returns  true \nif file was renamed successfully.",
            "title": "rename"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#info",
            "text": "FSInfo fs_info;\nSPIFFS.info(fs_info);  Fills  FSInfo structure  with information about\nthe file system. Returns  true  is successful,  false  otherwise.",
            "title": "info"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#filesystem-information-structure",
            "text": "struct FSInfo {\n    size_t totalBytes;\n    size_t usedBytes;\n    size_t blockSize;\n    size_t pageSize;\n    size_t maxOpenFiles;\n    size_t maxPathLength;\n};  This is the structure which may be filled using FS::info method.\n-  totalBytes  \u2014 total size of useful data on the file system\n-  usedBytes  \u2014 number of bytes used by files\n-  blockSize  \u2014 SPIFFS block size\n-  pageSize  \u2014 SPIFFS logical page size\n-  maxOpenFiles  \u2014 max number of files which may be open simultaneously\n-  maxPathLength  \u2014 max file name length (including one byte for zero termination)",
            "title": "Filesystem information structure"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#directory-object-dir",
            "text": "The purpose of  Dir  object is to iterate over files inside a directory.\nIt provides three methods:  next() ,  fileName() , and  openFile(mode) .  The following example shows how it should be used:  Dir dir = SPIFFS.openDir(\"/data\");\nwhile (dir.next()) {\n    Serial.print(dir.fileName());\n    File f = dir.openFile(\"r\");\n    Serial.println(f.size());\n}  dir.next()  returns true while there are files in the directory to iterate over.\nIt must be called before calling  fileName  and  openFile  functions.  openFile  method takes  mode  argument which has the same meaning as for  SPIFFS.open  function.",
            "title": "Directory object (Dir)"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#file-object",
            "text": "SPIFFS.open  and  dir.openFile  functions return a  File  object. This object\nsupports all the functions of  Stream , so you can use  readBytes ,  findUntil , parseInt ,  println , and all other  Stream  methods.  There are also some functions which are specific to  File  object.",
            "title": "File object"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#seek",
            "text": "file.seek(offset, mode)  This function behaves like  fseek  C function. Depending on the value of  mode ,\nit moves current position in a file as follows:   if  mode  is  SeekSet , position is set to  offset  bytes from the beginning.  if  mode  is  SeekCur , current position is moved by  offset  bytes.  if  mode  is  SeekEnd , position is set to  offset  bytes from the end of the\nfile.   Returns  true  if position was set successfully.",
            "title": "seek"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#position",
            "text": "file.position()  Returns the current position inside the file, in bytes.",
            "title": "position"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#size",
            "text": "file.size()  Returns file size, in bytes.",
            "title": "size"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#name",
            "text": "String name = file.name();  Returns file name, as  const char* . Convert it to  String  for storage.",
            "title": "name"
        },
        {
            "location": "/arduino/filesystem/flash-layout/#close",
            "text": "file.close()  Close the file. No other operations should be performed on  File  object after  close  function was called.",
            "title": "close"
        },
        {
            "location": "/arduino/ota/arduino-fota/",
            "text": "Gi\u1edbi thi\u1ec7u OTA\n\n\nB\u1ea3o m\u1eadt\n\n\nAn to\u00e0n\n\n\nY\u00eau c\u1ea7u c\u01a1 b\u1ea3n\n\n\nStream Interface\n\n\nUpdater class\n\n\nUpdate process - memory view\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGi\u1edbi thi\u1ec7u OTA\n#\n\n\nC\u1eadp nh\u1eadt firmware OTA (Over the Air) l\u00e0 ti\u1ebfn tr\u00ecnh t\u1ea3i firmware m\u1edbi v\u00e0o ESP module thay v\u00ec s\u1eed d\u1ee5ng c\u1ed5ng Serial. T\u00ednh n\u0103ng n\u00e0y th\u1ef1c s\u1ef1 r\u1ea5t h\u1eefu d\u1ee5ng trong nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p gi\u1edbi h\u1ea1n v\u1ec1 k\u1ebft n\u1ed1i v\u1eadt l\u00fd \u0111\u1ebfn ESP Module.\n\n\nOTA c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n v\u1edbi:\n\n\n\n\nArduino IDE\n\n\nWeb Browser\n\n\nHTTP Server\n\n\n\n\nS\u1eed d\u1ee5ng OTA v\u1edbi t\u00f9y ch\u1ecdn d\u00f9ng \nArduino IDE\n trong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n, th\u1eed nghi\u1ec7m, 2 t\u00f9y ch\u1ecdn c\u00f2n l\u1ea1i ph\u00f9 h\u1ee3p cho vi\u1ec7c tri\u1ec3n khai \u1ee9ng d\u1ee5ng th\u1ef1c t\u1ebf, cung c\u1ea5p t\u00ednh n\u0103ng c\u1eadp nh\u1eadt OTA th\u00f4ng qua web hay s\u1eed d\u1ee5ng HTTP Server.\n\n\nTrong t\u1ea5t c\u1ea3 c\u00e1c tr\u01b0\u1eddng h\u1ee3p, th\u00ec Firmware h\u1ed7 tr\u1ee3 OTA ph\u1ea3i \u0111\u01b0\u1ee3c n\u1ea1p l\u1ea7n \u0111\u1ea7u ti\u00ean qua c\u1ed5ng Serial, n\u1ebfu m\u1ecdi th\u1ee9 ho\u1ea1t \u0111\u1ed9ng tr\u01a1n tru, logic \u1ee9ng d\u1ee5ng OTA ho\u1ea1t \u0111\u1ed9ng \u0111\u00fang th\u00ec c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c c\u1eadp nh\u1eadt firmware th\u00f4ng qua OTA.\n\n\nS\u1ebd kh\u00f4ng c\u00f3 \u0111\u1ea3m b\u1ea3o an ninh \u0111\u1ed1i v\u1edbi qu\u00e1 tr\u00ecnh c\u1eadp nh\u1eadt OTA b\u1ecb hack. N\u00f3 ph\u1ee5 thu\u1ed9c v\u00e0o nh\u00e0 ph\u00e1t tri\u1ec3n \u0111\u1ea3m b\u1ea3o vi\u1ec7c c\u1eadp nh\u1eadt \u0111\u01b0\u1ee3c ph\u00e9p t\u1eeb ngu\u1ed3n h\u1ee3p ph\u00e1p, \u0111\u00e1ng tin c\u1eady. Khi c\u1eadp nh\u1eadt ho\u00e0n t\u1ea5n, ESP8266 s\u1ebd kh\u1edfi \u0111\u1ed9ng l\u1ea1i v\u00e0 th\u1ef1c thi code m\u1edbi. Nh\u00e0 ph\u00e1t tri\u1ec3n ph\u1ea3i \u0111\u1ea3m b\u1ea3o \u1ee9ng d\u1ee5ng th\u1ef1c tr\u00ean module ph\u1ea3i \u0111\u01b0\u1ee3c t\u1eaft v\u00e0 kh\u1edfi \u0111\u1ed9n glaij 1 c\u00e1ch an to\u00e0n. N\u1ed9i dung b\u00ean d\u01b0\u1edbi cung c\u1ea5p b\u1ed5 sung c\u00e1c th\u00f4ng tin v\u1ec1 an ninh, v\u00e0 an to\u00e0n cho ti\u1ebfn tr\u00ecnh c\u1eadp nh\u1eadt OTA.\n\n\nB\u1ea3o m\u1eadt\n#\n\n\nKhi ESP8266  \u0111\u01b0\u1ee3c ph\u00e9p th\u1ef1c thi OTA, c\u00f3 ngh\u0129a n\u00f3 \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i m\u1ea1ng kh\u00f4ng d\u00e2y v\u00e0 c\u00f3 kh\u1ea3 n\u0103ng \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadp Sketch m\u1edbi. Cho n\u00ean kh\u1ea3 n\u0103ng ESP8266 b\u1ecb t\u1ea5n c\u00f4ng s\u1ebd nhi\u1ec1u h\u01a1n v\u00e0 b\u1ecb n\u1ea1p b\u1edfi m\u00e3 th\u1ef1c thi kh\u00e1c l\u00e0 r\u1ea5t cao. \u0110\u1ec3 gi\u1ea3m kh\u1ea3 n\u0103ng b\u1ecb t\u1ea5n c\u00f4ng c\u1ea7n xem x\u00e9t b\u1ea3o v\u1ec7 c\u1eadp nh\u1eadt c\u1ee7a b\u1ea1n v\u1edbi m\u1ed9t m\u1eadt kh\u1ea9u, c\u1ed5ng s\u1eed d\u1ee5ng c\u1ed1 \u0111\u1ecbnh kh\u00e1c bi\u1ec7t, v.v\u2026\n\n\nKi\u1ec3m tra nh\u1eefng t\u00ednh n\u0103ng \u0111\u01b0\u1ee3c cung c\u1ea5p b\u1edfi th\u01b0 vi\u1ec7n \nArduinoOTA\n th\u01b0\u1eddng xuy\u00ean, c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c n\u00e2ng c\u1ea5p kh\u1ea3 n\u0103ng b\u1ea3o v\u1ec7 an to\u00e0n:\n\n\nvoid setPort(uint16_t port);\nvoid setHostname(const char* hostname);\nvoid setPassword(const char* password);\n\n\n\n\nM\u1ed9t s\u1ed1 ch\u1ee9c n\u0103ng b\u1ea3o v\u1ec7 \u0111\u00e3 \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng trong v\u00e0 kh\u00f4ng y\u00eau c\u1ea7u b\u1ea5t k\u1ef3 m\u00e3 h\u00f3a n\u00e0o cho nh\u00e0 ph\u00e1t tri\u1ec3n. \nArduinoOTA\n v\u00e0 \nespota.py\n s\u1eed d\u1ee5ng \nDigest-MD5\n \u0111\u1ec3 ch\u1ee9ng th\u1ef1c vi\u1ec7c t\u1ea3i firmware l\u00ean. \u0110\u01a1n gi\u1ea3n l\u00e0 \u0111\u1ea3m b\u1ea3o t\u00ednh to\u00e0n v\u1eb9n c\u1ee7a firmware b\u1eb1ng vi\u1ec7c t\u00ednh \nMD5\n.\n\n\nH\u00e3y ph\u00e2n t\u00edch r\u1ee7i ro cho ri\u00eang \u1ee9ng d\u1ee5ng c\u1ee7a b\u1ea1n b\u1ea1n v\u00e0 t\u00f9y thu\u1ed9c v\u00e0o \u1ee9ng d\u1ee5ng m\u00e0 quy\u1ebft \u0111\u1ecbnh nh\u1eefng ch\u1ee9c n\u0103ng c\u0169ng nh\u01b0 th\u01b0 vi\u1ec7n \u0111\u1ec3 th\u1ef1c hi\u1ec7n. N\u1ebfu c\u1ea7n thi\u1ebft, c\u00f3 th\u1ebb xem x\u00e9t vi\u1ec7c th\u1ef1c hi\u1ec7n c\u00e1c ph\u01b0\u01a1ng th\u1ee9c b\u1ea3o v\u1ec7 kh\u1ecfi b\u1ecb hack, v\u00ed d\u1ee5 nh\u01b0 c\u1eadp nh\u1eadt OTA ch\u1ec9 cho t\u1ea3i l\u00ean ch\u1ec9 theo l\u1ecbch tr\u00ecnh c\u1ee5 th\u1ec3, k\u00edch ho\u1ea1t OTA ch\u1ec9 \u0111\u01b0\u1ee3c ng\u01b0\u1eddi d\u00f9ng nh\u1ea5n n\u00fat chuy\u00ean d\u1ee5ng \u201cC\u1eadp nh\u1eadt\u201d, v.v\u2026\n\n\nAn to\u00e0n\n#\n\n\nQu\u00e1 tr\u00ecnh OTA ti\u00eau t\u1ed1n ngu\u1ed3n t\u00e0i nguy\u00ean v\u00e0 b\u0103ng th\u00f4ng c\u1ee7a ESP8266 khi t\u1ea3i l\u00ean. Sau \u0111\u00f3, ESP8266 \u0111\u01b0\u1ee3c kh\u1edfi \u0111\u1ed9ng l\u1ea1i v\u00e0 m\u1ed9t Sketch m\u1edbi \u0111\u01b0\u1ee3c th\u1ef1c thi. C\u1ea7n ph\u1ea3i ph\u00e2n t\u00edch v\u00e0 ki\u1ec3m tra \u0111\u1ec3 Sketch m\u1edbi kh\u00f4ng \u1ea3nh h\u01b0\u1edfng t\u1edbi c\u00e1c ch\u1ee9c n\u0103ng hi\u1ec7n c\u00f3 c\u1ee7a Sketch hi\u1ec7n t\u1ea1i, c\u0169ng nh\u01b0 vi\u1ec7c c\u1eadp nh\u1eadt OTA l\u1ea7n sau v\u1eabn \u0111\u01b0\u1ee3c \u0111\u1ea3m b\u1ea3o.\n\n\nN\u1ebfu ESP8266 \u0111\u01b0\u1ee3c \u0111\u1eb7t t\u1eeb xa v\u00e0 ki\u1ec3m so\u00e1t m\u1ed9t s\u1ed1 thi\u1ebft b\u1ecb \u0111ang v\u1eadn h\u00e0nh, b\u1ea1n n\u00ean \u0111\u1eb7t c\u00e1c ch\u00fa \u00fd \u0111i k\u00e8m th\u00f4ng tin nh\u1eefng g\u00ec s\u1ebd x\u1ea3y ra n\u1ebfu ho\u1ea1t \u0111\u1ed9ng c\u1ee7a thi\u1ebft b\u1ecb n\u00e0y \u0111\u1ed9t nhi\u00ean b\u1ecb gi\u00e1n \u0111o\u1ea1n b\u1edfi qu\u00e1 tr\u00ecnh c\u1eadp nh\u1eadt. V\u1ea7n ph\u1ea3i \u0111\u01b0a thi\u1ebft b\u1ecb v\u00e0o tr\u1ea1ng th\u00e1i an to\u00e0n tr\u01b0\u1edbc khi b\u1eaft \u0111\u1ea7u c\u1eadp nh\u1eadt. \nV\u00ed d\u1ee5 ESP8266 c\u1ee7a b\u1ea1n c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ki\u1ec3m so\u00e1t m\u1ed9t h\u1ec7 th\u1ed1ng t\u01b0\u1edbi v\u01b0\u1eddn. N\u1ebfu n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u00f3ng \u0111\u00fang c\u00e1ch v\u00e0 m\u1ed9t van n\u01b0\u1edbc b\u1ecf ng\u1ecf, khu v\u01b0\u1eddn c\u1ee7a b\u1ea1n c\u00f3 th\u1ec3 b\u1ecb ng\u1eadp v\u00e0 van n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u00f3ng l\u1ea1i sau khi OTA xong v\u00e0 kh\u1edfi \u0111\u1ed9ng l\u1ea1i m\u00f4-\u0111un.\n\n\nM\u1ed9t s\u1ed1 h\u00e0m sau \u0111\u01b0\u1ee3c cung c\u1ea5p k\u00e8m v\u1edbi th\u01b0u vi\u1ec7n \nArduinoOTA\n v\u00e0 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 x\u1eed l\u00fd c\u00e1c ch\u1ee9c n\u0103ng c\u1ee7a \u1ee9ng d\u1ee5ng trong t\u1eebng giai \u0111o\u1ea1n c\u1ee5 th\u1ec3 c\u1ee7a OTA ho\u1eb7c x\u1eed l\u00fd l\u1ed7i OTA:\n\n\nvoid onStart(OTA_CALLBACK(fn));\nvoid onEnd(OTA_CALLBACK(fn));\nvoid onProgress(OTA_CALLBACK_PROGRESS(fn));\nvoid onError(OTA_CALLBACK_ERROR (fn));\n\n\n\n\nY\u00eau c\u1ea7u c\u01a1 b\u1ea3n\n#\n\n\nK\u00edch th\u01b0\u1edbc Flash c\u1ea7n \u0111\u1ee7 \u0111\u1ec3 c\u00f3 th\u1ec3 gi\u1eef Sketch c\u0169 (hi\u1ec7n \u0111ang ch\u1ea1y) v\u00e0 Sketch m\u1edbi (OTA) c\u00f9ng m\u1ed9t l\u00fac. Xem \nflash layout\n.\n\n\nESP.getFreeSketchSpace();\n\n\n\n\nc\u00f3 th\u1ec3 s\u1eed d\u1ee5ng cho vi\u1ec7c ki\u1ec3m tra v\u00f9ng nh\u1edb c\u00f2n tr\u1ed1ng cho Sketch m\u1edbi.\n\n\n\u0110\u1ec3 c\u00f3 c\u00e1i nh\u00ecn t\u1ed5ng quan v\u1ec1 layout b\u1ed9 nh\u1edb, n\u01a1i Sketch m\u1edbi \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef v\u00e0 l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 ESP8266 copy trong qu\u00e1 tr\u00ecnh OTA, xem \u1edf \nTi\u1ebfn tr\u00ecnh c\u1eadp nh\u1eadt - b\u1ed9 nh\u1edb\n.\n\n\nPh\u1ea7n ti\u1ebfp theo s\u1ebd cung c\u1ea5p th\u00f4ng tinh chi ti\u1ebft cho t\u1eebng ph\u01b0\u01a1ng th\u1ee9c OTA.\n\n\nStream Interface\n#\n\n\nTODO describe Stream Interface\n\n\nThe Stream Interface is the base for all other update modes like OTA, http Server / client.\n\n\nUpdater class\n#\n\n\nUpdater is in the Core and deals with writing the firmware to the flash, \nchecking its integrity and telling the bootloader to load the new firmware on the next boot.\n\n\nUpdate process - memory view\n#\n\n\n\n\nThe new sketch will be stored in the space between the old sketch and the spiff.\n\n\non the next reboot the \u201ceboot\u201d bootloader check for commands.\n\n\nthe new sketch is now copied \u201cover\u201d the old one.\n\n\nthe new sketch is started.",
            "title": "Gi\u1edbi thi\u1ec7u OTA"
        },
        {
            "location": "/arduino/ota/arduino-fota/#gioi-thieu-ota",
            "text": "C\u1eadp nh\u1eadt firmware OTA (Over the Air) l\u00e0 ti\u1ebfn tr\u00ecnh t\u1ea3i firmware m\u1edbi v\u00e0o ESP module thay v\u00ec s\u1eed d\u1ee5ng c\u1ed5ng Serial. T\u00ednh n\u0103ng n\u00e0y th\u1ef1c s\u1ef1 r\u1ea5t h\u1eefu d\u1ee5ng trong nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p gi\u1edbi h\u1ea1n v\u1ec1 k\u1ebft n\u1ed1i v\u1eadt l\u00fd \u0111\u1ebfn ESP Module.  OTA c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n v\u1edbi:   Arduino IDE  Web Browser  HTTP Server   S\u1eed d\u1ee5ng OTA v\u1edbi t\u00f9y ch\u1ecdn d\u00f9ng  Arduino IDE  trong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n, th\u1eed nghi\u1ec7m, 2 t\u00f9y ch\u1ecdn c\u00f2n l\u1ea1i ph\u00f9 h\u1ee3p cho vi\u1ec7c tri\u1ec3n khai \u1ee9ng d\u1ee5ng th\u1ef1c t\u1ebf, cung c\u1ea5p t\u00ednh n\u0103ng c\u1eadp nh\u1eadt OTA th\u00f4ng qua web hay s\u1eed d\u1ee5ng HTTP Server.  Trong t\u1ea5t c\u1ea3 c\u00e1c tr\u01b0\u1eddng h\u1ee3p, th\u00ec Firmware h\u1ed7 tr\u1ee3 OTA ph\u1ea3i \u0111\u01b0\u1ee3c n\u1ea1p l\u1ea7n \u0111\u1ea7u ti\u00ean qua c\u1ed5ng Serial, n\u1ebfu m\u1ecdi th\u1ee9 ho\u1ea1t \u0111\u1ed9ng tr\u01a1n tru, logic \u1ee9ng d\u1ee5ng OTA ho\u1ea1t \u0111\u1ed9ng \u0111\u00fang th\u00ec c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c c\u1eadp nh\u1eadt firmware th\u00f4ng qua OTA.  S\u1ebd kh\u00f4ng c\u00f3 \u0111\u1ea3m b\u1ea3o an ninh \u0111\u1ed1i v\u1edbi qu\u00e1 tr\u00ecnh c\u1eadp nh\u1eadt OTA b\u1ecb hack. N\u00f3 ph\u1ee5 thu\u1ed9c v\u00e0o nh\u00e0 ph\u00e1t tri\u1ec3n \u0111\u1ea3m b\u1ea3o vi\u1ec7c c\u1eadp nh\u1eadt \u0111\u01b0\u1ee3c ph\u00e9p t\u1eeb ngu\u1ed3n h\u1ee3p ph\u00e1p, \u0111\u00e1ng tin c\u1eady. Khi c\u1eadp nh\u1eadt ho\u00e0n t\u1ea5n, ESP8266 s\u1ebd kh\u1edfi \u0111\u1ed9ng l\u1ea1i v\u00e0 th\u1ef1c thi code m\u1edbi. Nh\u00e0 ph\u00e1t tri\u1ec3n ph\u1ea3i \u0111\u1ea3m b\u1ea3o \u1ee9ng d\u1ee5ng th\u1ef1c tr\u00ean module ph\u1ea3i \u0111\u01b0\u1ee3c t\u1eaft v\u00e0 kh\u1edfi \u0111\u1ed9n glaij 1 c\u00e1ch an to\u00e0n. N\u1ed9i dung b\u00ean d\u01b0\u1edbi cung c\u1ea5p b\u1ed5 sung c\u00e1c th\u00f4ng tin v\u1ec1 an ninh, v\u00e0 an to\u00e0n cho ti\u1ebfn tr\u00ecnh c\u1eadp nh\u1eadt OTA.",
            "title": "Gi\u1edbi thi\u1ec7u OTA"
        },
        {
            "location": "/arduino/ota/arduino-fota/#bao-mat",
            "text": "Khi ESP8266  \u0111\u01b0\u1ee3c ph\u00e9p th\u1ef1c thi OTA, c\u00f3 ngh\u0129a n\u00f3 \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i m\u1ea1ng kh\u00f4ng d\u00e2y v\u00e0 c\u00f3 kh\u1ea3 n\u0103ng \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadp Sketch m\u1edbi. Cho n\u00ean kh\u1ea3 n\u0103ng ESP8266 b\u1ecb t\u1ea5n c\u00f4ng s\u1ebd nhi\u1ec1u h\u01a1n v\u00e0 b\u1ecb n\u1ea1p b\u1edfi m\u00e3 th\u1ef1c thi kh\u00e1c l\u00e0 r\u1ea5t cao. \u0110\u1ec3 gi\u1ea3m kh\u1ea3 n\u0103ng b\u1ecb t\u1ea5n c\u00f4ng c\u1ea7n xem x\u00e9t b\u1ea3o v\u1ec7 c\u1eadp nh\u1eadt c\u1ee7a b\u1ea1n v\u1edbi m\u1ed9t m\u1eadt kh\u1ea9u, c\u1ed5ng s\u1eed d\u1ee5ng c\u1ed1 \u0111\u1ecbnh kh\u00e1c bi\u1ec7t, v.v\u2026  Ki\u1ec3m tra nh\u1eefng t\u00ednh n\u0103ng \u0111\u01b0\u1ee3c cung c\u1ea5p b\u1edfi th\u01b0 vi\u1ec7n  ArduinoOTA  th\u01b0\u1eddng xuy\u00ean, c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c n\u00e2ng c\u1ea5p kh\u1ea3 n\u0103ng b\u1ea3o v\u1ec7 an to\u00e0n:  void setPort(uint16_t port);\nvoid setHostname(const char* hostname);\nvoid setPassword(const char* password);  M\u1ed9t s\u1ed1 ch\u1ee9c n\u0103ng b\u1ea3o v\u1ec7 \u0111\u00e3 \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng trong v\u00e0 kh\u00f4ng y\u00eau c\u1ea7u b\u1ea5t k\u1ef3 m\u00e3 h\u00f3a n\u00e0o cho nh\u00e0 ph\u00e1t tri\u1ec3n.  ArduinoOTA  v\u00e0  espota.py  s\u1eed d\u1ee5ng  Digest-MD5  \u0111\u1ec3 ch\u1ee9ng th\u1ef1c vi\u1ec7c t\u1ea3i firmware l\u00ean. \u0110\u01a1n gi\u1ea3n l\u00e0 \u0111\u1ea3m b\u1ea3o t\u00ednh to\u00e0n v\u1eb9n c\u1ee7a firmware b\u1eb1ng vi\u1ec7c t\u00ednh  MD5 .  H\u00e3y ph\u00e2n t\u00edch r\u1ee7i ro cho ri\u00eang \u1ee9ng d\u1ee5ng c\u1ee7a b\u1ea1n b\u1ea1n v\u00e0 t\u00f9y thu\u1ed9c v\u00e0o \u1ee9ng d\u1ee5ng m\u00e0 quy\u1ebft \u0111\u1ecbnh nh\u1eefng ch\u1ee9c n\u0103ng c\u0169ng nh\u01b0 th\u01b0 vi\u1ec7n \u0111\u1ec3 th\u1ef1c hi\u1ec7n. N\u1ebfu c\u1ea7n thi\u1ebft, c\u00f3 th\u1ebb xem x\u00e9t vi\u1ec7c th\u1ef1c hi\u1ec7n c\u00e1c ph\u01b0\u01a1ng th\u1ee9c b\u1ea3o v\u1ec7 kh\u1ecfi b\u1ecb hack, v\u00ed d\u1ee5 nh\u01b0 c\u1eadp nh\u1eadt OTA ch\u1ec9 cho t\u1ea3i l\u00ean ch\u1ec9 theo l\u1ecbch tr\u00ecnh c\u1ee5 th\u1ec3, k\u00edch ho\u1ea1t OTA ch\u1ec9 \u0111\u01b0\u1ee3c ng\u01b0\u1eddi d\u00f9ng nh\u1ea5n n\u00fat chuy\u00ean d\u1ee5ng \u201cC\u1eadp nh\u1eadt\u201d, v.v\u2026",
            "title": "B\u1ea3o m\u1eadt"
        },
        {
            "location": "/arduino/ota/arduino-fota/#an-toan",
            "text": "Qu\u00e1 tr\u00ecnh OTA ti\u00eau t\u1ed1n ngu\u1ed3n t\u00e0i nguy\u00ean v\u00e0 b\u0103ng th\u00f4ng c\u1ee7a ESP8266 khi t\u1ea3i l\u00ean. Sau \u0111\u00f3, ESP8266 \u0111\u01b0\u1ee3c kh\u1edfi \u0111\u1ed9ng l\u1ea1i v\u00e0 m\u1ed9t Sketch m\u1edbi \u0111\u01b0\u1ee3c th\u1ef1c thi. C\u1ea7n ph\u1ea3i ph\u00e2n t\u00edch v\u00e0 ki\u1ec3m tra \u0111\u1ec3 Sketch m\u1edbi kh\u00f4ng \u1ea3nh h\u01b0\u1edfng t\u1edbi c\u00e1c ch\u1ee9c n\u0103ng hi\u1ec7n c\u00f3 c\u1ee7a Sketch hi\u1ec7n t\u1ea1i, c\u0169ng nh\u01b0 vi\u1ec7c c\u1eadp nh\u1eadt OTA l\u1ea7n sau v\u1eabn \u0111\u01b0\u1ee3c \u0111\u1ea3m b\u1ea3o.  N\u1ebfu ESP8266 \u0111\u01b0\u1ee3c \u0111\u1eb7t t\u1eeb xa v\u00e0 ki\u1ec3m so\u00e1t m\u1ed9t s\u1ed1 thi\u1ebft b\u1ecb \u0111ang v\u1eadn h\u00e0nh, b\u1ea1n n\u00ean \u0111\u1eb7t c\u00e1c ch\u00fa \u00fd \u0111i k\u00e8m th\u00f4ng tin nh\u1eefng g\u00ec s\u1ebd x\u1ea3y ra n\u1ebfu ho\u1ea1t \u0111\u1ed9ng c\u1ee7a thi\u1ebft b\u1ecb n\u00e0y \u0111\u1ed9t nhi\u00ean b\u1ecb gi\u00e1n \u0111o\u1ea1n b\u1edfi qu\u00e1 tr\u00ecnh c\u1eadp nh\u1eadt. V\u1ea7n ph\u1ea3i \u0111\u01b0a thi\u1ebft b\u1ecb v\u00e0o tr\u1ea1ng th\u00e1i an to\u00e0n tr\u01b0\u1edbc khi b\u1eaft \u0111\u1ea7u c\u1eadp nh\u1eadt. \nV\u00ed d\u1ee5 ESP8266 c\u1ee7a b\u1ea1n c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ki\u1ec3m so\u00e1t m\u1ed9t h\u1ec7 th\u1ed1ng t\u01b0\u1edbi v\u01b0\u1eddn. N\u1ebfu n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u00f3ng \u0111\u00fang c\u00e1ch v\u00e0 m\u1ed9t van n\u01b0\u1edbc b\u1ecf ng\u1ecf, khu v\u01b0\u1eddn c\u1ee7a b\u1ea1n c\u00f3 th\u1ec3 b\u1ecb ng\u1eadp v\u00e0 van n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u00f3ng l\u1ea1i sau khi OTA xong v\u00e0 kh\u1edfi \u0111\u1ed9ng l\u1ea1i m\u00f4-\u0111un.  M\u1ed9t s\u1ed1 h\u00e0m sau \u0111\u01b0\u1ee3c cung c\u1ea5p k\u00e8m v\u1edbi th\u01b0u vi\u1ec7n  ArduinoOTA  v\u00e0 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 x\u1eed l\u00fd c\u00e1c ch\u1ee9c n\u0103ng c\u1ee7a \u1ee9ng d\u1ee5ng trong t\u1eebng giai \u0111o\u1ea1n c\u1ee5 th\u1ec3 c\u1ee7a OTA ho\u1eb7c x\u1eed l\u00fd l\u1ed7i OTA:  void onStart(OTA_CALLBACK(fn));\nvoid onEnd(OTA_CALLBACK(fn));\nvoid onProgress(OTA_CALLBACK_PROGRESS(fn));\nvoid onError(OTA_CALLBACK_ERROR (fn));",
            "title": "An to\u00e0n"
        },
        {
            "location": "/arduino/ota/arduino-fota/#yeu-cau-co-ban",
            "text": "K\u00edch th\u01b0\u1edbc Flash c\u1ea7n \u0111\u1ee7 \u0111\u1ec3 c\u00f3 th\u1ec3 gi\u1eef Sketch c\u0169 (hi\u1ec7n \u0111ang ch\u1ea1y) v\u00e0 Sketch m\u1edbi (OTA) c\u00f9ng m\u1ed9t l\u00fac. Xem  flash layout .  ESP.getFreeSketchSpace();  c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng cho vi\u1ec7c ki\u1ec3m tra v\u00f9ng nh\u1edb c\u00f2n tr\u1ed1ng cho Sketch m\u1edbi.  \u0110\u1ec3 c\u00f3 c\u00e1i nh\u00ecn t\u1ed5ng quan v\u1ec1 layout b\u1ed9 nh\u1edb, n\u01a1i Sketch m\u1edbi \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef v\u00e0 l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 ESP8266 copy trong qu\u00e1 tr\u00ecnh OTA, xem \u1edf  Ti\u1ebfn tr\u00ecnh c\u1eadp nh\u1eadt - b\u1ed9 nh\u1edb .  Ph\u1ea7n ti\u1ebfp theo s\u1ebd cung c\u1ea5p th\u00f4ng tinh chi ti\u1ebft cho t\u1eebng ph\u01b0\u01a1ng th\u1ee9c OTA.",
            "title": "Y\u00eau c\u1ea7u c\u01a1 b\u1ea3n"
        },
        {
            "location": "/arduino/ota/arduino-fota/#stream-interface",
            "text": "TODO describe Stream Interface  The Stream Interface is the base for all other update modes like OTA, http Server / client.",
            "title": "Stream Interface"
        },
        {
            "location": "/arduino/ota/arduino-fota/#updater-class",
            "text": "Updater is in the Core and deals with writing the firmware to the flash, \nchecking its integrity and telling the bootloader to load the new firmware on the next boot.",
            "title": "Updater class"
        },
        {
            "location": "/arduino/ota/arduino-fota/#update-process-memory-view",
            "text": "The new sketch will be stored in the space between the old sketch and the spiff.  on the next reboot the \u201ceboot\u201d bootloader check for commands.  the new sketch is now copied \u201cover\u201d the old one.  the new sketch is started.",
            "title": "Update process - memory view"
        },
        {
            "location": "/arduino/ota/using-arduino-ide/",
            "text": "Arduino IDE\n#\n\n\nC\u1eadp nh\u1eadt OTA s\u1eed d\u1ee5ng Arduino IDE t\u1ea3i firmware l\u00ean cho ESP8266 d\u00e0nh cho c\u00e1c t\u00ecnh hu\u1ed1ng \u0111i\u1ec3n h\u00ecnh sau \u0111\u00e2y:\n\n\n\n\nTrong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng nh\u01b0 m\u1ed9t c\u00e1ch thay th\u1ebf nhanh h\u01a1n s\u1eed d\u1ee5ng c\u1ed5ng Serial\n\n\n\u0110\u1ec3 c\u1eadp nh\u1eadt s\u1ed1 l\u01b0\u1ee3ng nh\u1ecf c\u1ee7a c\u00e1c module ESP8266\n\n\nCh\u1ec9 khi module ESP8266 c\u00f9ng m\u1ea1ng LAN v\u1edbi m\u00e1y t\u00ednh ch\u1ea1y Arduino IDE\n\n\n\n\nY\u00eau c\u1ea7u\n#\n\n\n\n\nC\u00e1c module ESP8266 v\u00e0 m\u00e1y t\u00ednh ph\u1ea3i \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i v\u1edbi c\u00f9ng m\u1ed9t m\u1ea1ng LAN.\n\n\n\n\nV\u00ed d\u1ee5 \u1ee9ng d\u1ee5ng\n#\n\n\nH\u01b0\u1edbng d\u1eabn d\u01b0\u1edbi \u0111\u00e2y c\u1ea5u h\u00ecnh ch\u01b0\u01a1ng tr\u00ecnh OTA s\u1eed d\u1ee5ng board NodeMCU 1.0 (ESP-12E Module). B\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng b\u1ea5t k\u1ef3 board ESP8266 n\u00e0o, mi\u1ec5n sao n\u00f3 \u0111\u00e1p \u1ee9ng \u0111\u01b0\u1ee3c [y\u00eau c\u1ea7u] (#basic-requirements) \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 \u1edf tr\u00ean. H\u01b0\u1edbng d\u1eabn n\u00e0y c\u00f3 hi\u1ec7u l\u1ef1c cho t\u1ea5t c\u1ea3 c\u00e1c h\u1ec7 \u0111i\u1ec1u h\u00e0nh h\u1ed7 tr\u1ee3 b\u1edfi Arduino IDE. M\u00e0n h\u00ecnh ch\u1ee5p \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u00ean Windows 7 v\u00e0 b\u1ea1n c\u00f3 th\u1ec3 th\u1ea5y s\u1ef1 kh\u00e1c bi\u1ec7t nh\u1ecf (nh\u01b0 t\u00ean c\u1ee7a c\u1ed5ng n\u1ed1i ti\u1ebfp) n\u1ebfu b\u1ea1n \u0111ang s\u1eed d\u1ee5ng Linux v\u00e0 MacOS.\n\n\n1.\n Tr\u01b0\u1edbc khi b\u1ea1n b\u1eaft \u0111\u1ea7u, b\u1ea1n c\u1ea7n \u0111\u1ea3m b\u1ea3o c\u00e1c ph\u1ea7n m\u1ec1m sau \u0111\u00e3 \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t:\n\n\n\n\nArduino IDE 1.6.7 ho\u1eb7c m\u1edbi h\u01a1n - https://www.arduino.cc/en/Main/Software\n\n\nESP8266/Arduino n\u1ec1n t\u1ea3ng g\u00f3i 2.0.0 ho\u1eb7c m\u1edbi h\u01a1n - \u0111\u1ec3 \u0111\u01b0\u1ee3c h\u01b0\u1edbng d\u1eabn l\u00e0m theo \nC\u00e0i \u0111\u1eb7t\n\n\nPython 2.7 (kh\u00f4ng c\u00e0i \u0111\u1eb7t Python 3.5, n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3) - https://www.python.org/\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nNg\u01b0\u1eddi d\u00f9ng Windows n\u00ean ch\u1ecdn \u201cAdd python.exe Path\u201d (xem b\u00ean d\u01b0\u1edbi - t\u00f9y ch\u1ecdn n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c ch\u1ecdn theo m\u1eb7c \u0111\u1ecbnh).\n\n\n\n\n\n\n2.\n B\u00e2y gi\u1edd chu\u1ea9n b\u1ecb cho Sketch m\u1edbi v\u00e0 c\u1ea5u h\u00ecnh cho vi\u1ec7c  n\u1ea1p firmware qua c\u1ed5ng n\u1ed1i ti\u1ebfp.\n\n\n\n\nB\u1eaft \u0111\u1ea7u Arduino IDE v\u00e0 m\u1edf BasicOTA.ino Sketch s\u1eb5n, ph\u1ea7n File >  Examples > ArduinoOTA\n\n\n\nC\u1eadp nh\u1eadt SSID v\u00e0 m\u1eadt kh\u1ea9u WiFi \u0111\u1ec3 ESP8266 c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i v\u00e0o m\u1ea1ng Wi-Fi c\u1ee7a b\u1ea1n\n\n\n\nC\u00e1c th\u00f4ng s\u1ed1 c\u1ea5u h\u00ecnh t\u1ea3i l\u00ean nh\u01b0 b\u00ean d\u01b0\u1edbi (b\u1ea1n c\u00f3 th\u1ec3 c\u1ea7n ph\u1ea3i \u0111i\u1ec1u ch\u1ec9nh c\u1ea5u h\u00ecnh n\u1ebfu b\u1ea1n \u0111ang s\u1eed d\u1ee5ng c\u00e1c module ESP8266 kh\u00e1c):\n! [c\u1ea5u h\u00ecnh t\u1ea3i l\u00ean n\u1ed1i ti\u1ebfp] (../images/a-ota-serial-upload-configuration.png)\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nT\u00f9y thu\u1ed9c v\u00e0o phi\u00ean b\u1ea3n c\u1ee7a g\u00f3i n\u1ec1n t\u1ea3ng v\u00e0 h\u1ed9i \u0111\u1ed3ng qu\u1ea3n tr\u1ecb m\u00e0 b\u1ea1n c\u00f3, b\u1ea1n c\u00f3 th\u1ec3 th\u1ea5y \nUpload Using:\n  trong menu \u1edf tr\u00ean. T\u00f9y ch\u1ecdn n\u00e0y kh\u00f4ng ho\u1ea1t \u0111\u1ed9ng v\u00e0 n\u00f3 kh\u00f4ng quan tr\u1ecdng khi b\u1ea1n ch\u1ecdn. N\u00f3 \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ec3 l\u1ea1i cho ph\u00f9 h\u1ee3p v\u1edbi phi\u00ean b\u1ea3n c\u0169 c\u1ee7a OTA v\u00e0 s\u1ebd b\u1ecb lo\u1ea1i b\u1ecf trong phi\u00ean b\u1ea3n 2.2.0.\n\n\n\n\n3.\n N\u1ea1p Sketch (Ctrl + U). Sau khi th\u1ef1c hi\u1ec7n, m\u1edf ti\u1ebfp Serial Monitor (Ctrl + Shift + M) v\u00e0 ki\u1ec3m tra xem ESP8266 \u0111\u00e3 k\u1ebft n\u1ed1i v\u00e0o m\u1ea1ng Wi-Fi c\u1ee7a b\u1ea1n:\n\n\n\n\n4.\n Ch\u1ec9 khi module ESP8266 \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i v\u00e0o m\u1ea1ng, sau m\u1ed9t v\u00e0i gi\u00e2y, c\u1ed5ng esp8266-ota s\u1ebd hi\u1ec3n th\u1ecb trong Arduino IDE. Ch\u1ecdn c\u1ed5ng v\u1edbi \u0111\u1ecba ch\u1ec9 IP hi\u1ec7n t\u1ea1i hi\u1ec3n th\u1ecb tr\u00ean Serial Monitor trong b\u01b0\u1edbc tr\u01b0\u1edbc:\n\n\n\n\n!!! note \u201cL\u01b0u \u00fd\u201d \n    N\u1ebfu c\u1ed5ng OTA kh\u00f4ng hi\u1ec7n l\u00ean, Tho\u00e1t kh\u1ea3oi Arduino IDE, m\u1edf n\u00f3 m\u1ed9t l\u1ea7n n\u1eefa v\u00e0 ki\u1ec3m tra l\u1ea1i. N\u1ebfu ho\u00e0n to\u00e0n kh\u00f4ng c\u00f3, thi\u1ebft l\u1eadp t\u01b0\u1eddng l\u1eeda c\u1ee7a b\u1ea1n.\n\n\n5.\n B\u00e2y gi\u1edd \u0111\u00e3 s\u1eb5n s\u00e0ng \u0111\u1ec3 c\u1eadp nh\u1eadt OTA \u0111\u1ea7u ti\u00ean c\u1ee7a b\u1ea1n b\u1eb1ng c\u00e1ch ch\u1ecdn c\u1ed5ng OTA:\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nC\u00e1c m\u1ee5c tr\u00ecnh \u0111\u01a1n \nUpload Speed:\n kh\u00f4ng quan tr\u1ecdng v\u00e0o th\u1eddi \u0111i\u1ec3m n\u00e0y v\u00ec n\u00f3 li\u00ean quan \u0111\u1ebfn c\u1ed5ng n\u1ed1i ti\u1ebfp. Kh\u00f4ng c\u1ea7n ph\u1ea3i t\u00e1c \u0111\u1ed9ng\n\n\n\n\n6.\n N\u1ebfu b\u1ea1n \u0111\u00e3 ho\u00e0n th\u00e0nh t\u1ea5t c\u1ea3 c\u00e1c b\u01b0\u1edbc tr\u00ean, b\u1ea1n c\u00f3 th\u1ec3 t\u1ea3i l\u00ean (Ctrl + U) c\u00f9ng m\u1ed9t (ho\u1eb7c b\u1ea5t k\u1ef3) Sketch qua OTA:\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\n\u0110\u1ec3 c\u00f3 th\u1ec3 t\u1ea3i l\u00ean c\u00e1c b\u1ea3n Sketch c\u1ee7a b\u1ea1n nhi\u1ec1u l\u1ea7n h\u01a1n n\u1eefa s\u1eed d\u1ee5ng OTA, b\u1ea1n c\u1ea7n ph\u1ea3i s\u1eed d\u1ee5ng c\u00e1c h\u00e0m ph\u1ee5c v\u1ee5 OTA b\u00ean trong. Vui l\u00f2ng xem c\u00e1ch s\u1eed d\u1ee5ng BasicOTA.ino nh\u01b0 l\u00e0 m\u1ed9t v\u00ed d\u1ee5.\n\n\n\n\nB\u1ea3o v\u1ec7 m\u1eadt kh\u1ea9u\n#\n\n\nB\u1ea3o v\u1ec7 c\u1eadp nh\u1eadt OTA v\u1edbi m\u1eadt kh\u1ea9u kh\u00e1 \u0111\u01a1n gi\u1ea3n. T\u1ea5t c\u1ea3 vi\u1ec7c c\u1ea7n l\u00e0m l\u00e0 s\u1eed d\u1ee5ng \u0111o\u1ea1n code sau trong m\u00e3 Sketch:\n\n\nArduinoOTA.setPassword ((const char *) \"123\");\n\n\n\n\nV\u1edbi \n123\n l\u00e0 m\u1ed9t m\u1eadt kh\u1ea9u m\u1eabu c\u1ea7n \u0111\u01b0\u1ee3c thay th\u1ebf cho \u1ee9ng d\u1ee5ng c\u1ee7a b\u1ea1n.\n\n\nTr\u01b0\u1edbc khi th\u1ef1c hi\u1ec7n n\u00f3 trong Sketch, B\u1ea1n c\u00f3 th\u1ec3 th\u1eed nghi\u1ec7m ho\u1ea1t \u0111\u1ed9ng OTA b\u1eb1ng vi\u1ec7c m\u1edf Sketch m\u1eabu \nBasicOTA.ino\n trong \nFile > Examples > ArduinoOTA\n.  Ti\u1ebfp theo, m\u1edf \nBasicOTA.ino\n, b\u1ecf comment ph\u00eda tr\u01b0\u1edbc ph\u1ea7n c\u1ea5u h\u00ecnh m\u1eadt kh\u1ea7u (m\u00f4 t\u1ea3 b\u00ean tr\u00ean). \u0110\u1ec3 x\u1eed l\u00fd c\u00e1c tr\u01b0\u1eddng h\u1ee3p l\u1ed7i d\u1ec5 d\u00e0ng h\u01a1n, kh\u00f4ng n\u00ean s\u1eeda \u0111\u1ed5i m\u1eabu Sketch ngo\u00e0i tr\u1eeb c\u00e1c y\u00eau c\u1ea7u c\u1ea7n thi\u1ebft. Bao g\u1ed3m vi\u1ec7c \u0111\u01a1n gi\u1ea3n l\u00e0 s\u1eeda m\u1eadt kh\u1ea9u OTA \n123\n  th\u00e0nh m\u1eadt kh\u1ea9u c\u1ee7a b\u1ea1n. R\u1ed3i c\u1eadp nh\u1eadt l\u00ean \u1ee9ng d\u1ee5ng s\u1eed d\u1ee5ng OTA. Khi b\u1ea1n b\u1eaft \u0111\u1ea7u c\u1eadp nh\u1eadt OTA, s\u1ebd hi\u1ec7n ra khung h\u1ecfi m\u1eadt kh\u1ea9u nh\u01b0 b\u00ean d\u01b0\u1edbi:\n\n\n\n\nNh\u1eadp m\u1eadt kh\u1ea9u v\u00e0 t\u1ea3i l\u00ean n\u00ean b\u1eaft \u0111\u1ea7u nh\u01b0 b\u00ecnh th\u01b0\u1eddng, ch\u1ec9 kh\u00e1c l\u00fac tr\u01b0\u1edbc l\u00e0 c\u00f3 th\u00eam d\u00f2ng \nAuthenticating ...OK\n trong c\u1eeda s\u1ed5 log.\n\n\n\n\nB\u1ea1n s\u1ebd kh\u00f4ng b\u1ecb h\u1ecfi m\u1eadt kh\u1ea3u cho l\u1ea7n sau. Arduino IDE s\u1ebd nh\u1edb n\u00f3 cho b\u1ea1n. B\u1ea1n ch\u1ec9 th\u1ea5y d\u1ea5u khung h\u1ecfi m\u1eadt kh\u1ea9u ch\u1ec9 khi m\u1edf l\u1ea1i IDE, ho\u1eb7c n\u1ebfu b\u1ea1n thay \u0111\u1ed5i n\u00f3 trong Sketch c\u1ee7a b\u1ea1n, t\u1ea3i l\u00ean c\u00e1c b\u1ea3n ph\u00e1c th\u1ea3o v\u00e0 sau \u0111\u00f3 t\u1ea3i n\u00f3 l\u00ean m\u1ed9t l\u1ea7n n\u1eefa.\n\n\n\n\nL\u01b0u \u00fd\n\n\nHo\u00e0n to\u00e0n c\u00f3 kh\u1ea3 n\u0103ng xem l\u1ea1i m\u1eadt kh\u1ea9u c\u1ee7a l\u1ea7n c\u1eadp nh\u1eadt tr\u01b0\u1edbc b\u1edfi Arduino IDE, n\u1ebfu IDE kh\u00f4ng b\u1ecb \u0111\u00f3ng k\u1ec3 t\u1eeb l\u1ea7n c\u1eadp nh\u1eadt sau c\u00f9ng. \u0110\u1ec3 th\u1ea5y \u0111\u01b0\u1ee3c m\u1eadt kh\u1ea9u trong c\u1eeda s\u1ed5 Log, th\u1ef1c hi\u1ec7n nh\u01b0 sau: Cho ph\u00e9p \nShow verbose output during: upload\n trong \nFile > Preferences\n v\u00e0 th\u1ef1c hi\u1ec7n vi\u1ec7c c\u1eadp nh\u1eadt l\u1ea1i.\n\n\n\n\n\n\nH\u00ecnh \u1ea3nh tr\u00ean cho th\u1ea5y m\u1eadt kh\u1ea9u l\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c nh\u00ecn th\u1ea5y trong Log v\u00e0 n\u00f3 \u0111\u01b0\u1ee3c g\u00e1n cho file \nespota.py\n \u0111\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c t\u1ea3i firmware.\n\n\nV\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y cho th\u1ea5y t\u00ecnh hu\u1ed1ng khi m\u1eadt kh\u1ea9u \u0111\u01b0\u1ee3c thay \u0111\u1ed5i gi\u1eefa c\u00e1c l\u1ea7n c\u1eadp nh\u1eadt. \n\n\n\n\nKhi th\u1ef1c hi\u1ec7n c\u1eadp nh\u1eadt, Arduino IDE s\u1eed d\u1ee5ng m\u1eadt kh\u1ea9u \u0111\u00e3 nh\u1eadp tr\u01b0\u1edbc \u0111\u00f3, v\u00ec v\u1eady khi kh\u00f4ng th\u00e0nh c\u00f4ng v\u00e0 s\u1ebd b\u00e1o c\u00e1o r\u00f5 r\u00e0ng b\u1edfi IDE, IDE s\u1ebd nh\u1eafc b\u1ea1n nh\u1eadp m\u1eadt kh\u1ea9u m\u1edbi v\u00e0 d\u00f9ng n\u00f3 \u0111\u1ec3 th\u1ef1c hi\u1ec7n l\u1ea1i vi\u1ec7c c\u1eadp nh\u1eadt, \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o th\u00e0nh c\u00f4ng.\n\n\nGi\u1ea3i quy\u1ebft c\u00e1c l\u1ed7i th\u01b0\u1eddng g\u1eb7p\n#\n\n\nN\u1ebfu OTA c\u1eadp nh\u1eadt th\u1ea5t b\u1ea1i, b\u01b0\u1edbc \u0111\u1ea7u ti\u00ean l\u00e0 ki\u1ec3m tra c\u00e1c th\u00f4ng b\u00e1o l\u1ed7i \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb trong c\u1eeda s\u1ed5 Log c\u1ee7a Arduino IDE. N\u1ebfu n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c cung c\u1ea5p \u0111\u01b0\u1ee3c b\u1ea5t k\u1ef3 g\u1ee3i \u00fd h\u1eefu \u00edch n\u00e0o, th\u1eed c\u1eadp nh\u1eadt OTA m\u1ed9t l\u1ea7n n\u1eefa trong khi ki\u1ec3m tra th\u00f4ng tin t\u1eeb ESP8266 \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n tr\u00ean c\u1ed5ng Serial. Serial Port Monitor t\u1eeb IDE s\u1ebd kh\u00f4ng h\u1eefu \u00edch trong tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3. Khi c\u1ed1 g\u1eafng \u0111\u1ec3 m\u1edf n\u00f3, b\u1ea1n c\u00f3 th\u1ec3 s\u1ebd th\u1ea5y nh\u01b0 sau:\n\n\n\n\nC\u1eeda s\u1ed5 n\u00e0y l\u00e0 d\u00e0nh cho Arduino Yun v\u00e0 ch\u01b0a n\u00e2ng c\u1ea5p cho esp8266/Arduino. N\u00f3 hi\u1ec3n th\u1ecb b\u1edfi v\u00ec IDE \u0111ang c\u1ed1 m\u1edf ti\u1ebfp s\u1ed5 Serial Monitor s\u1eed d\u1ee5ng c\u1ed5ng Network m\u00e0 b\u1ea1n \u0111\u00e3 ch\u1ecdn \u0111\u1ec3 t\u1ea3i l\u00ean OTA.\n\n\nThay v\u00e0o \u0111\u00f3 b\u1ea1n c\u1ea7n m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh Serial Port Monitor  b\u00ean ngo\u00e0i. N\u1ebfu b\u1ea1n l\u00e0 ng\u01b0\u1eddi d\u00f9ng Windows, h\u00e3y xem qua \nTermite\n. Kh\u00e1 ti\u1ec7n d\u1ee5ng, th\u00fa v\u1ecb v\u00e0 \u0111\u01a1n gi\u1ea3n, s\u1eed d\u1ee5ng cho thi\u1ebft b\u1ecb \u0111\u1ea7u cu\u1ed1i RS232 m\u00e0 kh\u00f4ng \u00e1p \u0111\u1eb7t \u0111i\u1ec1u khi\u1ec3n flow control RTS ho\u1eb7c DTR. Vi\u1ec7c s\u1eed d\u1ee5ng flow control cho c\u1ed5ng Serial c\u00f3 th\u1ec3 g\u00e2y ra v\u1ea5n \u0111\u1ec1 chuy\u1ec3n m\u1ee9c t\u00edn hi\u1ec7u GPIO0 v\u00e0 RESET ch\u00e2n tr\u00ean ESP8266. \n\n\nCh\u1ecdn c\u1ed5ng COM v\u00e0 t\u1ed1c \u0111\u1ed9 truy\u1ec1n tr\u00ean ch\u01b0\u01a1ng tr\u00ecnh Serial Port Monitor nh\u01b0 khi b\u1ea1n \u0111ang s\u1eed d\u1ee5ng Arduino Serial Monitor. Xem c\u00e1c thi\u1ebft l\u1eadp ti\u00eau bi\u1ec3u cho \nTermite\n d\u01b0\u1edbi \u0111\u00e2y:\n\n\n\n\nSau \u0111\u00f3 ch\u1ea1y OTA t\u1eeb IDE v\u00e0 nh\u00ecn nh\u1eefng g\u00ec \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb tr\u00ean Serial Port Terminal. Ti\u1ebfn t\u00ecnh  \nArduinoOTA\n th\u00e0nh c\u00f4ng s\u1eed d\u1ee5ng BasicOTA.ino Sketch nh\u00ecn nh\u01b0 b\u00ean d\u01b0\u1edbi (\u0111\u1ecba ch\u1ec9 IP ph\u1ee5 thu\u1ed9c v\u00e0o c\u1ea5u h\u00ecnh m\u1ea1ng c\u1ee7a b\u1ea1n):\n\n\n\n\nN\u1ebfu c\u1eadp nh\u1eadt b\u1ecb l\u1ed7i b\u1ea1n s\u1ebd mu\u1ed1n nh\u00ecn th\u1ea5y nguy\u00ean nh\u00e2n b\u1edfi tr\u00ecnh t\u1ea3i l\u00ean, exception v\u00e0 stack dump, ho\u1eb7c c\u1ea3 2 \n\n\nC\u00e1c nguy\u00ean nh\u00e2n ph\u1ed5 bi\u1ebfn nh\u1ea5t g\u00e2y th\u1ea5t b\u1ea1i cho vi\u1ec7c c\u1eadp nh\u1eadt OTA nh\u01b0 sau:\n\n\n\n\nKh\u00f4ng \u0111\u1ee7 b\u1ed9 nh\u1edb Flash tr\u00ean chip (v\u00ed d\u1ee5 nh\u01b0 ESP01 v\u1edbi b\u1ed9 nh\u1edb flash 512K l\u00e0 kh\u00f4ng \u0111\u1ee7 cho OTA),\n\n\n\u0110\u1ecbnh ngh\u0129a b\u1ed9 nh\u1edd Flash qu\u00e1 nhi\u1ec1u cho SPIFFS, Sketch m\u1edbi s\u1ebd kh\u00f4ng kh\u1edbp v\u1edbi Sketch c\u0169 v\u00e0 SPIFFS - xem [C\u1eadp nh\u1eadt qu\u00e1 tr\u00ecnh - xem b\u1ed9 nh\u1edb] #update-process\u2014memory-view),\n\n\nQu\u00e1 \u00edt b\u1ed9 nh\u1edb Flash \u0111\u01b0\u1ee3c khai b\u00e1o trong Arduino IDE cho board c\u1ee7a b\u1ea1n (t\u1ee9c l\u00e0 \u00edt h\u01a1n so v\u1edbi k\u00edch th\u01b0\u1edbc v\u1eadt l\u00fd). \n\n\n\n\n\u0110\u1ec3 bi\u1ebft th\u00eam chi ti\u1ebft v\u1ec1 c\u00e1ch b\u1ed1 tr\u00ed b\u1ed9 nh\u1edb flash xin vui l\u00f2ng ki\u1ec3m tra \nFilesystem\n.\nT\u1ed5ng quan v\u1ec1 n\u01a1i Sketch m\u1edbi \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef, l\u00e0m th\u1ebf n\u00e0o n\u00f3 \u0111\u01b0\u1ee3c sao ch\u00e9p v\u00e0 t\u1ed5 ch\u1ee9c  b\u1ed9 nh\u1edb cho m\u1ee5c \u0111\u00edch OTA xem nh\u01b0 th\u1ebf n\u00e0o, xem \nTi\u1ebfn tr\u00ecnh c\u1eadp nh\u1eadt - Memory view\n.",
            "title": "S\u1eed d\u1ee5ng Arduino IDE"
        },
        {
            "location": "/arduino/ota/using-arduino-ide/#arduino-ide",
            "text": "C\u1eadp nh\u1eadt OTA s\u1eed d\u1ee5ng Arduino IDE t\u1ea3i firmware l\u00ean cho ESP8266 d\u00e0nh cho c\u00e1c t\u00ecnh hu\u1ed1ng \u0111i\u1ec3n h\u00ecnh sau \u0111\u00e2y:   Trong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng nh\u01b0 m\u1ed9t c\u00e1ch thay th\u1ebf nhanh h\u01a1n s\u1eed d\u1ee5ng c\u1ed5ng Serial  \u0110\u1ec3 c\u1eadp nh\u1eadt s\u1ed1 l\u01b0\u1ee3ng nh\u1ecf c\u1ee7a c\u00e1c module ESP8266  Ch\u1ec9 khi module ESP8266 c\u00f9ng m\u1ea1ng LAN v\u1edbi m\u00e1y t\u00ednh ch\u1ea1y Arduino IDE",
            "title": "Arduino IDE"
        },
        {
            "location": "/arduino/ota/using-arduino-ide/#yeu-cau",
            "text": "C\u00e1c module ESP8266 v\u00e0 m\u00e1y t\u00ednh ph\u1ea3i \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i v\u1edbi c\u00f9ng m\u1ed9t m\u1ea1ng LAN.",
            "title": "Y\u00eau c\u1ea7u"
        },
        {
            "location": "/arduino/ota/using-arduino-ide/#vi-du-ung-dung",
            "text": "H\u01b0\u1edbng d\u1eabn d\u01b0\u1edbi \u0111\u00e2y c\u1ea5u h\u00ecnh ch\u01b0\u01a1ng tr\u00ecnh OTA s\u1eed d\u1ee5ng board NodeMCU 1.0 (ESP-12E Module). B\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng b\u1ea5t k\u1ef3 board ESP8266 n\u00e0o, mi\u1ec5n sao n\u00f3 \u0111\u00e1p \u1ee9ng \u0111\u01b0\u1ee3c [y\u00eau c\u1ea7u] (#basic-requirements) \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 \u1edf tr\u00ean. H\u01b0\u1edbng d\u1eabn n\u00e0y c\u00f3 hi\u1ec7u l\u1ef1c cho t\u1ea5t c\u1ea3 c\u00e1c h\u1ec7 \u0111i\u1ec1u h\u00e0nh h\u1ed7 tr\u1ee3 b\u1edfi Arduino IDE. M\u00e0n h\u00ecnh ch\u1ee5p \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u00ean Windows 7 v\u00e0 b\u1ea1n c\u00f3 th\u1ec3 th\u1ea5y s\u1ef1 kh\u00e1c bi\u1ec7t nh\u1ecf (nh\u01b0 t\u00ean c\u1ee7a c\u1ed5ng n\u1ed1i ti\u1ebfp) n\u1ebfu b\u1ea1n \u0111ang s\u1eed d\u1ee5ng Linux v\u00e0 MacOS.  1.  Tr\u01b0\u1edbc khi b\u1ea1n b\u1eaft \u0111\u1ea7u, b\u1ea1n c\u1ea7n \u0111\u1ea3m b\u1ea3o c\u00e1c ph\u1ea7n m\u1ec1m sau \u0111\u00e3 \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t:   Arduino IDE 1.6.7 ho\u1eb7c m\u1edbi h\u01a1n - https://www.arduino.cc/en/Main/Software  ESP8266/Arduino n\u1ec1n t\u1ea3ng g\u00f3i 2.0.0 ho\u1eb7c m\u1edbi h\u01a1n - \u0111\u1ec3 \u0111\u01b0\u1ee3c h\u01b0\u1edbng d\u1eabn l\u00e0m theo  C\u00e0i \u0111\u1eb7t  Python 2.7 (kh\u00f4ng c\u00e0i \u0111\u1eb7t Python 3.5, n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3) - https://www.python.org/    L\u01b0u \u00fd  Ng\u01b0\u1eddi d\u00f9ng Windows n\u00ean ch\u1ecdn \u201cAdd python.exe Path\u201d (xem b\u00ean d\u01b0\u1edbi - t\u00f9y ch\u1ecdn n\u00e0y kh\u00f4ng \u0111\u01b0\u1ee3c ch\u1ecdn theo m\u1eb7c \u0111\u1ecbnh).    2.  B\u00e2y gi\u1edd chu\u1ea9n b\u1ecb cho Sketch m\u1edbi v\u00e0 c\u1ea5u h\u00ecnh cho vi\u1ec7c  n\u1ea1p firmware qua c\u1ed5ng n\u1ed1i ti\u1ebfp.   B\u1eaft \u0111\u1ea7u Arduino IDE v\u00e0 m\u1edf BasicOTA.ino Sketch s\u1eb5n, ph\u1ea7n File >  Examples > ArduinoOTA  C\u1eadp nh\u1eadt SSID v\u00e0 m\u1eadt kh\u1ea9u WiFi \u0111\u1ec3 ESP8266 c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i v\u00e0o m\u1ea1ng Wi-Fi c\u1ee7a b\u1ea1n  C\u00e1c th\u00f4ng s\u1ed1 c\u1ea5u h\u00ecnh t\u1ea3i l\u00ean nh\u01b0 b\u00ean d\u01b0\u1edbi (b\u1ea1n c\u00f3 th\u1ec3 c\u1ea7n ph\u1ea3i \u0111i\u1ec1u ch\u1ec9nh c\u1ea5u h\u00ecnh n\u1ebfu b\u1ea1n \u0111ang s\u1eed d\u1ee5ng c\u00e1c module ESP8266 kh\u00e1c):\n! [c\u1ea5u h\u00ecnh t\u1ea3i l\u00ean n\u1ed1i ti\u1ebfp] (../images/a-ota-serial-upload-configuration.png)    L\u01b0u \u00fd  T\u00f9y thu\u1ed9c v\u00e0o phi\u00ean b\u1ea3n c\u1ee7a g\u00f3i n\u1ec1n t\u1ea3ng v\u00e0 h\u1ed9i \u0111\u1ed3ng qu\u1ea3n tr\u1ecb m\u00e0 b\u1ea1n c\u00f3, b\u1ea1n c\u00f3 th\u1ec3 th\u1ea5y  Upload Using:   trong menu \u1edf tr\u00ean. T\u00f9y ch\u1ecdn n\u00e0y kh\u00f4ng ho\u1ea1t \u0111\u1ed9ng v\u00e0 n\u00f3 kh\u00f4ng quan tr\u1ecdng khi b\u1ea1n ch\u1ecdn. N\u00f3 \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ec3 l\u1ea1i cho ph\u00f9 h\u1ee3p v\u1edbi phi\u00ean b\u1ea3n c\u0169 c\u1ee7a OTA v\u00e0 s\u1ebd b\u1ecb lo\u1ea1i b\u1ecf trong phi\u00ean b\u1ea3n 2.2.0.   3.  N\u1ea1p Sketch (Ctrl + U). Sau khi th\u1ef1c hi\u1ec7n, m\u1edf ti\u1ebfp Serial Monitor (Ctrl + Shift + M) v\u00e0 ki\u1ec3m tra xem ESP8266 \u0111\u00e3 k\u1ebft n\u1ed1i v\u00e0o m\u1ea1ng Wi-Fi c\u1ee7a b\u1ea1n:   4.  Ch\u1ec9 khi module ESP8266 \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i v\u00e0o m\u1ea1ng, sau m\u1ed9t v\u00e0i gi\u00e2y, c\u1ed5ng esp8266-ota s\u1ebd hi\u1ec3n th\u1ecb trong Arduino IDE. Ch\u1ecdn c\u1ed5ng v\u1edbi \u0111\u1ecba ch\u1ec9 IP hi\u1ec7n t\u1ea1i hi\u1ec3n th\u1ecb tr\u00ean Serial Monitor trong b\u01b0\u1edbc tr\u01b0\u1edbc:   !!! note \u201cL\u01b0u \u00fd\u201d \n    N\u1ebfu c\u1ed5ng OTA kh\u00f4ng hi\u1ec7n l\u00ean, Tho\u00e1t kh\u1ea3oi Arduino IDE, m\u1edf n\u00f3 m\u1ed9t l\u1ea7n n\u1eefa v\u00e0 ki\u1ec3m tra l\u1ea1i. N\u1ebfu ho\u00e0n to\u00e0n kh\u00f4ng c\u00f3, thi\u1ebft l\u1eadp t\u01b0\u1eddng l\u1eeda c\u1ee7a b\u1ea1n.  5.  B\u00e2y gi\u1edd \u0111\u00e3 s\u1eb5n s\u00e0ng \u0111\u1ec3 c\u1eadp nh\u1eadt OTA \u0111\u1ea7u ti\u00ean c\u1ee7a b\u1ea1n b\u1eb1ng c\u00e1ch ch\u1ecdn c\u1ed5ng OTA:    L\u01b0u \u00fd  C\u00e1c m\u1ee5c tr\u00ecnh \u0111\u01a1n  Upload Speed:  kh\u00f4ng quan tr\u1ecdng v\u00e0o th\u1eddi \u0111i\u1ec3m n\u00e0y v\u00ec n\u00f3 li\u00ean quan \u0111\u1ebfn c\u1ed5ng n\u1ed1i ti\u1ebfp. Kh\u00f4ng c\u1ea7n ph\u1ea3i t\u00e1c \u0111\u1ed9ng   6.  N\u1ebfu b\u1ea1n \u0111\u00e3 ho\u00e0n th\u00e0nh t\u1ea5t c\u1ea3 c\u00e1c b\u01b0\u1edbc tr\u00ean, b\u1ea1n c\u00f3 th\u1ec3 t\u1ea3i l\u00ean (Ctrl + U) c\u00f9ng m\u1ed9t (ho\u1eb7c b\u1ea5t k\u1ef3) Sketch qua OTA:    L\u01b0u \u00fd  \u0110\u1ec3 c\u00f3 th\u1ec3 t\u1ea3i l\u00ean c\u00e1c b\u1ea3n Sketch c\u1ee7a b\u1ea1n nhi\u1ec1u l\u1ea7n h\u01a1n n\u1eefa s\u1eed d\u1ee5ng OTA, b\u1ea1n c\u1ea7n ph\u1ea3i s\u1eed d\u1ee5ng c\u00e1c h\u00e0m ph\u1ee5c v\u1ee5 OTA b\u00ean trong. Vui l\u00f2ng xem c\u00e1ch s\u1eed d\u1ee5ng BasicOTA.ino nh\u01b0 l\u00e0 m\u1ed9t v\u00ed d\u1ee5.",
            "title": "V\u00ed d\u1ee5 \u1ee9ng d\u1ee5ng"
        },
        {
            "location": "/arduino/ota/using-arduino-ide/#bao-ve-mat-khau",
            "text": "B\u1ea3o v\u1ec7 c\u1eadp nh\u1eadt OTA v\u1edbi m\u1eadt kh\u1ea9u kh\u00e1 \u0111\u01a1n gi\u1ea3n. T\u1ea5t c\u1ea3 vi\u1ec7c c\u1ea7n l\u00e0m l\u00e0 s\u1eed d\u1ee5ng \u0111o\u1ea1n code sau trong m\u00e3 Sketch:  ArduinoOTA.setPassword ((const char *) \"123\");  V\u1edbi  123  l\u00e0 m\u1ed9t m\u1eadt kh\u1ea9u m\u1eabu c\u1ea7n \u0111\u01b0\u1ee3c thay th\u1ebf cho \u1ee9ng d\u1ee5ng c\u1ee7a b\u1ea1n.  Tr\u01b0\u1edbc khi th\u1ef1c hi\u1ec7n n\u00f3 trong Sketch, B\u1ea1n c\u00f3 th\u1ec3 th\u1eed nghi\u1ec7m ho\u1ea1t \u0111\u1ed9ng OTA b\u1eb1ng vi\u1ec7c m\u1edf Sketch m\u1eabu  BasicOTA.ino  trong  File > Examples > ArduinoOTA .  Ti\u1ebfp theo, m\u1edf  BasicOTA.ino , b\u1ecf comment ph\u00eda tr\u01b0\u1edbc ph\u1ea7n c\u1ea5u h\u00ecnh m\u1eadt kh\u1ea7u (m\u00f4 t\u1ea3 b\u00ean tr\u00ean). \u0110\u1ec3 x\u1eed l\u00fd c\u00e1c tr\u01b0\u1eddng h\u1ee3p l\u1ed7i d\u1ec5 d\u00e0ng h\u01a1n, kh\u00f4ng n\u00ean s\u1eeda \u0111\u1ed5i m\u1eabu Sketch ngo\u00e0i tr\u1eeb c\u00e1c y\u00eau c\u1ea7u c\u1ea7n thi\u1ebft. Bao g\u1ed3m vi\u1ec7c \u0111\u01a1n gi\u1ea3n l\u00e0 s\u1eeda m\u1eadt kh\u1ea9u OTA  123   th\u00e0nh m\u1eadt kh\u1ea9u c\u1ee7a b\u1ea1n. R\u1ed3i c\u1eadp nh\u1eadt l\u00ean \u1ee9ng d\u1ee5ng s\u1eed d\u1ee5ng OTA. Khi b\u1ea1n b\u1eaft \u0111\u1ea7u c\u1eadp nh\u1eadt OTA, s\u1ebd hi\u1ec7n ra khung h\u1ecfi m\u1eadt kh\u1ea9u nh\u01b0 b\u00ean d\u01b0\u1edbi:   Nh\u1eadp m\u1eadt kh\u1ea9u v\u00e0 t\u1ea3i l\u00ean n\u00ean b\u1eaft \u0111\u1ea7u nh\u01b0 b\u00ecnh th\u01b0\u1eddng, ch\u1ec9 kh\u00e1c l\u00fac tr\u01b0\u1edbc l\u00e0 c\u00f3 th\u00eam d\u00f2ng  Authenticating ...OK  trong c\u1eeda s\u1ed5 log.   B\u1ea1n s\u1ebd kh\u00f4ng b\u1ecb h\u1ecfi m\u1eadt kh\u1ea3u cho l\u1ea7n sau. Arduino IDE s\u1ebd nh\u1edb n\u00f3 cho b\u1ea1n. B\u1ea1n ch\u1ec9 th\u1ea5y d\u1ea5u khung h\u1ecfi m\u1eadt kh\u1ea9u ch\u1ec9 khi m\u1edf l\u1ea1i IDE, ho\u1eb7c n\u1ebfu b\u1ea1n thay \u0111\u1ed5i n\u00f3 trong Sketch c\u1ee7a b\u1ea1n, t\u1ea3i l\u00ean c\u00e1c b\u1ea3n ph\u00e1c th\u1ea3o v\u00e0 sau \u0111\u00f3 t\u1ea3i n\u00f3 l\u00ean m\u1ed9t l\u1ea7n n\u1eefa.   L\u01b0u \u00fd  Ho\u00e0n to\u00e0n c\u00f3 kh\u1ea3 n\u0103ng xem l\u1ea1i m\u1eadt kh\u1ea9u c\u1ee7a l\u1ea7n c\u1eadp nh\u1eadt tr\u01b0\u1edbc b\u1edfi Arduino IDE, n\u1ebfu IDE kh\u00f4ng b\u1ecb \u0111\u00f3ng k\u1ec3 t\u1eeb l\u1ea7n c\u1eadp nh\u1eadt sau c\u00f9ng. \u0110\u1ec3 th\u1ea5y \u0111\u01b0\u1ee3c m\u1eadt kh\u1ea9u trong c\u1eeda s\u1ed5 Log, th\u1ef1c hi\u1ec7n nh\u01b0 sau: Cho ph\u00e9p  Show verbose output during: upload  trong  File > Preferences  v\u00e0 th\u1ef1c hi\u1ec7n vi\u1ec7c c\u1eadp nh\u1eadt l\u1ea1i.    H\u00ecnh \u1ea3nh tr\u00ean cho th\u1ea5y m\u1eadt kh\u1ea9u l\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c nh\u00ecn th\u1ea5y trong Log v\u00e0 n\u00f3 \u0111\u01b0\u1ee3c g\u00e1n cho file  espota.py  \u0111\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c t\u1ea3i firmware.  V\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y cho th\u1ea5y t\u00ecnh hu\u1ed1ng khi m\u1eadt kh\u1ea9u \u0111\u01b0\u1ee3c thay \u0111\u1ed5i gi\u1eefa c\u00e1c l\u1ea7n c\u1eadp nh\u1eadt.    Khi th\u1ef1c hi\u1ec7n c\u1eadp nh\u1eadt, Arduino IDE s\u1eed d\u1ee5ng m\u1eadt kh\u1ea9u \u0111\u00e3 nh\u1eadp tr\u01b0\u1edbc \u0111\u00f3, v\u00ec v\u1eady khi kh\u00f4ng th\u00e0nh c\u00f4ng v\u00e0 s\u1ebd b\u00e1o c\u00e1o r\u00f5 r\u00e0ng b\u1edfi IDE, IDE s\u1ebd nh\u1eafc b\u1ea1n nh\u1eadp m\u1eadt kh\u1ea9u m\u1edbi v\u00e0 d\u00f9ng n\u00f3 \u0111\u1ec3 th\u1ef1c hi\u1ec7n l\u1ea1i vi\u1ec7c c\u1eadp nh\u1eadt, \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o th\u00e0nh c\u00f4ng.",
            "title": "B\u1ea3o v\u1ec7 m\u1eadt kh\u1ea9u"
        },
        {
            "location": "/arduino/ota/using-arduino-ide/#giai-quyet-cac-loi-thuong-gap",
            "text": "N\u1ebfu OTA c\u1eadp nh\u1eadt th\u1ea5t b\u1ea1i, b\u01b0\u1edbc \u0111\u1ea7u ti\u00ean l\u00e0 ki\u1ec3m tra c\u00e1c th\u00f4ng b\u00e1o l\u1ed7i \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb trong c\u1eeda s\u1ed5 Log c\u1ee7a Arduino IDE. N\u1ebfu n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c cung c\u1ea5p \u0111\u01b0\u1ee3c b\u1ea5t k\u1ef3 g\u1ee3i \u00fd h\u1eefu \u00edch n\u00e0o, th\u1eed c\u1eadp nh\u1eadt OTA m\u1ed9t l\u1ea7n n\u1eefa trong khi ki\u1ec3m tra th\u00f4ng tin t\u1eeb ESP8266 \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n tr\u00ean c\u1ed5ng Serial. Serial Port Monitor t\u1eeb IDE s\u1ebd kh\u00f4ng h\u1eefu \u00edch trong tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3. Khi c\u1ed1 g\u1eafng \u0111\u1ec3 m\u1edf n\u00f3, b\u1ea1n c\u00f3 th\u1ec3 s\u1ebd th\u1ea5y nh\u01b0 sau:   C\u1eeda s\u1ed5 n\u00e0y l\u00e0 d\u00e0nh cho Arduino Yun v\u00e0 ch\u01b0a n\u00e2ng c\u1ea5p cho esp8266/Arduino. N\u00f3 hi\u1ec3n th\u1ecb b\u1edfi v\u00ec IDE \u0111ang c\u1ed1 m\u1edf ti\u1ebfp s\u1ed5 Serial Monitor s\u1eed d\u1ee5ng c\u1ed5ng Network m\u00e0 b\u1ea1n \u0111\u00e3 ch\u1ecdn \u0111\u1ec3 t\u1ea3i l\u00ean OTA.  Thay v\u00e0o \u0111\u00f3 b\u1ea1n c\u1ea7n m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh Serial Port Monitor  b\u00ean ngo\u00e0i. N\u1ebfu b\u1ea1n l\u00e0 ng\u01b0\u1eddi d\u00f9ng Windows, h\u00e3y xem qua  Termite . Kh\u00e1 ti\u1ec7n d\u1ee5ng, th\u00fa v\u1ecb v\u00e0 \u0111\u01a1n gi\u1ea3n, s\u1eed d\u1ee5ng cho thi\u1ebft b\u1ecb \u0111\u1ea7u cu\u1ed1i RS232 m\u00e0 kh\u00f4ng \u00e1p \u0111\u1eb7t \u0111i\u1ec1u khi\u1ec3n flow control RTS ho\u1eb7c DTR. Vi\u1ec7c s\u1eed d\u1ee5ng flow control cho c\u1ed5ng Serial c\u00f3 th\u1ec3 g\u00e2y ra v\u1ea5n \u0111\u1ec1 chuy\u1ec3n m\u1ee9c t\u00edn hi\u1ec7u GPIO0 v\u00e0 RESET ch\u00e2n tr\u00ean ESP8266.   Ch\u1ecdn c\u1ed5ng COM v\u00e0 t\u1ed1c \u0111\u1ed9 truy\u1ec1n tr\u00ean ch\u01b0\u01a1ng tr\u00ecnh Serial Port Monitor nh\u01b0 khi b\u1ea1n \u0111ang s\u1eed d\u1ee5ng Arduino Serial Monitor. Xem c\u00e1c thi\u1ebft l\u1eadp ti\u00eau bi\u1ec3u cho  Termite  d\u01b0\u1edbi \u0111\u00e2y:   Sau \u0111\u00f3 ch\u1ea1y OTA t\u1eeb IDE v\u00e0 nh\u00ecn nh\u1eefng g\u00ec \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb tr\u00ean Serial Port Terminal. Ti\u1ebfn t\u00ecnh   ArduinoOTA  th\u00e0nh c\u00f4ng s\u1eed d\u1ee5ng BasicOTA.ino Sketch nh\u00ecn nh\u01b0 b\u00ean d\u01b0\u1edbi (\u0111\u1ecba ch\u1ec9 IP ph\u1ee5 thu\u1ed9c v\u00e0o c\u1ea5u h\u00ecnh m\u1ea1ng c\u1ee7a b\u1ea1n):   N\u1ebfu c\u1eadp nh\u1eadt b\u1ecb l\u1ed7i b\u1ea1n s\u1ebd mu\u1ed1n nh\u00ecn th\u1ea5y nguy\u00ean nh\u00e2n b\u1edfi tr\u00ecnh t\u1ea3i l\u00ean, exception v\u00e0 stack dump, ho\u1eb7c c\u1ea3 2   C\u00e1c nguy\u00ean nh\u00e2n ph\u1ed5 bi\u1ebfn nh\u1ea5t g\u00e2y th\u1ea5t b\u1ea1i cho vi\u1ec7c c\u1eadp nh\u1eadt OTA nh\u01b0 sau:   Kh\u00f4ng \u0111\u1ee7 b\u1ed9 nh\u1edb Flash tr\u00ean chip (v\u00ed d\u1ee5 nh\u01b0 ESP01 v\u1edbi b\u1ed9 nh\u1edb flash 512K l\u00e0 kh\u00f4ng \u0111\u1ee7 cho OTA),  \u0110\u1ecbnh ngh\u0129a b\u1ed9 nh\u1edd Flash qu\u00e1 nhi\u1ec1u cho SPIFFS, Sketch m\u1edbi s\u1ebd kh\u00f4ng kh\u1edbp v\u1edbi Sketch c\u0169 v\u00e0 SPIFFS - xem [C\u1eadp nh\u1eadt qu\u00e1 tr\u00ecnh - xem b\u1ed9 nh\u1edb] #update-process\u2014memory-view),  Qu\u00e1 \u00edt b\u1ed9 nh\u1edb Flash \u0111\u01b0\u1ee3c khai b\u00e1o trong Arduino IDE cho board c\u1ee7a b\u1ea1n (t\u1ee9c l\u00e0 \u00edt h\u01a1n so v\u1edbi k\u00edch th\u01b0\u1edbc v\u1eadt l\u00fd).    \u0110\u1ec3 bi\u1ebft th\u00eam chi ti\u1ebft v\u1ec1 c\u00e1ch b\u1ed1 tr\u00ed b\u1ed9 nh\u1edb flash xin vui l\u00f2ng ki\u1ec3m tra  Filesystem .\nT\u1ed5ng quan v\u1ec1 n\u01a1i Sketch m\u1edbi \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef, l\u00e0m th\u1ebf n\u00e0o n\u00f3 \u0111\u01b0\u1ee3c sao ch\u00e9p v\u00e0 t\u1ed5 ch\u1ee9c  b\u1ed9 nh\u1edb cho m\u1ee5c \u0111\u00edch OTA xem nh\u01b0 th\u1ebf n\u00e0o, xem  Ti\u1ebfn tr\u00ecnh c\u1eadp nh\u1eadt - Memory view .",
            "title": "Gi\u1ea3i quy\u1ebft c\u00e1c l\u1ed7i th\u01b0\u1eddng g\u1eb7p"
        },
        {
            "location": "/arduino/ota/using-web-browser/",
            "text": "Tr\u00ecnh duy\u1ec7t Web\n#\n\n\nUpdates described in this chapter are done with a web browser that can be useful in the following typical scenarios:\n\n\n\n\nafter application deployment if loading directly from Arduino IDE is inconvenient or not possible\n\n\nafter deployment if user is unable to expose module for OTA from external update server\n\n\nto provide updates after deployment to small quantity of modules when setting an update server is not practicable\n\n\n\n\nRequirements\n#\n\n\n\n\nThe ESP and the computer must be connected to the same network.\n\n\n\n\nImplementation Overview\n#\n\n\nUpdates with a web browser are implemented using \nESP8266HTTPUpdateServer\n class together with \nESP8266WebServer\n and \nESP8266mDNS\n classes. The following code is required to get it work:\n\n\nsetup()\n\n\n    MDNS.begin(host);\n\n    httpUpdater.setup(&httpServer);\n    httpServer.begin();\n\n    MDNS.addService(\"http\", \"tcp\", 80);\n\n\n\n\nloop()\n\n\n    httpServer.handleClient();\n\n\n\n\nApplication Example\n#\n\n\nThe sample implementation provided below has been done using:\n\n\n\n\nexample sketch WebUpdater.ino available in \nESP8266HTTPUpdateServer\n library\n\n\nNodeMCU 1.0 (ESP-12E Module)\n\n\n\n\nYou can use another module if it meets previously desribed \nrequirements\n.\n\n\n\n\n\n\nBefore you begin, please make sure that you have the following software installed:\n\n\n\n\nArduino IDE and 2.0.0-rc1 (of Nov 17, 2015) version of platform package as described under \nC\u00e0i \u0111\u1eb7t\n\n\nHost software depending on O/S you use:\n\n\nAvahi http://avahi.org/ for Linux\n\n\nBonjour http://www.apple.com/support/bonjour/ for Windows\n\n\nMac OSX and iOS - support is already built in / no any extra s/w is required\n\n\n\n\n\n\n\n\n\n\n\n\nPrepare the sketch and configuration for initial upload with a serial port.\n\n\n\n\nStart Arduino IDE and load sketch WebUpdater.ino available under File > Examples > ESP8266HTTPUpdateServer.\n\n\nUpdate SSID and password in the sketch so the module can join your Wi-Fi network.\n\n\n\n\nOpen File > Preferences, look for \u201cShow verbose output during:\u201d and check out \u201ccompilation\u201d option.\n\n\n\n\nNote:\n This setting will be required in step 5 below. You can uncheck this setting afterwards.\n\n\n\n\n\n\n\n\n\n\nUpload sketch (Ctrl+U). Once done open Serial Monitor (Ctrl+Shift+M) and check if you see the following message displayed, that contains url for OTA update.\n\n\n\n\nNote:\n Such message will be shown only after module successfully joins network and is ready for an OTA upload.\n\n\n\n\n\n\nNow open web browser and enter the url provided on Serial Monitor, i.e. http://esp8266-webupdate.local/update. Once entered, browser should display a form like below that has been served by your module. The form invites you to choose a file for update.\n\n\n\n\nNote:\n If entering \nhttp://esp8266-webupdate.local/update\n does not work, try replacing \nesp8266-webupdate\n with module\u2019s IP address. For example, if your module IP is \n192.168.1.100\n then url should be \nhttp://192.168.1.100/update\n. This workaround is useful in case the host software installed in step 2 does not work. If still nothing works and there are no clues on Serial Monitor, try to diagnose issue by opening provided url in Google Chrome, pressing F12 and checking contents of \u201cConsole\u201d and \u201cNetwork\u201d tabs. Chrome provides some advanced logging on these tabs.\n\n\n\n\n\n\nTo obtain the file navigate to directory used by Arduino IDE to store results of compilation. You can check the path to this file in compilation log shown in IDE debug window as marked below.\n\n\n\n\n\n\n\n\nNow press \u201cChoose File\u201d in web browser, go to directory identified in step 5 above, find the file \u201cWebUpdater.cpp.bin\u201d and upload it. If upload is successful you will see \u201cOK\u201d on web browser like below.\n\n\n\n\nModule will reboot that should be visible on Serial Monitor:\n\n\n\n\nJust after reboot you should see exactly the same message \nHTTPUpdateServer ready! Open http:// esp8266-webupdate.local /update in your browser\n like in step 3. This is because module has been loaded again with the same code \u2013 first using serial port, and then using OTA.\n\n\n\n\n\n\nOnce you are comfortable with this procedure go ahead and modify WebUpdater.ino sketch to print some additional messages, compile it, locate new binary file and upload it using web browser to see entered changes on a Serial Monitor.\n\n\nYou can also add OTA routines to your own sketch following guidelines in \nImplementation Overview\n above. If this is done correctly you should be always able to upload new sketch over the previous one using a web browser.\n\n\nIn case OTA update fails dead after entering modifications in your sketch, you can always recover module by loading it over a serial port. Then diagnose the issue with sketch using Serial Monitor. Once the issue is fixed try OTA again.",
            "title": "S\u1eed d\u1ee5ng tr\u00ecnh duy\u1ec7t"
        },
        {
            "location": "/arduino/ota/using-web-browser/#trinh-duyet-web",
            "text": "Updates described in this chapter are done with a web browser that can be useful in the following typical scenarios:   after application deployment if loading directly from Arduino IDE is inconvenient or not possible  after deployment if user is unable to expose module for OTA from external update server  to provide updates after deployment to small quantity of modules when setting an update server is not practicable",
            "title": "Tr\u00ecnh duy\u1ec7t Web"
        },
        {
            "location": "/arduino/ota/using-web-browser/#requirements",
            "text": "The ESP and the computer must be connected to the same network.",
            "title": "Requirements"
        },
        {
            "location": "/arduino/ota/using-web-browser/#implementation-overview",
            "text": "Updates with a web browser are implemented using  ESP8266HTTPUpdateServer  class together with  ESP8266WebServer  and  ESP8266mDNS  classes. The following code is required to get it work:  setup()      MDNS.begin(host);\n\n    httpUpdater.setup(&httpServer);\n    httpServer.begin();\n\n    MDNS.addService(\"http\", \"tcp\", 80);  loop()      httpServer.handleClient();",
            "title": "Implementation Overview"
        },
        {
            "location": "/arduino/ota/using-web-browser/#application-example",
            "text": "The sample implementation provided below has been done using:   example sketch WebUpdater.ino available in  ESP8266HTTPUpdateServer  library  NodeMCU 1.0 (ESP-12E Module)   You can use another module if it meets previously desribed  requirements .    Before you begin, please make sure that you have the following software installed:   Arduino IDE and 2.0.0-rc1 (of Nov 17, 2015) version of platform package as described under  C\u00e0i \u0111\u1eb7t  Host software depending on O/S you use:  Avahi http://avahi.org/ for Linux  Bonjour http://www.apple.com/support/bonjour/ for Windows  Mac OSX and iOS - support is already built in / no any extra s/w is required       Prepare the sketch and configuration for initial upload with a serial port.   Start Arduino IDE and load sketch WebUpdater.ino available under File > Examples > ESP8266HTTPUpdateServer.  Update SSID and password in the sketch so the module can join your Wi-Fi network.   Open File > Preferences, look for \u201cShow verbose output during:\u201d and check out \u201ccompilation\u201d option.   Note:  This setting will be required in step 5 below. You can uncheck this setting afterwards.      Upload sketch (Ctrl+U). Once done open Serial Monitor (Ctrl+Shift+M) and check if you see the following message displayed, that contains url for OTA update.   Note:  Such message will be shown only after module successfully joins network and is ready for an OTA upload.    Now open web browser and enter the url provided on Serial Monitor, i.e. http://esp8266-webupdate.local/update. Once entered, browser should display a form like below that has been served by your module. The form invites you to choose a file for update.   Note:  If entering  http://esp8266-webupdate.local/update  does not work, try replacing  esp8266-webupdate  with module\u2019s IP address. For example, if your module IP is  192.168.1.100  then url should be  http://192.168.1.100/update . This workaround is useful in case the host software installed in step 2 does not work. If still nothing works and there are no clues on Serial Monitor, try to diagnose issue by opening provided url in Google Chrome, pressing F12 and checking contents of \u201cConsole\u201d and \u201cNetwork\u201d tabs. Chrome provides some advanced logging on these tabs.    To obtain the file navigate to directory used by Arduino IDE to store results of compilation. You can check the path to this file in compilation log shown in IDE debug window as marked below.     Now press \u201cChoose File\u201d in web browser, go to directory identified in step 5 above, find the file \u201cWebUpdater.cpp.bin\u201d and upload it. If upload is successful you will see \u201cOK\u201d on web browser like below.   Module will reboot that should be visible on Serial Monitor:   Just after reboot you should see exactly the same message  HTTPUpdateServer ready! Open http:// esp8266-webupdate.local /update in your browser  like in step 3. This is because module has been loaded again with the same code \u2013 first using serial port, and then using OTA.    Once you are comfortable with this procedure go ahead and modify WebUpdater.ino sketch to print some additional messages, compile it, locate new binary file and upload it using web browser to see entered changes on a Serial Monitor.  You can also add OTA routines to your own sketch following guidelines in  Implementation Overview  above. If this is done correctly you should be always able to upload new sketch over the previous one using a web browser.  In case OTA update fails dead after entering modifications in your sketch, you can always recover module by loading it over a serial port. Then diagnose the issue with sketch using Serial Monitor. Once the issue is fixed try OTA again.",
            "title": "Application Example"
        },
        {
            "location": "/arduino/ota/using-http-server/",
            "text": "HTTP Server\n#\n\n\nClass \nESPhttpUpdate\n c\u00f3 th\u1ec3 ki\u1ec3m c\u1eadp nh\u1eadt v\u00e0 t\u00e0i Binary t\u1eeb HTTP Webserver.\nHo\u00e0n to\u00e0n c\u00f3 th\u1ec3 t\u1ea3i t\u1eeb IP hay domain th\u00f4ng qua m\u1ea1ng Internet.\n\n\nY\u00eau c\u1ea7u\n#\n\n\n\n\nWeb Server\n\n\n\n\nArduino code\n#\n\n\nC\u1eadp nh\u1eadt \u0111\u01a1n gi\u1ea3n\n#\n\n\nCh\u1ec9 c\u1ea7n th\u1ef1c hi\u1ec7n h\u00e0m sau s\u1ebd t\u1ea3i file firmware v\u00e0 c\u1eadp nh\u1eadt.\n\n\nESPhttpUpdate.update(\"192.168.0.2\", 80, \"/arduino.bin\");\n\n\n\n\nAdvanced updater\n#\n\n\nIts possible to point update function to a script at the server.\nIf version string argument is given, it will be sent to the server.\nServer side script can use this to check if update should be performed.\n\n\nServer side script can respond as follows:\n- response code 200, and send the firmware image,\n- or response code 304 to notify ESP that no update is required.\n\n\nt_httpUpdate_return ret = ESPhttpUpdate.update(\"192.168.0.2\", 80, \"/esp/update/arduino.php\", \"optional current version string here\");\nswitch(ret) {\n    case HTTP_UPDATE_FAILED:\n        Serial.println(\"[update] Update failed.\");\n        break;\n    case HTTP_UPDATE_NO_UPDATES:\n        Serial.println(\"[update] Update no Update.\");\n        break;\n    case HTTP_UPDATE_OK:\n        Serial.println(\"[update] Update ok.\"); // may not called we reboot the ESP\n        break;\n}\n\n\n\n\nServer request handling\n#\n\n\nSimple updater\n#\n\n\nFor the simple updater the server only needs to deliver the binary file for update.\n\n\nAdvanced updater\n#\n\n\nFor advanced update management a script needs to run at the server side, for example a PHP script.\nAt every update request the ESP sends some information in HTTP headers to the server.\n\n\nExample header data:\n\n\n    [HTTP_USER_AGENT] => ESP8266-http-Update\n    [HTTP_X_ESP8266_STA_MAC] => 18:FE:AA:AA:AA:AA\n    [HTTP_X_ESP8266_AP_MAC] => 1A:FE:AA:AA:AA:AA\n    [HTTP_X_ESP8266_FREE_SPACE] => 671744\n    [HTTP_X_ESP8266_SKETCH_SIZE] => 373940\n    [HTTP_X_ESP8266_SKETCH_MD5] => a56f8ef78a0bebd812f62067daf1408a\n    [HTTP_X_ESP8266_CHIP_SIZE] => 4194304\n    [HTTP_X_ESP8266_SDK_VERSION] => 1.3.0\n    [HTTP_X_ESP8266_VERSION] => DOOR-7-g14f53a19\n\n\n\n\nWith this information the script now can check if an update is needed. It is also possible to deliver different binaries based on the MAC address for example.\n\n\nScript example:\n\n\n<?PHP\n\nheader('Content-type: text/plain; charset=utf8', true);\n\nfunction check_header($name, $value = false) {\n    if(!isset($_SERVER[$name])) {\n        return false;\n    }\n    if($value && $_SERVER[$name] != $value) {\n        return false;\n    }\n    return true;\n}\n\nfunction sendFile($path) {\n    header($_SERVER[\"SERVER_PROTOCOL\"].' 200 OK', true, 200);\n    header('Content-Type: application/octet-stream', true);\n    header('Content-Disposition: attachment; filename='.basename($path));\n    header('Content-Length: '.filesize($path), true);\n    header('x-MD5: '.md5_file($path), true);\n    readfile($path);\n}\n\nif(!check_header('HTTP_USER_AGENT', 'ESP8266-http-Update')) {\n    header($_SERVER[\"SERVER_PROTOCOL\"].' 403 Forbidden', true, 403);\n    echo \"only for ESP8266 updater!\\n\";\n    exit();\n}\n\nif(\n    !check_header('HTTP_X_ESP8266_STA_MAC') ||\n    !check_header('HTTP_X_ESP8266_AP_MAC') ||\n    !check_header('HTTP_X_ESP8266_FREE_SPACE') ||\n    !check_header('HTTP_X_ESP8266_SKETCH_SIZE') ||\n    !check_header('HTTP_X_ESP8266_SKETCH_MD5') ||\n    !check_header('HTTP_X_ESP8266_CHIP_SIZE') ||\n    !check_header('HTTP_X_ESP8266_SDK_VERSION')\n) {\n    header($_SERVER[\"SERVER_PROTOCOL\"].' 403 Forbidden', true, 403);\n    echo \"only for ESP8266 updater! (header)\\n\";\n    exit();\n}\n\n$db = array(\n    \"18:FE:AA:AA:AA:AA\" => \"DOOR-7-g14f53a19\",\n    \"18:FE:AA:AA:AA:BB\" => \"TEMP-1.0.0\"\n);\n\nif(!isset($db[$_SERVER['HTTP_X_ESP8266_STA_MAC']])) {\n    header($_SERVER[\"SERVER_PROTOCOL\"].' 500 ESP MAC not configured for updates', true, 500);\n}\n\n$localBinary = \"./bin/\".$db[$_SERVER['HTTP_X_ESP8266_STA_MAC']].\".bin\";\n\n// Check if version has been set and does not match, if not, check if\n// MD5 hash between local binary and ESP8266 binary do not match if not.\n// then no update has been found.\nif((!check_header('HTTP_X_ESP8266_SDK_VERSION') && $db[$_SERVER['HTTP_X_ESP8266_STA_MAC']] != $_SERVER['HTTP_X_ESP8266_VERSION'])\n    || $_SERVER[\"HTTP_X_ESP8266_SKETCH_MD5\"] != md5_file($localBinary)) {\n    sendFile($localBinary);\n} else {\n    header($_SERVER[\"SERVER_PROTOCOL\"].' 304 Not Modified', true, 304);\n}\n\nheader($_SERVER[\"SERVER_PROTOCOL\"].' 500 no version for ESP MAC', true, 500);",
            "title": "S\u1eed d\u1ee5ng HTTP Server"
        },
        {
            "location": "/arduino/ota/using-http-server/#http-server",
            "text": "Class  ESPhttpUpdate  c\u00f3 th\u1ec3 ki\u1ec3m c\u1eadp nh\u1eadt v\u00e0 t\u00e0i Binary t\u1eeb HTTP Webserver.\nHo\u00e0n to\u00e0n c\u00f3 th\u1ec3 t\u1ea3i t\u1eeb IP hay domain th\u00f4ng qua m\u1ea1ng Internet.",
            "title": "HTTP Server"
        },
        {
            "location": "/arduino/ota/using-http-server/#yeu-cau",
            "text": "Web Server",
            "title": "Y\u00eau c\u1ea7u"
        },
        {
            "location": "/arduino/ota/using-http-server/#arduino-code",
            "text": "",
            "title": "Arduino code"
        },
        {
            "location": "/arduino/ota/using-http-server/#cap-nhat-on-gian",
            "text": "Ch\u1ec9 c\u1ea7n th\u1ef1c hi\u1ec7n h\u00e0m sau s\u1ebd t\u1ea3i file firmware v\u00e0 c\u1eadp nh\u1eadt.  ESPhttpUpdate.update(\"192.168.0.2\", 80, \"/arduino.bin\");",
            "title": "C\u1eadp nh\u1eadt \u0111\u01a1n gi\u1ea3n"
        },
        {
            "location": "/arduino/ota/using-http-server/#advanced-updater",
            "text": "Its possible to point update function to a script at the server.\nIf version string argument is given, it will be sent to the server.\nServer side script can use this to check if update should be performed.  Server side script can respond as follows:\n- response code 200, and send the firmware image,\n- or response code 304 to notify ESP that no update is required.  t_httpUpdate_return ret = ESPhttpUpdate.update(\"192.168.0.2\", 80, \"/esp/update/arduino.php\", \"optional current version string here\");\nswitch(ret) {\n    case HTTP_UPDATE_FAILED:\n        Serial.println(\"[update] Update failed.\");\n        break;\n    case HTTP_UPDATE_NO_UPDATES:\n        Serial.println(\"[update] Update no Update.\");\n        break;\n    case HTTP_UPDATE_OK:\n        Serial.println(\"[update] Update ok.\"); // may not called we reboot the ESP\n        break;\n}",
            "title": "Advanced updater"
        },
        {
            "location": "/arduino/ota/using-http-server/#server-request-handling",
            "text": "",
            "title": "Server request handling"
        },
        {
            "location": "/arduino/ota/using-http-server/#simple-updater",
            "text": "For the simple updater the server only needs to deliver the binary file for update.",
            "title": "Simple updater"
        },
        {
            "location": "/arduino/ota/using-http-server/#advanced-updater_1",
            "text": "For advanced update management a script needs to run at the server side, for example a PHP script.\nAt every update request the ESP sends some information in HTTP headers to the server.  Example header data:      [HTTP_USER_AGENT] => ESP8266-http-Update\n    [HTTP_X_ESP8266_STA_MAC] => 18:FE:AA:AA:AA:AA\n    [HTTP_X_ESP8266_AP_MAC] => 1A:FE:AA:AA:AA:AA\n    [HTTP_X_ESP8266_FREE_SPACE] => 671744\n    [HTTP_X_ESP8266_SKETCH_SIZE] => 373940\n    [HTTP_X_ESP8266_SKETCH_MD5] => a56f8ef78a0bebd812f62067daf1408a\n    [HTTP_X_ESP8266_CHIP_SIZE] => 4194304\n    [HTTP_X_ESP8266_SDK_VERSION] => 1.3.0\n    [HTTP_X_ESP8266_VERSION] => DOOR-7-g14f53a19  With this information the script now can check if an update is needed. It is also possible to deliver different binaries based on the MAC address for example.  Script example:  <?PHP\n\nheader('Content-type: text/plain; charset=utf8', true);\n\nfunction check_header($name, $value = false) {\n    if(!isset($_SERVER[$name])) {\n        return false;\n    }\n    if($value && $_SERVER[$name] != $value) {\n        return false;\n    }\n    return true;\n}\n\nfunction sendFile($path) {\n    header($_SERVER[\"SERVER_PROTOCOL\"].' 200 OK', true, 200);\n    header('Content-Type: application/octet-stream', true);\n    header('Content-Disposition: attachment; filename='.basename($path));\n    header('Content-Length: '.filesize($path), true);\n    header('x-MD5: '.md5_file($path), true);\n    readfile($path);\n}\n\nif(!check_header('HTTP_USER_AGENT', 'ESP8266-http-Update')) {\n    header($_SERVER[\"SERVER_PROTOCOL\"].' 403 Forbidden', true, 403);\n    echo \"only for ESP8266 updater!\\n\";\n    exit();\n}\n\nif(\n    !check_header('HTTP_X_ESP8266_STA_MAC') ||\n    !check_header('HTTP_X_ESP8266_AP_MAC') ||\n    !check_header('HTTP_X_ESP8266_FREE_SPACE') ||\n    !check_header('HTTP_X_ESP8266_SKETCH_SIZE') ||\n    !check_header('HTTP_X_ESP8266_SKETCH_MD5') ||\n    !check_header('HTTP_X_ESP8266_CHIP_SIZE') ||\n    !check_header('HTTP_X_ESP8266_SDK_VERSION')\n) {\n    header($_SERVER[\"SERVER_PROTOCOL\"].' 403 Forbidden', true, 403);\n    echo \"only for ESP8266 updater! (header)\\n\";\n    exit();\n}\n\n$db = array(\n    \"18:FE:AA:AA:AA:AA\" => \"DOOR-7-g14f53a19\",\n    \"18:FE:AA:AA:AA:BB\" => \"TEMP-1.0.0\"\n);\n\nif(!isset($db[$_SERVER['HTTP_X_ESP8266_STA_MAC']])) {\n    header($_SERVER[\"SERVER_PROTOCOL\"].' 500 ESP MAC not configured for updates', true, 500);\n}\n\n$localBinary = \"./bin/\".$db[$_SERVER['HTTP_X_ESP8266_STA_MAC']].\".bin\";\n\n// Check if version has been set and does not match, if not, check if\n// MD5 hash between local binary and ESP8266 binary do not match if not.\n// then no update has been found.\nif((!check_header('HTTP_X_ESP8266_SDK_VERSION') && $db[$_SERVER['HTTP_X_ESP8266_STA_MAC']] != $_SERVER['HTTP_X_ESP8266_VERSION'])\n    || $_SERVER[\"HTTP_X_ESP8266_SKETCH_MD5\"] != md5_file($localBinary)) {\n    sendFile($localBinary);\n} else {\n    header($_SERVER[\"SERVER_PROTOCOL\"].' 304 Not Modified', true, 304);\n}\n\nheader($_SERVER[\"SERVER_PROTOCOL\"].' 500 no version for ESP MAC', true, 500);",
            "title": "Advanced updater"
        },
        {
            "location": "/arduino/projects/list/",
            "text": "Danh s\u00e1ch c\u00e1c d\u1ef1 \u00e1n\n\n\n\n\n\n\nDanh s\u00e1ch c\u00e1c d\u1ef1 \u00e1n\n#",
            "title": "Danh s\u00e1ch"
        },
        {
            "location": "/arduino/projects/list/#danh-sach-cac-du-an",
            "text": "",
            "title": "Danh s\u00e1ch c\u00e1c d\u1ef1 \u00e1n"
        },
        {
            "location": "/arduino/projects/smartconfig-react-native/",
            "text": "ESP8266 smartconfig v\u1edbi react-native\n#",
            "title": "Smartconfig & react-native"
        },
        {
            "location": "/arduino/projects/smartconfig-react-native/#esp8266-smartconfig-voi-react-native",
            "text": "",
            "title": "ESP8266 smartconfig v\u1edbi react-native"
        },
        {
            "location": "/arduino/projects/smartplug-slack/",
            "text": "Noduino Smart Plug \u0111i\u1ec1u khi\u1ec3n b\u1edfi Slack\n\n\nC\u1ea7n chu\u1ea9n b\u1ecb\n\n\nM\u1ee5c \u0111\u00edch c\u1ee7a b\u00e0i h\u01b0\u1edbng d\u1eabn n\u00e0y:\n\n\nS\u01a1 \u0111\u1ed3 nguy\u00ean l\u00fd v\u00e0 PCB c\u1ee7a Open Plug\n\n\n\u0110\u0103ng k\u00fd t\u00e0i kho\u1ea3n Slack\n\n\n\u0110\u0103ng k\u00fd t\u00e0i kho\u1ea3n Slack\n\n\nKh\u1edfi t\u1ea1o Slack Bot\n\n\n\n\n\n\n\u0110\u1ea5u n\u1ed1i d\u00e2y v\u00e0 n\u1ea1p firmware h\u1ed7 tr\u1ee3 OTA cho Open Plug\n\n\nN\u1ea1p \u1ee8ng d\u1ee5ng th\u00f4ng qua OTA\n\n\nLink h\u1eefu \u00edch\n\n\n\n\n\n\n\n\n\n\nNoduino Smart Plug \u0111i\u1ec1u khi\u1ec3n b\u1edfi Slack\n#\n\n\nD\u1ef1 \u00e1n n\u00e0y s\u1ebd th\u1ef1c hi\u1ec7n vi\u1ec7c l\u1eadp tr\u00ecnh l\u1ea1i Smart Plug b\u00e1n s\u1eb5n tr\u00ean th\u1ecb tr\u01b0\u1eddng \nNoduino OpenPlug\n h\u1ed7 tr\u1ee3 nh\u1eefng t\u00ednh n\u0103ng sau:\n\n\n\n\nK\u1ebft n\u1ed1i t\u1edbi Server c\u1ee7a Slack nh\u01b0 l\u00e0 m\u1ed9t Slack Bot \n\n\nC\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n on/off t\u1eeb \u1ee9ng d\u1ee5ng Slack \n\n\nC\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh k\u1ebft n\u1ed1i WiFi b\u1eb1ng smartconfig\n\n\nC\u00f3 th\u1ec3 c\u1eadp nh\u1eadt firmware t\u1eeb xa OTA th\u00f4ng qua Arduino IDE\n\n\n\n\nVideo demo m\u00f4 ph\u1ecfng \u1ee9ng d\u1ee5ng: \n\n\n\n\n\nC\u1ea7n chu\u1ea9n b\u1ecb\n#\n\n\n\n\nNoduino OpenPlug\n - b\u1ea1n c\u00f3 th\u1ec3 mua \u1edf Vi\u1ec7t Nam t\u1ea1i: \niotmaker.vn\n (Trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n mua t\u1ea1i \niotmaker.vn\n plug \u0111\u00e3 \u0111\u01b0\u1ee3c n\u1ea1p s\u1eb5n firmware h\u1ed7 tr\u1ee3 OTA v\u00e0 smartconfig, c\u00f3 th\u1ec3 b\u1ecf qua b\u01b0\u1edbc \u0110\u1ea5u n\u1ed1i d\u00e2y v\u00e0 n\u1ea1p firmware h\u1ed7 tr\u1ee3 OTA)\n\n\nM\u1ea1ch USB to TTL cho vi\u1ec7c flash firmware \u0111\u1ea7u ti\u00ean \n\n\nC\u00e0i \u0111\u1eb7t Arduino IDE v\u00e0 g\u00f3i h\u1ed7 tr\u1ee3 ESP8266 \nH\u01b0\u1edbng d\u1eabn c\u00e0i \u0111\u1eb7t\n\n\nC\u00e0i \u0111\u1eb7t th\u01b0 vi\u1ec7n Websocket cho ESP8266 \narduinoWebSockets\n\n\nTham kh\u1ea3o v\u1ec1 OTA t\u1ea1i \nESP8266 Arduino OTA\n\n\n\n\nC\u00e1c b\u01b0\u1edbc chu\u1ea9n b\u1ecb n\u00e0y coi nh\u01b0 b\u1ea1n \u0111\u00e3 ho\u00e0n th\u00e0nh - N\u1ebfu b\u1ea1n kh\u00f4ng c\u00f3 \nOpenPlug\n c\u00f3 th\u1ec3 d\u00f9ng c\u00e1c board ph\u00e1t tri\u1ec3n nh\u01b0 \nWemos\n, \nNodeMCU\n \u0111\u1ec3 gi\u1ea3 l\u1eadp.\n\n\n\n\nL\u01b0u \u00fd\n\n\nOpenPlug s\u1eed d\u1ee5ng \nESP8285\n l\u00e0m controller, gi\u1ed1ng h\u1ec7t nh\u01b0 \nESP8266\n ngo\u1ea1i tr\u1eeb vi\u1ec7c n\u00f3 c\u00f3 s\u1eb5n 1Mbytes Flash t\u00edch h\u1ee3p. Gi\u00fap cho size c\u1ee7a board nh\u1ecf g\u1ecdn h\u01a1n. V\u00e0 board c\u1eafm tr\u00ean OpenPlug l\u00e0 board \nNoduino NODEC\n\n\n\n\n\n\nH\u01b0\u1edbng d\u1eabn\n\n\nB\u1ea1n c\u00f3 th\u1ec3 c\u00e0i \u0111\u1eb7t th\u01b0 vi\u1ec7n \narduinoWebSockets\n b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng \nLibrary Mangager\n c\u1ee7a Arduino, v\u1edbi t\u1eeb kh\u00f3a: \nWebsocket\n v\u00e0 l\u1ef1a ch\u1ecdn th\u01b0 vi\u1ec7n b\u00ean d\u01b0\u1edbi.\n\n\n\n\n\nM\u1ee5c \u0111\u00edch c\u1ee7a b\u00e0i h\u01b0\u1edbng d\u1eabn n\u00e0y:\n#\n\n\nSau khi l\u1eadp tr\u00ecnh l\u1ea1i cho thi\u1ebft b\u1ecb, th\u00ec thi\u1ebft b\u1ecb c\u1ea7n c\u00f3 nh\u1eefng t\u00ednh n\u0103ng sau:\n\n\n\n\nKhi nh\u1ea5n n\u00fat nh\u1ea5n tr\u00ean Plug - sau 5 gi\u00e2y, \u0111\u00e8n LED tr\u1ea1ng th\u00e1i s\u1ebd ch\u1edbp nhanh li\u00ean t\u1ee5c, v\u00e0 thi\u1ebft b\u1ecb v\u00e0o ch\u1ebf \u0111\u1ed9 Smartconfig, s\u1eb5n s\u00e0ng cho vi\u1ec7c c\u00e0i \u0111\u1eb7t Smartconfig. \n\n\n\u0110\u00e8n LED s\u1ebd s\u00e1ng li\u00ean t\u1ee5c khi k\u1ebft n\u1ed1i Wi-Fi th\u00e0nh c\u00f4ng, ch\u1edbp li\u00ean t\u1ee5c khi v\u00e0o ch\u1ebf \u0111\u1ed9 Smartconfig v\u00e0 ch\u1edbp ng\u1eaft qu\u00e3ng n\u1ebfu kh\u00f4ng th\u1ec3 k\u1ebft n\u1ed1i t\u1edbi Slack Server. \n\n\nC\u00f3 th\u1ec3 g\u1edfi l\u1ec7nh \non\n \u0111\u1ec3 b\u1eadt v\u00e0 \noff\n \u0111\u1ec3 t\u1eaft thi\u1ebft b\u1ecb t\u1eeb \u1ee8ng d\u1ee5ng Slack, tr\u1ea3 v\u1ec1 th\u00f4ng tin \u0111\u00e3 th\u1ef1c thi l\u1ec7nh th\u00e0nh c\u00f4ng hay ch\u01b0a.\n\n\n\n\nC\u0103n c\u1ee9 tr\u00ean y\u00eau c\u1ea7u v\u00e0 m\u1ea1ch nguy\u00ean l\u00fd b\u00ean d\u01b0\u1edbi, chung ta c\u1ea7n nh\u1eefng th\u00f4ng tin sau: \n\n\n\n\n\n\n\n\nCh\u00e2n\n\n\nT\u00ednh n\u0103ng\n\n\n\n\n\n\n\n\n\n\nGPIO12\n\n\n\u0110i\u1ec1u khi\u1ec3n Relay On/Off\n\n\n\n\n\n\nGPIO3\n\n\n\u0110i\u1ec1u khi\u1ec3n LED\n\n\n\n\n\n\nGPIO0\n\n\nN\u00fat nh\u1ea5n\n\n\n\n\n\n\n\n\n\n\n\n\nS\u01a1 \u0111\u1ed3 nguy\u00ean l\u00fd v\u00e0 PCB c\u1ee7a Open Plug\n#\n\n\n\n\n\n\n\u0110\u0103ng k\u00fd t\u00e0i kho\u1ea3n Slack\n#\n\n\n\u0110\u0103ng k\u00fd t\u00e0i kho\u1ea3n Slack\n#\n\n\n\n\nV\u00e0o trang \nhttps://slack.com/\n, \u0111i\u1ec1n Email v\u00e0o t\u1ea1o 1 team m\u1edbi\n\n\n\nSau khi tu\u1ea7n t\u1ef1 ti\u1ebfn h\u00e0nh c\u00e1c b\u01b0\u1edbc, th\u00ec b\u1ea1n s\u1ebd \u0111\u01b0\u1ee3c h\u1ecfi \u0111\u0103ng k\u00fd domain cho Team. \u1ede \u0111\u00e2y m\u00ecnh ch\u1ecdn l\u00e0 \nhttps://smart-plug.slack.com\n - \u0110\u0103ng nh\u1eadp b\u1eb1ng Email & M\u1eadt kh\u1ea9u \u0111\u00e3 \u0111\u0103ng k\u00fd. \n\n\n\n\nKh\u1edfi t\u1ea1o Slack Bot\n#\n\n\n\n\nSau khi \u0111\u0103ng k\u00fd xong, b\u1ea1n c\u00f3 th\u1ec3 t\u1ea1o Slack Bot cho Team, \u1edf \u0111\u00e2y \u0111\u1eb7t l\u00e0: \n@myplug\n:\n\n\n\n\n\u0110\u0103ng k\u00fd Slack Bot\n\n\n\n\n\n\nB\u1ea1n s\u1ebd c\u1ea7n \nAPI Token\n sau khi t\u1ea1o xong Slack Bot, trong nh\u01b0: \n\n\n\n\n\n\n\nC\u00e0i \u0111\u1eb7t \u1ee9ng d\u1ee5ng Slack (H\u1ed7 tr\u1ee3 h\u1ea7u h\u1ebft c\u00e1c h\u1ec7 \u0111i\u1ec1u h\u00e0nh cho m\u00e1y t\u00ednh v\u00e0 \u0111i\u1ec7n tho\u1ea1i di \u0111\u1ed9ng):\n\n\n\n\n\n\nT\u1ea3i Slack\n \n\n\n\n\nB\u1ea1n ph\u1ea3i \u0111\u1ea3m b\u1ea3o Slack Bot \u0111\u00e3 hi\u1ec3n th\u1ecb trong c\u1eeda s\u1ed5 chat, nh\u01b0 h\u00ecnh d\u01b0\u1edbi \u0111\u00e2y, th\u00ec vi\u1ec7c c\u00e0i \u0111\u1eb7t Slack Bot \u0111\u00e3 th\u00e0nh c\u00f4ng \n\n\n\n\n\n\u0110\u1ea5u n\u1ed1i d\u00e2y v\u00e0 n\u1ea1p firmware h\u1ed7 tr\u1ee3 OTA cho Open Plug\n#\n\n\nKhi b\u1ea1n th\u1ef1c hi\u1ec7n b\u01b0\u1edbc n\u00e0y xong, k\u1ec3 t\u1eeb l\u1ea7n sau tr\u1edf \u0111i b\u1ea1n kh\u00f4ng c\u1ea7n ph\u1ea3i k\u1ebft n\u1ed1i v\u1eadt l\u00fd \u0111\u1ebfn Open Plug, c\u00f3 th\u1ec3 n\u1ea1p nh\u1eefng firmware sau n\u00e0y th\u00f4ng qua WiFi. T\u1ea5t nhi\u00ean, c\u00e1c \u0111o\u1ea1n code sau n\u00e0y c\u1ee7a b\u1ea1n ph\u1ea3i \u0111\u1ea3m b\u1ea3o logic OTA ho\u1ea1t \u0111\u1ed9ng \u0111\u00fang.\n\n\nS\u1eed d\u1ee5ng c\u1ed5ng UART2TTL \u0111\u1ec3 n\u1ea1p \n\n\n\nUSB2UART_GND ------> SmartNode_GPIO0\nUSB2UAR_GND -----> SmartNode_GND\nUSB2UAR_RXD -----> SmartNode_TX\nUSB2UAR_TXD -----> SmartNode_RX\n\n\n\n\n\n\nNotes\n\n\nH\u00ecnh ch\u1ee5p \u0111\u1ea5u \u0111\u1ed1i th\u1ef1c t\u1ebf s\u1ebd \u0111\u01b0\u1ee3c cung c\u1ea5p sau\n\n\n\n\nN\u1ea1p \u1ee8ng d\u1ee5ng th\u00f4ng qua OTA\n#\n\n\ngit clone https://github.com/esp8266vn/smart-plug-slack\n\n\n\n\n\n\nQuan tr\u1ecdng\n\n\nB\u1edfi v\u00ec chip tr\u00ean Open Plug l\u00e0 \nESP8285\n n\u00ean b\u1ed9 nh\u1edb ch\u1ec9 c\u00f3 1Mbytes Flash, trong khi dung l\u01b0\u1ee3ng c\u1ee7a Sketch n\u00e0y g\u1ea7n 400Kbytes. V\u1eady c\u1ea7n th\u00eam 400Kbytes \u0111\u1ec3 d\u00f9ng l\u00e0m n\u01a1i l\u01b0u tr\u1eef. Ch\u1ec9 \u0111\u01b0\u1ee3c ch\u1ecdn v\u00f9ng nh\u1edb SPIFFS 64Kbytes m\u00e0 th\u00f4i \n\n\n\n\n\nLink h\u1eefu \u00edch\n#\n\n\n\n\nhttp://noduino.org\n \n\n\nMua h\u00e0ng t\u1ea1i \nIoT Maker Vi\u1ec7t Nam\n\n\nC\u00e1m \u01a1n t\u00e1c gi\u1ea3 \nhttps://github.com/urish/arduino-slack-bot",
            "title": "Smart Plug & Slack Bot"
        },
        {
            "location": "/arduino/projects/smartplug-slack/#noduino-smart-plug-ieu-khien-boi-slack",
            "text": "D\u1ef1 \u00e1n n\u00e0y s\u1ebd th\u1ef1c hi\u1ec7n vi\u1ec7c l\u1eadp tr\u00ecnh l\u1ea1i Smart Plug b\u00e1n s\u1eb5n tr\u00ean th\u1ecb tr\u01b0\u1eddng  Noduino OpenPlug  h\u1ed7 tr\u1ee3 nh\u1eefng t\u00ednh n\u0103ng sau:   K\u1ebft n\u1ed1i t\u1edbi Server c\u1ee7a Slack nh\u01b0 l\u00e0 m\u1ed9t Slack Bot   C\u00f3 th\u1ec3 \u0111i\u1ec1u khi\u1ec3n on/off t\u1eeb \u1ee9ng d\u1ee5ng Slack   C\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh k\u1ebft n\u1ed1i WiFi b\u1eb1ng smartconfig  C\u00f3 th\u1ec3 c\u1eadp nh\u1eadt firmware t\u1eeb xa OTA th\u00f4ng qua Arduino IDE   Video demo m\u00f4 ph\u1ecfng \u1ee9ng d\u1ee5ng:",
            "title": "Noduino Smart Plug \u0111i\u1ec1u khi\u1ec3n b\u1edfi Slack"
        },
        {
            "location": "/arduino/projects/smartplug-slack/#can-chuan-bi",
            "text": "Noduino OpenPlug  - b\u1ea1n c\u00f3 th\u1ec3 mua \u1edf Vi\u1ec7t Nam t\u1ea1i:  iotmaker.vn  (Trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n mua t\u1ea1i  iotmaker.vn  plug \u0111\u00e3 \u0111\u01b0\u1ee3c n\u1ea1p s\u1eb5n firmware h\u1ed7 tr\u1ee3 OTA v\u00e0 smartconfig, c\u00f3 th\u1ec3 b\u1ecf qua b\u01b0\u1edbc \u0110\u1ea5u n\u1ed1i d\u00e2y v\u00e0 n\u1ea1p firmware h\u1ed7 tr\u1ee3 OTA)  M\u1ea1ch USB to TTL cho vi\u1ec7c flash firmware \u0111\u1ea7u ti\u00ean   C\u00e0i \u0111\u1eb7t Arduino IDE v\u00e0 g\u00f3i h\u1ed7 tr\u1ee3 ESP8266  H\u01b0\u1edbng d\u1eabn c\u00e0i \u0111\u1eb7t  C\u00e0i \u0111\u1eb7t th\u01b0 vi\u1ec7n Websocket cho ESP8266  arduinoWebSockets  Tham kh\u1ea3o v\u1ec1 OTA t\u1ea1i  ESP8266 Arduino OTA   C\u00e1c b\u01b0\u1edbc chu\u1ea9n b\u1ecb n\u00e0y coi nh\u01b0 b\u1ea1n \u0111\u00e3 ho\u00e0n th\u00e0nh - N\u1ebfu b\u1ea1n kh\u00f4ng c\u00f3  OpenPlug  c\u00f3 th\u1ec3 d\u00f9ng c\u00e1c board ph\u00e1t tri\u1ec3n nh\u01b0  Wemos ,  NodeMCU  \u0111\u1ec3 gi\u1ea3 l\u1eadp.   L\u01b0u \u00fd  OpenPlug s\u1eed d\u1ee5ng  ESP8285  l\u00e0m controller, gi\u1ed1ng h\u1ec7t nh\u01b0  ESP8266  ngo\u1ea1i tr\u1eeb vi\u1ec7c n\u00f3 c\u00f3 s\u1eb5n 1Mbytes Flash t\u00edch h\u1ee3p. Gi\u00fap cho size c\u1ee7a board nh\u1ecf g\u1ecdn h\u01a1n. V\u00e0 board c\u1eafm tr\u00ean OpenPlug l\u00e0 board  Noduino NODEC    H\u01b0\u1edbng d\u1eabn  B\u1ea1n c\u00f3 th\u1ec3 c\u00e0i \u0111\u1eb7t th\u01b0 vi\u1ec7n  arduinoWebSockets  b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng  Library Mangager  c\u1ee7a Arduino, v\u1edbi t\u1eeb kh\u00f3a:  Websocket  v\u00e0 l\u1ef1a ch\u1ecdn th\u01b0 vi\u1ec7n b\u00ean d\u01b0\u1edbi.",
            "title": "C\u1ea7n chu\u1ea9n b\u1ecb"
        },
        {
            "location": "/arduino/projects/smartplug-slack/#muc-ich-cua-bai-huong-dan-nay",
            "text": "Sau khi l\u1eadp tr\u00ecnh l\u1ea1i cho thi\u1ebft b\u1ecb, th\u00ec thi\u1ebft b\u1ecb c\u1ea7n c\u00f3 nh\u1eefng t\u00ednh n\u0103ng sau:   Khi nh\u1ea5n n\u00fat nh\u1ea5n tr\u00ean Plug - sau 5 gi\u00e2y, \u0111\u00e8n LED tr\u1ea1ng th\u00e1i s\u1ebd ch\u1edbp nhanh li\u00ean t\u1ee5c, v\u00e0 thi\u1ebft b\u1ecb v\u00e0o ch\u1ebf \u0111\u1ed9 Smartconfig, s\u1eb5n s\u00e0ng cho vi\u1ec7c c\u00e0i \u0111\u1eb7t Smartconfig.   \u0110\u00e8n LED s\u1ebd s\u00e1ng li\u00ean t\u1ee5c khi k\u1ebft n\u1ed1i Wi-Fi th\u00e0nh c\u00f4ng, ch\u1edbp li\u00ean t\u1ee5c khi v\u00e0o ch\u1ebf \u0111\u1ed9 Smartconfig v\u00e0 ch\u1edbp ng\u1eaft qu\u00e3ng n\u1ebfu kh\u00f4ng th\u1ec3 k\u1ebft n\u1ed1i t\u1edbi Slack Server.   C\u00f3 th\u1ec3 g\u1edfi l\u1ec7nh  on  \u0111\u1ec3 b\u1eadt v\u00e0  off  \u0111\u1ec3 t\u1eaft thi\u1ebft b\u1ecb t\u1eeb \u1ee8ng d\u1ee5ng Slack, tr\u1ea3 v\u1ec1 th\u00f4ng tin \u0111\u00e3 th\u1ef1c thi l\u1ec7nh th\u00e0nh c\u00f4ng hay ch\u01b0a.   C\u0103n c\u1ee9 tr\u00ean y\u00eau c\u1ea7u v\u00e0 m\u1ea1ch nguy\u00ean l\u00fd b\u00ean d\u01b0\u1edbi, chung ta c\u1ea7n nh\u1eefng th\u00f4ng tin sau:      Ch\u00e2n  T\u00ednh n\u0103ng      GPIO12  \u0110i\u1ec1u khi\u1ec3n Relay On/Off    GPIO3  \u0110i\u1ec1u khi\u1ec3n LED    GPIO0  N\u00fat nh\u1ea5n",
            "title": "M\u1ee5c \u0111\u00edch c\u1ee7a b\u00e0i h\u01b0\u1edbng d\u1eabn n\u00e0y:"
        },
        {
            "location": "/arduino/projects/smartplug-slack/#so-o-nguyen-ly-va-pcb-cua-open-plug",
            "text": "",
            "title": "S\u01a1 \u0111\u1ed3 nguy\u00ean l\u00fd v\u00e0 PCB c\u1ee7a Open Plug"
        },
        {
            "location": "/arduino/projects/smartplug-slack/#ang-ky-tai-khoan-slack",
            "text": "",
            "title": "\u0110\u0103ng k\u00fd t\u00e0i kho\u1ea3n Slack"
        },
        {
            "location": "/arduino/projects/smartplug-slack/#ang-ky-tai-khoan-slack_1",
            "text": "V\u00e0o trang  https://slack.com/ , \u0111i\u1ec1n Email v\u00e0o t\u1ea1o 1 team m\u1edbi  Sau khi tu\u1ea7n t\u1ef1 ti\u1ebfn h\u00e0nh c\u00e1c b\u01b0\u1edbc, th\u00ec b\u1ea1n s\u1ebd \u0111\u01b0\u1ee3c h\u1ecfi \u0111\u0103ng k\u00fd domain cho Team. \u1ede \u0111\u00e2y m\u00ecnh ch\u1ecdn l\u00e0  https://smart-plug.slack.com  - \u0110\u0103ng nh\u1eadp b\u1eb1ng Email & M\u1eadt kh\u1ea9u \u0111\u00e3 \u0111\u0103ng k\u00fd.",
            "title": "\u0110\u0103ng k\u00fd t\u00e0i kho\u1ea3n Slack"
        },
        {
            "location": "/arduino/projects/smartplug-slack/#khoi-tao-slack-bot",
            "text": "Sau khi \u0111\u0103ng k\u00fd xong, b\u1ea1n c\u00f3 th\u1ec3 t\u1ea1o Slack Bot cho Team, \u1edf \u0111\u00e2y \u0111\u1eb7t l\u00e0:  @myplug :   \u0110\u0103ng k\u00fd Slack Bot    B\u1ea1n s\u1ebd c\u1ea7n  API Token  sau khi t\u1ea1o xong Slack Bot, trong nh\u01b0:     C\u00e0i \u0111\u1eb7t \u1ee9ng d\u1ee5ng Slack (H\u1ed7 tr\u1ee3 h\u1ea7u h\u1ebft c\u00e1c h\u1ec7 \u0111i\u1ec1u h\u00e0nh cho m\u00e1y t\u00ednh v\u00e0 \u0111i\u1ec7n tho\u1ea1i di \u0111\u1ed9ng):    T\u1ea3i Slack     B\u1ea1n ph\u1ea3i \u0111\u1ea3m b\u1ea3o Slack Bot \u0111\u00e3 hi\u1ec3n th\u1ecb trong c\u1eeda s\u1ed5 chat, nh\u01b0 h\u00ecnh d\u01b0\u1edbi \u0111\u00e2y, th\u00ec vi\u1ec7c c\u00e0i \u0111\u1eb7t Slack Bot \u0111\u00e3 th\u00e0nh c\u00f4ng",
            "title": "Kh\u1edfi t\u1ea1o Slack Bot"
        },
        {
            "location": "/arduino/projects/smartplug-slack/#au-noi-day-va-nap-firmware-ho-tro-ota-cho-open-plug",
            "text": "Khi b\u1ea1n th\u1ef1c hi\u1ec7n b\u01b0\u1edbc n\u00e0y xong, k\u1ec3 t\u1eeb l\u1ea7n sau tr\u1edf \u0111i b\u1ea1n kh\u00f4ng c\u1ea7n ph\u1ea3i k\u1ebft n\u1ed1i v\u1eadt l\u00fd \u0111\u1ebfn Open Plug, c\u00f3 th\u1ec3 n\u1ea1p nh\u1eefng firmware sau n\u00e0y th\u00f4ng qua WiFi. T\u1ea5t nhi\u00ean, c\u00e1c \u0111o\u1ea1n code sau n\u00e0y c\u1ee7a b\u1ea1n ph\u1ea3i \u0111\u1ea3m b\u1ea3o logic OTA ho\u1ea1t \u0111\u1ed9ng \u0111\u00fang.  S\u1eed d\u1ee5ng c\u1ed5ng UART2TTL \u0111\u1ec3 n\u1ea1p   USB2UART_GND ------> SmartNode_GPIO0\nUSB2UAR_GND -----> SmartNode_GND\nUSB2UAR_RXD -----> SmartNode_TX\nUSB2UAR_TXD -----> SmartNode_RX   Notes  H\u00ecnh ch\u1ee5p \u0111\u1ea5u \u0111\u1ed1i th\u1ef1c t\u1ebf s\u1ebd \u0111\u01b0\u1ee3c cung c\u1ea5p sau",
            "title": "\u0110\u1ea5u n\u1ed1i d\u00e2y v\u00e0 n\u1ea1p firmware h\u1ed7 tr\u1ee3 OTA cho Open Plug"
        },
        {
            "location": "/arduino/projects/smartplug-slack/#nap-ung-dung-thong-qua-ota",
            "text": "git clone https://github.com/esp8266vn/smart-plug-slack   Quan tr\u1ecdng  B\u1edfi v\u00ec chip tr\u00ean Open Plug l\u00e0  ESP8285  n\u00ean b\u1ed9 nh\u1edb ch\u1ec9 c\u00f3 1Mbytes Flash, trong khi dung l\u01b0\u1ee3ng c\u1ee7a Sketch n\u00e0y g\u1ea7n 400Kbytes. V\u1eady c\u1ea7n th\u00eam 400Kbytes \u0111\u1ec3 d\u00f9ng l\u00e0m n\u01a1i l\u01b0u tr\u1eef. Ch\u1ec9 \u0111\u01b0\u1ee3c ch\u1ecdn v\u00f9ng nh\u1edb SPIFFS 64Kbytes m\u00e0 th\u00f4i",
            "title": "N\u1ea1p \u1ee8ng d\u1ee5ng th\u00f4ng qua OTA"
        },
        {
            "location": "/arduino/projects/smartplug-slack/#link-huu-ich",
            "text": "http://noduino.org    Mua h\u00e0ng t\u1ea1i  IoT Maker Vi\u1ec7t Nam  C\u00e1m \u01a1n t\u00e1c gi\u1ea3  https://github.com/urish/arduino-slack-bot",
            "title": "Link h\u1eefu \u00edch"
        },
        {
            "location": "/arduino/projects/thingspeak/",
            "text": "\u0110o nhi\u1ec7t \u0111\u1ed9 \u0111\u1ed9 \u1ea9m hi\u1ec3n th\u1ecb l\u00ean ThingSpeak v\u1edbi HTTP\n#\n\n\n\u0110\u1eb7t v\u1ea5n \u0111\u1ec1: Trong th\u1eddi \u0111\u1ea1i k\u1ef7 nguy\u00ean k\u1ebft n\u1ed1i nh\u01b0 hi\u1ec7n nay th\u00ec vi\u1ec7c \u0111\u1ecdc d\u1eef li\u1ec7u t\u1eeb c\u00e1c thi\u1ebft b\u1ecb (c\u1ea3m bi\u1ebfn,\u2026) g\u1eedi l\u00ean c\u00e1c serve l\u00e0 \u0111i\u1ec1u t\u1ed1i c\u01a1 b\u1ea3n m\u00e0 m\u1ed9t nh\u00e0 ph\u00e1t tri\u1ec1n c\u1ea7n c\u00f3. B\u00e0i vi\u1ebft n\u00e0y s\u1ebd \u0111\u1ec1 c\u1eadp t\u1edbi v\u1ea5n \u0111\u1ec1 n\u00f3i tr\u00ean, \u0111\u00f3 l\u00e0 \u0111\u1ecdc v\u00e0 g\u1eedi c\u00e1c d\u1eef li\u1ec7u t\u1eeb c\u1ea3m bi\u1ebfn DHT22 b\u1eb1ng board WiFi Uno l\u00ean Thingspeak v\u1edbi HTTP.\n\n\nChu\u1ea9n b\u1ecb c\u00e1c ph\u1ea7n c\u1ee9ng c\u1ea7n thi\u1ebft\n#\n\n\n\n\nBoard WiFi Uno.\n\n\nLCD OLED.\n\n\nDHT22 sensor.\n\n\n\n\n\n\n\n\nL\u01b0u \u00fd\n\n\nCh\u00e2n ch\u00e2n s\u1ed1 3 c\u1ee7a c\u1ea3m bi\u1ebfn c\u00f3 th\u1ec3 n\u1ed1i x\u01b0\u1ed1ng mass ho\u1eb7c \u0111\u1ec3 v\u1eady kh\u00f4ng k\u1ebft n\u1ed1i n\u00f3.\nN\u1ebfu c\u1ea7n thi\u1ebft, c\u00f3 th\u1ec3 m\u1eafc th\u00eam m\u1ed9t \u0111i\u1ec7n tr\u1edf 10k v\u00e0o ch\u00e2n 1 (VCC) v\u00e0 ch\u00e2n 2 (OUTPUT).\n\n\n\n\nC\u00e0i m\u1ed9t s\u1ed1 th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft.\n#\n\n\n\n\n\n\nTh\u01b0 vi\u1ec7n cho DHT 22 :\n\nhttps://github.com/ngoc-emg/DHT-sensor-library\n.\n\n\n\n\n\n\nTh\u01b0 vi\u1ec7n cho OLED SSD 1306, tham kh\u1ea3o m\u1ed9t b\u00e0i vi\u1ebft \u1edf:\n\nhttps://github.com/esp8266vn/esp8266.vn/blob/master/docs/arduino/libraries/i2c.md\n. B\u00e0i vi\u1ebft n\u00e0y c\u00f3 tr\u00ecnh b\u00e0y c\u00e1ch th\u00eam c\u00e1c th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft c\u0169ng nh\u01b0 c\u00e1c k\u1ebft n\u1ed1i kh\u00e1 r\u00f5.\n\n\n\n\n\n\nV\u1ec1 ph\u1ea7n WiFi, s\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n ESP8266WiFi, b\u1ea1n c\u00f3 th\u1ec3 t\u1ea3i tr\u1ef1c ti\u1ebfp tr\u00ean web ho\u1eb7c v\u00e0i libraries manager \u0111\u1ec3 c\u1eadp nh\u1eadt n\u00f3.\n\n\n\n\n\n\nT\u1ea1o m\u1ed9t t\u00e0i kho\u1ea3n tr\u00ean ThingSpeak.\n#\n\n\nC\u00f3 kh\u00e1 nhi\u1ec1u \u0111\u1ecba ch\u1ec9 web cho ph\u00e9p theo d\u00f5i d\u1eef li\u1ec7u c\u00e1c c\u1ea3m bi\u1ebfn th\u00f4ng qua Internet nh\u01b0 Google, Thingspeak\u2026 \u1edf \u0111\u00e2y ch\u00fang ta s\u1ebd l\u00e0m tr\u00ean Thingspeak.\nB\u1ea1n t\u1ea1o m\u1ed9t t\u00e0i kho\u1ea3n Thingspeak, ch\u1ecdn m\u1ed9t Chanel, \u0111\u1eb7t t\u00ean v\u00e0 c\u00e0i \u0111\u1eb7t cho n\u00f3 nh\u01b0 sau:\n\n\n\n\n\n\n\n\n Ch\u00fa \u00fd \n\n\nTi\u1ebfp theo l\u00e0 m\u1ed9t ph\u1ea7n kh\u00e1 quan tr\u1ecdng. B\u1ea1n ph\u1ea3i l\u1ea5y \u0111\u01b0\u1ee3c cho m\u00ecnh m\u1ed9t API key, ghi l\u1ea1i n\u00f3 \u0111\u1ec3 sau n\u00e0y d\u00f9ng cho vi\u1ec7c g\u1eedi d\u1eef li\u1ec7u l\u00ean Thingspeak.\n\n\n\n\n \n\n\nCode ch\u01b0\u01a1ng tr\u00ecnh.\n#\n\n\nTrong code b\u00ean d\u01b0\u1edbi, c\u1ea7n ch\u00fa \u00fd thay \u0111\u1ed5i SSID v\u1edbi password l\u00e0 t\u00ean, password m\u1ed9t m\u1ea1ng kh\u00f4ng d\u00e2y (WiFi) n\u01a1i b\u1ea1n s\u1eed d\u1ee5ng. API key l\u00e0 m\u00e3 \u0111\u00e3 \u0111\u1ec1 c\u1eadp v\u1edbi c\u00e1c b\u1ea1n trong ph\u1ea7n tr\u01b0\u1edbc. \u0110i\u1ec1n n\u00f3 v\u00e0o trong code!\n\n\n// Declare DHT\n#include \"DHT.h\"\n#define DHTPIN D2\n#define DHTTYPE DHT22\nDHT dht(DHTPIN, DHTTYPE);\nfloat t;\nfloat h;\nfloat f;\n// Declare Oled LCD\n#include <Wire.h>\n#include \"SSD1306.h\"\nSSD1306  display(0x3c, D3, D5);\n#define DEMO_DURATION 3000\ntypedef void (*Demo)(void);\nint demoMode = 0;\nint counter = 1;\n// Declare WiFi\n#include <ESP8266WiFi.h>\nconst char* ssid     = \"ZoKa\";\nconst char* password = \"Dinhmenh@24\";\nconst char* host = \"api.thingspeak.com\";\nconst char* writeAPIKey = \"VXYYDIYKV4G5IRY7\";\n/////////////////////////////////////////////////////////////\nvoid setup() {\n    //Setup DHT\n    Serial.begin(115200);\n    Serial.println(\"DHTxx test!\");\n    dht.begin();\n    // Setup Oled LCD\n    display.init();\n    display.flipScreenVertically();\n    // Setup WiFi\n    WiFi.begin(ssid, password);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }   \n}\n///////////////////////////////////////////////////////////\nvoid readsensor() {\n    delay(2000);\n    h = dht.readHumidity();\n    t = dht.readTemperature();\n    f = dht.readTemperature(true);  \n}\n/////////////////////////////////////////////////////////////\nvoid display_temp() {\n    display.setTextAlignment(TEXT_ALIGN_CENTER);\n    display.setFont(ArialMT_Plain_16);\n    display.drawString(64, 16, \"Temperature\");\n    display.drawString(64, 32, String(t));\n    display.drawString(95, 32, \"*C\");\n}\n////////////////////////////////////////////////////////////\nvoid display_humi() {\n    display.setTextAlignment(TEXT_ALIGN_CENTER);\n    display.setFont(ArialMT_Plain_16);\n    display.drawString(64, 16, \"Humidity\");\n    display.drawString(64, 32, String(h));\n    display.drawString(95, 32, \"%\");\n}\n////////////////////////////////////////////////////////////\nvoid Thingspeak() {\n    WiFiClient client;\n    const int httpPort = 80;\n    if (!client.connect(host, httpPort)) {\n            return;\n    }\n    String url = \"/update?key=\";\n    url += writeAPIKey;\n    url += \"&field1=\";\n    url += String(t);\n    url += \"&field2=\";\n    url += String(h);\n    url += \"\\r\\n\";\n // Request to the server\n    client.print(String(\"GET \") + url + \" HTTP/1.1\\r\\n\" +\n               \"Host: \" + host + \"\\r\\n\" +\n               \"Connection: close\\r\\n\\r\\n\");\n    delay(1000);\n}\n////////////////////////////////////////////////////////////\nDemo demos[] = {display_temp, display_humi};\nint demoLength = (sizeof(demos) / sizeof(Demo));\nlong timeSinceLastModeSwitch = 0;\n/////////////////////////////////////////////////////////////\nvoid loop() {\n    readsensor();\n    display.clear();\n    demos[demoMode]();\n    display.setTextAlignment(TEXT_ALIGN_RIGHT);\n    display.drawString(10, 128, String(millis()));\n    display.display();\n    if (millis() - timeSinceLastModeSwitch > DEMO_DURATION) {\n        demoMode = (demoMode + 1)  % demoLength;\n        imeSinceLastModeSwitch = millis();\n    }\n    counter++;\n    delay(10);\n    Thingspeak();\n}\n\n\n\n\nM\u1ee5c \u0111\u00edch c\u1ee7a b\u00e0i h\u01b0\u1edbng d\u1eabn n\u00e0y.\n#\n\n\nSau khi code xong th\u00ec h\u1ec7 h\u1ec7 th\u1ed1ng n\u00e0y s\u1ebd c\u00f3 kh\u1ea3 n\u0103ng:\n\n\n\n\n\n\n\u0110\u1ecdc \u0111\u01b0\u1ee3c c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a c\u1ea3m bi\u1ebfn.\n\n\n\n\n\n\nHi\u1ec3n th\u1ecb c\u00e1c th\u00f4ng s\u1ed1 nhi\u1ec7t \u0111\u1ed9 l\u00ean LCD Oled.\n\n\n\n\n\n\nC\u1eadp nh\u1eadt c\u00e1c d\u1eef li\u1ec7u c\u1ea3m bi\u1ebfn l\u00ean Web.\n\n\n\n\n\n\nB\u00ean d\u01b0\u1edbi l\u00e0 c\u00e1c h\u00ecnh \u1ea3nh ho\u1ea1t \u0111\u1ed9ng h\u1ec7 th\u1ed1ng !\n\n\n \n\n\n \n\n\n \n\n\nM\u1ed9t s\u1ed1 link h\u1eefu \u00edch:\n#\n\n\n\n\n\n\nB\u00e0i vi\u1ebft tham kh\u1ea3o\n\nhttp://www.instructables.com/id/Send-sensor-data-DHT11-BMP180-to-ThingSpeak-with-a/step4/Using-just-the-ESP8266/\n\n\n\n\n\n\nC\u00e1m \u01a1n t\u00e1c gi\u1ea3 \n\nhttp://file.ebook777.com/002/Home%20Automation%20With%20the%20ESP8266%20-%20Marco%20Schwartz.pdf\n\n\n\n\n\n\nMua h\u00e0ng t\u1ea1i IoT Maker Vi\u1ec7t Nam \nhttps://iotmaker.vn",
            "title": "\u0110o nhi\u1ec7t \u0111\u1ed9 & \u0111\u1ed9 \u1ea9m (Thingspeak)"
        },
        {
            "location": "/arduino/projects/thingspeak/#o-nhiet-o-o-am-hien-thi-len-thingspeak-voi-http",
            "text": "\u0110\u1eb7t v\u1ea5n \u0111\u1ec1: Trong th\u1eddi \u0111\u1ea1i k\u1ef7 nguy\u00ean k\u1ebft n\u1ed1i nh\u01b0 hi\u1ec7n nay th\u00ec vi\u1ec7c \u0111\u1ecdc d\u1eef li\u1ec7u t\u1eeb c\u00e1c thi\u1ebft b\u1ecb (c\u1ea3m bi\u1ebfn,\u2026) g\u1eedi l\u00ean c\u00e1c serve l\u00e0 \u0111i\u1ec1u t\u1ed1i c\u01a1 b\u1ea3n m\u00e0 m\u1ed9t nh\u00e0 ph\u00e1t tri\u1ec1n c\u1ea7n c\u00f3. B\u00e0i vi\u1ebft n\u00e0y s\u1ebd \u0111\u1ec1 c\u1eadp t\u1edbi v\u1ea5n \u0111\u1ec1 n\u00f3i tr\u00ean, \u0111\u00f3 l\u00e0 \u0111\u1ecdc v\u00e0 g\u1eedi c\u00e1c d\u1eef li\u1ec7u t\u1eeb c\u1ea3m bi\u1ebfn DHT22 b\u1eb1ng board WiFi Uno l\u00ean Thingspeak v\u1edbi HTTP.",
            "title": "\u0110o nhi\u1ec7t \u0111\u1ed9 \u0111\u1ed9 \u1ea9m hi\u1ec3n th\u1ecb l\u00ean ThingSpeak v\u1edbi HTTP"
        },
        {
            "location": "/arduino/projects/thingspeak/#chuan-bi-cac-phan-cung-can-thiet",
            "text": "Board WiFi Uno.  LCD OLED.  DHT22 sensor.     L\u01b0u \u00fd  Ch\u00e2n ch\u00e2n s\u1ed1 3 c\u1ee7a c\u1ea3m bi\u1ebfn c\u00f3 th\u1ec3 n\u1ed1i x\u01b0\u1ed1ng mass ho\u1eb7c \u0111\u1ec3 v\u1eady kh\u00f4ng k\u1ebft n\u1ed1i n\u00f3.\nN\u1ebfu c\u1ea7n thi\u1ebft, c\u00f3 th\u1ec3 m\u1eafc th\u00eam m\u1ed9t \u0111i\u1ec7n tr\u1edf 10k v\u00e0o ch\u00e2n 1 (VCC) v\u00e0 ch\u00e2n 2 (OUTPUT).",
            "title": "Chu\u1ea9n b\u1ecb c\u00e1c ph\u1ea7n c\u1ee9ng c\u1ea7n thi\u1ebft"
        },
        {
            "location": "/arduino/projects/thingspeak/#cai-mot-so-thu-vien-can-thiet",
            "text": "Th\u01b0 vi\u1ec7n cho DHT 22 : https://github.com/ngoc-emg/DHT-sensor-library .    Th\u01b0 vi\u1ec7n cho OLED SSD 1306, tham kh\u1ea3o m\u1ed9t b\u00e0i vi\u1ebft \u1edf: https://github.com/esp8266vn/esp8266.vn/blob/master/docs/arduino/libraries/i2c.md . B\u00e0i vi\u1ebft n\u00e0y c\u00f3 tr\u00ecnh b\u00e0y c\u00e1ch th\u00eam c\u00e1c th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft c\u0169ng nh\u01b0 c\u00e1c k\u1ebft n\u1ed1i kh\u00e1 r\u00f5.    V\u1ec1 ph\u1ea7n WiFi, s\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n ESP8266WiFi, b\u1ea1n c\u00f3 th\u1ec3 t\u1ea3i tr\u1ef1c ti\u1ebfp tr\u00ean web ho\u1eb7c v\u00e0i libraries manager \u0111\u1ec3 c\u1eadp nh\u1eadt n\u00f3.",
            "title": "C\u00e0i m\u1ed9t s\u1ed1 th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft."
        },
        {
            "location": "/arduino/projects/thingspeak/#tao-mot-tai-khoan-tren-thingspeak",
            "text": "C\u00f3 kh\u00e1 nhi\u1ec1u \u0111\u1ecba ch\u1ec9 web cho ph\u00e9p theo d\u00f5i d\u1eef li\u1ec7u c\u00e1c c\u1ea3m bi\u1ebfn th\u00f4ng qua Internet nh\u01b0 Google, Thingspeak\u2026 \u1edf \u0111\u00e2y ch\u00fang ta s\u1ebd l\u00e0m tr\u00ean Thingspeak.\nB\u1ea1n t\u1ea1o m\u1ed9t t\u00e0i kho\u1ea3n Thingspeak, ch\u1ecdn m\u1ed9t Chanel, \u0111\u1eb7t t\u00ean v\u00e0 c\u00e0i \u0111\u1eb7t cho n\u00f3 nh\u01b0 sau:      Ch\u00fa \u00fd   Ti\u1ebfp theo l\u00e0 m\u1ed9t ph\u1ea7n kh\u00e1 quan tr\u1ecdng. B\u1ea1n ph\u1ea3i l\u1ea5y \u0111\u01b0\u1ee3c cho m\u00ecnh m\u1ed9t API key, ghi l\u1ea1i n\u00f3 \u0111\u1ec3 sau n\u00e0y d\u00f9ng cho vi\u1ec7c g\u1eedi d\u1eef li\u1ec7u l\u00ean Thingspeak.",
            "title": "T\u1ea1o m\u1ed9t t\u00e0i kho\u1ea3n tr\u00ean ThingSpeak."
        },
        {
            "location": "/arduino/projects/thingspeak/#code-chuong-trinh",
            "text": "Trong code b\u00ean d\u01b0\u1edbi, c\u1ea7n ch\u00fa \u00fd thay \u0111\u1ed5i SSID v\u1edbi password l\u00e0 t\u00ean, password m\u1ed9t m\u1ea1ng kh\u00f4ng d\u00e2y (WiFi) n\u01a1i b\u1ea1n s\u1eed d\u1ee5ng. API key l\u00e0 m\u00e3 \u0111\u00e3 \u0111\u1ec1 c\u1eadp v\u1edbi c\u00e1c b\u1ea1n trong ph\u1ea7n tr\u01b0\u1edbc. \u0110i\u1ec1n n\u00f3 v\u00e0o trong code!  // Declare DHT\n#include \"DHT.h\"\n#define DHTPIN D2\n#define DHTTYPE DHT22\nDHT dht(DHTPIN, DHTTYPE);\nfloat t;\nfloat h;\nfloat f;\n// Declare Oled LCD\n#include <Wire.h>\n#include \"SSD1306.h\"\nSSD1306  display(0x3c, D3, D5);\n#define DEMO_DURATION 3000\ntypedef void (*Demo)(void);\nint demoMode = 0;\nint counter = 1;\n// Declare WiFi\n#include <ESP8266WiFi.h>\nconst char* ssid     = \"ZoKa\";\nconst char* password = \"Dinhmenh@24\";\nconst char* host = \"api.thingspeak.com\";\nconst char* writeAPIKey = \"VXYYDIYKV4G5IRY7\";\n/////////////////////////////////////////////////////////////\nvoid setup() {\n    //Setup DHT\n    Serial.begin(115200);\n    Serial.println(\"DHTxx test!\");\n    dht.begin();\n    // Setup Oled LCD\n    display.init();\n    display.flipScreenVertically();\n    // Setup WiFi\n    WiFi.begin(ssid, password);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }   \n}\n///////////////////////////////////////////////////////////\nvoid readsensor() {\n    delay(2000);\n    h = dht.readHumidity();\n    t = dht.readTemperature();\n    f = dht.readTemperature(true);  \n}\n/////////////////////////////////////////////////////////////\nvoid display_temp() {\n    display.setTextAlignment(TEXT_ALIGN_CENTER);\n    display.setFont(ArialMT_Plain_16);\n    display.drawString(64, 16, \"Temperature\");\n    display.drawString(64, 32, String(t));\n    display.drawString(95, 32, \"*C\");\n}\n////////////////////////////////////////////////////////////\nvoid display_humi() {\n    display.setTextAlignment(TEXT_ALIGN_CENTER);\n    display.setFont(ArialMT_Plain_16);\n    display.drawString(64, 16, \"Humidity\");\n    display.drawString(64, 32, String(h));\n    display.drawString(95, 32, \"%\");\n}\n////////////////////////////////////////////////////////////\nvoid Thingspeak() {\n    WiFiClient client;\n    const int httpPort = 80;\n    if (!client.connect(host, httpPort)) {\n            return;\n    }\n    String url = \"/update?key=\";\n    url += writeAPIKey;\n    url += \"&field1=\";\n    url += String(t);\n    url += \"&field2=\";\n    url += String(h);\n    url += \"\\r\\n\";\n // Request to the server\n    client.print(String(\"GET \") + url + \" HTTP/1.1\\r\\n\" +\n               \"Host: \" + host + \"\\r\\n\" +\n               \"Connection: close\\r\\n\\r\\n\");\n    delay(1000);\n}\n////////////////////////////////////////////////////////////\nDemo demos[] = {display_temp, display_humi};\nint demoLength = (sizeof(demos) / sizeof(Demo));\nlong timeSinceLastModeSwitch = 0;\n/////////////////////////////////////////////////////////////\nvoid loop() {\n    readsensor();\n    display.clear();\n    demos[demoMode]();\n    display.setTextAlignment(TEXT_ALIGN_RIGHT);\n    display.drawString(10, 128, String(millis()));\n    display.display();\n    if (millis() - timeSinceLastModeSwitch > DEMO_DURATION) {\n        demoMode = (demoMode + 1)  % demoLength;\n        imeSinceLastModeSwitch = millis();\n    }\n    counter++;\n    delay(10);\n    Thingspeak();\n}",
            "title": "Code ch\u01b0\u01a1ng tr\u00ecnh."
        },
        {
            "location": "/arduino/projects/thingspeak/#muc-ich-cua-bai-huong-dan-nay",
            "text": "Sau khi code xong th\u00ec h\u1ec7 h\u1ec7 th\u1ed1ng n\u00e0y s\u1ebd c\u00f3 kh\u1ea3 n\u0103ng:    \u0110\u1ecdc \u0111\u01b0\u1ee3c c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a c\u1ea3m bi\u1ebfn.    Hi\u1ec3n th\u1ecb c\u00e1c th\u00f4ng s\u1ed1 nhi\u1ec7t \u0111\u1ed9 l\u00ean LCD Oled.    C\u1eadp nh\u1eadt c\u00e1c d\u1eef li\u1ec7u c\u1ea3m bi\u1ebfn l\u00ean Web.    B\u00ean d\u01b0\u1edbi l\u00e0 c\u00e1c h\u00ecnh \u1ea3nh ho\u1ea1t \u0111\u1ed9ng h\u1ec7 th\u1ed1ng !",
            "title": "M\u1ee5c \u0111\u00edch c\u1ee7a b\u00e0i h\u01b0\u1edbng d\u1eabn n\u00e0y."
        },
        {
            "location": "/arduino/projects/thingspeak/#mot-so-link-huu-ich",
            "text": "B\u00e0i vi\u1ebft tham kh\u1ea3o http://www.instructables.com/id/Send-sensor-data-DHT11-BMP180-to-ThingSpeak-with-a/step4/Using-just-the-ESP8266/    C\u00e1m \u01a1n t\u00e1c gi\u1ea3  http://file.ebook777.com/002/Home%20Automation%20With%20the%20ESP8266%20-%20Marco%20Schwartz.pdf    Mua h\u00e0ng t\u1ea1i IoT Maker Vi\u1ec7t Nam  https://iotmaker.vn",
            "title": "M\u1ed9t s\u1ed1 link h\u1eefu \u00edch:"
        },
        {
            "location": "/arduino/projects/blynkled/",
            "text": "S\u1eed d\u1ee5ng \u1ee9ng d\u1ee5ng Blynk \u0111i\u1ec1u khi\u1ec3n Led\n#\n\n\nGi\u1edbi thi\u1ec7u v\u1ec1 Blynk\n#\n\n\n\n\nPh\u1ea7n m\u1ec1m Blynk l\u00e0 m\u1ed9t ph\u1ea7n m\u1ec1m \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf tr\u00ean n\u1ec1n t\u1ea3ng Android v\u00e0 iOS cho ph\u00e9p\n t\u1ef1 t\u1ea1o \u1ee9ng d\u1ee5ng k\u1ebft n\u1ed1i v\u1edbi c\u00e1c board Arduino, Raspberry v\u00e0 c\u00e1c bo m\u1ea1ch kh\u00e1c \u0111\u1ec3 \u0111i\u1ec3u khi\u1ec3n ch\u00fang.\n\n\nBlynk gi\u00fap \u0111i\u1ec1u khi\u1ec3n thi\u1ebft b\u1ecb t\u1eeb xa qua internet, thu th\u1eadp d\u1eef li\u1ec7u c\u1ee7a c\u1ea3m bi\u1ebfn, \u1ea3o h\u00f3a vi\u1ec7c giao ti\u1ebfp v\u00e0 th\u1ef1c hi\u1ec7n nhi\u1ec1u vi\u1ec7c kh\u00e1c.\n\n\nNguy\u00ean l\u00fd ho\u1ea1t \u0111\u1ed9ng\n#\n\n\n\n\nNguy\u00ean l\u00fd l\u00e0m vi\u1ec7c l\u00e0 khi nh\u1ea5n n\u00fat \u0111i\u1ec1u khi\u1ec3n, l\u1ec7nh s\u1ebd \u0111\u01b0\u1ee3c truy\u1ec1n v\u1ec1 server c\u1ee7a Blynk.Sau \u0111\u00f3, Blynk g\u1eedi l\u1ec7nh v\u1ec1 module \u0111i\u1ec1u khi\u1ec3n, module sau khi ch\u1ea1y l\u1ec7nh s\u1ebd g\u1eedi l\u1ea1i k\u1ebft qu\u1ea3 theo quy tr\u00ecnh ng\u01b0\u1ee3c l\u1ea1i t\u1eeb thi\u1ebft b\u1ecb g\u1eedi v\u1ec1 server r\u1ed3i t\u1eeb server g\u1eedi v\u1ec1 \u0111i\u1ec7n tho\u1ea1i.\n\n\nV\u00ed d\u1ee5 s\u1eed d\u1ee5ng Blynk \u0111\u1ec3 \u0111i\u1ec1u khi\u1ec3n Led\n#\n\n\nChu\u1ea9n b\u1ecb:\n#\n\n\n\n\n\n\nBoard ESP8266 NodeMCU\n\n\n\n\n\n\n1 Led + tr\u1edf 10k\n\n\n\n\n\n\nArduino IDE 1.6.8, t\u1ea3i t\u1eeb \nArduino website\n.\n\n\n\n\n\n\nSmartphone androi ho\u1eb7c iOS\n\n\n\n\n\n\nH\u01b0\u1edbng d\u1eabn\n#\n\n\n1.T\u1ea3i \u1ee9ng d\u1ee5ng Blynk\n#\n\n\nT\u1ea3i \u1ee9ng d\u1ee5ng t\u1ea1i trang ch\u1ee7 \u1ee9ng d\u1ee5ng \nhttp://www.blynk.cc/\n. Ho\u1eb7c t\u00ecm v\u00e0 c\u00e0i \u0111\u1eb7t Blynk tr\u00ean Google Play ho\u1eb7c App Store.\n\n\n2.T\u1ea3i th\u01b0 vi\u1ec7n Blynk cho Arduino IDE\n#\n\n\nT\u1ea3i th\u01b0 vi\u1ec7n t\u1ea1i \u0111\u1ecba ch\u1ec9:\nhttps://github.com/blynkkk/blynk-library\n.\nSau khi t\u1ea3i m\u1edf Arduino Ide ->Sketch->Include Library -> Add .zip library v\u00e0 t\u00ecm \u0111\u1ebfn file.zip b\u1ea1n m\u1edbi t\u1ea3i v\u1ec1 ->OK.\n\n\n3.K\u1ebft n\u1ed1i m\u1ea1ch \u0111i\u1ec7n:\n#\n\n\nN\u1ed1i m\u1ea1ch \u0111\u1ecbnh theo s\u01a1 \u0111\u1ed3 sau:\n\n\n\n\n4.T\u1ea1o d\u1ef1 \u00e1n tr\u00ean Blynk:\n#\n\n\n\n\n\n\nL\u00e0m theo h\u01b0\u1edbng d\u1eabn sau:\n#\n\n\n\n\n\n\nNh\u1eadp \u0111\u1ecba ch\u1ec9 E-mail v\u00e0 m\u1eadt kh\u1ea9u \u0111\u1ec3 t\u1ea1o t\u00e0i kho\u1ea3n Blynk\n\n\n\n\nT\u1ea1o 1 Project m\u1edbi\n\n\n\n\nThi\u1ebft l\u1eadp t\u00ean project,Board s\u1eed d\u1ee5ng v\u00e0 ki\u1ec3u k\u1ebft n\u1ed1i ->Create\n\n\n\n\nT\u1ea1o m\u1ed9t n\u00fat nh\u1ea5n\n\n\n\n\n\n\n\n\nTrong \u0111\u00f3:\n\n\n5 : T\u00ean button.\n\n\n6 : Ch\u00e2n truy\u1ec1n nh\u1eadn gi\u1eef li\u1ec7u c\u1ee7a Board.\n\n\n7 : Ch\u1ecdn ki\u1ec3u n\u00fat nh\u1ea5n c\u00f3 nh\u1edb ho\u1eb7c kh\u00f4ng nh\u1edb.\n\n\nX\u00e1c \u0111\u1ecbnh \nAuthToken\n c\u1ee7a Project\n\n\n\n\n\n\n\n\n\n\nNh\u1ea5n v\u00e0o E-mail \u0111\u1ec3 Blynk g\u1eedi AuthToken c\u1ee7a Project v\u00e0o E-mail \u0111\u0103ng k\u00ed t\u00e0i kho\u1ea3n ho\u1eb7c copy AuthToken.\n\n\n5.N\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh\n#\n\n\nM\u1edf Arduino IDE v\u00e0 Upload ch\u01b0\u01a1ng tr\u00ecnh sau:\n\n\n#define BLYNK_PRINT Serial    \n#include <ESP8266WiFi.h>\n#include <BlynkSimpleEsp8266.h>\n\nchar auth[] = \"YourAuthToken\";    //AuthToken v\u1eeba copy b\u00ean Blynk Project\nchar ssid[] = \"YourNetworkName\";  //T\u00ean wifi mu\u1ed1n truy c\u1eadp\nchar pass[] = \"YourPassword\";     //M\u1eadt kh\u1ea9u(N\u1ebfu wifi kh\u00f4ng c\u00f3 m\u1eadt kh\u1ea9u th\u00ec \u0111\u1ec3 \"\" )\n\nvoid setup()\n{\n  Serial.begin(9600);\n  Blynk.begin(auth, ssid, pass);\n}\n\nvoid loop()\n{\n  Blynk.run();\n}\n\n\n\n\n6.\u0110i\u1ec3u khi\u1ec3n b\u1eadt t\u1eaft led b\u1eb1ng Blynk:\n#\n\n\nM\u1edf Project Led trong Blynk.B\u1ea5m n\u00fat Play v\u00e0 b\u1eadt t\u1eaft n\u00fat nh\u1ea5n \u0111\u1ec3 b\u1eadt t\u1eaft led.",
            "title": "\u1ee8ng d\u1ee5ng Blynk \u0111i\u1ec1u khi\u1ec3n Led"
        },
        {
            "location": "/arduino/projects/blynkled/#su-dung-ung-dung-blynk-ieu-khien-led",
            "text": "",
            "title": "S\u1eed d\u1ee5ng \u1ee9ng d\u1ee5ng Blynk \u0111i\u1ec1u khi\u1ec3n Led"
        },
        {
            "location": "/arduino/projects/blynkled/#gioi-thieu-ve-blynk",
            "text": "Ph\u1ea7n m\u1ec1m Blynk l\u00e0 m\u1ed9t ph\u1ea7n m\u1ec1m \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf tr\u00ean n\u1ec1n t\u1ea3ng Android v\u00e0 iOS cho ph\u00e9p\n t\u1ef1 t\u1ea1o \u1ee9ng d\u1ee5ng k\u1ebft n\u1ed1i v\u1edbi c\u00e1c board Arduino, Raspberry v\u00e0 c\u00e1c bo m\u1ea1ch kh\u00e1c \u0111\u1ec3 \u0111i\u1ec3u khi\u1ec3n ch\u00fang.  Blynk gi\u00fap \u0111i\u1ec1u khi\u1ec3n thi\u1ebft b\u1ecb t\u1eeb xa qua internet, thu th\u1eadp d\u1eef li\u1ec7u c\u1ee7a c\u1ea3m bi\u1ebfn, \u1ea3o h\u00f3a vi\u1ec7c giao ti\u1ebfp v\u00e0 th\u1ef1c hi\u1ec7n nhi\u1ec1u vi\u1ec7c kh\u00e1c.",
            "title": "Gi\u1edbi thi\u1ec7u v\u1ec1 Blynk"
        },
        {
            "location": "/arduino/projects/blynkled/#nguyen-ly-hoat-ong",
            "text": "Nguy\u00ean l\u00fd l\u00e0m vi\u1ec7c l\u00e0 khi nh\u1ea5n n\u00fat \u0111i\u1ec1u khi\u1ec3n, l\u1ec7nh s\u1ebd \u0111\u01b0\u1ee3c truy\u1ec1n v\u1ec1 server c\u1ee7a Blynk.Sau \u0111\u00f3, Blynk g\u1eedi l\u1ec7nh v\u1ec1 module \u0111i\u1ec1u khi\u1ec3n, module sau khi ch\u1ea1y l\u1ec7nh s\u1ebd g\u1eedi l\u1ea1i k\u1ebft qu\u1ea3 theo quy tr\u00ecnh ng\u01b0\u1ee3c l\u1ea1i t\u1eeb thi\u1ebft b\u1ecb g\u1eedi v\u1ec1 server r\u1ed3i t\u1eeb server g\u1eedi v\u1ec1 \u0111i\u1ec7n tho\u1ea1i.",
            "title": "Nguy\u00ean l\u00fd ho\u1ea1t \u0111\u1ed9ng"
        },
        {
            "location": "/arduino/projects/blynkled/#vi-du-su-dung-blynk-e-ieu-khien-led",
            "text": "",
            "title": "V\u00ed d\u1ee5 s\u1eed d\u1ee5ng Blynk \u0111\u1ec3 \u0111i\u1ec1u khi\u1ec3n Led"
        },
        {
            "location": "/arduino/projects/blynkled/#chuan-bi",
            "text": "Board ESP8266 NodeMCU    1 Led + tr\u1edf 10k    Arduino IDE 1.6.8, t\u1ea3i t\u1eeb  Arduino website .    Smartphone androi ho\u1eb7c iOS",
            "title": "Chu\u1ea9n b\u1ecb:"
        },
        {
            "location": "/arduino/projects/blynkled/#huong-dan",
            "text": "",
            "title": "H\u01b0\u1edbng d\u1eabn"
        },
        {
            "location": "/arduino/projects/blynkled/#1tai-ung-dung-blynk",
            "text": "T\u1ea3i \u1ee9ng d\u1ee5ng t\u1ea1i trang ch\u1ee7 \u1ee9ng d\u1ee5ng  http://www.blynk.cc/ . Ho\u1eb7c t\u00ecm v\u00e0 c\u00e0i \u0111\u1eb7t Blynk tr\u00ean Google Play ho\u1eb7c App Store.",
            "title": "1.T\u1ea3i \u1ee9ng d\u1ee5ng Blynk"
        },
        {
            "location": "/arduino/projects/blynkled/#2tai-thu-vien-blynk-cho-arduino-ide",
            "text": "T\u1ea3i th\u01b0 vi\u1ec7n t\u1ea1i \u0111\u1ecba ch\u1ec9: https://github.com/blynkkk/blynk-library .\nSau khi t\u1ea3i m\u1edf Arduino Ide ->Sketch->Include Library -> Add .zip library v\u00e0 t\u00ecm \u0111\u1ebfn file.zip b\u1ea1n m\u1edbi t\u1ea3i v\u1ec1 ->OK.",
            "title": "2.T\u1ea3i th\u01b0 vi\u1ec7n Blynk cho Arduino IDE"
        },
        {
            "location": "/arduino/projects/blynkled/#3ket-noi-mach-ien",
            "text": "N\u1ed1i m\u1ea1ch \u0111\u1ecbnh theo s\u01a1 \u0111\u1ed3 sau:",
            "title": "3.K\u1ebft n\u1ed1i m\u1ea1ch \u0111i\u1ec7n:"
        },
        {
            "location": "/arduino/projects/blynkled/#4tao-du-an-tren-blynk",
            "text": "",
            "title": "4.T\u1ea1o d\u1ef1 \u00e1n tr\u00ean Blynk:"
        },
        {
            "location": "/arduino/projects/blynkled/#lam-theo-huong-dan-sau",
            "text": "Nh\u1eadp \u0111\u1ecba ch\u1ec9 E-mail v\u00e0 m\u1eadt kh\u1ea9u \u0111\u1ec3 t\u1ea1o t\u00e0i kho\u1ea3n Blynk   T\u1ea1o 1 Project m\u1edbi   Thi\u1ebft l\u1eadp t\u00ean project,Board s\u1eed d\u1ee5ng v\u00e0 ki\u1ec3u k\u1ebft n\u1ed1i ->Create   T\u1ea1o m\u1ed9t n\u00fat nh\u1ea5n     Trong \u0111\u00f3:  5 : T\u00ean button.  6 : Ch\u00e2n truy\u1ec1n nh\u1eadn gi\u1eef li\u1ec7u c\u1ee7a Board.  7 : Ch\u1ecdn ki\u1ec3u n\u00fat nh\u1ea5n c\u00f3 nh\u1edb ho\u1eb7c kh\u00f4ng nh\u1edb.  X\u00e1c \u0111\u1ecbnh  AuthToken  c\u1ee7a Project      Nh\u1ea5n v\u00e0o E-mail \u0111\u1ec3 Blynk g\u1eedi AuthToken c\u1ee7a Project v\u00e0o E-mail \u0111\u0103ng k\u00ed t\u00e0i kho\u1ea3n ho\u1eb7c copy AuthToken.",
            "title": "L\u00e0m theo h\u01b0\u1edbng d\u1eabn sau:"
        },
        {
            "location": "/arduino/projects/blynkled/#5nap-chuong-trinh",
            "text": "M\u1edf Arduino IDE v\u00e0 Upload ch\u01b0\u01a1ng tr\u00ecnh sau:  #define BLYNK_PRINT Serial    \n#include <ESP8266WiFi.h>\n#include <BlynkSimpleEsp8266.h>\n\nchar auth[] = \"YourAuthToken\";    //AuthToken v\u1eeba copy b\u00ean Blynk Project\nchar ssid[] = \"YourNetworkName\";  //T\u00ean wifi mu\u1ed1n truy c\u1eadp\nchar pass[] = \"YourPassword\";     //M\u1eadt kh\u1ea9u(N\u1ebfu wifi kh\u00f4ng c\u00f3 m\u1eadt kh\u1ea9u th\u00ec \u0111\u1ec3 \"\" )\n\nvoid setup()\n{\n  Serial.begin(9600);\n  Blynk.begin(auth, ssid, pass);\n}\n\nvoid loop()\n{\n  Blynk.run();\n}",
            "title": "5.N\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh"
        },
        {
            "location": "/arduino/projects/blynkled/#6ieu-khien-bat-tat-led-bang-blynk",
            "text": "M\u1edf Project Led trong Blynk.B\u1ea5m n\u00fat Play v\u00e0 b\u1eadt t\u1eaft n\u00fat nh\u1ea5n \u0111\u1ec3 b\u1eadt t\u1eaft led.",
            "title": "6.\u0110i\u1ec3u khi\u1ec3n b\u1eadt t\u1eaft led b\u1eb1ng Blynk:"
        },
        {
            "location": "/arduino/projects/blynkdht22/",
            "text": "\u0110o nhi\u1ec7t \u0111\u1ed9 v\u00e0 \u0111\u1ed9 \u1ea9m s\u1eed d\u1ee5ng Blynk\n#\n\n\nChu\u1ea9n b\u1ecb:\n#\n\n\n\n\n\n\nBoard ESP8266 NodeMCU\n\n\n\n\n\n\nC\u1ea3m bi\u1ebfn DHT22\n\n\n\n\n\n\nTr\u1edf 10k\n\n\n\n\n\n\nArduino IDE 1.6.8, t\u1ea3i t\u1eeb \nArduino website\n.\n\n\n\n\n\n\nSmartphone Androi ho\u1eb7c ios\n\n\n\n\n\n\nH\u01b0\u1edbng d\u1eabn\n#\n\n\n1.T\u1ea3i \u1ee9ng d\u1ee5ng Blynk v\u00e0 th\u01b0 vi\u1ec7n Blynk:\n#\n\n\nTham kh\u1ea3o \n\u1ee8ng d\u1ee5ng Blynk \u0111i\u1ec1u khi\u1ec3n Led\n\n\n2.T\u1ea3i th\u01b0 vi\u1ec7n DHT cho Arduino IDE:\n#\n\n\nhttps://github.com/adafruit/DHT-sensor-library\nT\u1ea3i th\u01b0 vi\u1ec7n t\u1ea1i \u0111\u1ecba ch\u1ec9:\nhttps://github.com/adafruit/DHT-sensor-library\n\nSau khi t\u1ea3i m\u1edf Arduino Ide ->Sketch->Include Library -> Add .zip library v\u00e0 t\u00ecm \u0111\u1ebfn file.zip b\u1ea1n m\u1edbi t\u1ea3i v\u1ec1 ->OK.\n\n\n3.K\u1ebft n\u1ed1i m\u1ea1ch \u0111i\u1ec7n:\n#\n\n\nN\u1ed1i m\u1ea1ch \u0111i\u1ec7n theo s\u01a1 \u0111\u1ed3 sau:\n\n\n\n\n4.T\u1ea1o Project tr\u00ean Blynk\n#\n\n\n\n\n\n\nL\u00e0m theo h\u01b0\u1edbng d\u1eabn sau\n#\n\n\n\n\n\n\nCh\u1ecdn Create new project,\u0111\u1eb7t t\u00ean,ch\u1ecdn Board s\u1eed d\u1ee5ng v\u00e0 ki\u1ec3u k\u1ebft n\u1ed1i->Create\n\n\n\n\nT\u1ea1o Gauqe\n\n\nB\u1ea5m v\u00e0o n\u00fat + t\u1ea1i g\u00f3c tr\u00ean b\u00ean tr\u00e1i v\u00e0 ch\u1ecdn Gauqe\n\n\n\n\n\u0110\u1eb7t t\u00ean v\u00e0 thi\u1ebft l\u1eadp th\u00f4ng s\u1ed1 cho Gauqe\n\n\n\n\nT\u01b0\u01a1ng t\u1ef1 t\u1ea1o th\u00eam 1 Gauqe v\u00e0 thi\u1ebft l\u1eadp th\u00f4ng s\u1ed1\n\n\n\n\nH\u00ecnh \u1ea3nh 2 Gauqe sau khi t\u1ea1o\n\n\n\n\nX\u00e1c \u0111\u1ecbnh \nAuthToken\n c\u1ee7a project:Tham kh\u1ea3o \n\u1ee8ng d\u1ee5ng Blynk \u0111i\u1ec1u khi\u1ec3n Led\n\n\n5 N\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh\n#\n\n\nM\u1edf Arduino IDE v\u00e0 Upload ch\u01b0\u01a1ng tr\u00ecnh\n\n\n#define BLYNK_PRINT Serial    // Comment this out to disable prints and save space\n#include <SPI.h>\n#include <ESP8266WiFi.h>\n#include <BlynkSimpleEsp8266.h>\n#include <SimpleTimer.h>\n#include <DHT.h>\n\n// You should get Auth Token in the Blynk App.\n// Go to the Project Settings (nut icon).\nchar auth[] = \"AuthToken\";     \n\n// Your WiFi credentials.\n// Set password to \"\" for open networks.\nchar ssid[] = \"YourWifiname\";\nchar pass[] = \"YourWifipassword\";\n\n#define DHTPIN 2          // What digital pin we're connected to\n\n// Uncomment whatever type you're using!\n//#define DHTTYPE DHT11     // DHT 11\n#define DHTTYPE DHT22   // DHT 22, AM2302, AM2321\n//#define DHTTYPE DHT21   // DHT 21, AM2301\n\nDHT dht(DHTPIN, DHTTYPE);\nSimpleTimer timer;\n\n// This function sends Arduino's up time every second to Virtual Pin (5).\n// In the app, Widget's reading frequency should be set to PUSH. This means\n// that you define how often to send data to Blynk App.\nvoid sendSensor()\n{\n  float h = dht.readHumidity();\n  float t = dht.readTemperature(); // or dht.readTemperature(true) for Fahrenheit\n\n  if (isnan(h) || isnan(t)) {\n    Serial.println(\"Failed to read from DHT sensor!\");\n    return;\n  }\n  // You can send any value at any time.\n  // Please don't send more that 10 values per second.\n  Blynk.virtualWrite(V5, h);\n  Blynk.virtualWrite(V6, t);\n}\n\nvoid setup()\n{\n  Serial.begin(9600); // See the connection status in Serial Monitor\n  Blynk.begin(auth, ssid, pass);\n\n  dht.begin();\n\n  // Setup a function to be called every second\n  timer.setInterval(1000L, sendSensor);\n}\n\nvoid loop()\n{\n  Blynk.run(); // Initiates Blynk\n  timer.run(); // Initiates SimpleTimer\n}\n\n\n\n\n6.\u0110o nhi\u1ec7t \u0111\u1ed9,\u0111\u1ed9 \u1ea9m tr\u00ean Blynk\n#\n\n\nM\u1edf Project dht22 trong Blynk.B\u1ea5m Play.Thu \u0111\u01b0\u1ee3c k\u1ebft qu\u1ea3 nh\u01b0 h\u00ecnh:",
            "title": "\u1ee8ng d\u1ee5ng Blynk \u0111o nhi\u1ec7t \u0111\u1ed9,\u0111\u1ed9 \u1ea9m"
        },
        {
            "location": "/arduino/projects/blynkdht22/#o-nhiet-o-va-o-am-su-dung-blynk",
            "text": "",
            "title": "\u0110o nhi\u1ec7t \u0111\u1ed9 v\u00e0 \u0111\u1ed9 \u1ea9m s\u1eed d\u1ee5ng Blynk"
        },
        {
            "location": "/arduino/projects/blynkdht22/#chuan-bi",
            "text": "Board ESP8266 NodeMCU    C\u1ea3m bi\u1ebfn DHT22    Tr\u1edf 10k    Arduino IDE 1.6.8, t\u1ea3i t\u1eeb  Arduino website .    Smartphone Androi ho\u1eb7c ios",
            "title": "Chu\u1ea9n b\u1ecb:"
        },
        {
            "location": "/arduino/projects/blynkdht22/#huong-dan",
            "text": "",
            "title": "H\u01b0\u1edbng d\u1eabn"
        },
        {
            "location": "/arduino/projects/blynkdht22/#1tai-ung-dung-blynk-va-thu-vien-blynk",
            "text": "Tham kh\u1ea3o  \u1ee8ng d\u1ee5ng Blynk \u0111i\u1ec1u khi\u1ec3n Led",
            "title": "1.T\u1ea3i \u1ee9ng d\u1ee5ng Blynk v\u00e0 th\u01b0 vi\u1ec7n Blynk:"
        },
        {
            "location": "/arduino/projects/blynkdht22/#2tai-thu-vien-dht-cho-arduino-ide",
            "text": "https://github.com/adafruit/DHT-sensor-library\nT\u1ea3i th\u01b0 vi\u1ec7n t\u1ea1i \u0111\u1ecba ch\u1ec9: https://github.com/adafruit/DHT-sensor-library \nSau khi t\u1ea3i m\u1edf Arduino Ide ->Sketch->Include Library -> Add .zip library v\u00e0 t\u00ecm \u0111\u1ebfn file.zip b\u1ea1n m\u1edbi t\u1ea3i v\u1ec1 ->OK.",
            "title": "2.T\u1ea3i th\u01b0 vi\u1ec7n DHT cho Arduino IDE:"
        },
        {
            "location": "/arduino/projects/blynkdht22/#3ket-noi-mach-ien",
            "text": "N\u1ed1i m\u1ea1ch \u0111i\u1ec7n theo s\u01a1 \u0111\u1ed3 sau:",
            "title": "3.K\u1ebft n\u1ed1i m\u1ea1ch \u0111i\u1ec7n:"
        },
        {
            "location": "/arduino/projects/blynkdht22/#4tao-project-tren-blynk",
            "text": "",
            "title": "4.T\u1ea1o Project tr\u00ean Blynk"
        },
        {
            "location": "/arduino/projects/blynkdht22/#lam-theo-huong-dan-sau",
            "text": "Ch\u1ecdn Create new project,\u0111\u1eb7t t\u00ean,ch\u1ecdn Board s\u1eed d\u1ee5ng v\u00e0 ki\u1ec3u k\u1ebft n\u1ed1i->Create   T\u1ea1o Gauqe  B\u1ea5m v\u00e0o n\u00fat + t\u1ea1i g\u00f3c tr\u00ean b\u00ean tr\u00e1i v\u00e0 ch\u1ecdn Gauqe   \u0110\u1eb7t t\u00ean v\u00e0 thi\u1ebft l\u1eadp th\u00f4ng s\u1ed1 cho Gauqe   T\u01b0\u01a1ng t\u1ef1 t\u1ea1o th\u00eam 1 Gauqe v\u00e0 thi\u1ebft l\u1eadp th\u00f4ng s\u1ed1   H\u00ecnh \u1ea3nh 2 Gauqe sau khi t\u1ea1o   X\u00e1c \u0111\u1ecbnh  AuthToken  c\u1ee7a project:Tham kh\u1ea3o  \u1ee8ng d\u1ee5ng Blynk \u0111i\u1ec1u khi\u1ec3n Led",
            "title": "L\u00e0m theo h\u01b0\u1edbng d\u1eabn sau"
        },
        {
            "location": "/arduino/projects/blynkdht22/#5-nap-chuong-trinh",
            "text": "M\u1edf Arduino IDE v\u00e0 Upload ch\u01b0\u01a1ng tr\u00ecnh  #define BLYNK_PRINT Serial    // Comment this out to disable prints and save space\n#include <SPI.h>\n#include <ESP8266WiFi.h>\n#include <BlynkSimpleEsp8266.h>\n#include <SimpleTimer.h>\n#include <DHT.h>\n\n// You should get Auth Token in the Blynk App.\n// Go to the Project Settings (nut icon).\nchar auth[] = \"AuthToken\";     \n\n// Your WiFi credentials.\n// Set password to \"\" for open networks.\nchar ssid[] = \"YourWifiname\";\nchar pass[] = \"YourWifipassword\";\n\n#define DHTPIN 2          // What digital pin we're connected to\n\n// Uncomment whatever type you're using!\n//#define DHTTYPE DHT11     // DHT 11\n#define DHTTYPE DHT22   // DHT 22, AM2302, AM2321\n//#define DHTTYPE DHT21   // DHT 21, AM2301\n\nDHT dht(DHTPIN, DHTTYPE);\nSimpleTimer timer;\n\n// This function sends Arduino's up time every second to Virtual Pin (5).\n// In the app, Widget's reading frequency should be set to PUSH. This means\n// that you define how often to send data to Blynk App.\nvoid sendSensor()\n{\n  float h = dht.readHumidity();\n  float t = dht.readTemperature(); // or dht.readTemperature(true) for Fahrenheit\n\n  if (isnan(h) || isnan(t)) {\n    Serial.println(\"Failed to read from DHT sensor!\");\n    return;\n  }\n  // You can send any value at any time.\n  // Please don't send more that 10 values per second.\n  Blynk.virtualWrite(V5, h);\n  Blynk.virtualWrite(V6, t);\n}\n\nvoid setup()\n{\n  Serial.begin(9600); // See the connection status in Serial Monitor\n  Blynk.begin(auth, ssid, pass);\n\n  dht.begin();\n\n  // Setup a function to be called every second\n  timer.setInterval(1000L, sendSensor);\n}\n\nvoid loop()\n{\n  Blynk.run(); // Initiates Blynk\n  timer.run(); // Initiates SimpleTimer\n}",
            "title": "5 N\u1ea1p ch\u01b0\u01a1ng tr\u00ecnh"
        },
        {
            "location": "/arduino/projects/blynkdht22/#6o-nhiet-oo-am-tren-blynk",
            "text": "M\u1edf Project dht22 trong Blynk.B\u1ea5m Play.Thu \u0111\u01b0\u1ee3c k\u1ebft qu\u1ea3 nh\u01b0 h\u00ecnh:",
            "title": "6.\u0110o nhi\u1ec7t \u0111\u1ed9,\u0111\u1ed9 \u1ea9m tr\u00ean Blynk"
        },
        {
            "location": "/micropython/micropython/",
            "text": "ESP8266 Micropython\n#\n\n\n\n\nmicropython\n l\u00e0 tr\u00ecnh th\u00f4ng d\u1ecbch Python3 \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf cho c\u00e1c d\u00f2ng chip c\u00f3 b\u1ed9 nh\u1edb \u00edt \u1ecfi v\u00e0 c\u00f3 kh\u1ea3 n\u0103ng ho\u1ea1t \u0111\u1ed9ng \u1ed5n \u0111\u1ecbnh.\n\n\nL\u1ee3i th\u1ebf c\u1ee7a \nmicropython\n l\u00e0 s\u1eed d\u1ee5ng ng\u00f4n ng\u1eef b\u1eadc cao, d\u1ec5 d\u00e0ng s\u1eed d\u1ee5ng cho ng\u01b0\u1eddi m\u1edbi b\u1eaft \u0111\u1ea7u. C\u00f3 th\u1ec3 th\u1ef1c thi c\u00e1c l\u1ec7nh tr\u1ef1c ti\u1ebfp ngay tr\u00ean Terminal th\u00f4ng qua REPL ho\u1eb7c qua Web REPL. M\u1ed9t khi \u0111\u00e3 flash firmware h\u1ed7 tr\u1ee3 \nmicropython\n th\u00ec vi\u1ec7c vi\u1ebft firmware b\u1eb1ng python s\u1ebd do tr\u00ecnh th\u00f4ng d\u1ecbch b\u00ean d\u01b0\u1edbi chip \u0111\u1ea3m nhi\u1ec7m. B\u1ea1n c\u00f3 th\u1ec3 thay \u0111\u1ed5i ch\u01b0\u01a1ng tr\u00ecnh m\u00e0 kh\u00f4ng ph\u1ea3i n\u1ea1p l\u1ea1i firmware n\u1eefa.\n\n\nNh\u01b0ng m\u1ed9t kh\u00f3 kh\u0103n l\u00e0 khi mu\u1ed1n b\u1ed5 sung nh\u1eefng t\u00ednh n\u0103ng m\u1edbi, module m\u1edbi kh\u00f4ng s\u1eb5n c\u00f3, th\u00ec c\u1ea7n ph\u1ea3i am hi\u1ec3u v\u1ec1 \nmicropython\n \u0111\u1ec3 c\u00f3 th\u1ec3 vi\u1ebft \u0111\u01b0\u1ee3c module b\u1ed5 sung.\n\n\n\n\nWebsite: \nhttp://www.micropython.org/\n\n\nGithub: \nhttps://github.com/micropython/micropython\n\n\nT\u00e0i li\u1ec7u \nhttp://docs.micropython.org/en/latest/esp8266/esp8266/quickref.html",
            "title": "Gi\u1edbi thi\u1ec7u"
        },
        {
            "location": "/micropython/micropython/#esp8266-micropython",
            "text": "micropython  l\u00e0 tr\u00ecnh th\u00f4ng d\u1ecbch Python3 \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf cho c\u00e1c d\u00f2ng chip c\u00f3 b\u1ed9 nh\u1edb \u00edt \u1ecfi v\u00e0 c\u00f3 kh\u1ea3 n\u0103ng ho\u1ea1t \u0111\u1ed9ng \u1ed5n \u0111\u1ecbnh.  L\u1ee3i th\u1ebf c\u1ee7a  micropython  l\u00e0 s\u1eed d\u1ee5ng ng\u00f4n ng\u1eef b\u1eadc cao, d\u1ec5 d\u00e0ng s\u1eed d\u1ee5ng cho ng\u01b0\u1eddi m\u1edbi b\u1eaft \u0111\u1ea7u. C\u00f3 th\u1ec3 th\u1ef1c thi c\u00e1c l\u1ec7nh tr\u1ef1c ti\u1ebfp ngay tr\u00ean Terminal th\u00f4ng qua REPL ho\u1eb7c qua Web REPL. M\u1ed9t khi \u0111\u00e3 flash firmware h\u1ed7 tr\u1ee3  micropython  th\u00ec vi\u1ec7c vi\u1ebft firmware b\u1eb1ng python s\u1ebd do tr\u00ecnh th\u00f4ng d\u1ecbch b\u00ean d\u01b0\u1edbi chip \u0111\u1ea3m nhi\u1ec7m. B\u1ea1n c\u00f3 th\u1ec3 thay \u0111\u1ed5i ch\u01b0\u01a1ng tr\u00ecnh m\u00e0 kh\u00f4ng ph\u1ea3i n\u1ea1p l\u1ea1i firmware n\u1eefa.  Nh\u01b0ng m\u1ed9t kh\u00f3 kh\u0103n l\u00e0 khi mu\u1ed1n b\u1ed5 sung nh\u1eefng t\u00ednh n\u0103ng m\u1edbi, module m\u1edbi kh\u00f4ng s\u1eb5n c\u00f3, th\u00ec c\u1ea7n ph\u1ea3i am hi\u1ec3u v\u1ec1  micropython  \u0111\u1ec3 c\u00f3 th\u1ec3 vi\u1ebft \u0111\u01b0\u1ee3c module b\u1ed5 sung.   Website:  http://www.micropython.org/  Github:  https://github.com/micropython/micropython  T\u00e0i li\u1ec7u  http://docs.micropython.org/en/latest/esp8266/esp8266/quickref.html",
            "title": "ESP8266 Micropython"
        },
        {
            "location": "/micropython/basic/introduction/",
            "text": "C\u00e0i \u0111\u1eb7t\n#\n\n\nC\u00e0i \u0111\u1eb7t esp-open-sdk\n#\n\n\nB\u1edfi v\u00ec \nmicropython\n build cho ESP8266 c\u1ea7n 1 s\u1ed1 s\u1ef1 thay \u0111\u1ed5i trong compile v\u00e0 th\u01b0 vi\u1ec7n \u0111i k\u00e8m n\u00ean ph\u1ea3i s\u1eed d\u1ee5ng compiler, sdk t\u1eeb esp-open-sdk\n\n\nC\u00e0i \u0111\u1eb7t theo h\u01b0\u1edbng d\u1eabn t\u1ea1i \nesp-open-sdk\n\n\nTr\u01b0\u1edbc khi th\u1ef1c hi\u1ec7n \nmake\n th\u00ec th\u1ef1c hi\u1ec7n l\u1ec7nh n\u00e0y tr\u01b0\u1edbc:\n\n\nsed -i.bak '1s/^/gettext=\\'$'\\n/' crosstool-NG/kconfig/Makefile\nsed -i.bak -e 's/[[:<:]]sed[[:>:]]/gsed/' Makefile\nsed -i.bak -e 's/[[:<:]]awk[[:>:]]/\\$(AWK)/' lx106-hal/src/Makefile.am\nsed -i.bak 's/AM_PROG_AS/AM_PROG_AS\\'$'\\nAM_PROG_AR/' lx106-hal/configure.ac \n\n\n\n\nBi\u00ean d\u1ecbch Firmware Micropython cho ESP8266\n#\n\n\ngit clone --recursive https://github.com/micropython/micropython.git \ngit submodule update --init\ncd micropython\nmake -C mpy-cross\ncd esp8266\nmake axtls\nmake\n\n\n\n\nXem h\u01b0\u1edbng d\u1eabn r\u00f5 h\u01a1n t\u1ea1i \u0111\u00e2y: \nhttps://github.com/micropython/micropython/tree/master/esp8266\n\n\nDownload firmware\n#\n\n\nT\u1ed1t nh\u1ea5t b\u1ea1n n\u00ean c\u00f3 th\u1ec3 t\u1ef1 build firmware cho micropython, b\u1edfi v\u00ec firmware \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt li\u00ean t\u1ee5c. Tuy nhi\u00ean, v\u00ec v\u1ea5n \u0111\u1ec1 b\u1ea1n mu\u1ed1n th\u1eed firmware th\u1eadt nhanh v\u00e0 kh\u00f4ng quan t\u00e2m t\u1edbi t\u00ednh n\u0103ng. \u0110\u01b0\u1eddng link b\u00ean d\u01b0\u1edbi cung c\u1ea5p firmware \u0111\u00e3 \u0111\u01b0\u1ee3c build s\u1eb5n, v\u00e0 \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt b\u1ea5t c\u1ee9 khi n\u00e0o c\u00f3 th\u1ec3:\n- \ndropbox 1.8.5 build 20-oct-2016\n\n\nFlash firmware\n#\n\n\nL\u01b0u \u00fd vi\u1ec7c Flash firmware cho ESP8266 d\u00f9ng esptool.py \n\n\nesptool.py --port /dev/tty.SLAB_USBtoUART --baud 921600 write_flash --verify --flash_size=32m --flash_mode=qio 0 build/firmware-combined.bin\n\n\n\n\nPh\u1ea7n c\u1ee9ng - Pinout\n#\n\n\n\n\nL\u01b0u \u00fd\n\n\nL\u01b0u \u00fd l\u00e0 Micropython s\u1eed d\u1ee5ng GPIO gi\u1ed1ng v\u1edbi t\u00ean GPIO cho chip ESP8266, kh\u00e1c c\u00e1ch \u0111\u1eb7t t\u00ean c\u1ee7a NodeMCU, do v\u1eady, n\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng Board NodeMCU ho\u1eb7c c\u00e1c board n\u00e0o kh\u00e1c th\u00ec l\u01b0u \u00fd\n\n\n\n\n\n\nV\u00ed d\u1ee5: \n\n\nfrom machine import Pin \nled = Pin(16, Pin.OUT) #T\u01b0\u01a1ng \u0111\u01b0\u01a1ng LED tr\u00ean board NodeMCU\ngpio13 = Pin(13, Pin.OUT) # T\u01b0\u01a1ng \u0111\u01b0\u01a1ng ch\u00e2n D7 tr\u00ean NodeMCU",
            "title": "C\u00e0i \u0111\u1eb7t c\u00f4ng c\u1ee5 c\u1ea7n thi\u1ebft"
        },
        {
            "location": "/micropython/basic/introduction/#cai-at",
            "text": "",
            "title": "C\u00e0i \u0111\u1eb7t"
        },
        {
            "location": "/micropython/basic/introduction/#cai-at-esp-open-sdk",
            "text": "B\u1edfi v\u00ec  micropython  build cho ESP8266 c\u1ea7n 1 s\u1ed1 s\u1ef1 thay \u0111\u1ed5i trong compile v\u00e0 th\u01b0 vi\u1ec7n \u0111i k\u00e8m n\u00ean ph\u1ea3i s\u1eed d\u1ee5ng compiler, sdk t\u1eeb esp-open-sdk  C\u00e0i \u0111\u1eb7t theo h\u01b0\u1edbng d\u1eabn t\u1ea1i  esp-open-sdk  Tr\u01b0\u1edbc khi th\u1ef1c hi\u1ec7n  make  th\u00ec th\u1ef1c hi\u1ec7n l\u1ec7nh n\u00e0y tr\u01b0\u1edbc:  sed -i.bak '1s/^/gettext=\\'$'\\n/' crosstool-NG/kconfig/Makefile\nsed -i.bak -e 's/[[:<:]]sed[[:>:]]/gsed/' Makefile\nsed -i.bak -e 's/[[:<:]]awk[[:>:]]/\\$(AWK)/' lx106-hal/src/Makefile.am\nsed -i.bak 's/AM_PROG_AS/AM_PROG_AS\\'$'\\nAM_PROG_AR/' lx106-hal/configure.ac",
            "title": "C\u00e0i \u0111\u1eb7t esp-open-sdk"
        },
        {
            "location": "/micropython/basic/introduction/#bien-dich-firmware-micropython-cho-esp8266",
            "text": "git clone --recursive https://github.com/micropython/micropython.git \ngit submodule update --init\ncd micropython\nmake -C mpy-cross\ncd esp8266\nmake axtls\nmake  Xem h\u01b0\u1edbng d\u1eabn r\u00f5 h\u01a1n t\u1ea1i \u0111\u00e2y:  https://github.com/micropython/micropython/tree/master/esp8266",
            "title": "Bi\u00ean d\u1ecbch Firmware Micropython cho ESP8266"
        },
        {
            "location": "/micropython/basic/introduction/#download-firmware",
            "text": "T\u1ed1t nh\u1ea5t b\u1ea1n n\u00ean c\u00f3 th\u1ec3 t\u1ef1 build firmware cho micropython, b\u1edfi v\u00ec firmware \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt li\u00ean t\u1ee5c. Tuy nhi\u00ean, v\u00ec v\u1ea5n \u0111\u1ec1 b\u1ea1n mu\u1ed1n th\u1eed firmware th\u1eadt nhanh v\u00e0 kh\u00f4ng quan t\u00e2m t\u1edbi t\u00ednh n\u0103ng. \u0110\u01b0\u1eddng link b\u00ean d\u01b0\u1edbi cung c\u1ea5p firmware \u0111\u00e3 \u0111\u01b0\u1ee3c build s\u1eb5n, v\u00e0 \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt b\u1ea5t c\u1ee9 khi n\u00e0o c\u00f3 th\u1ec3:\n-  dropbox 1.8.5 build 20-oct-2016",
            "title": "Download firmware"
        },
        {
            "location": "/micropython/basic/introduction/#flash-firmware",
            "text": "L\u01b0u \u00fd vi\u1ec7c Flash firmware cho ESP8266 d\u00f9ng esptool.py   esptool.py --port /dev/tty.SLAB_USBtoUART --baud 921600 write_flash --verify --flash_size=32m --flash_mode=qio 0 build/firmware-combined.bin",
            "title": "Flash firmware"
        },
        {
            "location": "/micropython/basic/introduction/#phan-cung-pinout",
            "text": "L\u01b0u \u00fd  L\u01b0u \u00fd l\u00e0 Micropython s\u1eed d\u1ee5ng GPIO gi\u1ed1ng v\u1edbi t\u00ean GPIO cho chip ESP8266, kh\u00e1c c\u00e1ch \u0111\u1eb7t t\u00ean c\u1ee7a NodeMCU, do v\u1eady, n\u1ebfu b\u1ea1n s\u1eed d\u1ee5ng Board NodeMCU ho\u1eb7c c\u00e1c board n\u00e0o kh\u00e1c th\u00ec l\u01b0u \u00fd    V\u00ed d\u1ee5:   from machine import Pin \nled = Pin(16, Pin.OUT) #T\u01b0\u01a1ng \u0111\u01b0\u01a1ng LED tr\u00ean board NodeMCU\ngpio13 = Pin(13, Pin.OUT) # T\u01b0\u01a1ng \u0111\u01b0\u01a1ng ch\u00e2n D7 tr\u00ean NodeMCU",
            "title": "Ph\u1ea7n c\u1ee9ng - Pinout"
        },
        {
            "location": "/projects/list/",
            "text": "C\u00e1c d\u1ef1 \u00e1n\n#",
            "title": "C\u00e1c d\u1ef1 \u00e1n"
        },
        {
            "location": "/projects/list/#cac-du-an",
            "text": "",
            "title": "C\u00e1c d\u1ef1 \u00e1n"
        },
        {
            "location": "/license/",
            "text": "B\u1ea3n quy\u1ec1n\n#\n\n\nTo\u00e0n b\u1ed9 t\u00e0i li\u1ec7u \u0111\u01b0\u1ee3c ph\u00e2n ph\u1ed1i theo gi\u1ea5y ph\u00e9p CC BY-SA-NC\n\n\nGhi nh\u00e2\u0323n \u0111o\u0301ng go\u0301p Phi Th\u01b0\u01a1ng ma\u0323i Chia se\u0309 v\u01a1\u0301i \u0110i\u00ea\u0300u ki\u00ea\u0323n Nh\u01b0 nhau (cc by-nc-sa):\nGi\u00e2\u0301y phe\u0301p na\u0300y cho phe\u0301p ng\u01b0\u01a1\u0300i kha\u0301c ph\u00f4\u0301i la\u0323i, tu\u0300y chi\u0309nh, va\u0300 x\u00e2y d\u01b0\u0323ng d\u01b0\u0323a tr\u00ean ta\u0301c ph\u00e2\u0309m cu\u0309a Ba\u0323n v\u01a1\u0301i mu\u0323c \u0111i\u0301ch Phi Th\u01b0\u01a1ng ma\u0323i, v\u01a1\u0301i \u0111i\u00ea\u0300u ki\u00ea\u0323n chu\u0301ng n\u00e2ng cao uy ti\u0301n cu\u0309a Ba\u0323n v\u00e0 cho phe\u0301p c\u00e2\u0301p phe\u0301p \u0111\u00f4\u0301i v\u01a1\u0301i ca\u0301c ta\u0301c ph\u00e2\u0309m sa\u0301ng ta\u0323o m\u01a1\u0301i cu\u0309a ho\u0323 theo ca\u0301c \u0111i\u00ea\u0300u khoa\u0309n gi\u00f4\u0301ng h\u00ea\u0323t.",
            "title": "B\u1ea3n quy\u1ec1n"
        },
        {
            "location": "/license/#ban-quyen",
            "text": "To\u00e0n b\u1ed9 t\u00e0i li\u1ec7u \u0111\u01b0\u1ee3c ph\u00e2n ph\u1ed1i theo gi\u1ea5y ph\u00e9p CC BY-SA-NC  Ghi nh\u00e2\u0323n \u0111o\u0301ng go\u0301p Phi Th\u01b0\u01a1ng ma\u0323i Chia se\u0309 v\u01a1\u0301i \u0110i\u00ea\u0300u ki\u00ea\u0323n Nh\u01b0 nhau (cc by-nc-sa):\nGi\u00e2\u0301y phe\u0301p na\u0300y cho phe\u0301p ng\u01b0\u01a1\u0300i kha\u0301c ph\u00f4\u0301i la\u0323i, tu\u0300y chi\u0309nh, va\u0300 x\u00e2y d\u01b0\u0323ng d\u01b0\u0323a tr\u00ean ta\u0301c ph\u00e2\u0309m cu\u0309a Ba\u0323n v\u01a1\u0301i mu\u0323c \u0111i\u0301ch Phi Th\u01b0\u01a1ng ma\u0323i, v\u01a1\u0301i \u0111i\u00ea\u0300u ki\u00ea\u0323n chu\u0301ng n\u00e2ng cao uy ti\u0301n cu\u0309a Ba\u0323n v\u00e0 cho phe\u0301p c\u00e2\u0301p phe\u0301p \u0111\u00f4\u0301i v\u01a1\u0301i ca\u0301c ta\u0301c ph\u00e2\u0309m sa\u0301ng ta\u0323o m\u01a1\u0301i cu\u0309a ho\u0323 theo ca\u0301c \u0111i\u00ea\u0300u khoa\u0309n gi\u00f4\u0301ng h\u00ea\u0323t.",
            "title": "B\u1ea3n quy\u1ec1n"
        },
        {
            "location": "/contributor/",
            "text": "Danh s\u00e1ch th\u00e0nh vi\u00ean \u0111\u00f3ng g\u00f3p:\n#\n\n\n\n\nTu\u1ea5n PM\n\n\nTr\u1ecbnh \u0110\u1ee9c\n\n\nH\u1ecdc ARM\n\n\nHi\u1ebfu Nguy\u1ec5n\n\n\n\u0110\u1eb7ng H\u1eefu To\u00e0n\n\n\n\n\nDanh s\u00e1ch c\u00e1 nh\u00e2n \u1ee7ng h\u1ed9 d\u1ef1 \u00e1n:\n#",
            "title": "\u0110\u00f3ng g\u00f3p"
        },
        {
            "location": "/contributor/#danh-sach-thanh-vien-ong-gop",
            "text": "Tu\u1ea5n PM  Tr\u1ecbnh \u0110\u1ee9c  H\u1ecdc ARM  Hi\u1ebfu Nguy\u1ec5n  \u0110\u1eb7ng H\u1eefu To\u00e0n",
            "title": "Danh s\u00e1ch th\u00e0nh vi\u00ean \u0111\u00f3ng g\u00f3p:"
        },
        {
            "location": "/contributor/#danh-sach-ca-nhan-ung-ho-du-an",
            "text": "",
            "title": "Danh s\u00e1ch c\u00e1 nh\u00e2n \u1ee7ng h\u1ed9 d\u1ef1 \u00e1n:"
        }
    ]
}